

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Datatype declarations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(datatype Loc 
    (Mem) ; This is where the generic computation happens
    (AMX) ; AMX tiles
    (WMMA_A) ; CUDA Warp-level Matrix Multiplication registers
    (WMMA_B)
    (WMMA_C)
)

(datatype BinOp
    (Add)
    (Sub)
    (Mul)
    (Div)
    (Mod)
    (Min)
    (Max)
    (EQ)
    (NE)
    (LT)
    (LE)
    (GT)
    (GE)
    (And)
    (Or))
(datatype UnaOp
    (Not))

; TODO
(datatype Buffer)
(datatype Parameter)
(datatype Type
    ;;  bits x lanes
    (Int i64 i64)
    (UInt i64 i64)
    (Float i64 i64)
    (BFloat i64 i64)
    (Handle i64)
)
(datatype CallType
    (Image)
    (Extern)
    (ExternCPlusPlus)
    (PureExtern)
    (Halide)
    (Intrinsic)
    (PureIntrinsic)
)

(sort Stmt)
(sort VecInt (Vec i64))
(sort Expr)
(sort VecExpr (Vec Expr))

(sort Variable)
(constructor V (String) Variable)

;; Expr
(constructor Cast (Type Expr) Expr)
(constructor Reinterpret (Type Expr) Expr)
(constructor Bop (BinOp Expr Expr) Expr)
(constructor Uop (UnaOp Expr) Expr)
;; condition true_val false_val
(constructor Select (Expr Expr Expr) Expr)
;; name index
(constructor Load (Type Variable Expr) Expr)
;; base stride lanes
(constructor Ramp (Expr Expr i64) Expr :cost 100)
;; value lanes
(constructor Broadcast (Expr i64) Expr :cost 100)
;; name value body
;; TODO: Not sure if we need this one, binding is tricky
(constructor Let (String Expr Expr) Expr)
;; This one is also tricky
(constructor Call (String Type VecExpr CallType) Expr)
;; name
;; TODO: there are some arguments that are ignored here
(constructor Var (Type Variable) Expr)
(constructor Shuffle (VecExpr VecInt) Expr)
(constructor VectorReduce (Type BinOp Expr) Expr)
;;                bits val
(constructor IntImm (i64  i64) Expr)
; u64 is not supported in egglog
(constructor UIntImm (i64  i64) Expr)
(constructor FloatImm (i64 f64) Expr)


;; Stmt

;;                name  value index
(constructor Store (String Expr  Expr) Stmt)
(constructor Evaluate (Expr) Stmt)


;; Some secondary stmts that we may not use
;; Not supported: Provide, Realize, Acquire, Prefetch, HoistedStorage

;; TODO: MemoryType, ForType, Partition, DeviceAPI
; (constructor LetStmt (String Expr Stmt) Stmt)
; (constructor AssertStmt (Expr Expr) Stmt)
; (constructor ProducerConsumer (String bool Stmt) Stmt)
; ;;                 name    type mem_type   extents cond body 
; (constructor Allocate (String Type MemoryType VecExpr Expr Stmt) Stmt)
; (constructor Free (String) Stmt)
; (constructor Block (Stmt Stmt) Stmt)
; (constructor Fork (Stmt Stmt) Stmt)
; (constructor IfThenElse (Expr Stmt Stmt) Stmt)
; (constructor For (String Expr Expr ForType Partition DeviceAPI Stmt) Stmt)
; (constructor Atomic (String String Stmt) Stmt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Extensions to the IR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(constructor Loc2Loc (Loc Loc Expr) Expr :unextractable)
; (constructor Mem2AMX (Expr) Expr :unextractable)
(constructor Mem2AMX (Expr) Expr :cost 100000)
; (constructor AMX2Mem (Expr) Expr :unextractable)
(constructor AMX2Mem (Expr) Expr :cost 100000)
(constructor WMMA2Mem (Expr) Expr :cost 100000)
(constructor Mem2WMMA (Expr) Expr :cost 100000)

(birewrite (Mem2AMX e) (Loc2Loc (Mem) (AMX) e))
(birewrite (AMX2Mem e) (Loc2Loc (AMX) (Mem) e))
(birewrite (WMMA2Mem e) (Loc2Loc (WMMA_C) (Mem) e))
(birewrite (Mem2WMMA e) (Loc2Loc (Mem) (WMMA_C) e))
(rewrite (Loc2Loc a b (Loc2Loc b a e)) e)

(constructor ExprVar (Loc Expr) Variable)
;; See `optimization/vector_axioms.egg` for conversion between `Broadcast` and `BroadcastPer`
(constructor BroadcastPer (i64 Expr i64) Expr :cost 200) ;; cost 200 to prioritize `Broadcast` over `BroadcastPer`

;; list of intrinsics
; KWayInterleave(i64 k, Expr base, i64 lanes): i64x(height*width)

;; We don't need StoreAndLoad... Use ExprVar instead
; ;; takes an expression over loc1, stores it in loc1, 
; ;; and then loads it back in loc2
; ;; There is actually no load happening here:
; ;;       *StoreAndLoad returns the base address and by itself
; ;;       it does not load the value
; ;;       It may be better named as StoreAndReturnBaseAddress (This name is suggested by Copilot)
; ;;       Or Spill
; (constructor GenericStoreAndLoad (Loc Loc Expr) Expr)
; ;; Takes a Mem expression, stores it in memory, and then loads it back
; (constructor StoreAndLoad (Expr) Expr)
; ;; takes an AMX expression, tile_store it in memory, 
; ;; and then load this memory back
; (constructor AMXStoreAndLoad (Expr) Expr)
; (birewrite (AMXStoreAndLoad e) (GenericStoreAndLoad (AMX) (Mem) e))
; (birewrite (StoreAndLoad e) (GenericStoreAndLoad (Mem) (Mem) e))


;; This is for use with StoreAndLoad
(constructor Computed () Expr)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; true if the type is signed
(constructor UIntOrInt (bool i64 i64) Type)
(birewrite (UIntOrInt false i l) (UInt i l))
(birewrite (UIntOrInt true i l) (Int i l))

(constructor UIntOrIntImm (bool i64 i64) Expr)
(birewrite (UIntOrIntImm false b x) (UIntImm b x))
(birewrite (UIntOrIntImm true b x) (IntImm b x))

(constructor IntImm64 (i64) Expr)
(birewrite (IntImm64 x) (IntImm 64 x))
(constructor IntImm32 (i64) Expr)
(birewrite (IntImm32 x) (IntImm 32 x))
(constructor IntImm16 (i64) Expr)
(birewrite (IntImm16 x) (IntImm 16 x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Rulesets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(ruleset amx)
; (ruleset amx-alwaysrun)

(ruleset canonicalize)
(ruleset assemble)
(ruleset typechecking)
(ruleset push-down-vector-reduce)

; 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Properties
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(relation CommBop (BinOp))
(rule () (
    (CommBop (Add))
    (CommBop (Mul))
    (CommBop (And))
    (CommBop (Or))
    (CommBop (Min))
    (CommBop (Max))
    (CommBop (EQ))
    (CommBop (NE))
))

(relation AddOrSub (BinOp))
(rule () (
    (AddOrSub (Add))
    (AddOrSub (Sub))
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Analysis rules
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; IsExpr
(relation IsExpr (Expr))
(rule ((= e (Cast _type _expr))) ((IsExpr e)))
(rule ((= e (Reinterpret _type _expr))) ((IsExpr e)))
(rule ((= e (Bop _binop _expr1 _expr2))) ((IsExpr e)))
(rule ((= e (Select _expr1 _expr2 _expr3))) ((IsExpr e)))
(rule ((= e (Load _type _string _expr))) ((IsExpr e)))
(rule ((= e (Ramp _expr1 _expr2 _i64))) ((IsExpr e)))
(rule ((= e (Broadcast _expr _i64))) ((IsExpr e)))
(rule ((= e (Let _string _expr1 _expr2))) ((IsExpr e)))
(rule ((= e (Call _string _type _vecexpr _calltype))) ((IsExpr e)))
(rule ((= e (Var _type _string))) ((IsExpr e)))
(rule ((= e (Shuffle _vecexpr _vecint))) ((IsExpr e)))
(rule ((= e (VectorReduce _type _binop _expr))) ((IsExpr e)))
(rule ((= e (IntImm _bits _i64))) ((IsExpr e)))

; 


;; Type checking
(constructor MultipliedLanes (Type i64) Type)
(rewrite (MultipliedLanes (Int i l) x) (Int i (* l x)) :ruleset typechecking)
(rewrite (MultipliedLanes (UInt i l) x) (UInt i (* l x)) :ruleset typechecking)
(rewrite (MultipliedLanes (Float i l) x) (Float i (* l x)) :ruleset typechecking)
(rewrite (MultipliedLanes (BFloat i l) x) (BFloat i (* l x)) :ruleset typechecking)
(rewrite (MultipliedLanes (Handle l) x) (Handle (* l x)) :ruleset typechecking)

(function LanesInType (Type) i64 :no-merge)
(rule ((= t (Int i l)))
      ((set (LanesInType t) l)) :ruleset typechecking)
(rule ((= t (UInt i l)))
      ((set (LanesInType t) l)) :ruleset typechecking)
(rule ((= t (Float i l)))
      ((set (LanesInType t) l)) :ruleset typechecking)
(rule ((= t (BFloat i l)))
      ((set (LanesInType t) l)) :ruleset typechecking)
(rule ((= t (Handle l)))
      ((set (LanesInType t) l)) :ruleset typechecking)

(constructor WithLanes (Type i64) Type)
(rewrite (WithLanes (Int i l) x) (Int i x) :ruleset typechecking)
(rewrite (WithLanes (UInt i l) x) (UInt i x) :ruleset typechecking)
(rewrite (WithLanes (Float i l) x) (Float i x) :ruleset typechecking)
(rewrite (WithLanes (BFloat i l) x) (BFloat i x) :ruleset typechecking)
(rewrite (WithLanes (Handle l) x) (Handle x) :ruleset typechecking)

(relation has-type (Expr Type))
(rule ((= e (Cast ty expr))) ((has-type e ty)) :ruleset typechecking)
(rule ((= e (Reinterpret ty expr))) ((has-type e ty)) :ruleset typechecking)
(rule (
    (= e (Bop bop e1 e2))
    (has-type e1 t)
    (has-type e2 t)
) ((has-type e t)) :ruleset typechecking)
(rule (
    (= e (Uop uop e1))
    (has-type e1 t)
) ((has-type e t)) :ruleset typechecking)
(rule ((= e (Select cond tval fval))
    (has-type cond (UInt 1 _lanes))
    (has-type tval ty)
    (has-type fval ty)
) ((has-type e ty)) :ruleset typechecking)
(rule ((= e (Load ty name child))) ((has-type e ty)) :ruleset typechecking)
(rule ((= e (Ramp child s l)) 
    (has-type child ty)
) ((has-type e (MultipliedLanes ty l))) :ruleset typechecking)
(rule ((= e (Broadcast child l)) (has-type child ty)) 
    ((has-type e (MultipliedLanes ty l))) :ruleset typechecking)
(rule ((= e (Let x e1 e2))) 
    ((panic "let not supported")) :ruleset typechecking)
(rule ((= e (Call fn out-type args calltype))
) ((has-type e out-type)) :ruleset typechecking)
(rule ((= e (Var ty x))) ((has-type e ty)) :ruleset typechecking)
(rule ((= e (Shuffle vecexpr vecint))) 
    ((panic "not supported")) :ruleset typechecking)
(rule ((= e (VectorReduce ty binop expr))) 
    ((has-type e ty)) :ruleset typechecking)
(rule ((= e (IntImm bits i64))) ((has-type e (Int bits 1))) :ruleset typechecking)
(rule ((= e (UIntImm bits i64))) ((has-type e (UInt bits 1))) :ruleset typechecking)
(rule ((= e (FloatImm bits f64))) ((has-type e (Float bits 1))) :ruleset typechecking)

;; extensions
(rule (
    (= e (Loc2Loc l1 l2 e1))
    (has-type e1 t)
) (
    (has-type e t)
) :ruleset typechecking)
(rule (
    (= e (BroadcastPer p e1 l))
    (has-type e1 t)
) (
    (has-type e (MultipliedLanes t l))
) :ruleset typechecking)

(rule ((has-type e t1) (has-type e t2) (!= t1 t2)) ((panic "type error")))

; 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; !!Dangerous!!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rewrite
    (VectorReduce t-outer bop (Cast t-inner e))
    (Cast t-outer (VectorReduce (WithLanes t-e l-outer) bop e))
  :when (
    (has-type e t-e) 
    (= l-outer (LanesInType t-outer))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Axiomatic rewrites
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Conversion between `Broadcast` and `BroadcastPer`
(rule (
    (= bc (Broadcast e lo))
    (has-type e t)
    (= p (LanesInType t))
) (
    (union bc (BroadcastPer p e lo))
))
(rule (
    (= bcp (BroadcastPer p e lo))
    (has-type e t)
    (= p (LanesInType t))
) (
    (union bcp (Broadcast e lo))
))
;; end conversion

(rewrite 
    (Broadcast (Broadcast x l0) l1)
    (Broadcast x (* l0 l1))
)

(rewrite (Bop bop a b) (Bop bop b a) :when ((CommBop bop)))


;; broadcast related axioms
;; TODO: these rules are still not replaceable, why??
;; TODO: missing the cast-broadcastper rule for the degenerate rules
(rewrite (Broadcast x 1) x)
(rewrite (Broadcast (Load type name index) lanes) 
         (Load (MultipliedLanes type lanes) name (Broadcast index lanes)))
(rewrite (Broadcast (Cast type expr) lanes) 
         (Cast (MultipliedLanes type lanes) (Broadcast expr lanes)))
;; same rules generalized to BroadcastPer
(rewrite (BroadcastPer p x 1) x)
(rewrite (BroadcastPer p (Load type name index) lanes) 
         (Load (MultipliedLanes type lanes) name (BroadcastPer p index lanes)))
(rewrite (BroadcastPer p (Cast type expr) lanes) 
         (Cast (MultipliedLanes type lanes) (BroadcastPer p expr lanes)))
(rewrite (Cast type (BroadcastPer p x l))
         (BroadcastPer p (Cast (WithLanes type lx) x) l)
    :when ((has-type x t)
           (= (LanesInType t) lx)))

;; Reverse the pulled out BroadcastPer
;; TODO: in its own ruleset
(rewrite (BroadcastPer p (Broadcast x l0) l1)
         (Broadcast (BroadcastPer p x l1) l0)
    :when ((has-type x t)
           (= curr-p (LanesInType t))
           (>= curr-p p)))
(rewrite (BroadcastPer p (Ramp x (Broadcast s curr-p) l0) l1)
         (Ramp (BroadcastPer p x l1) (Broadcast s (* curr-p l1)) l0)
    :when ((has-type x t)
           (= curr-p (LanesInType t))
           (>= curr-p p)))
;; in the case the larger broadcast cannot be compressed
;; this seems to be "confluent" with even considering multiple variants in the E-class,
;; because this same rule can be achieved by running other rules on an equivalent version of the expression
;; (that unnests the inner Broadcast to two Broadcasts)
(rewrite (BroadcastPer p (Broadcast x l0) l1)
         (Broadcast x (* l0 l1))
    :when ((has-type x t)
           (= curr-p (LanesInType t))
           (< curr-p p)
           (> (* curr-p l0) p)))
(rewrite (BroadcastPer p (Ramp x (Broadcast s curr-p) l0) l1)
         (Ramp 
            (Broadcast 
                (Ramp 
                    x 
                    ; TODO: need to make sure all the lanes of the stride of the Ramp 
                    ; must be the lanes of the type of `x`
                    (Broadcast s curr-p) 
                    (/ p curr-p))
                l1)
            (Broadcast (Bop (Mul) s (UIntOrIntImm signed bits (/ p curr-p))) (* p l1))
            (/ l0 (/ p curr-p)))
    :when ((has-type x (UIntOrInt signed bits curr-p))
           (< curr-p p)
           (> (* curr-p l0) p)
           (= 0 (% p curr-p))
           (= 0 (% l0 (/ p curr-p)))
           ))

;; More broadcast axioms
(rewrite (Bop bop (Broadcast a l1) (Broadcast b l2))
         (Broadcast (Bop bop (Broadcast a (/ l1 l2)) b) l2)
    :when ((> l1 l2)
           (= 0 (% l1 l2))))

;; Also see `make-aligned` for the more nested version
(rewrite (Bop bop (Broadcast a l1) (Broadcast b l2))
         (Broadcast (Bop bop a (Broadcast b (/ l2 l1))) l1)
    :when ((< l1 l2)
           (= 0 (% l2 l1))))

(rewrite (Bop bop (Broadcast a l1) (Ramp x s l2))
         (Bop bop (Broadcast (Broadcast a (/ l1 l2)) l2) (Ramp x s l2))
    :when ((> l1 l2)
           (= 0 (% l1 l2))))

(rewrite (Bop bop (Ramp x s l2) (Broadcast a l1))
         (Bop bop (Ramp x s l2) (Broadcast (Broadcast a (/ l1 l2)) l2))
    :when ((> l1 l2)
           (= 0 (% l1 l2))))


(birewrite (Bop bop (BroadcastPer p a l) (BroadcastPer p b l))
         (BroadcastPer p (Bop bop a b) l))

(rewrite (Bop add-or-sub (Ramp base stride lanes) (Broadcast x lanes))
         (Ramp (Bop add-or-sub base x) stride lanes)
    :when ((AddOrSub add-or-sub)))
(rewrite (Bop add-or-sub (Ramp b1 s1 l) (Ramp b2 s2 l))
         (Ramp (Bop add-or-sub b1 b2) (Bop add-or-sub s1 s2) l)
    :when ((AddOrSub add-or-sub)))
(rewrite (Bop (Mul) (Ramp b s l) (Broadcast x l))
         (Ramp (Bop (Mul) b x) (Bop (Mul) s x) l))

; TODO: this can be generalized
(rewrite (Bop (Mod) (Ramp (IntImm bits base) (IntImm bits 1) lanes) (Broadcast (IntImm bits x) lanes))
         (Broadcast (Ramp (IntImm bits 0) (IntImm bits 1) x) (/ lanes x))
    :when ((= (% lanes x) 0)
           (= (% base x) 0)))
; (0:1:8) / x8(4) -> (x4(0):x4(1):2)
(rewrite (Bop (Div) (Ramp (IntImm bits base) (IntImm bits 1) lanes) (Broadcast (IntImm bits x) lanes))
         (Ramp (Broadcast (IntImm bits (/ base x)) x) (Broadcast (IntImm bits 1) x) (/ lanes x))
        :when ((= (% lanes x) 0)
               (= (% base x) 0)))


(rewrite (Bop add-or-sub (Ramp base stride r-lanes) (Broadcast x b-lanes))
         (Ramp (Bop add-or-sub base (Broadcast x (/ b-lanes r-lanes))) stride r-lanes)
    :when ((= 0 (% b-lanes r-lanes))
           (AddOrSub add-or-sub) ))
(rewrite (Ramp x s 1) x)

(rewrite x (Ramp x (Broadcast (IntImm b 0) l) 1) 
    :when (
        (IsExpr x) 
        (has-type x (Int b l))))
(rewrite x (Broadcast x 1) :when ((IsExpr x)))
; reorganize a ramp as a 4-column tiles
; TODO: do we need these rules now we have `make-aligned`?
; Yes - otherwise performance/tiled_matmul.cpp does not pass
(rewrite (Ramp e (IntImm b 1) l) 
         (Ramp (Ramp e (IntImm b 1) 4) (Broadcast (IntImm b 4) 4) (/ l 4)) 
  :when ((= 0 (% l 4))))
(rewrite (Ramp e (IntImm b 1) l) 
         (Ramp (Ramp e (IntImm b 1) 2) (Broadcast (IntImm b 2) 2) (/ l 2)) 
  :when ((= 0 (% l 2))))
(rewrite (Ramp e (IntImm b 1) l) 
         (Ramp (Ramp e (IntImm b 1) 16) (Broadcast (IntImm b 16) 16) (/ l 16)) 
  :when ((= 0 (% l 16))))

;; Cast identity
(rule (
    (has-type e t)
) (
    (union e (Cast t e))
))


; 


(rule (
    (has-type e (UIntOrInt sign bits lanes))
) (
    (union e (Bop (Add) e (Broadcast (UIntOrIntImm sign bits 0) lanes)))
))

; 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Constant folding
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rewrite (Bop (Add) (IntImm bits a) (IntImm bits b)) (IntImm bits (+ a b)))
(rewrite (Bop (Sub) (IntImm bits a) (IntImm bits b)) (IntImm bits (- a b)))
(rewrite (Bop (Mul) (IntImm bits a) (IntImm bits b)) (IntImm bits (* a b)))
(rewrite (Bop (Div) (IntImm bits a) (IntImm bits b)) (IntImm bits (/ a b)))
(rewrite (Bop (Mod) (IntImm bits a) (IntImm bits b)) (IntImm bits (% a b)))
(rewrite (Bop (Min) (IntImm bits a) (IntImm bits b)) (IntImm bits (min a b)))
(rewrite (Bop (Max) (IntImm bits a) (IntImm bits b)) (IntImm bits (max a b)))
(rewrite (Bop (EQ) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((= a b)))
(rewrite (Bop (EQ) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((!= a b)))
(rewrite (Bop (NE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((= a b)))
(rewrite (Bop (NE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((!= a b)))
(rewrite (Bop (LT) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((< a b)))
(rewrite (Bop (LT) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((>= a b)))
(rewrite (Bop (LE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((<= a b)))
(rewrite (Bop (LE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((> a b)))
(rewrite (Bop (GT) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((> a b)))
(rewrite (Bop (GT) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((<= a b)))
(rewrite (Bop (GE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 1) :when ((>= a b)))
(rewrite (Bop (GE) (IntImm bits a) (IntImm bits b)) (UIntImm 1 0) :when ((< a b)))
; TODO: logical operators

; 


;; Given two index expressions, make-aligned tries to 
;; un-nest Broadcast and Ramp expressions

(relation make-aligned (Expr Expr))

(rule (
    (make-aligned a b)
) (
    (make-aligned b a)
) :ruleset canonicalize)

;; can do prime factorization to further generalize these rules
(rule (
    (make-aligned (Broadcast e1 b1) (Broadcast e2 b2))
    (< b1 b2)
    (= (% b2 b1) 0)
    (!= b1 1)
) (
    (union (Broadcast e2 b2) (Broadcast (Broadcast e2 (/ b2 b1)) b1))
    ; (subsume (Broadcast e2 b2))
) :ruleset canonicalize)

(rule (
    (make-aligned (Ramp e1 s1 l1) (Broadcast e2 b2))
    (< l1 b2)
    (= (% b2 l1) 0)
    (!= l1 1)
) (
    (union (Broadcast e2 b2) (Broadcast (Broadcast e2 (/ b2 l1)) l1))
    ; (subsume (Broadcast e2 b2))
) :ruleset canonicalize)

(rule (
    (make-aligned (Broadcast e1 b1) (Ramp e2 s2 l2))
    (< b1 l2)
    (= (% l2 b1) 0)
    (!= b1 1)

    (has-type e2 (UIntOrInt sign bits lanes))
) (
    (union (Ramp e2 s2 l2) 
           (Ramp (Ramp e2 s2 (/ l2 b1))
                 (Broadcast (Bop (Mul) s2 (Broadcast (UIntOrIntImm sign bits (/ l2 b1)) lanes)) (/ l2 b1))
                 b1))
    ; (subsume (Ramp e2 s2 l2))
) :ruleset canonicalize)

(rule (
    (make-aligned (Ramp e1 s1 l1) (Ramp e2 s2 l2))
    (< l1 l2)
    (= (% l2 l1) 0)
    (!= l1 1)

    (has-type e2 (UIntOrInt sign bits lanes))
) (
    (union (Ramp e2 s2 l2) 
           (Ramp (Ramp e2 s2 (/ l2 l1))
                 (Bop (Mul) s2 (Broadcast (UIntOrIntImm sign bits (/ l2 l1)) lanes))
                 l1))
    ; (subsume (Ramp e2 s2 l2))
) :ruleset canonicalize)

;; Propagating down make-aligned
;; TODO: should we ban the case when l is equal to 1??

(rule (
    (make-aligned (Ramp e1 s1 l) (Ramp e2 s2 l))
) (
    (make-aligned e1 e2)
) :ruleset canonicalize)

(rule (
    (make-aligned (Ramp e1 s1 l) (Broadcast e2 l))
) (
    (make-aligned e1 e2)
) :ruleset canonicalize)

(rule (
    (make-aligned (Broadcast e1 b) (Broadcast e2 b))
) (
    (make-aligned e1 e2)
) :ruleset canonicalize)

;; Instantiation of make-aligned for general matrix multiplication
(rule (
    (= e (VectorReduce out-type (Add)
        (Bop (Mul)
            (Cast lhs-op-type lhs)
            (Cast rhs-op-type rhs))))
    (= lhs (Load lhs-type lhs-name lhs-idx))
    (= rhs (Load rhs-type rhs-name rhs-idx))
) (
    (make-aligned lhs-idx rhs-idx)
) :ruleset canonicalize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Pulling out aligned broadcasts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(sort I64ExprBinFn (UnstableFn (i64 i64 Expr Expr) Expr))
(datatype InvertedIndex
    (InvRamp InvertedIndex Expr i64)
    (InvBroadcast InvertedIndex i64)
    (InvertedIndexEnd))
(constructor assemble-inv-ind (
    i64 ;; multiplicity
    Expr 
    InvertedIndex) Expr :unextractable)
(rewrite (assemble-inv-ind m e (InvertedIndexEnd)) e 
    :ruleset assemble)
(rewrite (assemble-inv-ind m e (InvRamp i (Broadcast s sl) l)) 
         (assemble-inv-ind m (Ramp e (Broadcast s (/ sl m)) l) i)
    :when ((= (% sl m) 0))
    :ruleset assemble)
(rewrite (assemble-inv-ind m e (InvBroadcast i l))
         (assemble-inv-ind m (Broadcast e l) i)
    :ruleset assemble)

;; Main interface
;;
;; This relation kicks off the following procedure:
;;  1. it scans lhs and rhs in lock step, finds the first
;;     "co-located" Broadcasts with same broadcast lanes, and removes them.
;;  2. it apply the assemble constructor to the modified lhs and rhs.
;;  3. at this stage, the result should be equivalent to the original expression,
;;     and remove-aligned-bc will union the result with the original expression.
(relation remove-aligned-bc (
    ;; origin
    Expr 
    ;; assmble constructor for lhs and rhs
    I64ExprBinFn 
    ;; lhs
    Expr
    ;; rhs
    Expr 
))

(relation remove-aligned-bc-impl (
    ;; origin
    Expr 
    ;; assmble constructor for lhs and rhs
    I64ExprBinFn 
    ;; lhs
    Expr
    ;; rhs
    Expr 
    ;; continuation for lhs
    InvertedIndex 
    ;; continuation for rhs
    InvertedIndex
))

(rule (
    (remove-aligned-bc origin modified left right)
) (
    (remove-aligned-bc-impl origin modified left right (InvertedIndexEnd) (InvertedIndexEnd))
) :ruleset canonicalize)

(rule (
    (remove-aligned-bc-impl origin modified left right inv-left inv-right)

    (= (Broadcast e1+ l) left)
    (= (Broadcast e2+ l) right)
    (!= l 1)
    (has-type e1+ t)
    (= broadcast-per (LanesInType t))
) (
    (let new-left (assemble-inv-ind l e1+ inv-left))
    (let new-right (assemble-inv-ind l e2+ inv-right))
    (union origin (unstable-app modified broadcast-per l new-left new-right))
) :ruleset canonicalize)

(rule (
    (remove-aligned-bc-impl origin modified left right inv-left inv-right)

    (= (Ramp e1+ s1 l) left)
    (= (Broadcast e2+ l) right)
    (!= l 1)
) (
    (remove-aligned-bc-impl origin modified e1+ e2+ 
        (InvRamp inv-left s1 l) 
        (InvBroadcast inv-right l))
) :ruleset canonicalize)

(rule (
    (remove-aligned-bc-impl origin modified left right inv-left inv-right)

    (= (Broadcast e1+ l) left)
    (= (Ramp e2+ s2 l) right)
    (!= l 1)
) (
    (remove-aligned-bc-impl origin modified e1+ e2+ 
        (InvBroadcast inv-left l)
        (InvRamp inv-right s2 l))
) :ruleset canonicalize)

(rule (
    (remove-aligned-bc-impl origin modified left right inv-left inv-right)

    (= (Ramp e1+ s1 l) left)
    (= (Ramp e2+ s2 l) right)
    (!= l 1)
) (
    (remove-aligned-bc-impl origin modified e1+ e2+ 
        (InvRamp inv-left s1 l)
        (InvRamp inv-right s2 l))
) :ruleset canonicalize)

;; Instantiation of remove-aligned-bc for general matrix multiplication
(constructor matrix-multiplication-int/uint-cont (
    ;; signedness
    bool
    ;; lhs-name
    Variable
    ;; rhs-name
    Variable
    ;; out-lanes
    i64
    ;; tot-lanes
    i64
    ;; broadcast-per
    i64
    ;; multiplicity
    i64
    ;; lhs
    Expr
    ;; rhs
    Expr
    ) Expr :unextractable)

;; TODO: explain what multiplicity does
(constructor matrix-multiplication-float-cont (
    ;; lhs-name
    Variable
    ;; rhs-name
    Variable
    ;; out-lanes
    i64
    ;; tot-lanes
    i64
    ;; broadcast-per
    i64
    ;; multiplicity
    i64
    ;; lhs
    Expr
    ;; rhs
    Expr
    ) Expr
    :unextractable)

(constructor matrix-multiplication-float-16-cont (
    ;; lhs-name
    Variable
    ;; rhs-name
    Variable
    ;; out-lanes
    i64
    ;; tot-lanes
    i64
    ;; broadcast-per
    i64
    ;; multiplicity
    i64
    ;; lhs
    Expr
    ;; rhs
    Expr
    ) Expr
    :unextractable)

(rewrite (matrix-multiplication-int/uint-cont signed lhs-name rhs-name old-out-lanes old-tot-lanes broadcast-per m lhs-idx rhs-idx)
         ;; (/ tot-lanes out-lanes) computes how many values are reduced into one value
         ;; We divide broadcast-per by this to account for the actual broadcasting after reduction
         (BroadcastPer (/ broadcast-per (/ tot-lanes out-lanes))
            (VectorReduce (UIntOrInt signed 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (UIntOrInt signed 32 tot-lanes)
                        (Load (UIntOrInt signed 8 tot-lanes) lhs-name lhs-idx))
                    (Cast (UIntOrInt signed 32 tot-lanes) 
                        (Load (UIntOrInt signed 8 tot-lanes) rhs-name rhs-idx)
                        )))
            m
         )
    :when ((= out-lanes (/ old-out-lanes m))
           (= tot-lanes (/ old-tot-lanes m)))
    :ruleset assemble
    )

(rewrite (matrix-multiplication-float-cont lhs-name rhs-name old-out-lanes old-tot-lanes broadcast-per m lhs-idx rhs-idx)
         (BroadcastPer (/ broadcast-per (/ tot-lanes out-lanes))
            (VectorReduce (Float 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float 32 tot-lanes)
                        (Load (BFloat 16 tot-lanes) lhs-name lhs-idx))
                    (Cast (Float 32 tot-lanes)
                        (Load (BFloat 16 tot-lanes) rhs-name rhs-idx)
                        )))
            m
         )
    :when ((= out-lanes (/ old-out-lanes m))
           (= tot-lanes (/ old-tot-lanes m)))
    :ruleset assemble
    )

(rewrite (matrix-multiplication-float-16-cont lhs-name rhs-name old-out-lanes old-tot-lanes broadcast-per m lhs-idx rhs-idx)
         (BroadcastPer (/ broadcast-per (/ tot-lanes out-lanes))
            (VectorReduce (Float 16 out-lanes) (Add)
                (Bop (Mul)
                    (Load (Float 16 tot-lanes) lhs-name lhs-idx)
                    (Load (Float 16 tot-lanes) rhs-name rhs-idx)))
            m
         )
    :when ((= out-lanes (/ old-out-lanes m))
           (= tot-lanes (/ old-tot-lanes m)))
    :ruleset assemble
    )

(rule (
    (= e (VectorReduce (UIntOrInt signed 32 out-lanes) (Add)
        (Bop (Mul)
            (Cast (UIntOrInt signed 32 tot-lanes) lhs)
            (Cast (UIntOrInt signed 32 tot-lanes) rhs))))
    (= lhs (Load (UIntOrInt signed 8 tot-lanes) lhs-name lhs-idx))
    (= rhs (Load (UIntOrInt signed 8 tot-lanes) rhs-name rhs-idx))
) (
    (remove-aligned-bc e (unstable-fn "matrix-multiplication-int/uint-cont" signed lhs-name rhs-name out-lanes tot-lanes) lhs-idx rhs-idx)
) :ruleset canonicalize)

(rule (
    (= e (VectorReduce (Float 32 out-lanes) (Add)
        (Bop (Mul)
            (Cast (Float 32 tot-lanes) lhs)
            (Cast (Float 32 tot-lanes) rhs))))
    (= lhs (Load (BFloat 16 tot-lanes) lhs-name lhs-idx))
    (= rhs (Load (BFloat 16 tot-lanes) rhs-name rhs-idx))
) (
    (remove-aligned-bc e (unstable-fn "matrix-multiplication-float-cont" lhs-name rhs-name out-lanes tot-lanes) lhs-idx rhs-idx)
) :ruleset canonicalize)

(rule (
    (= e (VectorReduce (Float 16 out-lanes) (Add)
        (Bop (Mul)
            lhs
            rhs)))
    (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-idx))
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-idx))
) (
    (remove-aligned-bc e (unstable-fn "matrix-multiplication-float-16-cont" lhs-name rhs-name out-lanes tot-lanes) lhs-idx rhs-idx)
) :ruleset canonicalize)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Push down broadcasts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; See `vector_axioms.egg`

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; push down VectorReduce
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO: decompose remove-innermost-bc into pull-out-bc rule and match rule
(relation remove-innermost-bc-demand (Expr))
(relation remove-innermost-bc (
    ;; original
    Expr
    ;; removed
    Expr
    ;; multiplicity shrinked
    i64
    ))

(rule (
    (VectorReduce ty (Add) (Bop (Mul) a b))
) (
    ;; We only do right child because of commutativity
    (remove-innermost-bc-demand b)
) :ruleset push-down-vector-reduce)

(rule (
    (= e (VectorReduce ty (Add)
        (Bop (Mul) a b)
    ))

    (remove-innermost-bc b shrinked-b m)
    (has-type shrinked-b arg-type)
) (
    ;; Subsuming the top level of the original lhs:
    ;; There are likely no accelerable pattern where 
    ;; the innermost expression is a broadcast
    (subsume (VectorReduce ty (Add) (Bop (Mul) a b)))
    (union e (VectorReduce ty (Add)
        (Bop (Mul) 
            (VectorReduce arg-type (Add) a)
            shrinked-b
            )))
) :ruleset push-down-vector-reduce)

;; Going down

(rule (
    (remove-innermost-bc-demand (Cast ty e))
) (
    (remove-innermost-bc-demand e)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand (Load ty x e))
) (
    (remove-innermost-bc-demand e)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand (Ramp e s l))
    (!= l 1)
) (
    (remove-innermost-bc-demand e)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand (Broadcast e l))
    (has-type e ty)
    (> (LanesInType ty) 1)
) (
    (remove-innermost-bc-demand e)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand (Broadcast e l))
    (has-type e ty)
    (= (LanesInType ty) 1)
    (!= l 1)
) (
    (remove-innermost-bc (Broadcast e l) e l)
) :ruleset push-down-vector-reduce)

;; Going back up

(rule (
    (remove-innermost-bc-demand e)
    (= e (Cast ty e1))
    (remove-innermost-bc e1 removed m)

    (= l (LanesInType ty))
    (= (% l m) 0)
) (
    (remove-innermost-bc e (Cast (WithLanes ty (/ l m)) removed) m)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand e)
    (= e (Load ty x e1))
    (remove-innermost-bc e1 removed m)

    (= l (LanesInType ty))
    (= (% l m) 0)
) (
    (remove-innermost-bc e (Load (WithLanes ty (/ l m)) x removed) m)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand e)
    (= e (Broadcast e1 l))
    (remove-innermost-bc e1 removed m)

    (!= l 1)
) (
    (remove-innermost-bc e (Broadcast removed l) m)
) :ruleset push-down-vector-reduce)

(rule (
    (remove-innermost-bc-demand e)
    (= e (Ramp e1 (Broadcast s ml) l))
    (remove-innermost-bc e1 removed m)

    (!= l 1)
    (= (% ml m) 0)
) (
    (remove-innermost-bc e (Ramp removed (Broadcast s (/ ml l)) l) m)
) :ruleset push-down-vector-reduce)


; 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AMX helpers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; {
    ; (relation _LoadAMXType (Type))
    ; (_LoadAMXType (Int 32 256))
    ; (_LoadAMXType (Float 32 256))
;; }
; (constructor LoadAMX (Type String) Expr :unextractable)
; (birewrite (LoadAMX ty x) (Load ty x R256) :when ((_LoadAMXType ty)))

; (constructor StoreAMX (String Expr) Stmt :unextractable)
; (birewrite (Store name value R256) (StoreAMX name value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Shape inference
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;                       var    rows colbytes
(relation AMXAllocation (String i64  i64))
(relation AMXShape (Expr i64  i64))

(rule (
    (AMXAllocation name rows colbytes)
    (= e (Var t (V name)))
) (
    (AMXShape e rows colbytes)
) :ruleset amx)
(rule (
    (AMXShape e rows colbytes)
    (Store name e index)
) (
    (AMXAllocation name rows colbytes)
) :ruleset amx)
(rule (
    (AMXAllocation name rows colbytes)
    (Store name e index)
) (
    (AMXShape e rows colbytes)
) :ruleset amx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tile_matmul
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Abstract AMX left-hand side access patterns
(relation amx-int/uint-lhs (
    Expr ;; orig-expr
    i64 ;; x-lanes
    i64 ;; y-lanes
    i64 ;; r-lanes
    Expr ;; rhs-expr
))

(relation amx-float-lhs (
    Expr ;; orig-expr
    i64 ;; x-lanes
    i64 ;; y-lanes
    i64 ;; r-lanes
    Expr ;; rhs-expr
))


(rule (
    (= orig-lhs (Load (UIntOrInt lhs-signed 8 tot-lanes) lhs-name lhs-index))
    (= lhs-index
        (Ramp (Broadcast (Ramp lhs-base (IntImm32 1) r-lanes) y-lanes) 
              (Broadcast x-stride (* y-lanes r-lanes))
              x-lanes)
    )
) (
    (let new-lhs (Call "tile_load" (UIntOrInt lhs-signed 8 (* x-lanes r-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 r-lanes) (Var (Handle 1) lhs-name) lhs-base x-stride) (Intrinsic)))
    (amx-int/uint-lhs orig-lhs x-lanes y-lanes r-lanes new-lhs)
) :ruleset amx)

(rule (
    (= orig-lhs (Load (BFloat 16 tot-lanes) lhs-name lhs-index))
    (= lhs-index
        (Ramp (Broadcast (Ramp lhs-base (IntImm32 1) r-lanes) y-lanes) 
              (Broadcast x-stride (* y-lanes r-lanes))
              x-lanes)
    )
) (
    (let new-lhs (Call "tile_load" (BFloat 16 (* x-lanes r-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 r-lanes) (Var (Handle 1) lhs-name) lhs-base x-stride) (Intrinsic)))
    (amx-float-lhs orig-lhs x-lanes y-lanes r-lanes new-lhs)
) :ruleset amx)

;; Abstract AMX right-hand side access patterns

(relation amx-int/uint-rhs (
    Expr ;; orig-expr
    i64 ;; x-lanes
    i64 ;; y-lanes
    i64 ;; r-lanes
    Expr ;; rhs-expr
))

(relation amx-float-rhs (
    Expr ;; orig-expr
    i64 ;; x-lanes
    i64 ;; y-lanes
    i64 ;; r-lanes
    Expr ;; rhs-expr
))

(rule (
    (= orig-rhs (Load (UIntOrInt rhs-signed 8 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        ; 4 is for (u)int8
        (Broadcast
            (Ramp (Ramp (Ramp rhs-base (IntImm32 1) 4) 
                        (Broadcast rhs-r-stride 4) 
                        (/ r-lanes 4)
                        )
                  (Broadcast (IntImm32 4) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let amx-rhs (Call "tile_load" (UIntOrInt rhs-signed 8 (* r-lanes y-lanes)) (vec-of (IntImm16 (/ r-lanes 4)) (IntImm16 (* y-lanes 4)) (Var (Handle 1) rhs-name) rhs-base rhs-r-stride) (Intrinsic)))
    (amx-int/uint-rhs orig-rhs x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)

(rule (
    (= orig-rhs (Load (BFloat 16 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast
            (Ramp (Ramp (Ramp rhs-base (IntImm32 1) 2) 
                        (Broadcast rhs-r-stride 2)
                        (/ r-lanes 2)
                        )
                  (Broadcast (IntImm32 2) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let amx-rhs (Call "tile_load" (BFloat 16 (* r-lanes y-lanes)) (vec-of (IntImm16 (/ r-lanes 2)) (IntImm16 (* y-lanes 2)) (Var (Handle 1) rhs-name) rhs-base rhs-r-stride) (Intrinsic)))
    (amx-float-rhs orig-rhs x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)

(rule (
    (= orig-rhs-mem (AMX2Mem orig-rhs))
    (= orig-rhs (Load (UIntOrInt rhs-signed 8 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        ; 4 is for (u)int8
        (Broadcast
            (Ramp (Ramp (Ramp rhs-base (IntImm32 1) 4) 
                        (Broadcast rhs-r-stride 4) 
                        (/ r-lanes 4)
                        )
                  (Broadcast (IntImm32 4) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let amx-rhs (Load (UIntOrInt rhs-signed 8 (* r-lanes y-lanes)) rhs-name (Ramp rhs-base (IntImm32 1) (* r-lanes y-lanes))))
    (amx-int/uint-rhs orig-rhs-mem x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)


(rule (
    (= orig-rhs-mem (AMX2Mem orig-rhs))
    (= orig-rhs (Load (BFloat 16 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast
            (Ramp (Ramp (Ramp rhs-base (IntImm32 1) 2) 
                        (Broadcast rhs-r-stride 2)
                        (/ r-lanes 2)
                        )
                  (Broadcast (IntImm32 2) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let amx-rhs (Load (BFloat 16 (* r-lanes y-lanes)) rhs-name (Ramp rhs-base (IntImm32 1) (* r-lanes y-lanes))))
    (amx-float-rhs orig-rhs-mem x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)


(rule (
    (= orig-rhs (Load (UIntOrInt rhs-signed 8 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast
            (Ramp (Ramp rhs-base 
                        rhs-r-stride
                        r-lanes
                        )
                  (Broadcast (IntImm32 1) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let rhs-type (UIntOrInt rhs-signed 8 (* r-lanes y-lanes)))
    (let amx-rhs (Call "tile_load"
        rhs-type
        (vec-of
            (IntImm16 (/ r-lanes 4))
            (IntImm16 (* y-lanes 4))
            (Var (Handle 1) (ExprVar (Mem) 
                (Call "KWayInterleave" (BFloat 16 (* y-lanes r-lanes)) 
                    (vec-of (IntImm32 4) 
                            (Load rhs-type rhs-name (Ramp (Ramp rhs-base (IntImm32 1) y-lanes) (Broadcast rhs-r-stride y-lanes) r-lanes))
                            (IntImm32 r-lanes))
                    (Intrinsic))))
            (IntImm32 0)
            (IntImm32 (* y-lanes 4))
            )
        (Intrinsic)))
    (amx-int/uint-rhs orig-rhs x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)


(rule (
    (= orig-rhs (Load (BFloat 16 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast
            (Ramp (Ramp rhs-base 
                        rhs-r-stride
                        r-lanes
                        )
                  (Broadcast (IntImm32 1) r-lanes)
                  y-lanes
            )
            x-lanes
        )
    )
) (
    (let rhs-type (BFloat 16 (* r-lanes y-lanes)))
    (let amx-rhs (Call "tile_load"
        rhs-type
        (vec-of
            (IntImm16 (/ r-lanes 2))
            (IntImm16 (* y-lanes 2))
            (Var (Handle 1) (ExprVar (Mem) 
                (Call "KWayInterleave" (BFloat 16 (* y-lanes r-lanes)) 
                    (vec-of (IntImm32 2) 
                            (Load rhs-type rhs-name (Ramp (Ramp rhs-base (IntImm32 1) y-lanes) (Broadcast rhs-r-stride y-lanes) r-lanes))
                            (IntImm32 r-lanes))
                    (Intrinsic))))
            (IntImm32 0)
            (IntImm32 (* y-lanes 2))
            )
        (Intrinsic)))
    (amx-float-rhs orig-rhs x-lanes y-lanes r-lanes amx-rhs)
) :ruleset amx)


; Int8/UInt8
(rule (
    (= e (Bop (Add) 
            (VectorReduce (Int 32 out-lanes) (Add) 
                (Bop (Mul) 
                    (Cast (Int 32 tot-lanes) lhs) 
                    (Cast (Int 32 tot-lanes) rhs))
                )
            mat))
    (= out-lanes (* x-lanes y-lanes))
    (= tot-lanes (* out-lanes r-lanes))

    (amx-int/uint-lhs lhs x-lanes y-lanes r-lanes new-lhs)
    (amx-int/uint-rhs rhs x-lanes y-lanes r-lanes new-rhs)
) (
    (let new-e (Call "tile_matmul" (Int 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4)) (IntImm16 r-lanes) (Mem2AMX mat) new-lhs new-rhs) (Intrinsic)))
    (AMXShape new-e x-lanes (* y-lanes 4))
    (union e (AMX2Mem new-e))
) :ruleset amx)

;; Same rule, but does C = AxB instead of C = AxB+C
(rule (
    (= e (VectorReduce (Int 32 out-lanes) (Add) 
            (Bop (Mul) 
                (Cast (Int 32 tot-lanes) lhs) 
                (Cast (Int 32 tot-lanes) rhs))
            ))
    (= out-lanes (* x-lanes y-lanes))
    (= tot-lanes (* out-lanes r-lanes))

    (amx-int/uint-lhs lhs x-lanes y-lanes r-lanes new-lhs)
    (amx-int/uint-rhs rhs x-lanes y-lanes r-lanes new-rhs)
) (
    (let initial (Call "tile_zero" (Int 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4))) (Intrinsic)))
    (let new-e (Call "tile_matmul" (Int 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4)) (IntImm16 r-lanes) initial new-lhs new-rhs) (Intrinsic)))
    (AMXShape new-e x-lanes (* y-lanes 4))
    (union e (AMX2Mem new-e))
) :ruleset amx)

; Float16
(rule (
    (= e (Bop (Add) 
        (VectorReduce (Float 32 out-lanes) (Add) 
            (Bop (Mul) 
                (Cast (Float 32 tot-lanes) lhs)
                (Cast (Float 32 tot-lanes) rhs))
            )
        mat))
    (= out-lanes (* x-lanes y-lanes))
    (= tot-lanes (* out-lanes r-lanes))

    (amx-float-lhs lhs x-lanes y-lanes r-lanes new-lhs)
    (amx-float-rhs rhs x-lanes y-lanes r-lanes new-rhs)
) (
    (let new-e (Call "tile_matmul" (Float 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4)) (IntImm16 r-lanes) (Mem2AMX mat) new-lhs new-rhs) (Intrinsic)))
    (AMXShape new-e x-lanes (* y-lanes 4))
    (union e (AMX2Mem new-e))
) :ruleset amx)

(rule (
    (= e
        (VectorReduce (Float 32 out-lanes) (Add) 
            (Bop (Mul) 
                (Cast (Float 32 tot-lanes) lhs)
                (Cast (Float 32 tot-lanes) rhs))
            ))
    (= out-lanes (* x-lanes y-lanes))
    (= tot-lanes (* out-lanes r-lanes))

    (amx-float-lhs lhs x-lanes y-lanes r-lanes new-lhs)
    (amx-float-rhs rhs x-lanes y-lanes r-lanes new-rhs)
) (
    (let initial (Call "tile_zero" (Float 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4))) (Intrinsic)))
    (let new-e (Call "tile_matmul" (Float 32 (* x-lanes y-lanes)) (vec-of (IntImm16 x-lanes) (IntImm16 (* y-lanes 4)) (IntImm16 r-lanes) initial new-lhs new-rhs) (Intrinsic)))
    (AMXShape new-e x-lanes (* y-lanes 4))

    (union e (AMX2Mem new-e))
) :ruleset amx)

(birewrite (Cast ty (AMX2Mem e)) (AMX2Mem (Cast ty e)) :ruleset amx)
(birewrite (Cast ty (Mem2AMX e)) (Mem2AMX (Cast ty e)) :ruleset amx)
(birewrite (BroadcastPer p (Mem2AMX e) l) (Mem2AMX (BroadcastPer p e l)) :ruleset amx)
(birewrite (AMX2Mem (BroadcastPer p e l)) (BroadcastPer p (AMX2Mem e) l) :ruleset amx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tilezero
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (
    (= e (Mem2AMX
        (Broadcast
            (UIntOrIntImm _sign 32 0)
            lanes
        )))
    (AMXShape e rows colbytes)
) (
    (let new-e (Call "tile_zero" (Int 32 lanes) (vec-of (IntImm16 rows) (IntImm16 colbytes)) (Intrinsic)))
    (union e new-e)
) :ruleset amx)

(rule (
    (= e (Mem2AMX
        (Broadcast
            (FloatImm 32 0.0)
            lanes
        )))
    (AMXShape e rows colbytes)
) (
    (let new-e (Call "tile_zero" (Float 32 lanes) (vec-of (IntImm16 rows) (IntImm16 colbytes)) (Intrinsic)))
    (union e new-e)
) :ruleset amx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tile_load
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; there are two ways to translate an Mem2AMX:
;; We can use computes the entire computation in memory (`(ExprVar (Mem) ...)`),
;; followed by an tileload,
;; Or if the argument to Mem2AMX is a load of a specific pattern,
;; then we can just to a tileload

; The generic case

(rule (
    (= e (Mem2AMX value))
    ; We need to know the shape of the computation 
    ; before loading it
    (AMXShape e row colbytes)
    (has-type value (UIntOrInt sign 8 lanes))
) (
    (let new-e (Call "tile_load" (UIntOrInt sign 8 lanes)
                   (vec-of (IntImm16 row)
                           (IntImm16 colbytes)
                           (Var (Handle 1) (ExprVar (Mem) value))
                           ;; (Computed)
                           (IntImm32 0) ;; offset
                           ;; (Computed)
                           (IntImm32 colbytes) ;; stride
                           )
                    (Intrinsic)))
    (union e new-e)
) :ruleset amx)

(rule (
    (= e (Mem2AMX value))
    ; We need to know the shape of the computation 
    ; before loading it
    (AMXShape e row colbytes)
    (has-type value (BFloat 16 lanes))
) (
    (let new-e (Call "tile_load" (BFloat 16 lanes)
                   (vec-of (IntImm16 row)
                           (IntImm16 colbytes)
                           (Var (Handle 1) (ExprVar (Mem) value))
                           ;; (Computed)
                           (IntImm32 0) ;; offset
                           ;; (Computed)
                           (IntImm32 colbytes) ;; stride
                           )
                    (Intrinsic)))
    (union e new-e)
) :ruleset amx)

; The specialized case

(rule (
    (= e (Mem2AMX
        (Load ty name index)))
    (= index (Ramp (Ramp base (IntImm32 1) m-lanes) (Broadcast n-stride m-lanes) n-lanes))
    (= ty (UIntOrInt _sign 8 _lanes))
) (
    (let new-e (Call "tile_load" ty (vec-of (IntImm16 n-lanes) (IntImm16 m-lanes) (Var (Handle 1) name) base n-stride) (Intrinsic)))
    (union e new-e)
) :ruleset amx)

(rule (
    (= e (Mem2AMX
        (Load ty name index)))
    (= index (Ramp (Ramp base (IntImm32 1) m-lanes) (Broadcast n-stride m-lanes) n-lanes))
    (= ty (BFloat 16 _lanes))
) (
    (let new-e (Call "tile_load" ty (vec-of (IntImm16 n-lanes) (IntImm16 (* m-lanes 2)) (Var (Handle 1) name) base n-stride) (Intrinsic)))
    (union e new-e)
) :ruleset amx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tile_store
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; there are two ways to translate an AMX2Mem:
;; We can compute the expression as is, and stores the
;; AMX result in some temporary buffer contiguously,
;; Or if the statement has the form (Store name (AMX2Mem value) index),
;; and the index has a specific pattern, then we can directly tile_store it.

;; (rewrite (AMX2Mem value) (Load ty (ExprVar (AMX) value) (Computed))
;;     :when ((has-type value ty)))
(rule ((= e (AMX2Mem value))
       (has-type value ty)
       (= extent (LanesInType ty)))
      ((union e (Load ty (ExprVar (AMX) value) (Ramp (IntImm32 0) (IntImm32 1) extent))))
    :ruleset amx)
;; there are some problems here
;; ExprVar at least need to know the matrix dimension of `value`
;; to properly codegen.
(rewrite (AMX2Mem value) 
         (Load ty (ExprVar (AMX) value) (Ramp (IntImm32 0) (IntImm32 1) extent))
    :when (
        (has-type value ty)
        (= extent (LanesInType ty))
    )
    :ruleset amx)
; de-specialization
(rewrite (Load ty (ExprVar (AMX) value) (Ramp (IntImm32 0) (IntImm32 1) extent)) (AMX2Mem value)
    :ruleset amx)

(rule (
    (= s (Store store-name (AMX2Mem tile) index))
    (= index (Ramp (Ramp base (IntImm32 1) m-lanes) (Broadcast n-stride m-lanes) n-lanes))
    (= bytes 4)
    (has-type value ty)
) (
    (let new-s (Evaluate 
        (Call "tile_store" (Int 32 1) 
            (vec-of (IntImm16 n-lanes) 
                    (IntImm16 (* m-lanes bytes))
                    (Var (Handle 1) (V store-name))
                    (Bop (Mul) base (IntImm32 bytes))
                    (Bop (Mul) n-stride (IntImm32 bytes))
                    tile
                    )
            (Intrinsic))))
    (union s new-s)
) :ruleset amx)

; 



;; Specification of different tile sizes for WMMA
;; We leave the type (f16 vs bf16) and layout (row major vs column major) as a future TODO
(datatype WMMATileConfig 
    (Tile i64 i64 i64))
(datatype Layout
    (RowMajor)
    (ColMajor))

(relation WMMATileA (WMMATileConfig Layout String))
(WMMATileA (Tile 16 16 16) (RowMajor) "wmma.load.a.sync.aligned.row.m16n16k16.f16")
(WMMATileA (Tile 32 8 16) (RowMajor) "wmma.load.a.sync.aligned.row.m32n8k16.f16")
(WMMATileA (Tile 8 32 16) (RowMajor) "wmma.load.a.sync.aligned.row.m8n32k16.f16")
(relation WMMATileB (WMMATileConfig Layout String))
(WMMATileB (Tile 16 16 16) (RowMajor) "wmma.load.b.sync.aligned.row.m16n16k16.f16")
(WMMATileB (Tile 16 16 16) (ColMajor) "wmma.load.b.sync.aligned.col.m16n16k16.f16")
(WMMATileB (Tile 32 8 16) (RowMajor) "wmma.load.b.sync.aligned.row.m32n8k16.f16")
(WMMATileB (Tile 8 32 16) (RowMajor) "wmma.load.b.sync.aligned.row.m8n32k16.f16")
(relation WMMATileC (WMMATileConfig Layout String i64))
(WMMATileC (Tile 16 16 16) (RowMajor) "wmma.load.c.sync.aligned.row.m16n16k16.f32" 32)
(WMMATileC (Tile 32 8 16) (RowMajor) "wmma.load.c.sync.aligned.row.m32n8k16.f32" 32)
(WMMATileC (Tile 8 32 16) (RowMajor) "wmma.load.c.sync.aligned.row.m8n32k16.f32" 32)
(WMMATileC (Tile 16 16 16) (RowMajor) "wmma.load.c.sync.aligned.row.m16n16k16.f16" 16)
(WMMATileC (Tile 32 8 16) (RowMajor) "wmma.load.c.sync.aligned.row.m32n8k16.f16" 16)
(WMMATileC (Tile 8 32 16) (RowMajor) "wmma.load.c.sync.aligned.row.m8n32k16.f16" 16)
(relation WMMAGEMM (WMMATileConfig Layout Layout String i64))
(WMMAGEMM (Tile 16 16 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m16n16k16.f32.f32" 32)
(WMMAGEMM (Tile 16 16 16) (RowMajor) (ColMajor) "wmma.mma.sync.aligned.row.col.m16n16k16.f32.f32" 32)
(WMMAGEMM (Tile 32 8 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m32n8k16.f32.f32" 32)
(WMMAGEMM (Tile 8 32 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m8n32k16.f32.f32" 32)
(WMMAGEMM (Tile 16 16 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m16n16k16.f16.f16" 16)
(WMMAGEMM (Tile 16 16 16) (RowMajor) (ColMajor) "wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16" 16)
(WMMAGEMM (Tile 32 8 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m32n8k16.f16.f16" 16)
(WMMAGEMM (Tile 8 32 16) (RowMajor) (RowMajor) "wmma.mma.sync.aligned.row.row.m8n32k16.f16.f16" 16)
(relation WMMATileD (WMMATileConfig Layout String i64))
(WMMATileD (Tile 16 16 16) (RowMajor) "wmma.store.d.sync.aligned.row.m16n16k16.f32" 32)
(WMMATileD (Tile 32 8 16) (RowMajor) "wmma.store.d.sync.aligned.row.m32n8k16.f32" 32)
(WMMATileD (Tile 8 32 16) (RowMajor) "wmma.store.d.sync.aligned.row.m8n32k16.f32" 32)
(WMMATileD (Tile 16 16 16) (RowMajor) "wmma.store.d.sync.aligned.row.m16n16k16.f16" 16)
(WMMATileD (Tile 32 8 16) (RowMajor) "wmma.store.d.sync.aligned.row.m32n8k16.f16" 16)
(WMMATileD (Tile 8 32 16) (RowMajor) "wmma.store.d.sync.aligned.row.m8n32k16.f16" 16)

;; different from WMMA, the last column denotes number of elements rather than colbytes
(relation WMMAAllocation (String i64 i64))
(relation WMMAShape (Expr i64 i64))

(rule (
        (WMMAAllocation name rows cols)
        (= e (Var t (V name)))
    ) (
        (WMMAShape e rows cols)
    ))
(rule (
        (WMMAShape e rows cols)
        (Store name e index)
    ) (
        (WMMAAllocation name rows cols)
    ))
; TODO: this rule is wrong: it requires the index to be a linear scan instead of an arbitrary expression
(rule (
        (WMMAAllocation name rows cols)
        (Store name e index)
    ) (
        (WMMAShape e rows cols)
    ))

;; Axiomatic rules about WMMA2Mem and Mem2WMMA

(birewrite (Cast ty (WMMA2Mem e)) (WMMA2Mem (Cast ty e)))
(birewrite (Cast ty (Mem2WMMA e)) (Mem2WMMA (Cast ty e)))
(birewrite (BroadcastPer p (Mem2WMMA e) l) (Mem2WMMA (BroadcastPer p e l)))
(birewrite (WMMA2Mem (BroadcastPer p e l)) (BroadcastPer p (WMMA2Mem e) l))
(birewrite (Broadcast (Mem2WMMA e) l) (Mem2WMMA (Broadcast e l)))
(birewrite (WMMA2Mem (Broadcast e l)) (Broadcast (WMMA2Mem e) l))


(relation wmma-f16-rhs (
    Expr ;; orig-expr
    WMMATileConfig
    Layout
    Expr ;; rhs-expr
))

(rule (
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))

    (= rhs-index
        (Broadcast
            (Ramp (Ramp rhs-base
                    rhs-r-stride
                    r-lanes
                )
                (Broadcast (IntImm32 1) r-lanes)
                y-lanes
            )
            x-lanes
        )
    )

    (= tile (Tile x-lanes y-lanes r-lanes))
    (WMMATileB tile (RowMajor) wmma-intrinsic)
) (
    (let new-rhs (Call wmma-intrinsic (Float 16 256) (vec-of (Var (Handle 1) rhs-name) rhs-base rhs-r-stride) (Intrinsic)))
    (wmma-f16-rhs rhs tile (RowMajor) new-rhs)
))

(rule (
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))

    (= rhs-index
        (Broadcast
            (Ramp (Ramp rhs-base
                    (IntImm32 1)
                    r-lanes
                )
                (Broadcast rhs-r-stride r-lanes)
                y-lanes
            )
            x-lanes
        )
    )

    (= tile (Tile x-lanes y-lanes r-lanes))
    (WMMATileB tile (ColMajor) wmma-intrinsic)
) (
    (let new-rhs (Call wmma-intrinsic (Float 16 256) (vec-of (Var (Handle 1) rhs-name) rhs-base rhs-r-stride) (Intrinsic)))
    (wmma-f16-rhs rhs tile (ColMajor) new-rhs)
))

; (wmma-f16-rhs 
;     (WMMA2Mem (Load ty name (Ramp (Ramp (IntImm32 0) (IntImm32 16) 16) (Broadcast (IntImm32 ) 16) 16))) 
;     16 16 16
;     (Load ty name (Ramp (Ramp (IntImm32 0) (IntImm32 16) 16) (Broadcast (IntImm32 1) 16) 16)))
(rule (
    (= orig-rhs-mem (WMMA2Mem orig-rhs))
    (= orig-rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast
            (Ramp (Ramp rhs-base rhs-r-stride r-lanes)
                  (Broadcast (IntImm32 1) r-lanes)
                   y-lanes)
            x-lanes))
) (
    (let new-rhs (Load (Float 16 (* r-lanes y-lanes)) rhs-name (Ramp rhs-base (IntImm32 1) (* r-lanes y-lanes))))
    (wmma-f16-rhs orig-rhs-mem (Tile x-lanes y-lanes r-lanes) (RowMajor) new-rhs)
))

(rule (
        (= e (Bop (Add)
                (VectorReduce (Float acc-bits out-lanes) (Add)
                    (Bop (Mul)
                        (Cast (Float acc-bits tot-lanes) lhs)
                        (Cast (Float acc-bits tot-lanes) rhs))
                )
                mat))
        (= out-lanes (* x-lanes y-lanes))
        (= tot-lanes (* out-lanes r-lanes))

        (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
        (= lhs-index
            (Ramp (Broadcast (Ramp lhs-base (IntImm32 1) r-lanes) y-lanes)
                (Broadcast x-stride (* y-lanes r-lanes))
                x-lanes)
        )

        (= tile (Tile x-lanes y-lanes r-lanes))
        (wmma-f16-rhs rhs tile rhs-layout new-rhs)

        (WMMATileA tile lhs-layout intrinsic-A)
        (WMMAGEMM tile lhs-layout rhs-layout intrinsic-GEMM acc-bits)

    ) (
        (let new-lhs (Call intrinsic-A (Float 16 256) (vec-of (Var (Handle 1) lhs-name) lhs-base x-stride) (Intrinsic)))
        (let new-mat (Mem2WMMA mat))
        (let new-e (Call intrinsic-GEMM (Float acc-bits 256) (vec-of new-lhs new-rhs new-mat) (Intrinsic)))
        (WMMAShape new-e x-lanes y-lanes)

        (union e (WMMA2Mem new-e))
    ))

(rule (
        (= e 
                (VectorReduce (Float acc-bits out-lanes) (Add)
                    (Bop (Mul)
                        (Cast (Float acc-bits tot-lanes) lhs)
                        (Cast (Float acc-bits tot-lanes) rhs))
                ))
        (= out-lanes (* x-lanes y-lanes))
        (= tot-lanes (* out-lanes r-lanes))

        (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
        (= lhs-index
            (Ramp (Broadcast (Ramp lhs-base (IntImm32 1) r-lanes) y-lanes)
                (Broadcast x-stride (* y-lanes r-lanes))
                x-lanes)
        )

        (= tile (Tile x-lanes y-lanes r-lanes))
        (wmma-f16-rhs rhs tile rhs-layout new-rhs)

        (WMMATileA tile lhs-layout intrinsic-A)
        (WMMAGEMM tile lhs-layout rhs-layout intrinsic-GEMM acc-bits)
        ;; The layout of the accumulator does not seem to affect the gemm intrinsic to be used
        (WMMATileC tile acc-layout intrinsic-C acc-bits)

    ) (
        (let initial (Call (+ intrinsic-C ".ZERO") (Float acc-bits 256) (vec-of (IntImm32 0)) (Intrinsic)))
        (let new-lhs (Call intrinsic-A (Float 16 256) (vec-of (Var (Handle 1) lhs-name) lhs-base x-stride) (Intrinsic)))
        (let new-e (Call intrinsic-GEMM (Float acc-bits 256) (vec-of new-lhs new-rhs initial) (Intrinsic)))
        (WMMAShape new-e x-lanes y-lanes)
        (union e (WMMA2Mem new-e))
    ))


(rule (
        (= e (Mem2WMMA
                (Broadcast
                    (FloatImm bits 0.0)
                    lanes
                )))
        (WMMAShape e rows cols)
        (= lanes (* rows cols))

        ;; we arbitrarily pick row major as the intrinsic for initialization
        (WMMATileC (Tile rows cols _k) (RowMajor) intrinsic bits)
    ) (
        (let new-e (Call (+ intrinsic ".ZERO") (Float bits lanes) (vec-of (IntImm32 0)) (Intrinsic)))
        ; (let new-e (Call intrinsic (Float 32 lanes) (vec-of (Var (Handle 1) (ExprVar (Mem) 
        (union e new-e)
    ))

(rule (
    (= e (WMMA2Mem wmma-expr))
    (WMMAShape wmma-expr n-lanes k-lanes)
    (has-type e (Float bits 256))
    (WMMATileD (Tile n-lanes _m k-lanes) (RowMajor) intrinsic bits)
) (
    (let load-var (ExprVar (Mem)
        (Call intrinsic (Int 32 1) (vec-of (Var (Handle 1) (V "DUMMY_STORE_NAME")) wmma-expr (IntImm32 0) (IntImm32 k-lanes)) (Intrinsic))))
    (let index (Ramp (Ramp (IntImm32 0) (IntImm32 1) k-lanes) (Broadcast (IntImm32 k-lanes) k-lanes) n-lanes))
    (let new-e (Load (Float bits (* n-lanes k-lanes)) load-var index))
    (union e new-e)
))

(rule (
        (= s (Store store-name (WMMA2Mem tile) index))
        (= tile (Load (Float bits _lanes) (V tile-name) load-index))
        (= index (Ramp (Ramp base (IntImm32 1) m-lanes) (Broadcast n-stride m-lanes) n-lanes))
        (has-type tile (Float bits _lanes))
        (WMMAAllocation tile-name n-lanes m-lanes)
        (WMMATileD (Tile n-lanes m-lanes _k) (RowMajor) intrinsic bits)
    ) (
        (let new-s (Evaluate
                (Call intrinsic (Int 32 1)
                    (vec-of (Var (Handle 1) (V store-name))
                        tile
                        base
                        n-stride
                    )
                    (Intrinsic))))
        (union s new-s)
    ))

(rule (
    (= s (Store store-name (WMMA2Mem tile) store-index))
    (= tile (Load (Float bits _lanes) (V tile-name) load-index))

    (= store-index (Ramp store-base (IntImm32 1) tot-lanes))
    (= load-index (Ramp tile-base (IntImm32 1) tot-lanes))
    (WMMAAllocation tile-name n-lanes m-lanes)

    (WMMATileD (Tile n-lanes m-lanes _k) (RowMajor) intrinsic bits)
) (
    (let new-s (Evaluate
            (Call intrinsic (Int 32 1)
                (vec-of (Var (Handle 1) (V store-name))
                    tile
                    store-base
                    (IntImm32 m-lanes)
                )
                (Intrinsic))))
    (union s new-s)
))


;; loading matrices A and B

(rule (
    (= e (Mem2WMMA
        (Load ty name index)))
    (= index (Ramp (Ramp base (IntImm32 1) m-lanes) (Broadcast n-stride m-lanes) n-lanes))
    (= ty (Float 16 _lanes))

    (WMMATileB (Tile _l m-lanes n-lanes) (RowMajor) wmma-intrinsic)
) (
    (let new-e (Call wmma-intrinsic ty (vec-of (Var (Handle 1) name) base n-stride) (Intrinsic)))
    (union e new-e)
))

(rule (
    (= e (Bop (Add)
            (VectorReduce (Float 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float 32 tot-lanes) lhs)
                    (Cast (Float 32 tot-lanes) rhs))
            )
            mat))
    (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))

    (= lhs-index 
        (Ramp 
            (Ramp 
                (Ramp bl s1a l1) 
                (Broadcast s2 l1) 
                l2) 
            (Broadcast s3 (* l1 l2)) 
            l3))
    (= rhs-index 
        (Broadcast 
            (Broadcast (Ramp br s1b l1) l2) l3))

    (= s2 s1a)
    (= s1a (IntImm32 1))
    (= lhs-inner-offset 1)
    ;; NB: if we relax the restriction to be that lhs-inner-offset 
    ;; can be greater than 0, then we need to pass that
    ;; lhs-inner-offset to ConvolutionShuffle
    ; (= (% s2 s1a) 0)
    ; (= (/ s1 s1a) lhs-inner-offset)
) (
    (let new-l1 (+ l1 (* lhs-inner-offset l2)))
    (let new-tot-lanes (* (* new-l1 l2) l3))
    (let new-lhs-index
        (Ramp 
            (Broadcast 
                (Ramp bl s1a new-l1)
                l2)
            (Broadcast s3 (* new-l1 l2))
            l3)
    )
    (let new-lhs (Load (Float 16 new-tot-lanes) lhs-name new-lhs-index))
    
    (let new-rhs-index 
        (Broadcast 
            (Ramp 
                (Ramp (IntImm32 0) (IntImm32 l2) new-l1)
                (Broadcast (IntImm32 1) new-l1)
                l2)
            l3))
    (let new-rhs-name
        (ExprVar (Mem)
            (Call "ConvolutionShuffle" (Float 16 (* new-l1 l2))
                (vec-of (Var (Handle 1) rhs-name) br s1b (IntImm32 l1) (IntImm32 l2) (IntImm32 1) (IntImm32 0))
                (Intrinsic))
        )
    )
    (let new-rhs (Load (Float 16 new-tot-lanes) new-rhs-name new-rhs-index))

    (let new-e 
        (Bop (Add)
                (VectorReduce (Float 32 out-lanes) (Add)
                    (Bop (Mul)
                        (Cast (Float 32 new-tot-lanes) new-lhs)
                        (Cast (Float 32 new-tot-lanes) new-rhs))
                )
                mat))

    (union e new-e)
))

(rule (
    (= e (Bop (Add)
            (VectorReduce (Float 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float 32 tot-lanes) lhs)
                    (Cast (Float 32 tot-lanes) rhs))
            )
            mat))
    (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))

    (= lhs-index 
        (Ramp 
            (Ramp bl s1a l1)
            (Broadcast s2 l1) 
            l2))
    (= rhs-index 
        (Broadcast (Ramp br s1b l1) l2))

    (= s2 s1a)
    (= s1a (IntImm32 1))
    (= lhs-inner-offset 1)
    (= 0 (% l2 32))
    (= 0 (% l2 8))
) (
    (let new-l2 (/ l2 32))
    (let new-l3 (/ l2 8))
    (let new-l1 (+ l1 (* lhs-inner-offset new-l2)))
    (let new-tot-lanes (* (* new-l1 new-l2) new-l3))
    (let new-lhs-index
        (Ramp 
            (Broadcast 
                (Ramp bl s1a new-l1)
                new-l2)
            (Broadcast (IntImm32 new-l2) (* new-l1 new-l2))
            new-l3)
    )
    (let new-lhs (Load (Float 16 new-tot-lanes) lhs-name new-lhs-index))
    
    (let new-rhs-index 
        (Broadcast 
            (Ramp 
                (Ramp (IntImm32 0) (IntImm32 new-l2) new-l1)
                (Broadcast (IntImm32 1) new-l1)
                new-l2)
            new-l3)
    )
    (let new-rhs-name
        (ExprVar (Mem)
            (Call "ConvolutionShuffle" (Float 16 (* new-l1 new-l2))
                (vec-of (Var (Handle 1) rhs-name) br s1b (IntImm32 l1) (IntImm32 new-l2) (IntImm32 1) (IntImm32 0))
                (Intrinsic))
        )
    )
    (let new-rhs (Load (Float 16 new-tot-lanes) new-rhs-name new-rhs-index))

    (let new-e 
        (Bop (Add)
                (VectorReduce (Float 32 out-lanes) (Add)
                    (Bop (Mul)
                        (Cast (Float 32 new-tot-lanes) new-lhs)
                        (Cast (Float 32 new-tot-lanes) new-rhs))
                )
                mat))

    (union e new-e)
))


;; Downsampling
(rule (
    (= e (Bop (Add)
            (VectorReduce (Float 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float 32 tot-lanes) lhs)
                    (Cast (Float 32 tot-lanes) rhs))
            )
            mat))
    (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))

    (= lhs-index 
        (Ramp 
            (Ramp bl s1a l1)
            (Broadcast s2 l1) 
            l2))
    (= rhs-index 
        (Broadcast (Ramp br s1b l1) l2))

    (= s2 (IntImm32 2))
    (= s1a (IntImm32 1))
    (= lhs-inner-offset 1)
    (= l1 16)
    (= l2 256)
) (
    (let new-l2 8)
    (let new-l3 32)
    (let new-l1 16)
    (let new-tot-lanes (* (* new-l1 new-l2) new-l3))

    ; the rhs index is invariant to both exprs
    (let new-rhs-index
        (Broadcast 
            (Ramp 
                (Ramp (IntImm32 0) (IntImm32 new-l2) new-l1)
                (Broadcast (IntImm32 1) new-l1)
                new-l2)
            new-l3)
    )

    (let new-lhs-index-1
        (Ramp 
            (Broadcast 
                (Ramp bl s1a new-l1)
                new-l2)
            (Broadcast (IntImm32 new-l1) (* new-l1 new-l2))
            new-l3)
    )
    (let new-lhs-index-2
        (Ramp 
            (Broadcast 
                (Ramp (Bop (Add) bl (IntImm32 new-l1)) s1a new-l1)
                new-l2)
            (Broadcast (IntImm32 new-l1) (* new-l1 new-l2))
            new-l3)
    )
    (let new-lhs-1 (Load (Float 16 new-tot-lanes) lhs-name new-lhs-index-1))
    (let new-lhs-2 (Load (Float 16 new-tot-lanes) lhs-name new-lhs-index-2))
    
    (let new-rhs-name-1
        (ExprVar (Mem)
            (Call "ConvolutionShuffle" (Float 16 (* new-l1 new-l2))
                (vec-of (Var (Handle 1) rhs-name) br s1b (IntImm32 16) (IntImm32 8) (IntImm32 2) (IntImm32 0))
                (Intrinsic))
        )
    )
    (let new-rhs-name-2
        (ExprVar (Mem)
            (Call "ConvolutionShuffle" (Float 16 (* new-l1 new-l2))
                (vec-of (Var (Handle 1) rhs-name) br s1b (IntImm32 16) (IntImm32 8) (IntImm32 2) (IntImm32 16))
                (Intrinsic))
        )
    )
    (let new-rhs-1 (Load (Float 16 new-tot-lanes) new-rhs-name-1 new-rhs-index))
    (let new-rhs-2 (Load (Float 16 new-tot-lanes) new-rhs-name-2 new-rhs-index))

    (let new-e-1
        (VectorReduce (Float 32 out-lanes) (Add)
            (Bop (Mul)
                (Cast (Float 32 new-tot-lanes) new-lhs-1)
                (Cast (Float 32 new-tot-lanes) new-rhs-1))
        ))
    (let new-e-2
        (VectorReduce (Float 32 out-lanes) (Add)
            (Bop (Mul)
                (Cast (Float 32 new-tot-lanes) new-lhs-2)
                (Cast (Float 32 new-tot-lanes) new-rhs-2))
        ))
    
    (let new-e (Bop (Add) new-e-1 (Bop (Add) new-e-2 mat)))

    (union e new-e)
))

(rule (
    (= e (Bop (Add)
            (VectorReduce (Float acc-bits out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float acc-bits tot-lanes) lhs)
                    (Cast (Float acc-bits tot-lanes) rhs))
            )
            mat))
    (= out-lanes (* x-lanes y-lanes))
    (= tot-lanes (* out-lanes r-lanes))

    (= lhs (Load (Float 16 tot-lanes) lhs-name lhs-index))
    (= lhs-index
        (Ramp 
            (Broadcast
                (Ramp lhs-base (IntImm32 1) r-lanes)
                x-lanes)
                ; step = 1 means this is actually a convolution
            (Broadcast (IntImm32 1) (* r-lanes x-lanes))
            y-lanes
        )
    )
    
    (= rhs (Load (Float 16 tot-lanes) rhs-name rhs-index))
    (= rhs-index
        (Broadcast (Ramp (Ramp rhs-base (IntImm32 1) r-lanes) 
            (Broadcast x-stride r-lanes)
            x-lanes)
        y-lanes)
    )
) (
    (let new-r-lanes (* r-lanes 2))
    (let new-y-lanes (/ y-lanes r-lanes))
    (let new-x-lanes (* x-lanes r-lanes))

    (let new-tot-lanes ( * (* new-x-lanes new-y-lanes) new-r-lanes))
    (let new-out-lanes (* new-x-lanes new-y-lanes))

    (let new-lhs-index
        (Ramp 
            (Broadcast 
                (Ramp lhs-base (IntImm32 1) new-r-lanes)
                new-x-lanes)
            (Broadcast (IntImm32 r-lanes) (* new-r-lanes new-x-lanes))
            new-y-lanes)
    )
    (let new-lhs (Load (Float 16 new-tot-lanes) lhs-name new-lhs-index)) ;; r-lanes so it's an overlapping load

    (let new-rhs-index
        (Broadcast 
            (Ramp 
                (Ramp (IntImm32 0) (IntImm32 new-x-lanes) new-r-lanes)
                (Broadcast (IntImm32 1) new-r-lanes)
                new-x-lanes)
            new-y-lanes))
    (let new-rhs-name
        (ExprVar (Mem)
            (Call "ConvolutionShuffle+" (Float 16 (* new-r-lanes new-x-lanes))
                (vec-of (Var (Handle 1) rhs-name) rhs-base (IntImm32 1) (IntImm32 r-lanes) (IntImm32 r-lanes) (IntImm32 1) (IntImm32 0) x-stride (IntImm32 x-lanes))
                (Intrinsic))
        )
    )
    (let new-rhs (Load (Float 16 new-tot-lanes) new-rhs-name new-rhs-index))
    (let new-e 
        (Bop (Add)
            (VectorReduce (Float 32 out-lanes) (Add)
                (Bop (Mul)
                    (Cast (Float 32 new-tot-lanes) new-lhs)
                    (Cast (Float 32 new-tot-lanes) new-rhs))
            )
            mat))
    (union e new-e)
))

; 
(let collectstoresplaceholderconvBBBeqsatBBB1 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB10 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB100 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB101 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB102 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB103 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB104 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB105 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB106 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB107 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB108 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB109 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB11 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB110 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 72) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB111 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB112 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB113 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB114 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB115 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB116 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB117 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB118 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB119 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB12 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 1)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB120 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 80) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB121 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB122 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB123 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB124 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB125 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB126 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB127 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB128 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB129 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB13 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB130 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 88) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB131 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB132 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB133 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB134 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB135 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB136 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB137 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB138 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB139 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB14 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB140 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 96) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB141 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB142 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB143 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB144 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB145 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB146 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB147 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB148 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB149 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB15 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB150 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 104) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB151 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB152 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB153 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB154 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB155 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB156 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB157 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB158 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB159 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB16 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB160 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 112) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB161 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB162 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB163 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB164 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB165 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB166 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB167 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB168 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB169 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB17 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB170 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 120) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB171 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB172 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB173 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB174 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB175 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB176 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB177 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB178 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB179 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB18 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB180 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 128) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB181 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB182 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB183 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB184 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB185 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB186 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB187 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB188 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB189 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB19 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB190 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 136) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB191 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB192 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB193 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB194 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB195 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB196 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB197 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB198 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB199 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB2 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB20 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 0) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB200 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 144) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB201 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB202 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB203 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB204 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB205 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB206 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB207 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB208 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB209 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB21 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB210 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 152) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB211 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB212 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB213 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB214 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB215 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB216 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB217 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB218 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB219 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB22 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 1)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB220 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 160) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB221 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB222 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB223 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB224 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB225 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB226 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB227 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB228 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB229 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB23 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB230 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 168) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB231 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB232 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB233 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB234 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB235 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB236 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB237 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB238 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB239 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB24 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB240 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 176) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB241 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB242 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB243 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB244 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB245 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB246 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB247 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB248 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB249 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB25 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB250 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 184) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB251 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB252 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB253 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB254 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB255 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB256 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB257 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB258 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB259 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB26 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB260 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 192) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB261 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB262 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB263 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB264 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB265 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB266 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB267 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB268 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB269 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB27 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB270 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 200) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB271 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB272 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB273 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB274 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB275 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB276 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB277 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB278 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB279 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB28 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB280 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 208) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB281 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 13)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB282 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB283 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB284 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB285 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB286 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB287 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB288 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB289 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB29 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB290 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 216) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB291 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB292 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB293 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB294 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB295 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB296 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB297 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB298 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB299 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB3 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB30 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 8) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB300 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 23)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 224) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB301 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 14)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB302 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB303 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB304 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB305 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB306 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB307 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB308 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB309 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB31 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 1)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB310 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 23)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 232) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB311 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB312 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB313 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB314 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB315 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB316 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB317 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB318 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB319 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 23)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB32 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB320 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 24)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 240) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB321 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 15)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB322 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 16)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB323 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 17)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB324 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 18)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB325 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 19)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB326 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 20)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB327 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 21)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB328 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 22)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB329 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 23)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB33 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB330 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 24)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 248) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB34 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB35 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB36 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB37 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB38 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB39 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB4 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB40 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 16) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB41 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 1)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB42 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB43 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB44 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB45 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB46 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB47 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB48 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB49 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB5 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB50 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 24) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB51 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB52 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB53 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB54 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB55 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB56 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB57 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB58 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB59 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB6 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB60 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 32) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB61 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 2)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB62 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB63 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB64 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB65 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB66 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB67 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB68 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB69 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB7 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB70 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 40) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB71 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB72 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB73 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB74 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB75 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB76 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB77 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB78 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB79 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB8 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB80 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 48) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB81 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 3)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB82 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB83 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB84 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB85 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB86 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB87 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB88 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB89 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB9 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Broadcast (FloatImm 32 0.000000) 256)) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB90 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 8)) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 56) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB91 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 4)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB92 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 5)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB93 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 6)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB94 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 7)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB95 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 8)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB96 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 9)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB97 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 10)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB98 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 11)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconvBBBeqsatBBB99 (Store "conv" (Loc2Loc (Mem) (WMMA_C) (Bop (Add) (VectorReduce (Float 32 256) (Add) (Bop (Mul) (Cast (Float 32 2048) (Load (Float 16 2048) (V "image" ) (Ramp (Broadcast (Ramp (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.x.mmx.base" )) (IntImm 32 2)) (Bop (Mul) (Bop (Add) (Bop (Div) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (IntImm 32 12)) (Var (Int 32 1) (V "image.stride.1" )))) (IntImm 32 1) 8) 4) (Broadcast (IntImm 32 1) 32) 64))) (Broadcast (Cast (Float 32 32) (Load (Float 16 32) (V "kernel_phases" ) (Ramp (Ramp (IntImm 32 64) (IntImm 32 1) 8) (Broadcast (IntImm 32 256) 8) 4))) 64))) (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB331 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 0) (IntImm 32 1) 256))) (Ramp (IntImm 32 0) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB332 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 256) (IntImm 32 1) 256))) (Ramp (IntImm 32 256) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB333 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 512) (IntImm 32 1) 256))) (Ramp (IntImm 32 512) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB334 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 768) (IntImm 32 1) 256))) (Ramp (IntImm 32 768) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB335 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1024) (IntImm 32 1) 256))) (Ramp (IntImm 32 1024) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB336 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1280) (IntImm 32 1) 256))) (Ramp (IntImm 32 1280) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB337 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1536) (IntImm 32 1) 256))) (Ramp (IntImm 32 1536) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB338 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 1792) (IntImm 32 1) 256))) (Ramp (IntImm 32 1792) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB339 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2048) (IntImm 32 1) 256))) (Ramp (IntImm 32 2048) (IntImm 32 1) 256)))
(let collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB340 (Store "conv_global_wrapper$0" (Loc2Loc (WMMA_C) (Mem) (Load (Float 32 256) (V "conv" ) (Ramp (IntImm 32 2304) (IntImm 32 1) 256))) (Ramp (IntImm 32 2304) (IntImm 32 1) 256)))
(let collectstoresplaceholderkernel_phasesBBBeqsatBBB0 (Store "kernel_phases" (Load (Float 16 1) (V "kernel" ) (Bop (Sub) (Bop (Add) (Bop (Mul) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel_phases.s0.y" )) (IntImm 32 2)) (Var (Int 32 1) (V "kernel_phases.s0.dy" ))) (Var (Int 32 1) (V "kernel.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel_phases.s0.x" )) (IntImm 32 2)) (Var (Int 32 1) (V "kernel_phases.s0.dx" )))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel.min.1" )) (Var (Int 32 1) (V "kernel.stride.1" ))) (Var (Int 32 1) (V "kernel.min.0" ))))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel_phases.s0.dy" )) (IntImm 32 512)) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel_phases.s0.dx" )) (IntImm 32 256)) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "kernel_phases.s0.y" )) (IntImm 32 16)) (Var (Int 32 1) (V "kernel_phases.s0.x" )))))))
(let collectstoresplaceholderoutputBBBeqsatBBB341 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB342 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 4)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB343 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 1)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB344 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 6)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 1)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB345 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 256)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB346 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 260)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 2)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB347 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 258)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 3)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB348 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 262)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 3)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB349 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 512)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB350 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 516)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB351 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 514)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 5)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB352 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 518)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 5)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB353 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 768)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 6)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB354 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 772)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 6)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB355 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 770)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 7)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB356 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 774)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 7)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB357 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1024)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 8)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB358 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1028)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 8)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB359 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1026)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 9)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB360 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1030)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 9)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB361 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1280)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 10)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB362 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1284)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 10)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB363 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1282)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 11)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB364 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1286)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 11)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB365 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1536)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 12)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB366 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1540)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 12)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB367 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1538)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 13)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB368 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1542)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 13)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB369 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1792)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 14)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB370 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1796)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 14)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB371 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1794)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 15)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB372 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 1798)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 15)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB373 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2048)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 16)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB374 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2052)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 16)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB375 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2050)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 17)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB376 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2054)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 17)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB377 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2304)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 18)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB378 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2308)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 18)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB379 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2306)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 19)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 1) 2)))
(let collectstoresplaceholderoutputBBBeqsatBBB380 (Store "output" (Load (Float 32 2) (V "conv_global_wrapper$0" ) (Ramp (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 8)) (IntImm 32 2310)) (IntImm 32 1) 2)) (Ramp (Bop (Add) (Bop (Add) (Bop (Mul) (Bop (Add) (Var (Int 32 1) (V "output.s0.y.mmy.base" )) (IntImm 32 19)) (Var (Int 32 1) (V "output.stride.1" ))) (Bop (Add) (Bop (Mul) (Var (Int 32 1) (V "output.s0.x.mmx.mmx.mmx.thread_id_x" )) (IntImm 32 4)) (Var (Int 32 1) (V "output.s0.x.mmx.base" )))) (IntImm 32 2)) (IntImm 32 1) 2)))




(run-schedule 
    (repeat 20
        (saturate (run typechecking))
        (run)
        (run amx)))
; ;; These are not currently used
; (run-schedule (repeat 15 
;     (saturate (run typechecking))
;     (run push-down-vector-reduce)))

; ; (keep-best "collectstoresplaceholderconvBBBeqsatBBB1" "collectstoresplaceholderconvBBBeqsatBBB10" "collectstoresplaceholderconvBBBeqsatBBB100" "collectstoresplaceholderconvBBBeqsatBBB101" "collectstoresplaceholderconvBBBeqsatBBB102" "collectstoresplaceholderconvBBBeqsatBBB103" "collectstoresplaceholderconvBBBeqsatBBB104" "collectstoresplaceholderconvBBBeqsatBBB105" "collectstoresplaceholderconvBBBeqsatBBB106" "collectstoresplaceholderconvBBBeqsatBBB107" "collectstoresplaceholderconvBBBeqsatBBB108" "collectstoresplaceholderconvBBBeqsatBBB109" "collectstoresplaceholderconvBBBeqsatBBB11" "collectstoresplaceholderconvBBBeqsatBBB110" "collectstoresplaceholderconvBBBeqsatBBB111" "collectstoresplaceholderconvBBBeqsatBBB112" "collectstoresplaceholderconvBBBeqsatBBB113" "collectstoresplaceholderconvBBBeqsatBBB114" "collectstoresplaceholderconvBBBeqsatBBB115" "collectstoresplaceholderconvBBBeqsatBBB116" "collectstoresplaceholderconvBBBeqsatBBB117" "collectstoresplaceholderconvBBBeqsatBBB118" "collectstoresplaceholderconvBBBeqsatBBB119" "collectstoresplaceholderconvBBBeqsatBBB12" "collectstoresplaceholderconvBBBeqsatBBB120" "collectstoresplaceholderconvBBBeqsatBBB121" "collectstoresplaceholderconvBBBeqsatBBB122" "collectstoresplaceholderconvBBBeqsatBBB123" "collectstoresplaceholderconvBBBeqsatBBB124" "collectstoresplaceholderconvBBBeqsatBBB125" "collectstoresplaceholderconvBBBeqsatBBB126" "collectstoresplaceholderconvBBBeqsatBBB127" "collectstoresplaceholderconvBBBeqsatBBB128" "collectstoresplaceholderconvBBBeqsatBBB129" "collectstoresplaceholderconvBBBeqsatBBB13" "collectstoresplaceholderconvBBBeqsatBBB130" "collectstoresplaceholderconvBBBeqsatBBB131" "collectstoresplaceholderconvBBBeqsatBBB132" "collectstoresplaceholderconvBBBeqsatBBB133" "collectstoresplaceholderconvBBBeqsatBBB134" "collectstoresplaceholderconvBBBeqsatBBB135" "collectstoresplaceholderconvBBBeqsatBBB136" "collectstoresplaceholderconvBBBeqsatBBB137" "collectstoresplaceholderconvBBBeqsatBBB138" "collectstoresplaceholderconvBBBeqsatBBB139" "collectstoresplaceholderconvBBBeqsatBBB14" "collectstoresplaceholderconvBBBeqsatBBB140" "collectstoresplaceholderconvBBBeqsatBBB141" "collectstoresplaceholderconvBBBeqsatBBB142" "collectstoresplaceholderconvBBBeqsatBBB143" "collectstoresplaceholderconvBBBeqsatBBB144" "collectstoresplaceholderconvBBBeqsatBBB145" "collectstoresplaceholderconvBBBeqsatBBB146" "collectstoresplaceholderconvBBBeqsatBBB147" "collectstoresplaceholderconvBBBeqsatBBB148" "collectstoresplaceholderconvBBBeqsatBBB149" "collectstoresplaceholderconvBBBeqsatBBB15" "collectstoresplaceholderconvBBBeqsatBBB150" "collectstoresplaceholderconvBBBeqsatBBB151" "collectstoresplaceholderconvBBBeqsatBBB152" "collectstoresplaceholderconvBBBeqsatBBB153" "collectstoresplaceholderconvBBBeqsatBBB154" "collectstoresplaceholderconvBBBeqsatBBB155" "collectstoresplaceholderconvBBBeqsatBBB156" "collectstoresplaceholderconvBBBeqsatBBB157" "collectstoresplaceholderconvBBBeqsatBBB158" "collectstoresplaceholderconvBBBeqsatBBB159" "collectstoresplaceholderconvBBBeqsatBBB16" "collectstoresplaceholderconvBBBeqsatBBB160" "collectstoresplaceholderconvBBBeqsatBBB161" "collectstoresplaceholderconvBBBeqsatBBB162" "collectstoresplaceholderconvBBBeqsatBBB163" "collectstoresplaceholderconvBBBeqsatBBB164" "collectstoresplaceholderconvBBBeqsatBBB165" "collectstoresplaceholderconvBBBeqsatBBB166" "collectstoresplaceholderconvBBBeqsatBBB167" "collectstoresplaceholderconvBBBeqsatBBB168" "collectstoresplaceholderconvBBBeqsatBBB169" "collectstoresplaceholderconvBBBeqsatBBB17" "collectstoresplaceholderconvBBBeqsatBBB170" "collectstoresplaceholderconvBBBeqsatBBB171" "collectstoresplaceholderconvBBBeqsatBBB172" "collectstoresplaceholderconvBBBeqsatBBB173" "collectstoresplaceholderconvBBBeqsatBBB174" "collectstoresplaceholderconvBBBeqsatBBB175" "collectstoresplaceholderconvBBBeqsatBBB176" "collectstoresplaceholderconvBBBeqsatBBB177" "collectstoresplaceholderconvBBBeqsatBBB178" "collectstoresplaceholderconvBBBeqsatBBB179" "collectstoresplaceholderconvBBBeqsatBBB18" "collectstoresplaceholderconvBBBeqsatBBB180" "collectstoresplaceholderconvBBBeqsatBBB181" "collectstoresplaceholderconvBBBeqsatBBB182" "collectstoresplaceholderconvBBBeqsatBBB183" "collectstoresplaceholderconvBBBeqsatBBB184" "collectstoresplaceholderconvBBBeqsatBBB185" "collectstoresplaceholderconvBBBeqsatBBB186" "collectstoresplaceholderconvBBBeqsatBBB187" "collectstoresplaceholderconvBBBeqsatBBB188" "collectstoresplaceholderconvBBBeqsatBBB189" "collectstoresplaceholderconvBBBeqsatBBB19" "collectstoresplaceholderconvBBBeqsatBBB190" "collectstoresplaceholderconvBBBeqsatBBB191" "collectstoresplaceholderconvBBBeqsatBBB192" "collectstoresplaceholderconvBBBeqsatBBB193" "collectstoresplaceholderconvBBBeqsatBBB194" "collectstoresplaceholderconvBBBeqsatBBB195" "collectstoresplaceholderconvBBBeqsatBBB196" "collectstoresplaceholderconvBBBeqsatBBB197" "collectstoresplaceholderconvBBBeqsatBBB198" "collectstoresplaceholderconvBBBeqsatBBB199" "collectstoresplaceholderconvBBBeqsatBBB2" "collectstoresplaceholderconvBBBeqsatBBB20" "collectstoresplaceholderconvBBBeqsatBBB200" "collectstoresplaceholderconvBBBeqsatBBB201" "collectstoresplaceholderconvBBBeqsatBBB202" "collectstoresplaceholderconvBBBeqsatBBB203" "collectstoresplaceholderconvBBBeqsatBBB204" "collectstoresplaceholderconvBBBeqsatBBB205" "collectstoresplaceholderconvBBBeqsatBBB206" "collectstoresplaceholderconvBBBeqsatBBB207" "collectstoresplaceholderconvBBBeqsatBBB208" "collectstoresplaceholderconvBBBeqsatBBB209" "collectstoresplaceholderconvBBBeqsatBBB21" "collectstoresplaceholderconvBBBeqsatBBB210" "collectstoresplaceholderconvBBBeqsatBBB211" "collectstoresplaceholderconvBBBeqsatBBB212" "collectstoresplaceholderconvBBBeqsatBBB213" "collectstoresplaceholderconvBBBeqsatBBB214" "collectstoresplaceholderconvBBBeqsatBBB215" "collectstoresplaceholderconvBBBeqsatBBB216" "collectstoresplaceholderconvBBBeqsatBBB217" "collectstoresplaceholderconvBBBeqsatBBB218" "collectstoresplaceholderconvBBBeqsatBBB219" "collectstoresplaceholderconvBBBeqsatBBB22" "collectstoresplaceholderconvBBBeqsatBBB220" "collectstoresplaceholderconvBBBeqsatBBB221" "collectstoresplaceholderconvBBBeqsatBBB222" "collectstoresplaceholderconvBBBeqsatBBB223" "collectstoresplaceholderconvBBBeqsatBBB224" "collectstoresplaceholderconvBBBeqsatBBB225" "collectstoresplaceholderconvBBBeqsatBBB226" "collectstoresplaceholderconvBBBeqsatBBB227" "collectstoresplaceholderconvBBBeqsatBBB228" "collectstoresplaceholderconvBBBeqsatBBB229" "collectstoresplaceholderconvBBBeqsatBBB23" "collectstoresplaceholderconvBBBeqsatBBB230" "collectstoresplaceholderconvBBBeqsatBBB231" "collectstoresplaceholderconvBBBeqsatBBB232" "collectstoresplaceholderconvBBBeqsatBBB233" "collectstoresplaceholderconvBBBeqsatBBB234" "collectstoresplaceholderconvBBBeqsatBBB235" "collectstoresplaceholderconvBBBeqsatBBB236" "collectstoresplaceholderconvBBBeqsatBBB237" "collectstoresplaceholderconvBBBeqsatBBB238" "collectstoresplaceholderconvBBBeqsatBBB239" "collectstoresplaceholderconvBBBeqsatBBB24" "collectstoresplaceholderconvBBBeqsatBBB240" "collectstoresplaceholderconvBBBeqsatBBB241" "collectstoresplaceholderconvBBBeqsatBBB242" "collectstoresplaceholderconvBBBeqsatBBB243" "collectstoresplaceholderconvBBBeqsatBBB244" "collectstoresplaceholderconvBBBeqsatBBB245" "collectstoresplaceholderconvBBBeqsatBBB246" "collectstoresplaceholderconvBBBeqsatBBB247" "collectstoresplaceholderconvBBBeqsatBBB248" "collectstoresplaceholderconvBBBeqsatBBB249" "collectstoresplaceholderconvBBBeqsatBBB25" "collectstoresplaceholderconvBBBeqsatBBB250" "collectstoresplaceholderconvBBBeqsatBBB251" "collectstoresplaceholderconvBBBeqsatBBB252" "collectstoresplaceholderconvBBBeqsatBBB253" "collectstoresplaceholderconvBBBeqsatBBB254" "collectstoresplaceholderconvBBBeqsatBBB255" "collectstoresplaceholderconvBBBeqsatBBB256" "collectstoresplaceholderconvBBBeqsatBBB257" "collectstoresplaceholderconvBBBeqsatBBB258" "collectstoresplaceholderconvBBBeqsatBBB259" "collectstoresplaceholderconvBBBeqsatBBB26" "collectstoresplaceholderconvBBBeqsatBBB260" "collectstoresplaceholderconvBBBeqsatBBB261" "collectstoresplaceholderconvBBBeqsatBBB262" "collectstoresplaceholderconvBBBeqsatBBB263" "collectstoresplaceholderconvBBBeqsatBBB264" "collectstoresplaceholderconvBBBeqsatBBB265" "collectstoresplaceholderconvBBBeqsatBBB266" "collectstoresplaceholderconvBBBeqsatBBB267" "collectstoresplaceholderconvBBBeqsatBBB268" "collectstoresplaceholderconvBBBeqsatBBB269" "collectstoresplaceholderconvBBBeqsatBBB27" "collectstoresplaceholderconvBBBeqsatBBB270" "collectstoresplaceholderconvBBBeqsatBBB271" "collectstoresplaceholderconvBBBeqsatBBB272" "collectstoresplaceholderconvBBBeqsatBBB273" "collectstoresplaceholderconvBBBeqsatBBB274" "collectstoresplaceholderconvBBBeqsatBBB275" "collectstoresplaceholderconvBBBeqsatBBB276" "collectstoresplaceholderconvBBBeqsatBBB277" "collectstoresplaceholderconvBBBeqsatBBB278" "collectstoresplaceholderconvBBBeqsatBBB279" "collectstoresplaceholderconvBBBeqsatBBB28" "collectstoresplaceholderconvBBBeqsatBBB280" "collectstoresplaceholderconvBBBeqsatBBB281" "collectstoresplaceholderconvBBBeqsatBBB282" "collectstoresplaceholderconvBBBeqsatBBB283" "collectstoresplaceholderconvBBBeqsatBBB284" "collectstoresplaceholderconvBBBeqsatBBB285" "collectstoresplaceholderconvBBBeqsatBBB286" "collectstoresplaceholderconvBBBeqsatBBB287" "collectstoresplaceholderconvBBBeqsatBBB288" "collectstoresplaceholderconvBBBeqsatBBB289" "collectstoresplaceholderconvBBBeqsatBBB29" "collectstoresplaceholderconvBBBeqsatBBB290" "collectstoresplaceholderconvBBBeqsatBBB291" "collectstoresplaceholderconvBBBeqsatBBB292" "collectstoresplaceholderconvBBBeqsatBBB293" "collectstoresplaceholderconvBBBeqsatBBB294" "collectstoresplaceholderconvBBBeqsatBBB295" "collectstoresplaceholderconvBBBeqsatBBB296" "collectstoresplaceholderconvBBBeqsatBBB297" "collectstoresplaceholderconvBBBeqsatBBB298" "collectstoresplaceholderconvBBBeqsatBBB299" "collectstoresplaceholderconvBBBeqsatBBB3" "collectstoresplaceholderconvBBBeqsatBBB30" "collectstoresplaceholderconvBBBeqsatBBB300" "collectstoresplaceholderconvBBBeqsatBBB301" "collectstoresplaceholderconvBBBeqsatBBB302" "collectstoresplaceholderconvBBBeqsatBBB303" "collectstoresplaceholderconvBBBeqsatBBB304" "collectstoresplaceholderconvBBBeqsatBBB305" "collectstoresplaceholderconvBBBeqsatBBB306" "collectstoresplaceholderconvBBBeqsatBBB307" "collectstoresplaceholderconvBBBeqsatBBB308" "collectstoresplaceholderconvBBBeqsatBBB309" "collectstoresplaceholderconvBBBeqsatBBB31" "collectstoresplaceholderconvBBBeqsatBBB310" "collectstoresplaceholderconvBBBeqsatBBB311" "collectstoresplaceholderconvBBBeqsatBBB312" "collectstoresplaceholderconvBBBeqsatBBB313" "collectstoresplaceholderconvBBBeqsatBBB314" "collectstoresplaceholderconvBBBeqsatBBB315" "collectstoresplaceholderconvBBBeqsatBBB316" "collectstoresplaceholderconvBBBeqsatBBB317" "collectstoresplaceholderconvBBBeqsatBBB318" "collectstoresplaceholderconvBBBeqsatBBB319" "collectstoresplaceholderconvBBBeqsatBBB32" "collectstoresplaceholderconvBBBeqsatBBB320" "collectstoresplaceholderconvBBBeqsatBBB321" "collectstoresplaceholderconvBBBeqsatBBB322" "collectstoresplaceholderconvBBBeqsatBBB323" "collectstoresplaceholderconvBBBeqsatBBB324" "collectstoresplaceholderconvBBBeqsatBBB325" "collectstoresplaceholderconvBBBeqsatBBB326" "collectstoresplaceholderconvBBBeqsatBBB327" "collectstoresplaceholderconvBBBeqsatBBB328" "collectstoresplaceholderconvBBBeqsatBBB329" "collectstoresplaceholderconvBBBeqsatBBB33" "collectstoresplaceholderconvBBBeqsatBBB330" "collectstoresplaceholderconvBBBeqsatBBB34" "collectstoresplaceholderconvBBBeqsatBBB35" "collectstoresplaceholderconvBBBeqsatBBB36" "collectstoresplaceholderconvBBBeqsatBBB37" "collectstoresplaceholderconvBBBeqsatBBB38" "collectstoresplaceholderconvBBBeqsatBBB39" "collectstoresplaceholderconvBBBeqsatBBB4" "collectstoresplaceholderconvBBBeqsatBBB40" "collectstoresplaceholderconvBBBeqsatBBB41" "collectstoresplaceholderconvBBBeqsatBBB42" "collectstoresplaceholderconvBBBeqsatBBB43" "collectstoresplaceholderconvBBBeqsatBBB44" "collectstoresplaceholderconvBBBeqsatBBB45" "collectstoresplaceholderconvBBBeqsatBBB46" "collectstoresplaceholderconvBBBeqsatBBB47" "collectstoresplaceholderconvBBBeqsatBBB48" "collectstoresplaceholderconvBBBeqsatBBB49" "collectstoresplaceholderconvBBBeqsatBBB5" "collectstoresplaceholderconvBBBeqsatBBB50" "collectstoresplaceholderconvBBBeqsatBBB51" "collectstoresplaceholderconvBBBeqsatBBB52" "collectstoresplaceholderconvBBBeqsatBBB53" "collectstoresplaceholderconvBBBeqsatBBB54" "collectstoresplaceholderconvBBBeqsatBBB55" "collectstoresplaceholderconvBBBeqsatBBB56" "collectstoresplaceholderconvBBBeqsatBBB57" "collectstoresplaceholderconvBBBeqsatBBB58" "collectstoresplaceholderconvBBBeqsatBBB59" "collectstoresplaceholderconvBBBeqsatBBB6" "collectstoresplaceholderconvBBBeqsatBBB60" "collectstoresplaceholderconvBBBeqsatBBB61" "collectstoresplaceholderconvBBBeqsatBBB62" "collectstoresplaceholderconvBBBeqsatBBB63" "collectstoresplaceholderconvBBBeqsatBBB64" "collectstoresplaceholderconvBBBeqsatBBB65" "collectstoresplaceholderconvBBBeqsatBBB66" "collectstoresplaceholderconvBBBeqsatBBB67" "collectstoresplaceholderconvBBBeqsatBBB68" "collectstoresplaceholderconvBBBeqsatBBB69" "collectstoresplaceholderconvBBBeqsatBBB7" "collectstoresplaceholderconvBBBeqsatBBB70" "collectstoresplaceholderconvBBBeqsatBBB71" "collectstoresplaceholderconvBBBeqsatBBB72" "collectstoresplaceholderconvBBBeqsatBBB73" "collectstoresplaceholderconvBBBeqsatBBB74" "collectstoresplaceholderconvBBBeqsatBBB75" "collectstoresplaceholderconvBBBeqsatBBB76" "collectstoresplaceholderconvBBBeqsatBBB77" "collectstoresplaceholderconvBBBeqsatBBB78" "collectstoresplaceholderconvBBBeqsatBBB79" "collectstoresplaceholderconvBBBeqsatBBB8" "collectstoresplaceholderconvBBBeqsatBBB80" "collectstoresplaceholderconvBBBeqsatBBB81" "collectstoresplaceholderconvBBBeqsatBBB82" "collectstoresplaceholderconvBBBeqsatBBB83" "collectstoresplaceholderconvBBBeqsatBBB84" "collectstoresplaceholderconvBBBeqsatBBB85" "collectstoresplaceholderconvBBBeqsatBBB86" "collectstoresplaceholderconvBBBeqsatBBB87" "collectstoresplaceholderconvBBBeqsatBBB88" "collectstoresplaceholderconvBBBeqsatBBB89" "collectstoresplaceholderconvBBBeqsatBBB9" "collectstoresplaceholderconvBBBeqsatBBB90" "collectstoresplaceholderconvBBBeqsatBBB91" "collectstoresplaceholderconvBBBeqsatBBB92" "collectstoresplaceholderconvBBBeqsatBBB93" "collectstoresplaceholderconvBBBeqsatBBB94" "collectstoresplaceholderconvBBBeqsatBBB95" "collectstoresplaceholderconvBBBeqsatBBB96" "collectstoresplaceholderconvBBBeqsatBBB97" "collectstoresplaceholderconvBBBeqsatBBB98" "collectstoresplaceholderconvBBBeqsatBBB99" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB331" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB332" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB333" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB334" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB335" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB336" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB337" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB338" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB339" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB340" "collectstoresplaceholderkernel_phasesBBBeqsatBBB0" "collectstoresplaceholderoutputBBBeqsatBBB341" "collectstoresplaceholderoutputBBBeqsatBBB342" "collectstoresplaceholderoutputBBBeqsatBBB343" "collectstoresplaceholderoutputBBBeqsatBBB344" "collectstoresplaceholderoutputBBBeqsatBBB345" "collectstoresplaceholderoutputBBBeqsatBBB346" "collectstoresplaceholderoutputBBBeqsatBBB347" "collectstoresplaceholderoutputBBBeqsatBBB348" "collectstoresplaceholderoutputBBBeqsatBBB349" "collectstoresplaceholderoutputBBBeqsatBBB350" "collectstoresplaceholderoutputBBBeqsatBBB351" "collectstoresplaceholderoutputBBBeqsatBBB352" "collectstoresplaceholderoutputBBBeqsatBBB353" "collectstoresplaceholderoutputBBBeqsatBBB354" "collectstoresplaceholderoutputBBBeqsatBBB355" "collectstoresplaceholderoutputBBBeqsatBBB356" "collectstoresplaceholderoutputBBBeqsatBBB357" "collectstoresplaceholderoutputBBBeqsatBBB358" "collectstoresplaceholderoutputBBBeqsatBBB359" "collectstoresplaceholderoutputBBBeqsatBBB360" "collectstoresplaceholderoutputBBBeqsatBBB361" "collectstoresplaceholderoutputBBBeqsatBBB362" "collectstoresplaceholderoutputBBBeqsatBBB363" "collectstoresplaceholderoutputBBBeqsatBBB364" "collectstoresplaceholderoutputBBBeqsatBBB365" "collectstoresplaceholderoutputBBBeqsatBBB366" "collectstoresplaceholderoutputBBBeqsatBBB367" "collectstoresplaceholderoutputBBBeqsatBBB368" "collectstoresplaceholderoutputBBBeqsatBBB369" "collectstoresplaceholderoutputBBBeqsatBBB370" "collectstoresplaceholderoutputBBBeqsatBBB371" "collectstoresplaceholderoutputBBBeqsatBBB372" "collectstoresplaceholderoutputBBBeqsatBBB373" "collectstoresplaceholderoutputBBBeqsatBBB374" "collectstoresplaceholderoutputBBBeqsatBBB375" "collectstoresplaceholderoutputBBBeqsatBBB376" "collectstoresplaceholderoutputBBBeqsatBBB377" "collectstoresplaceholderoutputBBBeqsatBBB378" "collectstoresplaceholderoutputBBBeqsatBBB379" "collectstoresplaceholderoutputBBBeqsatBBB380"  "AMXShape" "AMXAllocation" "WMMAShape" "WMMAAllocation" "CommBop" "AddOrSub" "WMMATileA" "WMMATileB" "WMMATileC" "WMMAGEMM" "WMMATileD")

; (run-schedule (repeat 15
;     (saturate (run typechecking))
;     (repeat 1 (run))
;     ))
; (run-schedule (repeat 20
;     (saturate (run typechecking))
;     (repeat 1 (run canonicalize) (run))
;     ))
; (run-schedule (saturate
;     (saturate (run typechecking))
;     (repeat 1 (run assemble))
;     ))
; (run-schedule (repeat 6
;     (saturate (run typechecking))
;     (repeat 1 (run))
;     ))

; (keep-best "collectstoresplaceholderconvBBBeqsatBBB1" "collectstoresplaceholderconvBBBeqsatBBB10" "collectstoresplaceholderconvBBBeqsatBBB100" "collectstoresplaceholderconvBBBeqsatBBB101" "collectstoresplaceholderconvBBBeqsatBBB102" "collectstoresplaceholderconvBBBeqsatBBB103" "collectstoresplaceholderconvBBBeqsatBBB104" "collectstoresplaceholderconvBBBeqsatBBB105" "collectstoresplaceholderconvBBBeqsatBBB106" "collectstoresplaceholderconvBBBeqsatBBB107" "collectstoresplaceholderconvBBBeqsatBBB108" "collectstoresplaceholderconvBBBeqsatBBB109" "collectstoresplaceholderconvBBBeqsatBBB11" "collectstoresplaceholderconvBBBeqsatBBB110" "collectstoresplaceholderconvBBBeqsatBBB111" "collectstoresplaceholderconvBBBeqsatBBB112" "collectstoresplaceholderconvBBBeqsatBBB113" "collectstoresplaceholderconvBBBeqsatBBB114" "collectstoresplaceholderconvBBBeqsatBBB115" "collectstoresplaceholderconvBBBeqsatBBB116" "collectstoresplaceholderconvBBBeqsatBBB117" "collectstoresplaceholderconvBBBeqsatBBB118" "collectstoresplaceholderconvBBBeqsatBBB119" "collectstoresplaceholderconvBBBeqsatBBB12" "collectstoresplaceholderconvBBBeqsatBBB120" "collectstoresplaceholderconvBBBeqsatBBB121" "collectstoresplaceholderconvBBBeqsatBBB122" "collectstoresplaceholderconvBBBeqsatBBB123" "collectstoresplaceholderconvBBBeqsatBBB124" "collectstoresplaceholderconvBBBeqsatBBB125" "collectstoresplaceholderconvBBBeqsatBBB126" "collectstoresplaceholderconvBBBeqsatBBB127" "collectstoresplaceholderconvBBBeqsatBBB128" "collectstoresplaceholderconvBBBeqsatBBB129" "collectstoresplaceholderconvBBBeqsatBBB13" "collectstoresplaceholderconvBBBeqsatBBB130" "collectstoresplaceholderconvBBBeqsatBBB131" "collectstoresplaceholderconvBBBeqsatBBB132" "collectstoresplaceholderconvBBBeqsatBBB133" "collectstoresplaceholderconvBBBeqsatBBB134" "collectstoresplaceholderconvBBBeqsatBBB135" "collectstoresplaceholderconvBBBeqsatBBB136" "collectstoresplaceholderconvBBBeqsatBBB137" "collectstoresplaceholderconvBBBeqsatBBB138" "collectstoresplaceholderconvBBBeqsatBBB139" "collectstoresplaceholderconvBBBeqsatBBB14" "collectstoresplaceholderconvBBBeqsatBBB140" "collectstoresplaceholderconvBBBeqsatBBB141" "collectstoresplaceholderconvBBBeqsatBBB142" "collectstoresplaceholderconvBBBeqsatBBB143" "collectstoresplaceholderconvBBBeqsatBBB144" "collectstoresplaceholderconvBBBeqsatBBB145" "collectstoresplaceholderconvBBBeqsatBBB146" "collectstoresplaceholderconvBBBeqsatBBB147" "collectstoresplaceholderconvBBBeqsatBBB148" "collectstoresplaceholderconvBBBeqsatBBB149" "collectstoresplaceholderconvBBBeqsatBBB15" "collectstoresplaceholderconvBBBeqsatBBB150" "collectstoresplaceholderconvBBBeqsatBBB151" "collectstoresplaceholderconvBBBeqsatBBB152" "collectstoresplaceholderconvBBBeqsatBBB153" "collectstoresplaceholderconvBBBeqsatBBB154" "collectstoresplaceholderconvBBBeqsatBBB155" "collectstoresplaceholderconvBBBeqsatBBB156" "collectstoresplaceholderconvBBBeqsatBBB157" "collectstoresplaceholderconvBBBeqsatBBB158" "collectstoresplaceholderconvBBBeqsatBBB159" "collectstoresplaceholderconvBBBeqsatBBB16" "collectstoresplaceholderconvBBBeqsatBBB160" "collectstoresplaceholderconvBBBeqsatBBB161" "collectstoresplaceholderconvBBBeqsatBBB162" "collectstoresplaceholderconvBBBeqsatBBB163" "collectstoresplaceholderconvBBBeqsatBBB164" "collectstoresplaceholderconvBBBeqsatBBB165" "collectstoresplaceholderconvBBBeqsatBBB166" "collectstoresplaceholderconvBBBeqsatBBB167" "collectstoresplaceholderconvBBBeqsatBBB168" "collectstoresplaceholderconvBBBeqsatBBB169" "collectstoresplaceholderconvBBBeqsatBBB17" "collectstoresplaceholderconvBBBeqsatBBB170" "collectstoresplaceholderconvBBBeqsatBBB171" "collectstoresplaceholderconvBBBeqsatBBB172" "collectstoresplaceholderconvBBBeqsatBBB173" "collectstoresplaceholderconvBBBeqsatBBB174" "collectstoresplaceholderconvBBBeqsatBBB175" "collectstoresplaceholderconvBBBeqsatBBB176" "collectstoresplaceholderconvBBBeqsatBBB177" "collectstoresplaceholderconvBBBeqsatBBB178" "collectstoresplaceholderconvBBBeqsatBBB179" "collectstoresplaceholderconvBBBeqsatBBB18" "collectstoresplaceholderconvBBBeqsatBBB180" "collectstoresplaceholderconvBBBeqsatBBB181" "collectstoresplaceholderconvBBBeqsatBBB182" "collectstoresplaceholderconvBBBeqsatBBB183" "collectstoresplaceholderconvBBBeqsatBBB184" "collectstoresplaceholderconvBBBeqsatBBB185" "collectstoresplaceholderconvBBBeqsatBBB186" "collectstoresplaceholderconvBBBeqsatBBB187" "collectstoresplaceholderconvBBBeqsatBBB188" "collectstoresplaceholderconvBBBeqsatBBB189" "collectstoresplaceholderconvBBBeqsatBBB19" "collectstoresplaceholderconvBBBeqsatBBB190" "collectstoresplaceholderconvBBBeqsatBBB191" "collectstoresplaceholderconvBBBeqsatBBB192" "collectstoresplaceholderconvBBBeqsatBBB193" "collectstoresplaceholderconvBBBeqsatBBB194" "collectstoresplaceholderconvBBBeqsatBBB195" "collectstoresplaceholderconvBBBeqsatBBB196" "collectstoresplaceholderconvBBBeqsatBBB197" "collectstoresplaceholderconvBBBeqsatBBB198" "collectstoresplaceholderconvBBBeqsatBBB199" "collectstoresplaceholderconvBBBeqsatBBB2" "collectstoresplaceholderconvBBBeqsatBBB20" "collectstoresplaceholderconvBBBeqsatBBB200" "collectstoresplaceholderconvBBBeqsatBBB201" "collectstoresplaceholderconvBBBeqsatBBB202" "collectstoresplaceholderconvBBBeqsatBBB203" "collectstoresplaceholderconvBBBeqsatBBB204" "collectstoresplaceholderconvBBBeqsatBBB205" "collectstoresplaceholderconvBBBeqsatBBB206" "collectstoresplaceholderconvBBBeqsatBBB207" "collectstoresplaceholderconvBBBeqsatBBB208" "collectstoresplaceholderconvBBBeqsatBBB209" "collectstoresplaceholderconvBBBeqsatBBB21" "collectstoresplaceholderconvBBBeqsatBBB210" "collectstoresplaceholderconvBBBeqsatBBB211" "collectstoresplaceholderconvBBBeqsatBBB212" "collectstoresplaceholderconvBBBeqsatBBB213" "collectstoresplaceholderconvBBBeqsatBBB214" "collectstoresplaceholderconvBBBeqsatBBB215" "collectstoresplaceholderconvBBBeqsatBBB216" "collectstoresplaceholderconvBBBeqsatBBB217" "collectstoresplaceholderconvBBBeqsatBBB218" "collectstoresplaceholderconvBBBeqsatBBB219" "collectstoresplaceholderconvBBBeqsatBBB22" "collectstoresplaceholderconvBBBeqsatBBB220" "collectstoresplaceholderconvBBBeqsatBBB221" "collectstoresplaceholderconvBBBeqsatBBB222" "collectstoresplaceholderconvBBBeqsatBBB223" "collectstoresplaceholderconvBBBeqsatBBB224" "collectstoresplaceholderconvBBBeqsatBBB225" "collectstoresplaceholderconvBBBeqsatBBB226" "collectstoresplaceholderconvBBBeqsatBBB227" "collectstoresplaceholderconvBBBeqsatBBB228" "collectstoresplaceholderconvBBBeqsatBBB229" "collectstoresplaceholderconvBBBeqsatBBB23" "collectstoresplaceholderconvBBBeqsatBBB230" "collectstoresplaceholderconvBBBeqsatBBB231" "collectstoresplaceholderconvBBBeqsatBBB232" "collectstoresplaceholderconvBBBeqsatBBB233" "collectstoresplaceholderconvBBBeqsatBBB234" "collectstoresplaceholderconvBBBeqsatBBB235" "collectstoresplaceholderconvBBBeqsatBBB236" "collectstoresplaceholderconvBBBeqsatBBB237" "collectstoresplaceholderconvBBBeqsatBBB238" "collectstoresplaceholderconvBBBeqsatBBB239" "collectstoresplaceholderconvBBBeqsatBBB24" "collectstoresplaceholderconvBBBeqsatBBB240" "collectstoresplaceholderconvBBBeqsatBBB241" "collectstoresplaceholderconvBBBeqsatBBB242" "collectstoresplaceholderconvBBBeqsatBBB243" "collectstoresplaceholderconvBBBeqsatBBB244" "collectstoresplaceholderconvBBBeqsatBBB245" "collectstoresplaceholderconvBBBeqsatBBB246" "collectstoresplaceholderconvBBBeqsatBBB247" "collectstoresplaceholderconvBBBeqsatBBB248" "collectstoresplaceholderconvBBBeqsatBBB249" "collectstoresplaceholderconvBBBeqsatBBB25" "collectstoresplaceholderconvBBBeqsatBBB250" "collectstoresplaceholderconvBBBeqsatBBB251" "collectstoresplaceholderconvBBBeqsatBBB252" "collectstoresplaceholderconvBBBeqsatBBB253" "collectstoresplaceholderconvBBBeqsatBBB254" "collectstoresplaceholderconvBBBeqsatBBB255" "collectstoresplaceholderconvBBBeqsatBBB256" "collectstoresplaceholderconvBBBeqsatBBB257" "collectstoresplaceholderconvBBBeqsatBBB258" "collectstoresplaceholderconvBBBeqsatBBB259" "collectstoresplaceholderconvBBBeqsatBBB26" "collectstoresplaceholderconvBBBeqsatBBB260" "collectstoresplaceholderconvBBBeqsatBBB261" "collectstoresplaceholderconvBBBeqsatBBB262" "collectstoresplaceholderconvBBBeqsatBBB263" "collectstoresplaceholderconvBBBeqsatBBB264" "collectstoresplaceholderconvBBBeqsatBBB265" "collectstoresplaceholderconvBBBeqsatBBB266" "collectstoresplaceholderconvBBBeqsatBBB267" "collectstoresplaceholderconvBBBeqsatBBB268" "collectstoresplaceholderconvBBBeqsatBBB269" "collectstoresplaceholderconvBBBeqsatBBB27" "collectstoresplaceholderconvBBBeqsatBBB270" "collectstoresplaceholderconvBBBeqsatBBB271" "collectstoresplaceholderconvBBBeqsatBBB272" "collectstoresplaceholderconvBBBeqsatBBB273" "collectstoresplaceholderconvBBBeqsatBBB274" "collectstoresplaceholderconvBBBeqsatBBB275" "collectstoresplaceholderconvBBBeqsatBBB276" "collectstoresplaceholderconvBBBeqsatBBB277" "collectstoresplaceholderconvBBBeqsatBBB278" "collectstoresplaceholderconvBBBeqsatBBB279" "collectstoresplaceholderconvBBBeqsatBBB28" "collectstoresplaceholderconvBBBeqsatBBB280" "collectstoresplaceholderconvBBBeqsatBBB281" "collectstoresplaceholderconvBBBeqsatBBB282" "collectstoresplaceholderconvBBBeqsatBBB283" "collectstoresplaceholderconvBBBeqsatBBB284" "collectstoresplaceholderconvBBBeqsatBBB285" "collectstoresplaceholderconvBBBeqsatBBB286" "collectstoresplaceholderconvBBBeqsatBBB287" "collectstoresplaceholderconvBBBeqsatBBB288" "collectstoresplaceholderconvBBBeqsatBBB289" "collectstoresplaceholderconvBBBeqsatBBB29" "collectstoresplaceholderconvBBBeqsatBBB290" "collectstoresplaceholderconvBBBeqsatBBB291" "collectstoresplaceholderconvBBBeqsatBBB292" "collectstoresplaceholderconvBBBeqsatBBB293" "collectstoresplaceholderconvBBBeqsatBBB294" "collectstoresplaceholderconvBBBeqsatBBB295" "collectstoresplaceholderconvBBBeqsatBBB296" "collectstoresplaceholderconvBBBeqsatBBB297" "collectstoresplaceholderconvBBBeqsatBBB298" "collectstoresplaceholderconvBBBeqsatBBB299" "collectstoresplaceholderconvBBBeqsatBBB3" "collectstoresplaceholderconvBBBeqsatBBB30" "collectstoresplaceholderconvBBBeqsatBBB300" "collectstoresplaceholderconvBBBeqsatBBB301" "collectstoresplaceholderconvBBBeqsatBBB302" "collectstoresplaceholderconvBBBeqsatBBB303" "collectstoresplaceholderconvBBBeqsatBBB304" "collectstoresplaceholderconvBBBeqsatBBB305" "collectstoresplaceholderconvBBBeqsatBBB306" "collectstoresplaceholderconvBBBeqsatBBB307" "collectstoresplaceholderconvBBBeqsatBBB308" "collectstoresplaceholderconvBBBeqsatBBB309" "collectstoresplaceholderconvBBBeqsatBBB31" "collectstoresplaceholderconvBBBeqsatBBB310" "collectstoresplaceholderconvBBBeqsatBBB311" "collectstoresplaceholderconvBBBeqsatBBB312" "collectstoresplaceholderconvBBBeqsatBBB313" "collectstoresplaceholderconvBBBeqsatBBB314" "collectstoresplaceholderconvBBBeqsatBBB315" "collectstoresplaceholderconvBBBeqsatBBB316" "collectstoresplaceholderconvBBBeqsatBBB317" "collectstoresplaceholderconvBBBeqsatBBB318" "collectstoresplaceholderconvBBBeqsatBBB319" "collectstoresplaceholderconvBBBeqsatBBB32" "collectstoresplaceholderconvBBBeqsatBBB320" "collectstoresplaceholderconvBBBeqsatBBB321" "collectstoresplaceholderconvBBBeqsatBBB322" "collectstoresplaceholderconvBBBeqsatBBB323" "collectstoresplaceholderconvBBBeqsatBBB324" "collectstoresplaceholderconvBBBeqsatBBB325" "collectstoresplaceholderconvBBBeqsatBBB326" "collectstoresplaceholderconvBBBeqsatBBB327" "collectstoresplaceholderconvBBBeqsatBBB328" "collectstoresplaceholderconvBBBeqsatBBB329" "collectstoresplaceholderconvBBBeqsatBBB33" "collectstoresplaceholderconvBBBeqsatBBB330" "collectstoresplaceholderconvBBBeqsatBBB34" "collectstoresplaceholderconvBBBeqsatBBB35" "collectstoresplaceholderconvBBBeqsatBBB36" "collectstoresplaceholderconvBBBeqsatBBB37" "collectstoresplaceholderconvBBBeqsatBBB38" "collectstoresplaceholderconvBBBeqsatBBB39" "collectstoresplaceholderconvBBBeqsatBBB4" "collectstoresplaceholderconvBBBeqsatBBB40" "collectstoresplaceholderconvBBBeqsatBBB41" "collectstoresplaceholderconvBBBeqsatBBB42" "collectstoresplaceholderconvBBBeqsatBBB43" "collectstoresplaceholderconvBBBeqsatBBB44" "collectstoresplaceholderconvBBBeqsatBBB45" "collectstoresplaceholderconvBBBeqsatBBB46" "collectstoresplaceholderconvBBBeqsatBBB47" "collectstoresplaceholderconvBBBeqsatBBB48" "collectstoresplaceholderconvBBBeqsatBBB49" "collectstoresplaceholderconvBBBeqsatBBB5" "collectstoresplaceholderconvBBBeqsatBBB50" "collectstoresplaceholderconvBBBeqsatBBB51" "collectstoresplaceholderconvBBBeqsatBBB52" "collectstoresplaceholderconvBBBeqsatBBB53" "collectstoresplaceholderconvBBBeqsatBBB54" "collectstoresplaceholderconvBBBeqsatBBB55" "collectstoresplaceholderconvBBBeqsatBBB56" "collectstoresplaceholderconvBBBeqsatBBB57" "collectstoresplaceholderconvBBBeqsatBBB58" "collectstoresplaceholderconvBBBeqsatBBB59" "collectstoresplaceholderconvBBBeqsatBBB6" "collectstoresplaceholderconvBBBeqsatBBB60" "collectstoresplaceholderconvBBBeqsatBBB61" "collectstoresplaceholderconvBBBeqsatBBB62" "collectstoresplaceholderconvBBBeqsatBBB63" "collectstoresplaceholderconvBBBeqsatBBB64" "collectstoresplaceholderconvBBBeqsatBBB65" "collectstoresplaceholderconvBBBeqsatBBB66" "collectstoresplaceholderconvBBBeqsatBBB67" "collectstoresplaceholderconvBBBeqsatBBB68" "collectstoresplaceholderconvBBBeqsatBBB69" "collectstoresplaceholderconvBBBeqsatBBB7" "collectstoresplaceholderconvBBBeqsatBBB70" "collectstoresplaceholderconvBBBeqsatBBB71" "collectstoresplaceholderconvBBBeqsatBBB72" "collectstoresplaceholderconvBBBeqsatBBB73" "collectstoresplaceholderconvBBBeqsatBBB74" "collectstoresplaceholderconvBBBeqsatBBB75" "collectstoresplaceholderconvBBBeqsatBBB76" "collectstoresplaceholderconvBBBeqsatBBB77" "collectstoresplaceholderconvBBBeqsatBBB78" "collectstoresplaceholderconvBBBeqsatBBB79" "collectstoresplaceholderconvBBBeqsatBBB8" "collectstoresplaceholderconvBBBeqsatBBB80" "collectstoresplaceholderconvBBBeqsatBBB81" "collectstoresplaceholderconvBBBeqsatBBB82" "collectstoresplaceholderconvBBBeqsatBBB83" "collectstoresplaceholderconvBBBeqsatBBB84" "collectstoresplaceholderconvBBBeqsatBBB85" "collectstoresplaceholderconvBBBeqsatBBB86" "collectstoresplaceholderconvBBBeqsatBBB87" "collectstoresplaceholderconvBBBeqsatBBB88" "collectstoresplaceholderconvBBBeqsatBBB89" "collectstoresplaceholderconvBBBeqsatBBB9" "collectstoresplaceholderconvBBBeqsatBBB90" "collectstoresplaceholderconvBBBeqsatBBB91" "collectstoresplaceholderconvBBBeqsatBBB92" "collectstoresplaceholderconvBBBeqsatBBB93" "collectstoresplaceholderconvBBBeqsatBBB94" "collectstoresplaceholderconvBBBeqsatBBB95" "collectstoresplaceholderconvBBBeqsatBBB96" "collectstoresplaceholderconvBBBeqsatBBB97" "collectstoresplaceholderconvBBBeqsatBBB98" "collectstoresplaceholderconvBBBeqsatBBB99" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB331" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB332" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB333" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB334" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB335" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB336" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB337" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB338" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB339" "collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB340" "collectstoresplaceholderkernel_phasesBBBeqsatBBB0" "collectstoresplaceholderoutputBBBeqsatBBB341" "collectstoresplaceholderoutputBBBeqsatBBB342" "collectstoresplaceholderoutputBBBeqsatBBB343" "collectstoresplaceholderoutputBBBeqsatBBB344" "collectstoresplaceholderoutputBBBeqsatBBB345" "collectstoresplaceholderoutputBBBeqsatBBB346" "collectstoresplaceholderoutputBBBeqsatBBB347" "collectstoresplaceholderoutputBBBeqsatBBB348" "collectstoresplaceholderoutputBBBeqsatBBB349" "collectstoresplaceholderoutputBBBeqsatBBB350" "collectstoresplaceholderoutputBBBeqsatBBB351" "collectstoresplaceholderoutputBBBeqsatBBB352" "collectstoresplaceholderoutputBBBeqsatBBB353" "collectstoresplaceholderoutputBBBeqsatBBB354" "collectstoresplaceholderoutputBBBeqsatBBB355" "collectstoresplaceholderoutputBBBeqsatBBB356" "collectstoresplaceholderoutputBBBeqsatBBB357" "collectstoresplaceholderoutputBBBeqsatBBB358" "collectstoresplaceholderoutputBBBeqsatBBB359" "collectstoresplaceholderoutputBBBeqsatBBB360" "collectstoresplaceholderoutputBBBeqsatBBB361" "collectstoresplaceholderoutputBBBeqsatBBB362" "collectstoresplaceholderoutputBBBeqsatBBB363" "collectstoresplaceholderoutputBBBeqsatBBB364" "collectstoresplaceholderoutputBBBeqsatBBB365" "collectstoresplaceholderoutputBBBeqsatBBB366" "collectstoresplaceholderoutputBBBeqsatBBB367" "collectstoresplaceholderoutputBBBeqsatBBB368" "collectstoresplaceholderoutputBBBeqsatBBB369" "collectstoresplaceholderoutputBBBeqsatBBB370" "collectstoresplaceholderoutputBBBeqsatBBB371" "collectstoresplaceholderoutputBBBeqsatBBB372" "collectstoresplaceholderoutputBBBeqsatBBB373" "collectstoresplaceholderoutputBBBeqsatBBB374" "collectstoresplaceholderoutputBBBeqsatBBB375" "collectstoresplaceholderoutputBBBeqsatBBB376" "collectstoresplaceholderoutputBBBeqsatBBB377" "collectstoresplaceholderoutputBBBeqsatBBB378" "collectstoresplaceholderoutputBBBeqsatBBB379" "collectstoresplaceholderoutputBBBeqsatBBB380"  "AMXShape" "AMXAllocation" "WMMAShape" "WMMAAllocation" "CommBop" "AddOrSub" "WMMATileA" "WMMATileB" "WMMATileC" "WMMAGEMM" "WMMATileD")

; (run-schedule (repeat 8
;     (saturate (run typechecking))
;     (repeat 1 (run))
;     ))


; (ruleset subsume-invalid-exprs)

; 
(extract collectstoresplaceholderconvBBBeqsatBBB1)
(extract collectstoresplaceholderconvBBBeqsatBBB10)
(extract collectstoresplaceholderconvBBBeqsatBBB100)
(extract collectstoresplaceholderconvBBBeqsatBBB101)
(extract collectstoresplaceholderconvBBBeqsatBBB102)
(extract collectstoresplaceholderconvBBBeqsatBBB103)
(extract collectstoresplaceholderconvBBBeqsatBBB104)
(extract collectstoresplaceholderconvBBBeqsatBBB105)
(extract collectstoresplaceholderconvBBBeqsatBBB106)
(extract collectstoresplaceholderconvBBBeqsatBBB107)
(extract collectstoresplaceholderconvBBBeqsatBBB108)
(extract collectstoresplaceholderconvBBBeqsatBBB109)
(extract collectstoresplaceholderconvBBBeqsatBBB11)
(extract collectstoresplaceholderconvBBBeqsatBBB110)
(extract collectstoresplaceholderconvBBBeqsatBBB111)
(extract collectstoresplaceholderconvBBBeqsatBBB112)
(extract collectstoresplaceholderconvBBBeqsatBBB113)
(extract collectstoresplaceholderconvBBBeqsatBBB114)
(extract collectstoresplaceholderconvBBBeqsatBBB115)
(extract collectstoresplaceholderconvBBBeqsatBBB116)
(extract collectstoresplaceholderconvBBBeqsatBBB117)
(extract collectstoresplaceholderconvBBBeqsatBBB118)
(extract collectstoresplaceholderconvBBBeqsatBBB119)
(extract collectstoresplaceholderconvBBBeqsatBBB12)
(extract collectstoresplaceholderconvBBBeqsatBBB120)
(extract collectstoresplaceholderconvBBBeqsatBBB121)
(extract collectstoresplaceholderconvBBBeqsatBBB122)
(extract collectstoresplaceholderconvBBBeqsatBBB123)
(extract collectstoresplaceholderconvBBBeqsatBBB124)
(extract collectstoresplaceholderconvBBBeqsatBBB125)
(extract collectstoresplaceholderconvBBBeqsatBBB126)
(extract collectstoresplaceholderconvBBBeqsatBBB127)
(extract collectstoresplaceholderconvBBBeqsatBBB128)
(extract collectstoresplaceholderconvBBBeqsatBBB129)
(extract collectstoresplaceholderconvBBBeqsatBBB13)
(extract collectstoresplaceholderconvBBBeqsatBBB130)
(extract collectstoresplaceholderconvBBBeqsatBBB131)
(extract collectstoresplaceholderconvBBBeqsatBBB132)
(extract collectstoresplaceholderconvBBBeqsatBBB133)
(extract collectstoresplaceholderconvBBBeqsatBBB134)
(extract collectstoresplaceholderconvBBBeqsatBBB135)
(extract collectstoresplaceholderconvBBBeqsatBBB136)
(extract collectstoresplaceholderconvBBBeqsatBBB137)
(extract collectstoresplaceholderconvBBBeqsatBBB138)
(extract collectstoresplaceholderconvBBBeqsatBBB139)
(extract collectstoresplaceholderconvBBBeqsatBBB14)
(extract collectstoresplaceholderconvBBBeqsatBBB140)
(extract collectstoresplaceholderconvBBBeqsatBBB141)
(extract collectstoresplaceholderconvBBBeqsatBBB142)
(extract collectstoresplaceholderconvBBBeqsatBBB143)
(extract collectstoresplaceholderconvBBBeqsatBBB144)
(extract collectstoresplaceholderconvBBBeqsatBBB145)
(extract collectstoresplaceholderconvBBBeqsatBBB146)
(extract collectstoresplaceholderconvBBBeqsatBBB147)
(extract collectstoresplaceholderconvBBBeqsatBBB148)
(extract collectstoresplaceholderconvBBBeqsatBBB149)
(extract collectstoresplaceholderconvBBBeqsatBBB15)
(extract collectstoresplaceholderconvBBBeqsatBBB150)
(extract collectstoresplaceholderconvBBBeqsatBBB151)
(extract collectstoresplaceholderconvBBBeqsatBBB152)
(extract collectstoresplaceholderconvBBBeqsatBBB153)
(extract collectstoresplaceholderconvBBBeqsatBBB154)
(extract collectstoresplaceholderconvBBBeqsatBBB155)
(extract collectstoresplaceholderconvBBBeqsatBBB156)
(extract collectstoresplaceholderconvBBBeqsatBBB157)
(extract collectstoresplaceholderconvBBBeqsatBBB158)
(extract collectstoresplaceholderconvBBBeqsatBBB159)
(extract collectstoresplaceholderconvBBBeqsatBBB16)
(extract collectstoresplaceholderconvBBBeqsatBBB160)
(extract collectstoresplaceholderconvBBBeqsatBBB161)
(extract collectstoresplaceholderconvBBBeqsatBBB162)
(extract collectstoresplaceholderconvBBBeqsatBBB163)
(extract collectstoresplaceholderconvBBBeqsatBBB164)
(extract collectstoresplaceholderconvBBBeqsatBBB165)
(extract collectstoresplaceholderconvBBBeqsatBBB166)
(extract collectstoresplaceholderconvBBBeqsatBBB167)
(extract collectstoresplaceholderconvBBBeqsatBBB168)
(extract collectstoresplaceholderconvBBBeqsatBBB169)
(extract collectstoresplaceholderconvBBBeqsatBBB17)
(extract collectstoresplaceholderconvBBBeqsatBBB170)
(extract collectstoresplaceholderconvBBBeqsatBBB171)
(extract collectstoresplaceholderconvBBBeqsatBBB172)
(extract collectstoresplaceholderconvBBBeqsatBBB173)
(extract collectstoresplaceholderconvBBBeqsatBBB174)
(extract collectstoresplaceholderconvBBBeqsatBBB175)
(extract collectstoresplaceholderconvBBBeqsatBBB176)
(extract collectstoresplaceholderconvBBBeqsatBBB177)
(extract collectstoresplaceholderconvBBBeqsatBBB178)
(extract collectstoresplaceholderconvBBBeqsatBBB179)
(extract collectstoresplaceholderconvBBBeqsatBBB18)
(extract collectstoresplaceholderconvBBBeqsatBBB180)
(extract collectstoresplaceholderconvBBBeqsatBBB181)
(extract collectstoresplaceholderconvBBBeqsatBBB182)
(extract collectstoresplaceholderconvBBBeqsatBBB183)
(extract collectstoresplaceholderconvBBBeqsatBBB184)
(extract collectstoresplaceholderconvBBBeqsatBBB185)
(extract collectstoresplaceholderconvBBBeqsatBBB186)
(extract collectstoresplaceholderconvBBBeqsatBBB187)
(extract collectstoresplaceholderconvBBBeqsatBBB188)
(extract collectstoresplaceholderconvBBBeqsatBBB189)
(extract collectstoresplaceholderconvBBBeqsatBBB19)
(extract collectstoresplaceholderconvBBBeqsatBBB190)
(extract collectstoresplaceholderconvBBBeqsatBBB191)
(extract collectstoresplaceholderconvBBBeqsatBBB192)
(extract collectstoresplaceholderconvBBBeqsatBBB193)
(extract collectstoresplaceholderconvBBBeqsatBBB194)
(extract collectstoresplaceholderconvBBBeqsatBBB195)
(extract collectstoresplaceholderconvBBBeqsatBBB196)
(extract collectstoresplaceholderconvBBBeqsatBBB197)
(extract collectstoresplaceholderconvBBBeqsatBBB198)
(extract collectstoresplaceholderconvBBBeqsatBBB199)
(extract collectstoresplaceholderconvBBBeqsatBBB2)
(extract collectstoresplaceholderconvBBBeqsatBBB20)
(extract collectstoresplaceholderconvBBBeqsatBBB200)
(extract collectstoresplaceholderconvBBBeqsatBBB201)
(extract collectstoresplaceholderconvBBBeqsatBBB202)
(extract collectstoresplaceholderconvBBBeqsatBBB203)
(extract collectstoresplaceholderconvBBBeqsatBBB204)
(extract collectstoresplaceholderconvBBBeqsatBBB205)
(extract collectstoresplaceholderconvBBBeqsatBBB206)
(extract collectstoresplaceholderconvBBBeqsatBBB207)
(extract collectstoresplaceholderconvBBBeqsatBBB208)
(extract collectstoresplaceholderconvBBBeqsatBBB209)
(extract collectstoresplaceholderconvBBBeqsatBBB21)
(extract collectstoresplaceholderconvBBBeqsatBBB210)
(extract collectstoresplaceholderconvBBBeqsatBBB211)
(extract collectstoresplaceholderconvBBBeqsatBBB212)
(extract collectstoresplaceholderconvBBBeqsatBBB213)
(extract collectstoresplaceholderconvBBBeqsatBBB214)
(extract collectstoresplaceholderconvBBBeqsatBBB215)
(extract collectstoresplaceholderconvBBBeqsatBBB216)
(extract collectstoresplaceholderconvBBBeqsatBBB217)
(extract collectstoresplaceholderconvBBBeqsatBBB218)
(extract collectstoresplaceholderconvBBBeqsatBBB219)
(extract collectstoresplaceholderconvBBBeqsatBBB22)
(extract collectstoresplaceholderconvBBBeqsatBBB220)
(extract collectstoresplaceholderconvBBBeqsatBBB221)
(extract collectstoresplaceholderconvBBBeqsatBBB222)
(extract collectstoresplaceholderconvBBBeqsatBBB223)
(extract collectstoresplaceholderconvBBBeqsatBBB224)
(extract collectstoresplaceholderconvBBBeqsatBBB225)
(extract collectstoresplaceholderconvBBBeqsatBBB226)
(extract collectstoresplaceholderconvBBBeqsatBBB227)
(extract collectstoresplaceholderconvBBBeqsatBBB228)
(extract collectstoresplaceholderconvBBBeqsatBBB229)
(extract collectstoresplaceholderconvBBBeqsatBBB23)
(extract collectstoresplaceholderconvBBBeqsatBBB230)
(extract collectstoresplaceholderconvBBBeqsatBBB231)
(extract collectstoresplaceholderconvBBBeqsatBBB232)
(extract collectstoresplaceholderconvBBBeqsatBBB233)
(extract collectstoresplaceholderconvBBBeqsatBBB234)
(extract collectstoresplaceholderconvBBBeqsatBBB235)
(extract collectstoresplaceholderconvBBBeqsatBBB236)
(extract collectstoresplaceholderconvBBBeqsatBBB237)
(extract collectstoresplaceholderconvBBBeqsatBBB238)
(extract collectstoresplaceholderconvBBBeqsatBBB239)
(extract collectstoresplaceholderconvBBBeqsatBBB24)
(extract collectstoresplaceholderconvBBBeqsatBBB240)
(extract collectstoresplaceholderconvBBBeqsatBBB241)
(extract collectstoresplaceholderconvBBBeqsatBBB242)
(extract collectstoresplaceholderconvBBBeqsatBBB243)
(extract collectstoresplaceholderconvBBBeqsatBBB244)
(extract collectstoresplaceholderconvBBBeqsatBBB245)
(extract collectstoresplaceholderconvBBBeqsatBBB246)
(extract collectstoresplaceholderconvBBBeqsatBBB247)
(extract collectstoresplaceholderconvBBBeqsatBBB248)
(extract collectstoresplaceholderconvBBBeqsatBBB249)
(extract collectstoresplaceholderconvBBBeqsatBBB25)
(extract collectstoresplaceholderconvBBBeqsatBBB250)
(extract collectstoresplaceholderconvBBBeqsatBBB251)
(extract collectstoresplaceholderconvBBBeqsatBBB252)
(extract collectstoresplaceholderconvBBBeqsatBBB253)
(extract collectstoresplaceholderconvBBBeqsatBBB254)
(extract collectstoresplaceholderconvBBBeqsatBBB255)
(extract collectstoresplaceholderconvBBBeqsatBBB256)
(extract collectstoresplaceholderconvBBBeqsatBBB257)
(extract collectstoresplaceholderconvBBBeqsatBBB258)
(extract collectstoresplaceholderconvBBBeqsatBBB259)
(extract collectstoresplaceholderconvBBBeqsatBBB26)
(extract collectstoresplaceholderconvBBBeqsatBBB260)
(extract collectstoresplaceholderconvBBBeqsatBBB261)
(extract collectstoresplaceholderconvBBBeqsatBBB262)
(extract collectstoresplaceholderconvBBBeqsatBBB263)
(extract collectstoresplaceholderconvBBBeqsatBBB264)
(extract collectstoresplaceholderconvBBBeqsatBBB265)
(extract collectstoresplaceholderconvBBBeqsatBBB266)
(extract collectstoresplaceholderconvBBBeqsatBBB267)
(extract collectstoresplaceholderconvBBBeqsatBBB268)
(extract collectstoresplaceholderconvBBBeqsatBBB269)
(extract collectstoresplaceholderconvBBBeqsatBBB27)
(extract collectstoresplaceholderconvBBBeqsatBBB270)
(extract collectstoresplaceholderconvBBBeqsatBBB271)
(extract collectstoresplaceholderconvBBBeqsatBBB272)
(extract collectstoresplaceholderconvBBBeqsatBBB273)
(extract collectstoresplaceholderconvBBBeqsatBBB274)
(extract collectstoresplaceholderconvBBBeqsatBBB275)
(extract collectstoresplaceholderconvBBBeqsatBBB276)
(extract collectstoresplaceholderconvBBBeqsatBBB277)
(extract collectstoresplaceholderconvBBBeqsatBBB278)
(extract collectstoresplaceholderconvBBBeqsatBBB279)
(extract collectstoresplaceholderconvBBBeqsatBBB28)
(extract collectstoresplaceholderconvBBBeqsatBBB280)
(extract collectstoresplaceholderconvBBBeqsatBBB281)
(extract collectstoresplaceholderconvBBBeqsatBBB282)
(extract collectstoresplaceholderconvBBBeqsatBBB283)
(extract collectstoresplaceholderconvBBBeqsatBBB284)
(extract collectstoresplaceholderconvBBBeqsatBBB285)
(extract collectstoresplaceholderconvBBBeqsatBBB286)
(extract collectstoresplaceholderconvBBBeqsatBBB287)
(extract collectstoresplaceholderconvBBBeqsatBBB288)
(extract collectstoresplaceholderconvBBBeqsatBBB289)
(extract collectstoresplaceholderconvBBBeqsatBBB29)
(extract collectstoresplaceholderconvBBBeqsatBBB290)
(extract collectstoresplaceholderconvBBBeqsatBBB291)
(extract collectstoresplaceholderconvBBBeqsatBBB292)
(extract collectstoresplaceholderconvBBBeqsatBBB293)
(extract collectstoresplaceholderconvBBBeqsatBBB294)
(extract collectstoresplaceholderconvBBBeqsatBBB295)
(extract collectstoresplaceholderconvBBBeqsatBBB296)
(extract collectstoresplaceholderconvBBBeqsatBBB297)
(extract collectstoresplaceholderconvBBBeqsatBBB298)
(extract collectstoresplaceholderconvBBBeqsatBBB299)
(extract collectstoresplaceholderconvBBBeqsatBBB3)
(extract collectstoresplaceholderconvBBBeqsatBBB30)
(extract collectstoresplaceholderconvBBBeqsatBBB300)
(extract collectstoresplaceholderconvBBBeqsatBBB301)
(extract collectstoresplaceholderconvBBBeqsatBBB302)
(extract collectstoresplaceholderconvBBBeqsatBBB303)
(extract collectstoresplaceholderconvBBBeqsatBBB304)
(extract collectstoresplaceholderconvBBBeqsatBBB305)
(extract collectstoresplaceholderconvBBBeqsatBBB306)
(extract collectstoresplaceholderconvBBBeqsatBBB307)
(extract collectstoresplaceholderconvBBBeqsatBBB308)
(extract collectstoresplaceholderconvBBBeqsatBBB309)
(extract collectstoresplaceholderconvBBBeqsatBBB31)
(extract collectstoresplaceholderconvBBBeqsatBBB310)
(extract collectstoresplaceholderconvBBBeqsatBBB311)
(extract collectstoresplaceholderconvBBBeqsatBBB312)
(extract collectstoresplaceholderconvBBBeqsatBBB313)
(extract collectstoresplaceholderconvBBBeqsatBBB314)
(extract collectstoresplaceholderconvBBBeqsatBBB315)
(extract collectstoresplaceholderconvBBBeqsatBBB316)
(extract collectstoresplaceholderconvBBBeqsatBBB317)
(extract collectstoresplaceholderconvBBBeqsatBBB318)
(extract collectstoresplaceholderconvBBBeqsatBBB319)
(extract collectstoresplaceholderconvBBBeqsatBBB32)
(extract collectstoresplaceholderconvBBBeqsatBBB320)
(extract collectstoresplaceholderconvBBBeqsatBBB321)
(extract collectstoresplaceholderconvBBBeqsatBBB322)
(extract collectstoresplaceholderconvBBBeqsatBBB323)
(extract collectstoresplaceholderconvBBBeqsatBBB324)
(extract collectstoresplaceholderconvBBBeqsatBBB325)
(extract collectstoresplaceholderconvBBBeqsatBBB326)
(extract collectstoresplaceholderconvBBBeqsatBBB327)
(extract collectstoresplaceholderconvBBBeqsatBBB328)
(extract collectstoresplaceholderconvBBBeqsatBBB329)
(extract collectstoresplaceholderconvBBBeqsatBBB33)
(extract collectstoresplaceholderconvBBBeqsatBBB330)
(extract collectstoresplaceholderconvBBBeqsatBBB34)
(extract collectstoresplaceholderconvBBBeqsatBBB35)
(extract collectstoresplaceholderconvBBBeqsatBBB36)
(extract collectstoresplaceholderconvBBBeqsatBBB37)
(extract collectstoresplaceholderconvBBBeqsatBBB38)
(extract collectstoresplaceholderconvBBBeqsatBBB39)
(extract collectstoresplaceholderconvBBBeqsatBBB4)
(extract collectstoresplaceholderconvBBBeqsatBBB40)
(extract collectstoresplaceholderconvBBBeqsatBBB41)
(extract collectstoresplaceholderconvBBBeqsatBBB42)
(extract collectstoresplaceholderconvBBBeqsatBBB43)
(extract collectstoresplaceholderconvBBBeqsatBBB44)
(extract collectstoresplaceholderconvBBBeqsatBBB45)
(extract collectstoresplaceholderconvBBBeqsatBBB46)
(extract collectstoresplaceholderconvBBBeqsatBBB47)
(extract collectstoresplaceholderconvBBBeqsatBBB48)
(extract collectstoresplaceholderconvBBBeqsatBBB49)
(extract collectstoresplaceholderconvBBBeqsatBBB5)
(extract collectstoresplaceholderconvBBBeqsatBBB50)
(extract collectstoresplaceholderconvBBBeqsatBBB51)
(extract collectstoresplaceholderconvBBBeqsatBBB52)
(extract collectstoresplaceholderconvBBBeqsatBBB53)
(extract collectstoresplaceholderconvBBBeqsatBBB54)
(extract collectstoresplaceholderconvBBBeqsatBBB55)
(extract collectstoresplaceholderconvBBBeqsatBBB56)
(extract collectstoresplaceholderconvBBBeqsatBBB57)
(extract collectstoresplaceholderconvBBBeqsatBBB58)
(extract collectstoresplaceholderconvBBBeqsatBBB59)
(extract collectstoresplaceholderconvBBBeqsatBBB6)
(extract collectstoresplaceholderconvBBBeqsatBBB60)
(extract collectstoresplaceholderconvBBBeqsatBBB61)
(extract collectstoresplaceholderconvBBBeqsatBBB62)
(extract collectstoresplaceholderconvBBBeqsatBBB63)
(extract collectstoresplaceholderconvBBBeqsatBBB64)
(extract collectstoresplaceholderconvBBBeqsatBBB65)
(extract collectstoresplaceholderconvBBBeqsatBBB66)
(extract collectstoresplaceholderconvBBBeqsatBBB67)
(extract collectstoresplaceholderconvBBBeqsatBBB68)
(extract collectstoresplaceholderconvBBBeqsatBBB69)
(extract collectstoresplaceholderconvBBBeqsatBBB7)
(extract collectstoresplaceholderconvBBBeqsatBBB70)
(extract collectstoresplaceholderconvBBBeqsatBBB71)
(extract collectstoresplaceholderconvBBBeqsatBBB72)
(extract collectstoresplaceholderconvBBBeqsatBBB73)
(extract collectstoresplaceholderconvBBBeqsatBBB74)
(extract collectstoresplaceholderconvBBBeqsatBBB75)
(extract collectstoresplaceholderconvBBBeqsatBBB76)
(extract collectstoresplaceholderconvBBBeqsatBBB77)
(extract collectstoresplaceholderconvBBBeqsatBBB78)
(extract collectstoresplaceholderconvBBBeqsatBBB79)
(extract collectstoresplaceholderconvBBBeqsatBBB8)
(extract collectstoresplaceholderconvBBBeqsatBBB80)
(extract collectstoresplaceholderconvBBBeqsatBBB81)
(extract collectstoresplaceholderconvBBBeqsatBBB82)
(extract collectstoresplaceholderconvBBBeqsatBBB83)
(extract collectstoresplaceholderconvBBBeqsatBBB84)
(extract collectstoresplaceholderconvBBBeqsatBBB85)
(extract collectstoresplaceholderconvBBBeqsatBBB86)
(extract collectstoresplaceholderconvBBBeqsatBBB87)
(extract collectstoresplaceholderconvBBBeqsatBBB88)
(extract collectstoresplaceholderconvBBBeqsatBBB89)
(extract collectstoresplaceholderconvBBBeqsatBBB9)
(extract collectstoresplaceholderconvBBBeqsatBBB90)
(extract collectstoresplaceholderconvBBBeqsatBBB91)
(extract collectstoresplaceholderconvBBBeqsatBBB92)
(extract collectstoresplaceholderconvBBBeqsatBBB93)
(extract collectstoresplaceholderconvBBBeqsatBBB94)
(extract collectstoresplaceholderconvBBBeqsatBBB95)
(extract collectstoresplaceholderconvBBBeqsatBBB96)
(extract collectstoresplaceholderconvBBBeqsatBBB97)
(extract collectstoresplaceholderconvBBBeqsatBBB98)
(extract collectstoresplaceholderconvBBBeqsatBBB99)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB331)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB332)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB333)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB334)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB335)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB336)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB337)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB338)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB339)
(extract collectstoresplaceholderconv_global_wrapperAAA0BBBeqsatBBB340)
(extract collectstoresplaceholderkernel_phasesBBBeqsatBBB0)
(extract collectstoresplaceholderoutputBBBeqsatBBB341)
(extract collectstoresplaceholderoutputBBBeqsatBBB342)
(extract collectstoresplaceholderoutputBBBeqsatBBB343)
(extract collectstoresplaceholderoutputBBBeqsatBBB344)
(extract collectstoresplaceholderoutputBBBeqsatBBB345)
(extract collectstoresplaceholderoutputBBBeqsatBBB346)
(extract collectstoresplaceholderoutputBBBeqsatBBB347)
(extract collectstoresplaceholderoutputBBBeqsatBBB348)
(extract collectstoresplaceholderoutputBBBeqsatBBB349)
(extract collectstoresplaceholderoutputBBBeqsatBBB350)
(extract collectstoresplaceholderoutputBBBeqsatBBB351)
(extract collectstoresplaceholderoutputBBBeqsatBBB352)
(extract collectstoresplaceholderoutputBBBeqsatBBB353)
(extract collectstoresplaceholderoutputBBBeqsatBBB354)
(extract collectstoresplaceholderoutputBBBeqsatBBB355)
(extract collectstoresplaceholderoutputBBBeqsatBBB356)
(extract collectstoresplaceholderoutputBBBeqsatBBB357)
(extract collectstoresplaceholderoutputBBBeqsatBBB358)
(extract collectstoresplaceholderoutputBBBeqsatBBB359)
(extract collectstoresplaceholderoutputBBBeqsatBBB360)
(extract collectstoresplaceholderoutputBBBeqsatBBB361)
(extract collectstoresplaceholderoutputBBBeqsatBBB362)
(extract collectstoresplaceholderoutputBBBeqsatBBB363)
(extract collectstoresplaceholderoutputBBBeqsatBBB364)
(extract collectstoresplaceholderoutputBBBeqsatBBB365)
(extract collectstoresplaceholderoutputBBBeqsatBBB366)
(extract collectstoresplaceholderoutputBBBeqsatBBB367)
(extract collectstoresplaceholderoutputBBBeqsatBBB368)
(extract collectstoresplaceholderoutputBBBeqsatBBB369)
(extract collectstoresplaceholderoutputBBBeqsatBBB370)
(extract collectstoresplaceholderoutputBBBeqsatBBB371)
(extract collectstoresplaceholderoutputBBBeqsatBBB372)
(extract collectstoresplaceholderoutputBBBeqsatBBB373)
(extract collectstoresplaceholderoutputBBBeqsatBBB374)
(extract collectstoresplaceholderoutputBBBeqsatBBB375)
(extract collectstoresplaceholderoutputBBBeqsatBBB376)
(extract collectstoresplaceholderoutputBBBeqsatBBB377)
(extract collectstoresplaceholderoutputBBBeqsatBBB378)
(extract collectstoresplaceholderoutputBBBeqsatBBB379)
(extract collectstoresplaceholderoutputBBBeqsatBBB380)
