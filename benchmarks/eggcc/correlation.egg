
; Prologue
; Every term is an `Expr` or a `ListExpr`.
(datatype Expr)
; Used for constructing a list of branches for `Switch`es
; or a list of functions in a `Program`.
(datatype ListExpr (Cons Expr ListExpr) (Nil))

; =================================
; Types
; =================================

(sort TypeList)

(datatype BaseType
  (IntT)
  (BoolT)
  (FloatT)
  ; a pointer to a memory region with a particular type
  (PointerT BaseType)
  (StateT))


(datatype Type
  ; a primitive type
  (Base BaseType)
  ; a typed tuple. Use an empty tuple as a unit type.
  ; state edge also has unit type
  (TupleT TypeList)
)

; use TmpType for helpers where the type doesn't matter
; these shouldn't appear in values in the program, only intermediate terms (such as in ivt.egg permutations)
(constructor TmpType () Type)

(constructor TNil () TypeList)
(constructor TCons (BaseType TypeList) TypeList) ; Head element should never be a tuple


; =================================
; Assumptions
; =================================

(datatype Assumption
  ; Assume nothing
  (InFunc String)
  ; The term is in a loop with `input` and `pred_output`.
  ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
  ;      input    pred_output
  (InLoop Expr     Expr)
  ; Branch of the switch, and what the predicate is, and what the input is
  (InSwitch i64 Expr Expr)
  ; If the predicate was true, and what the predicate is, and what the input is
  (InIf bool Expr Expr)
)



; =================================
; Leaf nodes
; Constants, argument, and empty tuple
; =================================

; Only a single argument is bound- if multiple values are needed, arg will be a tuple.
; e.g. `(Get (Arg tuple_type) 1)` gets the second value in the argument with some tuple_type.
(constructor Arg (Type Assumption) Expr)

; Constants
(datatype Constant
  (Int i64)
  (Bool bool)
  (Float f64))
; All leaf nodes need the type of the argument
; Type is the type of the bound argument in scope
(constructor Const (Constant Type Assumption) Expr)

; An empty tuple.
; Type is the type of the bound argument in scope
(constructor Empty (Type Assumption) Expr)


; =================================
; Operators
; =================================

(datatype TernaryOp
  ; given a pointer, value, and a state edge
  ; writes the value to the pointer and returns
  ; the resulting state edge
  (Write)
  (Select))
(datatype BinaryOp
  ;; Bitwise operators
  (Bitand)
  ;; integer operators
  (Add)
  (Sub)
  (Div)
  (Mul)
  (LessThan)
  (GreaterThan)
  (LessEq)
  (GreaterEq)
  (Eq)
  (Smin)
  (Smax)
  (Shl)
  (Shr)
  ;; float operators 
  (FAdd)
  (FSub)
  (FDiv)
  (FMul)
  (FLessThan)
  (FGreaterThan) 
  (FLessEq)
  (FGreaterEq)
  (FEq)
  (Fmin)
  (Fmax)
  ;; logical operators
  (And)
  (Or)
  ; given a pointer and a state edge
  ; loads the value at the pointer and returns (value, state edge)
  (Load)
  ; Takes a pointer and an integer, and offsets
  ; the pointer by the integer
  (PtrAdd)
  ; given and value and a state edge, prints the value as a side-effect
  ; the value must be a base value, not a tuple
  ; returns an empty tuple
  (Print)
  ; given a pointer and state edge, frees the whole memory region at the pointer
  (Free))
(datatype UnaryOp
  (Neg)
  (Abs)
  (Not))

; Operators
(constructor Top   (TernaryOp Expr Expr Expr) Expr)
(constructor Bop   (BinaryOp Expr Expr) Expr)
(constructor Uop   (UnaryOp Expr) Expr)
; gets from a tuple. static index
(constructor Get   (Expr i64) Expr)
; (Alloc id amount state_edge pointer_type)
; allocate an integer amount of memory for a particular type
; returns (pointer to the allocated memory, state edge)
(constructor Alloc (i64 Expr Expr BaseType)      Expr)
;               name of func   arg
(constructor Call (String         Expr) Expr)



; =================================
; Tuple operations
; =================================

; `Empty`, `Single` and `Concat` create tuples.
; 1. Use `Empty` for an empty tuple.
; 2. Use `Single` for a tuple with one element.
; 3. Use `Concat` to append the elements from two tuples together.
; Nested tuples are not allowed.


; A tuple with a single element.
; Necessary because we only use `Concat` to add to tuples.
(constructor Single (Expr) Expr)
; Concat appends the elemnts from two tuples together
; e.g. (Concat (Concat (Single a) (Single b))
;              (Concat (Single c) (Single d))) = (a, b, c, d)
;                 expr1       expr2
(constructor Concat (Expr        Expr)       Expr)



; =================================
; Control flow
; =================================

; Switch on a list of lazily-evaluated branches.
; pred must be an integer
;                 pred  inputs   branches     chosen
(constructor Switch (Expr  Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred inputs   then else
(constructor If (Expr Expr     Expr Expr) Expr)


; A do-while loop.
; Evaluates the input, then evaluates the body.
; Keeps looping while the predicate is true.
; input must have the same type as (output1, output2, ..., outputi)
; input must be a tuple 
; pred must be a boolean
; pred-and-body must be a flat tuple (pred, out1, out2, ..., outi)
; input must be the same type as (out1, out2, ..., outi)
;                  input   pred-and-body
(constructor DoWhile (Expr    Expr)                   Expr)


; =================================
; Top-level expressions
; =================================
(sort ProgramType)
; An entry function and a list of additional functions.
;                      entry function     other functions
(constructor Program     (Expr               ListExpr) ProgramType)
;                   name   input ty  output ty  output
(constructor Function (String Type      Type       Expr)      Expr)

; to get the type of a funciton, look in this table
; since we might not be optimizing the entire program
(relation FunctionHasType (String Type Type))

; Rulesets
(ruleset always-run)
(ruleset is-resolved)
(ruleset error-checking)
(ruleset memory)
(ruleset memory-helpers)
(ruleset smem)

;; Initliazation
(relation bop->string (BinaryOp String))
(relation uop->string (UnaryOp String))
(relation top->string (TernaryOp String))
(bop->string (Add) "Add")
(bop->string (Sub) "Sub")
(bop->string (Div) "Div")
(bop->string (Mul) "Mul")
(bop->string (LessThan) "LessThan")
(bop->string (GreaterThan) "GreaterThan")
(bop->string (LessEq) "LessEq")
(bop->string (GreaterEq) "GreaterEq")
(bop->string (Eq) "Eq")
(bop->string (FAdd) "FAdd")
(bop->string (FSub) "FSub")
(bop->string (FDiv) "FDiv")
(bop->string (FMul) "FMul")
(bop->string (FLessThan) "FLessThan")
(bop->string (FGreaterThan) "FGreaterThan")
(bop->string (FLessEq) "FLessEq")
(bop->string (FGreaterEq) "FGreaterEq")
(bop->string (FEq) "FEq")
(bop->string (And) "And")
(bop->string (Or) "Or")
(bop->string (Load) "Load")
(bop->string (PtrAdd) "PtrAdd")
(bop->string (Print) "Print")
(bop->string (Free) "Free")

;; If anything is put in the DebugExpr relation, we'll extract them instead of the original program.
;; These can then be visualized using the `optimized-rvsdg` run mode
(relation DebugExpr (Expr))

; TERMS
(datatype Term)
(datatype ListTerm (TermCons Term ListTerm) (TermNil))

; TODO: Will probably need ctx so that we can resubstitute?
; (datatype TermAssumption
;   ; Assume nothing
;   (InFunc String)
;   ; The term is in a loop with `input` and `pred_output`.
;   ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
;   ;      input    pred_output
;   (InLoop Term     Term)
;   ; Branch of the switch, and what the predicate is, and what the input is
;   (InSwitch i64 Term Term)
;   ; If the predicate was true, and what the predicate is, and what the input is
;   (InIf bool Term Term)
; )

(constructor TermArg () Term)

(constructor TermConst (Constant) Term)

(constructor TermEmpty () Term)

; Term Operators
(constructor TermTop (TernaryOp Term Term Term) Term)
(constructor TermBop (BinaryOp Term Term) Term)
(constructor TermUop (UnaryOp Term) Term)
(constructor TermGet (Term i64) Term)
(constructor TermAlloc (i64 Term Term BaseType) Term)
(constructor TermCall (String Term) Term)

; Tuple Operators
(constructor TermSingle (Term) Term)
(constructor TermConcat (Term Term) Term)

; Control Flow (TODO? Not sure if needed)
; (constructor TermSwitch (Term Term ListTerm) Term)
; (constructor TermIf (Term Term Term Term) Term)

; (constructor TermDoWhile (Term Term) Term)


(ruleset never)
(ruleset type-analysis)
(ruleset type-helpers)       ;; these rules need to saturate between every iter of type-analysis rules

(constructor TLConcat (TypeList TypeList) TypeList :unextractable)
(rewrite (TLConcat (TNil) r) r :ruleset type-helpers)
(rewrite (TLConcat (TCons hd tl) r)
         (TCons hd (TLConcat tl r))
         :ruleset type-helpers)

(function TypeList-length (TypeList) i64 :no-merge)
(constructor TypeList-ith (TypeList i64) BaseType :unextractable)
;; Don't match on TypeList-ith because it is now lazily instantiated!
(rule () ((set (TypeList-length (TNil)) 0)) :ruleset type-helpers)
(rule ((= lst (TCons hd tl))
       (= len (TypeList-length tl)))
      ((set (TypeList-length lst) (+ 1 len))) :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) 0) hd :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) i) (TypeList-ith tl (- i 1)) 
      :when ((> i 0)) 
      :ruleset type-helpers)

(rule ((TypeList-ith list i)
       (= (TypeList-length list) n)
       (>= i n))
      ((panic "TypeList-ith out of bounds")) :ruleset type-helpers)

(relation HasType (Expr Type))


;; Keep track of type expectations for error messages
(relation ExpectType (Expr Type String))
(rule (
        (ExpectType e expected msg)
        (HasType e actual)
        (!= expected actual) ;; not okay unless we saturate type helpers.
      )
      (
       (panic "type mismatch- check RUST_LOG=info for expressions that mismatched"))
      :ruleset error-checking)


(rule ((= (Const c1 ty1 ctx1) (Const c2 ty2 ctx2))
       (= ctx1 (InFunc name))
       (!= c1 c2))
      ((panic "Unsoundness detected: const values differ at top level"))
      :ruleset error-checking)

(relation HasArgType (Expr Type))

(rule ((HasArgType (Arg t1 ctx) t2)
       (!= t1 t2))
      ((panic "arg type mismatch"))
      :ruleset error-checking)

(rule ((= lhs (Function name in out body))
       (HasArgType body ty)
       (HasArgType body ty2)
       (!= ty ty2))
      ((panic "arg type mismatch in function"))
      :ruleset error-checking)

; Propagate arg types up
(rule ((= lhs (Uop _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Get e _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Alloc _id e state _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Call _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Single e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e1 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e2 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType pred ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType branch ty)
       (HasType inputs ty2)
       (!= ty ty2))
      ((panic "switch branches then branch has incorrect input type"))
      :ruleset error-checking)
;; demand with one fewer branches
(rule ((= lhs (Switch pred inputs (Cons branch rest))))
      ((Switch pred inputs rest))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType t ty2)
       (!= ty ty2))
      ((panic "if branches then branch has incorrect input type"))
      :ruleset error-checking)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType e ty2)
       (!= ty ty2))
      ((panic "if branches else branch has incorrect input type"))
      :ruleset error-checking)


(rule ((= lhs (DoWhile ins body))
       (HasArgType ins ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
; Don't push arg types through Program, Function, DoWhile, Let exprs because
; these create new arg contexts.

; Primitives
(rule ((= lhs (Const (Int i) ty ctx)))
      ((HasType lhs (Base (IntT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Bool b) ty ctx)))
      ((HasType lhs (Base (BoolT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Float b) ty ctx)))
      ((HasType lhs (Base (FloatT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Empty ty ctx)))
      ((HasType lhs (TupleT (TNil)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

; Unary Ops
(rule (
        (= lhs (Uop (Not) e))
        (HasType e (Base (BoolT)))
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Not) e)))
      ((ExpectType e (Base (BoolT)) "(Not)"))
      :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
      (HasType e (Base (IntT)))
) (
      (HasType lhs (Base (IntT)))
) :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
) (
      (ExpectType e (Base (IntT)) "(Neg)")
) :ruleset type-analysis)

(rule (
        (= lhs (Uop (Abs) e))
        (HasType e (Base (IntT)))
      )
      ((HasType lhs (Base (IntT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Abs) e)))
      ((ExpectType e (Base (IntT)) "(Abs)"))
      :ruleset type-analysis)


(rule (
        (= lhs (Bop (Print) e state))
        (HasType e _ty)             ; just make sure it has some type.
      )
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)

(rule (
        (= lhs (Bop (Print) e state))
        (HasType e (TupleT ty))
      )
      ((panic "Don't print a tuple"))
      :ruleset error-checking)

(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (PointerT _ty))))
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (IntT))))
      ((panic "Free expected pointer, received integer"))
      :ruleset error-checking)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (TupleT _ty)))
      ((panic "Free expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Bop (Load) e state))
        (HasType e (Base (PointerT ty)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (Base (IntT)))
      )
      ((panic "(Load) expected pointer, received int"))
      :ruleset error-checking)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (TupleT x))
      )
      ((panic "(Load) expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Top (Select) pred v1 v2))
      )
      ((ExpectType pred (Base (BoolT)) "(Select)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty)
        (HasType v2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty1)
        (HasType v2 ty2)
        (!= ty1 ty2)
      )
      ((panic "(Select) branches had different types"))
      :ruleset error-checking)


; Binary ops

;; Operators that have type Type -> Type -> Type
;; Note we only do this generic matching for binary
;; operator since there's a lot of them.
;; In the future we can also extend to other constructs.
(relation bop-of-type (BinaryOp Type))
(bop-of-type (Bitand) (Base (IntT)))
(bop-of-type (Add) (Base (IntT)))
(bop-of-type (Sub) (Base (IntT)))
(bop-of-type (Div) (Base (IntT)))
(bop-of-type (Mul) (Base (IntT)))
(bop-of-type (FAdd) (Base (FloatT)))
(bop-of-type (FSub) (Base (FloatT)))
(bop-of-type (FDiv) (Base (FloatT)))
(bop-of-type (FMul) (Base (FloatT)))

(rule (
        (= lhs (Bop op e1 e2))
        (bop-of-type op ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop op e1 e2))
       (bop-of-type op ty)
       (bop->string op op-str))
      (
        (ExpectType e1 ty op-str)
        (ExpectType e2 ty op-str)
      )
      :ruleset type-analysis)  

;; Operators that have type Float -> Float -> Bool
(relation bpred-of-type (BinaryOp Type))
(bpred-of-type (FLessThan) (Base (FloatT)))
(bpred-of-type (FLessEq) (Base (FloatT)))
(bpred-of-type (FGreaterThan) (Base (FloatT)))
(bpred-of-type (FGreaterEq) (Base (FloatT)))
(bpred-of-type (FEq) (Base (FloatT)))
(bpred-of-type (LessThan) (Base (IntT)))
(bpred-of-type (LessEq) (Base (IntT)))
(bpred-of-type (GreaterThan) (Base (IntT)))
(bpred-of-type (GreaterEq) (Base (IntT)))
(bpred-of-type (Eq) (Base (IntT)))
(bpred-of-type (And) (Base (BoolT)))
(bpred-of-type (Or) (Base (BoolT)))

(rule (
        (= lhs (Bop pred e1 e2))
        (bpred-of-type pred ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop pred e1 e2))
       (bpred-of-type pred ty)
       (bop->string pred pred-str))
      (
        (ExpectType e1 ty pred-str)
        (ExpectType e2 ty pred-str)
      )
      :ruleset type-analysis)  

(rule (
        (= lhs (Top (Write) ptr val state))
        (HasType ptr (Base (PointerT ty)))
        (HasType val (Base ty)) ; TODO need to support pointers to pointers
      )
      ((HasType lhs (Base (StateT)))) ; Write returns ()
      :ruleset type-analysis)

(rule (
       (= lhs (Top (Write) ptr val state))
       (HasType ptr (Base (PointerT ty))))
      ((ExpectType val (Base ty) "(Write)"))
      :ruleset type-analysis)
      
       

(rule (
        (= lhs (Bop (PtrAdd) ptr n))
        (HasType ptr (Base (PointerT ty)))
        (HasType n (Base (IntT)))
      )
      ((HasType lhs (Base (PointerT ty))))
      :ruleset type-analysis)

; Other ops
(rule ((= lhs (Alloc _id amt state ty))) 
      ((ExpectType amt (Base (IntT)) "(Alloc)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Alloc _id amt state ty))
        (HasType amt (Base (IntT)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)

(rule (
        (= lhs (Get e i))
        (HasType e (TupleT tylist))
      )
      ; TypeList-ith needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (Base (TypeList-ith tylist i)))) 
      :ruleset type-analysis)

(rule (
       (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
       (>= i len))
      ((panic "index out of bounds"))
      :ruleset error-checking)
(rule (
      (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
        (< i 0)
      )
      ((panic "negative index"))
      :ruleset error-checking)

; =================================
; Tuple operations
; =================================

(rule (
        (= lhs (Single e))
        (HasType e (TupleT tylist))
      )
      ((panic "don't nest tuples"))
      :ruleset error-checking)

(rule (
        (= lhs (Single e))
        (HasType e (Base basety))
      )
      ((HasType lhs (TupleT (TCons basety (TNil)))))
      :ruleset type-analysis)

(rule (
        (= lhs (Concat e1 e2))
        (HasType e1 (TupleT tylist1))
        (HasType e2 (TupleT tylist2))
      )
      ; TLConcat needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (TupleT (TLConcat tylist1 tylist2))))
      :ruleset type-analysis)

; =================================
; Control flow
; =================================
(rule ((= lhs (If pred inputs then else)))
      ((ExpectType pred (Base (BoolT)) "If predicate must be boolean"))
      :ruleset type-analysis)
(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then ty)
        (HasType else ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then tya)
        (HasType else tyb)
        (!= tya tyb)
      )
      ((panic "if branches had different types"))
      :ruleset error-checking)



(rule ((= lhs (Switch pred inputs branches)))
      ((ExpectType pred (Base (IntT)) "Switch predicate must be integer"))
      :ruleset type-analysis)

; base case: single branch switch has type of branch
(rule (
        (= lhs (Switch pred inputs (Cons branch (Nil))))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

; recursive case: peel off a layer
(rule ((Switch pred inputs (Cons branch rest)))
      ((Switch pred inputs rest))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
        (HasType (Switch pred inputs rest) ty) ; rest of the branches also have type ty
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch tya)
        (HasType (Switch pred inputs rest) tyb)
        (!= tya tyb)
      )
      ((panic "switch branches had different types"))
      :ruleset error-checking)

(rule ((Arg ty ctx))
      (
        (HasType (Arg ty ctx) ty)
        (HasArgType (Arg ty ctx) ty)
      )
      :ruleset type-analysis)


(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base ty))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base (PointerT ty)))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base ty))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base (PointerT ty)))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist))
      )
      ((HasArgType pred-body (TupleT tylist)))
      :ruleset type-analysis)

(rule ((= lhs (DoWhile inp pred-body)))
      ((ExpectType (Get pred-body 0) (Base (BoolT)) "loop pred must be bool"))
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist)) ; input is a tuple
        ; pred-body is a tuple where the first elt is a bool
        ; and the rest of the list matches the input type
        (HasType pred-body (TupleT (TCons (BoolT) tylist)))
      )
      ((HasType lhs (TupleT tylist))) ; whole thing has type of inputs/outputs
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT in-tys))
        (HasType pred-body (TupleT (TCons (BoolT) out-tys)))
        (!= in-tys out-tys)
      )
      ((panic "input types and output types don't match"))
      :ruleset error-checking)

; =================================
; Functions
; =================================

(rule ((= lhs (Function name in-ty out-ty body)))
      (
        ; Arg should have the specified type in the body
        (HasArgType body in-ty)
        ; Expect the body to have the specified output type
        (ExpectType body out-ty "Function body had wrong type")
      )
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
      )
      ; Expect the arg to have the right type for the function
      ((ExpectType arg in-ty "function called with wrong arg type"))
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
        (HasType arg in-ty)
        ; We don't need to check the type of the function body, it will
        ; be checked elsewhere. If we did require (HasType body out-ty),
        ; recursive functions would not get assigned a type.
      )
      ((HasType lhs out-ty))
      :ruleset type-analysis)

; find which types are pure
(relation PureBaseType (BaseType))
(relation PureType (Type))
(relation PureTypeList (TypeList))

(PureBaseType (IntT))
(PureBaseType (BoolT))
(rule ((Base ty)
       (PureBaseType ty))
      ((PureType (Base ty)))
      :ruleset type-analysis)
(rule ((TupleT tylist)
       (PureTypeList tylist))
      ((PureType (TupleT tylist)))
      :ruleset type-analysis)
(rule ((TNil))
      ((PureTypeList (TNil)))
      :ruleset type-analysis)
(rule ((TCons hd tl)
       (PureBaseType hd)
       (PureTypeList tl))
      ((PureTypeList (TCons hd tl)))
      :ruleset type-analysis)

(function ListExpr-length (ListExpr) i64 :no-merge)
(constructor ListExpr-ith (ListExpr i64) Expr :unextractable)
(constructor ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(constructor Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred inputs branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-length (Expr) i64 :no-merge)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)


;; Leading expressions are tuples that are used as a whole
;; during optimization and are matched in the query.
(relation leading-Expr (Expr))
(relation leading-Expr-list (ListExpr))

(rule ((= e (DoWhile inputs pred_out)))
      ((leading-Expr e)
       (leading-Expr inputs)
       (leading-Expr pred_out))
      :ruleset always-run)
(rule ((= e (If cond inputs thn els)))
       ((leading-Expr e)
        (leading-Expr inputs)
        (leading-Expr thn)
        (leading-Expr els))
       :ruleset always-run)
(rule ((= e (Switch pred inputs branch)))
      ((leading-Expr e)
       (leading-Expr-list branch)
       (leading-Expr inputs))
       :ruleset always-run)
(rule ((leading-Expr-list (Cons hd tl)))
      ((leading-Expr hd)
       (leading-Expr-list tl))
      :ruleset always-run)
(rule ((= e (Arg t a)))
      ((leading-Expr e))
      :ruleset always-run)

;; Create a Get for every index, and rewrite it to see through Concat
(rule ((Single expr)) ((union (Get (Single expr) 0) expr)) :ruleset always-run)
;; initial get
(rule ((leading-Expr tuple)
       (> (tuple-length tuple) 0))
      ((Get tuple 0))
      :ruleset always-run)
;; next get
(rule ((leading-Expr tuple)
       (= len (tuple-length tuple))
       (= ith (Get tuple i))
       (< (+ i 1) len)
       )
       ((Get tuple (+ 1 i)))
       :ruleset always-run)

(constructor List-suffix (Expr i64) Expr)
(rule ((Get x i))
      ((union (List-suffix x 0) x))
      :ruleset always-run)
(rule ((= (List-suffix x n) (Concat (Single hd) tl)))
      ((union (List-suffix x (+ n 1)) tl))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Concat (Single e) rest)))
      ((union lhs e))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Single e)))
      ((union lhs e))
      :ruleset always-run)

;; A temporary context.
;; Be sure to delete at the end of all actions or else!!!
;; This is safer than using a persistant context, since we may miss an important part of the query.
(constructor TmpCtx () Assumption)

(rule ((TmpCtx))
  ((panic "TmpCtx should not exist outside rule body"))
  :ruleset always-run)


(ruleset subsume-after-helpers)
;; After running the `saturating` ruleset, these if statements can be subsumed
(relation ToSubsumeIf (Expr Expr Expr Expr))
;; Workaround of https://github.com/egraphs-good/egglog/issues/462
;; Make sure the if we are subsuming is present
(rule ((ToSubsumeIf a b c d)
       (If a b c d))
      ((subsume (If a b c d)))
      :ruleset subsume-after-helpers)

(ruleset add-to-debug-expr)

(ruleset terms)
;; helpers keeps track of the new best extracted terms
(ruleset terms-helpers)
;; helpers-helpers runs `Smaller` rules, resolving the merge function for helpers
(ruleset terms-helpers-helpers)

(sort TermAndCost)
(constructor Smaller (TermAndCost TermAndCost) TermAndCost)

(function ExtractedExpr (Expr) TermAndCost
  :merge (Smaller old new))
;; potential extractions- use so that when the costs are equal, we don't change the term
;; this preserves egglog's timestamp of when the last time ExtractedExpr was changed, fixing a big performance problem
(relation PotentialExtractedExpr (Expr TermAndCost))

(constructor TCPair (Term i64) TermAndCost)

(constructor NoTerm () Term)

;; set extracted expr to default value
(rule ((PotentialExtractedExpr expr termandcost))
      ((set (ExtractedExpr expr) (TCPair (NoTerm) 10000000000000000)))
      :ruleset terms-helpers)

;; set extracted expr to new value as long as not equal
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (= (ExtractedExpr expr) (TCPair oldterm oldcost))
       (< cost oldcost))
      ((set (ExtractedExpr expr) (TCPair term cost)))
      :ruleset terms-helpers)

;; if the cost is negative panic, terms got too big
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (< cost 0))
      ((panic "Negative cost"))
      :ruleset terms-helpers)

;; Resolve Smaller
(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (< cost1 cost2)
      )
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)

(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (> cost1 cost2) 
      )
      ((union lhs (TCPair t2 cost2)))
      :ruleset terms-helpers-helpers)


(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (= cost1 cost2) 
      )
      ;; arbitrarily pick first one
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)


; Compute smallest Expr bottom-up
(rule ((= lhs (Const c ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermConst c) 1)))
      :ruleset terms)

(rule ((= lhs (Arg ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermArg) 1)))
      :ruleset terms)

(rule (
        (= lhs (Bop o e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermBop o t1 t2) (+ 1 (+ c1 c2)))))
      :ruleset terms)

(rule (
        (= lhs (Top o e1 e2 e3))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (= (TCPair t3 c3) (ExtractedExpr e3))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermTop o t1 t2 t3) (+ (+ 1 c1) (+ c2 c3)))))
      :ruleset terms)

(rule (
        (= lhs (Uop o e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermUop o t1) (+ 1 c1))))
      :ruleset terms)

(rule (
        (= lhs (Get tup i))
        (= (TCPair t1 c1) (ExtractedExpr tup))
      )
      ; cost of the get is the same as the  cost of the whole tuple
      ((PotentialExtractedExpr lhs (TCPair (TermGet t1 i) c1)))
      :ruleset terms)

; todo Alloc

; todo Call

(rule (
        (= lhs (Single e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ; cost of single is same as cost of the element
      ((PotentialExtractedExpr lhs (TCPair (TermSingle t1) c1)))
      :ruleset terms)

(rule (
        (= lhs (Concat e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ; cost of concat is sum of the costs
      ((PotentialExtractedExpr lhs (TCPair (TermConcat t1 t2) (+ c1 c2))))
      :ruleset terms)


; todo Control flow - not sure if needed
; (rule (
;         (= lhs (If pred inputs thn els))
;         (= (TCPair t1 c1) (ExtractedExpr pred))
;         (= (TCPair t2 c2) (ExtractedExpr inputs))
;         (= (TCPair t3 c3) (ExtractedExpr thn))
;         (= (TCPair t4 c4) (ExtractedExpr els))
;       )
;       ; cost of if is 10 + cost of pred + cost of input + max of branch costs
;       ((PotentialExtractedExpr lhs (TCPair (TermIf t1 t2 t3 t4) (+ 10 (+ (+ c1 c2) (max c3 c4))))))
;       :ruleset terms)

(sort Node)
;; store a particular if node for later
;; stored as the if eclass, pred, inputs, then, else
(constructor IfNode (Expr Expr Expr Expr Expr) Node)

(relation ExprIsValid (Expr))
(relation ListExprIsValid (ListExpr))
(rule ((ExprIsValid (Function _name _tyin _tyout _out))) ((ExprIsValid _out)) :ruleset always-run)
(rule ((ExprIsValid (Top _op _x _y _z))) ((ExprIsValid _x)
(ExprIsValid _y)
(ExprIsValid _z)) :ruleset always-run)
(rule ((ExprIsValid (Bop _op _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Uop _op _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Get _tup _i))) ((ExprIsValid _tup)) :ruleset always-run)
(rule ((ExprIsValid (Concat _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Single _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Switch _pred _inputs _branches))) ((ExprIsValid _pred)
(ExprIsValid _inputs)
(ListExprIsValid _branches)) :ruleset always-run)
(rule ((ExprIsValid (If _pred _input _then _else))) ((ExprIsValid _pred)
(ExprIsValid _input)
(ExprIsValid _then)
(ExprIsValid _else)) :ruleset always-run)
(rule ((ExprIsValid (DoWhile _in _pred-and-output))) ((ExprIsValid _in)
(ExprIsValid _pred-and-output)) :ruleset always-run)
(rule ((ExprIsValid (Call _func _arg))) ((ExprIsValid _arg)) :ruleset always-run)
(rule ((ListExprIsValid (Cons _hd _tl))) ((ExprIsValid _hd)
(ListExprIsValid _tl)) :ruleset always-run)
(rule ((ExprIsValid (Alloc _id _e _state _ty))) ((ExprIsValid _e)
(ExprIsValid _state)) :ruleset always-run)
(relation ExprIsResolved (Expr))
(relation ListExprIsResolved (ListExpr))
(rule ((= lhs (Function _name _tyin _tyout _out)) (ExprIsResolved _out)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Const _n _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Top _op _x _y _z)) (ExprIsResolved _x)
(ExprIsResolved _y)
(ExprIsResolved _z)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Bop _op _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Uop _op _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Get _tup _i)) (ExprIsResolved _tup)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Concat _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Single _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Switch _pred _inputs _branches)) (ExprIsResolved _pred)
(ExprIsResolved _inputs)
(ListExprIsResolved _branches)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (If _pred _input _then _else)) (ExprIsResolved _pred)
(ExprIsResolved _input)
(ExprIsResolved _then)
(ExprIsResolved _else)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (DoWhile _in _pred-and-output)) (ExprIsResolved _in)
(ExprIsResolved _pred-and-output)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Arg _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Call _func _arg)) (ExprIsResolved _arg)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Empty _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Cons _hd _tl)) (ExprIsResolved _hd)
(ListExprIsResolved _tl)) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Nil)) ) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Alloc _id _e _state _ty)) (ExprIsResolved _e)
(ExprIsResolved _state)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(relation BodyContainsExpr (Expr Expr))
(relation BodyContainsListExpr (Expr ListExpr))
(rule ((Function _name _tyin _tyout _out)) ((BodyContainsExpr (Function _name _tyin _tyout _out) _out)) :ruleset always-run)
(rule ((If _pred _input _then _else)) ((BodyContainsExpr (If _pred _input _then _else) _then) (BodyContainsExpr (If _pred _input _then _else) _else)) :ruleset always-run)
(rule ((DoWhile _in _pred-and-output)) ((BodyContainsExpr (DoWhile _in _pred-and-output) _pred-and-output)) :ruleset always-run)
(rule ((BodyContainsExpr body (Top _op _x _y _z))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y) (BodyContainsExpr body _z)) :ruleset always-run)
(rule ((BodyContainsExpr body (Bop _op _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Uop _op _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Get _tup _i))) ((BodyContainsExpr body _tup)) :ruleset always-run)
(rule ((BodyContainsExpr body (Concat _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Single _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Switch _pred _inputs _branches))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _inputs)) :ruleset always-run)
(rule ((BodyContainsExpr body (If _pred _input _then _else))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _input)) :ruleset always-run)
(rule ((BodyContainsExpr body (DoWhile _in _pred-and-output))) ((BodyContainsExpr body _in)) :ruleset always-run)
(rule ((BodyContainsExpr body (Call _func _arg))) ((BodyContainsExpr body _arg)) :ruleset always-run)
(rule ((BodyContainsListExpr body (Cons _hd _tl))) ((BodyContainsExpr body _hd)) :ruleset always-run)
(rule ((BodyContainsExpr body (Alloc _id _e _state _ty))) ((BodyContainsExpr body _e) (BodyContainsExpr body _state)) :ruleset always-run)
(relation ExprIsPure (Expr))
(relation ListExprIsPure (ListExpr))
(relation BinaryOpIsPure (BinaryOp))
(relation UnaryOpIsPure (UnaryOp))
(relation TernaryOpIsPure (TernaryOp))
(TernaryOpIsPure (Select))
(BinaryOpIsPure (Add))
(BinaryOpIsPure (Sub))
(BinaryOpIsPure (Mul))
(BinaryOpIsPure (Div))
(BinaryOpIsPure (Eq))
(BinaryOpIsPure (LessThan))
(BinaryOpIsPure (GreaterThan))
(BinaryOpIsPure (LessEq))
(BinaryOpIsPure (GreaterEq))
(BinaryOpIsPure (Smax))
(BinaryOpIsPure (Smin))
(BinaryOpIsPure (Shl))
(BinaryOpIsPure (Shr))
(BinaryOpIsPure (FAdd))
(BinaryOpIsPure (FSub))
(BinaryOpIsPure (FMul))
(BinaryOpIsPure (FDiv))
(BinaryOpIsPure (FEq))
(BinaryOpIsPure (FLessThan))
(BinaryOpIsPure (FGreaterThan))
(BinaryOpIsPure (FLessEq))
(BinaryOpIsPure (FGreaterEq))
(BinaryOpIsPure (Fmax))
(BinaryOpIsPure (Fmin))
(BinaryOpIsPure (And))
(BinaryOpIsPure (Or))
(BinaryOpIsPure (PtrAdd))
(BinaryOpIsPure (Bitand))
(UnaryOpIsPure (Not))
(UnaryOpIsPure (Abs))
(UnaryOpIsPure (Neg))

(rule ((Function _name _tyin _tyout _out) (ExprIsPure _out))
        ((ExprIsPure (Function _name _tyin _tyout _out)))
        :ruleset always-run)

(rule ((Const _n _ty _ctx))
        ((ExprIsPure (Const _n _ty _ctx)))
        :ruleset always-run)

(rule ((Top _op _x _y _z) (TernaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y) (ExprIsPure _z))
        ((ExprIsPure (Top _op _x _y _z)))
        :ruleset always-run)

(rule ((Bop _op _x _y) (BinaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Bop _op _x _y)))
        :ruleset always-run)

(rule ((Uop _op _x) (UnaryOpIsPure _op) (ExprIsPure _x))
        ((ExprIsPure (Uop _op _x)))
        :ruleset always-run)

(rule ((Get _tup _i) (ExprIsPure _tup))
        ((ExprIsPure (Get _tup _i)))
        :ruleset always-run)

(rule (
        (= lhs (Get (Arg (TupleT tylist) _ctx) i))
        (!= (TypeList-ith tylist i) (StateT))
      )
      ((ExprIsPure lhs))
      :ruleset always-run)

(rule ((Concat _x _y) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Concat _x _y)))
        :ruleset always-run)

(rule ((Single _x) (ExprIsPure _x))
        ((ExprIsPure (Single _x)))
        :ruleset always-run)

(rule ((Switch _pred _inputs _branches) (ExprIsPure _pred) (ExprIsPure _inputs) (ListExprIsPure _branches))
        ((ExprIsPure (Switch _pred _inputs _branches)))
        :ruleset always-run)

(rule ((If _pred _input _then _else) (ExprIsPure _pred) (ExprIsPure _input) (ExprIsPure _then) (ExprIsPure _else))
        ((ExprIsPure (If _pred _input _then _else)))
        :ruleset always-run)

(rule ((DoWhile _in _pred-and-output) (ExprIsPure _in) (ExprIsPure _pred-and-output))
        ((ExprIsPure (DoWhile _in _pred-and-output)))
        :ruleset always-run)

; state edge is not pure!
; (rule ((Arg _ty _ctx))
;         ((ExprIsPure (Arg _ty _ctx)))
;         :ruleset always-run)

(rule ((Call _f _arg) (ExprIsPure _arg) (ExprIsPure (Function _f inty outty out)))
        ((ExprIsPure (Call _f _arg)))
        :ruleset always-run)

(rule ((Empty _ty _ctx))
        ((ExprIsPure (Empty _ty _ctx)))
        :ruleset always-run)

(rule ((Cons _hd _tl) (ExprIsPure _hd) (ListExprIsPure _tl))
        ((ListExprIsPure (Cons _hd _tl)))
        :ruleset always-run)

(rule ((Nil))
        ((ListExprIsPure (Nil)))
        :ruleset always-run)
; This file provides AddContext, a helpers that copies a sub-egraph into
; a new one with a new context.
; Users of AddContext can specify how deeply to do this copy.


(ruleset context)

(constructor AddContext (Assumption Expr) Expr :unextractable)
(constructor AddContextList (Assumption ListExpr) ListExpr :unextractable)

;; ################################ saturation

;; Adding context a second time does nothing, so union
(rule
  ((= lhs (AddContext ctx inner))
   (= inner (AddContext ctx expr)))
  ((union lhs inner))
  :ruleset context)


;; ############################## Base cases- leaf nodes

;; replace existing contexts that are around leaf nodes
;; AddContext assumes the new context is more specific than the old one
(rule ((= lhs (AddContext ctx (Arg ty oldctx))))
      ((union lhs (Arg ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Const c ty oldctx))))
      ((union lhs (Const c ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Empty ty oldctx))))
      ((union lhs (Empty ty ctx)))
      :ruleset context)




;; ######################################### Operators
(rewrite (AddContext ctx (Top op c1 c2 c3))
         (Top op
           (AddContext ctx c1)
           (AddContext ctx c2)
           (AddContext ctx c3))
               :ruleset context)
(rewrite (AddContext ctx (Bop op c1 c2))
         (Bop op
           (AddContext ctx c1)
           (AddContext ctx c2))
               :ruleset context)
(rewrite (AddContext ctx (Uop op c1))
         (Uop op (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Get c1 index))
         (Get (AddContext ctx c1) index)
               :ruleset context)
(rewrite (AddContext ctx (Alloc id c1 state ty))
         (Alloc id (AddContext ctx c1) (AddContext ctx state) ty)
         :ruleset context)
(rewrite (AddContext ctx (Call name c1))
         (Call name (AddContext ctx c1))
         :ruleset context)

(rewrite (AddContext ctx (Single c1))
         (Single (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Concat c1 c2))
         (Concat
           (AddContext ctx c1)
           (AddContext ctx c2))
         :ruleset context)

;; ################################### List operators

(rewrite (AddContextList ctx (Nil))
         (Nil)
         :ruleset context)

(rewrite (AddContextList ctx (Cons c1 rest))
         (Cons (AddContext ctx c1)
               (AddContextList ctx rest))
               :ruleset context)


;; ########################################## Control flow
(rewrite (AddContext ctx (Switch pred inputs branches))
         (Switch (AddContext ctx pred)
                 (AddContext ctx inputs)
                 branches)
         :ruleset context)

;; For stop at region, still add context to inputs
(rule ((= lhs (AddContext ctx (If pred inputs c1 c2))))
      ((union lhs
         (If (AddContext ctx pred)
             (AddContext ctx inputs)
             c1
             c2)))
       :ruleset context)


;; For stop at loop, still add context to inputs
(rule ((= lhs (AddContext ctx (DoWhile inputs outputs))))
      ((union lhs
        (DoWhile
          (AddContext ctx inputs)
          outputs)))
       :ruleset context)


(ruleset term-subst)


; Instantiate the term as an Expr in the provided context
; where references to (Arg) in the term are replaced by Expr
(constructor TermSubst (Assumption Expr Term) Expr :unextractable)

; type rule to get the arg type of a substitution
(rule (
        (= lhs (TermSubst ctx e1 term))
        (HasArgType e1 ty)       
      )
      ((HasArgType lhs ty))
      :ruleset term-subst)


; leaf node
; replace the context
(rule ((= lhs (TermSubst ctx e (TermArg))))
      ((union lhs (AddContext ctx e)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConst c)))
       (HasArgType e newty))
      ((union lhs (Const c newty ctx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermEmpty)))
       (HasArgType e newty))
      ((union lhs (Empty newty ctx)))
      :ruleset term-subst)

; Operators
(rule ((= lhs (TermSubst ctx e (TermTop op t1 t2 t3))))
      ((union lhs (Top op (TermSubst ctx e t1)
                          (TermSubst ctx e t2)
                          (TermSubst ctx e t3))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermBop op t1 t2))))
      ((union lhs (Bop op (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermUop op t1))))
      ((union lhs (Uop op (TermSubst ctx e t1))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermGet t idx))))
      ((union lhs (Get (TermSubst ctx e t) idx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermAlloc id t1 t2 ty))))
      ((union lhs (Alloc id (TermSubst ctx e t1)
                            (TermSubst ctx e t2)
                            ty)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermCall name t))))
      ((union lhs (Call name (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermSingle t))))
      ((union lhs (Single (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConcat t1 t2))))
      ((union lhs (Concat (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

; Control Flow
; TODO
;; Substitution rules allow for substituting some new expression for the argument
;; in some new context.
;; It performs the substitution, copying over the equalities from the original eclass.
;; It only places context on the leaf nodes.

(ruleset subst)
(ruleset apply-subst-unions)

;; (Subst assumption to in) substitutes `to` for `(Arg ty)` in `in`.
;; It also replaces the leaf context in `to` with `assumption` using `AddContext`.
;; `assumption` *justifies* this substitution, as the context that the result is used in.
;; In other words, it must refine the equivalence relation of `in` with `to` as the argument.
(constructor Subst (Assumption Expr Expr) Expr :unextractable)

;; Used to delay unions for the subst ruleset.
;; This is necessary because substitution may not terminate if it can
;; observe its own results- it may create infinitly large terms.
;; Instead, we phase substitution by delaying resulting unions in this table.
;; After applying this table, substitutions and this table are cleared.
(constructor DelayedSubstUnion (Expr Expr) Expr :unextractable)

;; add a type rule to get the arg type of a substitution
;; this enables nested substitutions
(rule ((= lhs (Subst assum to in))
       (HasArgType to ty))
      ((HasArgType lhs ty))
      :ruleset subst)

;; Substitution typechecks only when the type of the
;; argument matches the type of the substitution.
(rule ((Subst assum to in)
       (HasArgType in ty)
       (HasType to ty2)
       (!= ty ty2)
       ;; tmptype disables typechecking
       (!= ty (TmpType))
       (!= ty2 (TmpType)))
      (
       (panic "Substitution type mismatch! Argument type must match type of substituted term"))
       :ruleset subst)


;; leaf node with context
;; replace this context- subst assumes the context is more specific
(rule ((= lhs (Subst assum to e))
       (= e (Arg _ty _oldctx))
       )
      ;; add the assumption `to`
      ((DelayedSubstUnion lhs (AddContext assum to))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Const c _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Const c newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Empty _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Empty newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)

;; Operators
(rule ((= e (Top op c1 c2 c3))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Top op (Subst assum to c1)
                 (Subst assum to c2)
                 (Subst assum to c3)))
       (subsume (Subst assum to e)))
         :ruleset subst)

(rule ((= e (Bop op c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Bop op (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Uop op c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Uop op (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)    

(rule ((= e (Get c1 index))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Get (Subst assum to c1) index))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Alloc id c1 c2 ty))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Alloc id (Subst assum to c1)
                   (Subst assum to c2)
                   ty))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Call name c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Call name (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)


;; Tuple operators
(rule ((= e (Single c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Single (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Concat c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Concat (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)

;; Control flow
(rule ((= lhs (Subst assum to inner))
       (= inner (Switch pred inputs c1))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (Switch (Subst assum to pred)
                 (Subst assum to inputs)
                 c1))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= lhs (Subst assum to inner))
       (= inner (If pred inputs c1 c2))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (If (Subst assum to pred)
             (Subst assum to inputs)
             c1
             c2))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= e (DoWhile in out))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (DoWhile (Subst assum to in)
                  out))
       (subsume (Subst assum to e)))
      :ruleset subst)

;; substitute into function (convenience for testing)
(rewrite (Subst assum to (Function name inty outty body))
         (Function name inty outty (Subst assum to body))
         :when ((ExprIsResolved body))
         :ruleset subst)



;; ########################### Apply subst unions

(rule ((DelayedSubstUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-subst-unions)

; We only have context for Exprs, not ListExprs.
(relation ContextOf (Expr Assumption))

(rule ((Arg ty ctx))
      ((ContextOf (Arg ty ctx) ctx))
      :ruleset always-run)
(rule ((Const c ty ctx))
      ((ContextOf (Const c ty ctx) ctx))
      :ruleset always-run)
(rule ((Empty ty ctx))
      ((ContextOf (Empty ty ctx) ctx))
        :ruleset always-run)

; Error checking - each expr should only have a single context
(rule ((ContextOf x ctx1)
       (ContextOf x ctx2)
       (!= ctx1 ctx2))
     (
         (panic "Equivalent expressions have nonequivalent context, breaking the single context invariant.")
     )
     :ruleset error-checking)


(rule ((Top op x y z) (ContextOf x ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf y ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf z ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf x ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf y ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Uop op x) (ContextOf x ctx))
    ((ContextOf (Uop op x) ctx)) :ruleset always-run)

(rule ((Get tup i) (ContextOf tup ctx))
    ((ContextOf (Get tup i) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf x ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf y ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Single x) (ContextOf x ctx))
    ((ContextOf (Single x) ctx)) :ruleset always-run)

(rule ((Switch pred inputs branches) (ContextOf pred ctx))
    ((ContextOf (Switch pred inputs branches) ctx)) :ruleset always-run)

(rule ((If pred inputs then else) (ContextOf pred ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((If pred inputs then else) (ContextOf inputs ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((DoWhile in pred-and-output) (ContextOf in ctx))
    ((ContextOf (DoWhile in pred-and-output) ctx)) :ruleset always-run)

(rule ((Call func arg) (ContextOf arg ctx))
    ((ContextOf (Call func arg) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf e ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf state ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(ruleset canon)

; Commutativity
(rewrite (Bop (Add) x y) (Bop (Add) y x) :ruleset canon)
(rewrite (Bop (Mul) x y) (Bop (Mul) y x) :ruleset canon)
(rewrite (Bop (Eq) x y) (Bop (Eq) y x) :ruleset canon)
(rewrite (Bop (And) x y) (Bop (And) y x) :ruleset canon)
(rewrite (Bop (Or) x y) (Bop (Or) y x) :ruleset canon)

; Canonicalize to <
; x > y ==> y < x
(rewrite (Bop (GreaterThan) x y) (Bop (LessThan) y x) :ruleset canon)

; x >= y ==> y < x + 1
; x >= y ==> y - 1 < x
(rule (
        (= lhs (Bop (GreaterEq) x y))
        (HasArgType x ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) y (Bop (Add) x (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) y (Const (Int 1) ty ctx)) x))
      )
      :ruleset canon)

; x <= y ==> x < y + 1
; x <= y ==> x - 1 < y
(rule (
        (= lhs (Bop (LessEq) x y))
        (HasArgType y ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) x (Bop (Add) y (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) x (Const (Int 1) ty ctx)) y))
      )
      :ruleset canon)


; Make Concats right-deep
(rewrite (Concat (Concat a b) c)
         (Concat a (Concat b c))
         :ruleset always-run)
; Simplify Concat's with empty
(rewrite (Concat (Empty ty ctx) x)
         x
         :ruleset always-run)
(rewrite (Concat x (Empty ty ctx))
         x
         :ruleset always-run)

; Make a tuple that is a sub-range of another tuple
;                   tuple start len
(constructor SubTuple (Expr  i64   i64) Expr :unextractable)

(rewrite (SubTuple expr x 0)
         (Empty ty ctx)
         :when ((HasArgType expr ty) (ContextOf expr ctx))
         :ruleset always-run)

(rewrite (SubTuple expr x 1)
         (Single (Get expr x))
         :ruleset always-run)

(rewrite (SubTuple expr a b)
         (Concat (Single (Get expr a)) (SubTuple expr (+ a 1) (- b 1)))
         :when ((> b 1))
         :ruleset always-run)

; Some of our rules (like ivt.egg) match on `Concat`.
; These may be missing if a tuple is used directly (i.e. (DoWhile inputs (If pred thn else))).
; So add these concats for every region in the database
(rule ((= lhs (DoWhile inputs body))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (If pred inputs thn els))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Switch pred inputs bodies))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Arg ty ctx))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)

; Also figure out what existing expressions are subtuples of other things
; this helps remove concat layers
(rule ((Get expr i))
      ((union (Single (Get expr i))
              (SubTuple expr i 1)))
      :ruleset always-run)

(rewrite (Concat (SubTuple expr a b)
                 (SubTuple expr (+ a b) c))
         (SubTuple expr a (+ b c))
         :ruleset always-run)
;; a subtuple which is the entire tuple is the tuple itself
;; this removes unecessary layers of concat
(rewrite (SubTuple expr 0 len)
         expr
         :when ((= len (tuple-length expr)))
         :ruleset always-run)

; Helper functions to remove one element from a tuple or type list
;                           tuple    idx
(constructor TupleRemoveAt    (Expr     i64) Expr     :unextractable)
(rewrite (TupleRemoveAt tuple idx)
         (Concat (SubTuple tuple 0 idx)
                 (SubTuple tuple (+ idx 1) (- len (+ idx 1))))
         :when ((= len (tuple-length tuple)))
         :ruleset always-run)
(rule ((TupleRemoveAt tuple idx)
       (= len (tuple-length tuple))
       (>= idx len))
      ((panic "Index out of bounds for TupleRemoveAt")) :ruleset always-run)

(constructor TypeListRemoveAt (TypeList i64) TypeList :unextractable)
(rule ((TypeListRemoveAt (TNil) _idx))
      ((panic "Index out of bounds for TypeListRemoveAt.")) :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) 0)
         xs
         :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) idx)
         (TCons x (TypeListRemoveAt xs (- idx 1)))
         :when ((> idx 0))
         :ruleset type-helpers)

;; Compute the tree size of program, not dag size
(function Expr-size (Expr) i64 :merge (min old new) )
(function ListExpr-size (ListExpr) i64 :merge (min old new))

(rule ((= expr (Function name tyin tyout out)) 
       (= sum (Expr-size out))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Const n ty assum))) 
      ((set (Expr-size expr) 1))  :ruleset always-run)

(rule ((= expr (Top op x y z))
       (= sum (+ (Expr-size z) (+ (Expr-size y) (Expr-size x)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Bop op x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Uop op x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Get tup i)) 
       (= sum (Expr-size tup))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Concat x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Single x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Switch pred inputs branches)) 
       (= sum  (+ (Expr-size inputs) (+ (ListExpr-size branches) (Expr-size pred)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (If pred inputs then else)) 
       (= sum (+ (Expr-size inputs) (+ (Expr-size else) (+ (Expr-size then) (Expr-size pred))))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (DoWhile in pred-and-output)) 
       (= sum (+ (Expr-size pred-and-output) (Expr-size in)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Arg ty assum))) 
      ((set (Expr-size expr) 1)) :ruleset always-run)

(rule ((= expr (Call func arg)) 
       (= sum (Expr-size arg))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((Empty ty assum)) ((set (Expr-size (Empty ty assum)) 0))  :ruleset always-run)

(rule ((= expr (Cons hd tl)) 
       (= sum (+ (ListExpr-size tl) (Expr-size hd)))) 
      ((set (ListExpr-size expr) sum)) :ruleset always-run)

(rule ((Nil)) 
      ((set (ListExpr-size (Nil)) 0))  :ruleset always-run)

(rule ((= expr (Alloc id e state ty)) ;; do state edge's expr should be counted?
        (= sum (Expr-size e))) 
        ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

;; Like Subst but for dropping inputs to a region
;; See subst.egg for more implementation documentation

(ruleset drop)
(ruleset apply-drop-unions)
(ruleset cleanup-drop)

;; (DropAt ctx idx in) removes all references to `(Get (Arg ...) idx)` in `in`.
;; It also replaces the leaf contexts with `ctx` and fixes up argument types,
;; as well as updating `(Get (Arg ...) j)` to `(Get (Arg ...) (- j 1))` for j > idx.
(constructor DropAt (Assumption i64 Expr) Expr :unextractable)
(constructor DelayedDropUnion (Expr Expr) Expr :unextractable)

;; Helper that precomputes the arg type that we need
(constructor DropAtInternal (Type Assumption i64 Expr) Expr :unextractable)
(rule ((= lhs (DropAt ctx idx in))
       (HasArgType in (TupleT oldty)))

      ((let newty (TupleT (TypeListRemoveAt oldty idx)))
       (union lhs (DropAtInternal newty ctx idx in)))
      :ruleset drop)

;; Leaves
(rule ((= lhs (DropAtInternal newty newctx idx (Const c oldty oldctx))))
      ((DelayedDropUnion lhs (Const c newty newctx)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Empty oldty oldctx))))
      ((DelayedDropUnion lhs (Empty newty newctx)))
      :ruleset drop)
; get stuck on purpose if `i = idx` or if we find a bare `Arg`
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (< i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) i)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (> i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) (- i 1))))
      :ruleset drop)

;; Operators
(rule ((= lhs (DropAtInternal newty newctx idx (Top op c1 c2 c3)))
       (ExprIsResolved (Top op c1 c2 c3)))
      ((DelayedDropUnion lhs (Top op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            (DropAtInternal newty newctx idx c3))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Bop op c1 c2)))
       (ExprIsResolved (Bop op c1 c2)))
      ((DelayedDropUnion lhs (Bop op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Uop op c1)))
       (ExprIsResolved (Uop op c1)))
      ((DelayedDropUnion lhs (Uop op
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; this is okay because we get stuck at `Arg`s
(rule ((= lhs (DropAtInternal newty newctx idx (Get c1 index)))
       (ExprIsResolved (Get c1 index)))
      ((DelayedDropUnion lhs (Get
            (DropAtInternal newty newctx idx c1)
            index)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Alloc id c1 c2 ty)))
       (ExprIsResolved (Alloc id c1 c2 ty)))
      ((DelayedDropUnion lhs (Alloc id
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            ty)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Call name c1)))
       (ExprIsResolved (Call name c1)))
      ((DelayedDropUnion lhs (Call name
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; Tuple operators
(rule ((= lhs (DropAtInternal newty newctx idx (Single c1)))
       (ExprIsResolved (Single c1)))
      ((DelayedDropUnion lhs (Single
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Concat c1 c2)))
       (ExprIsResolved (Concat c1 c2)))
      ((DelayedDropUnion lhs (Concat
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

;; Control flow
(rule ((= lhs (DropAtInternal newty newctx idx (Switch pred inputs c1)))
       (ExprIsResolved (Switch pred inputs c1)))
      ((DelayedDropUnion lhs (Switch
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (If pred inputs c1 c2)))
       (ExprIsResolved (If pred inputs c1 c2)))
      ((DelayedDropUnion lhs (If
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1
            c2)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (DoWhile in out)))
       (ExprIsResolved (DoWhile in out)))
      ((DelayedDropUnion lhs (DoWhile
            (DropAtInternal newty newctx idx in)
            out)))
      :ruleset drop)

(rewrite (DropAtInternal newty newctx idx (Function name inty outty body))
         (Function name inty outty (DropAtInternal newty newctx idx body))
         :when ((ExprIsResolved body))
         :ruleset drop)



;; ########################### Apply drop unions

(rule ((DelayedDropUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-drop-unions)

;; ########################### Cleanup Dropat, DropAtInternal and DelayedDropUnion

(rule ((ExprIsResolved (DropAt newctx idx in)))
      ((subsume (DropAt newctx idx in)))
      :ruleset cleanup-drop)

(rule ((ExprIsResolved (DropAtInternal newty newctx idx in)))
      ((subsume (DropAtInternal newty newctx idx in)))
      :ruleset cleanup-drop)

(rule ((DelayedDropUnion lhs rhs))
      ((subsume (DelayedDropUnion lhs rhs)))
      :ruleset cleanup-drop)

(ruleset interval-analysis)
(ruleset interval-rewrite)

(datatype Bound
  (IntB i64)
  (BoolB bool)
  (Dead) ;; a bound on dead code, so any value can be chosen
  (bound-max Bound Bound)
  (bound-min Bound Bound))

; bound tables
(function lo-bound (Expr) Bound :merge (bound-max old new))
(function hi-bound (Expr) Bound :merge (bound-min old new))

; if lo > hi, we have proven that this code is dead (as long as all our rules are sound)
; In this case, interval analysis might start going crazy and fail to saturate
; So we immediately set the bounds to (Dead)
(rule (
         (= (IntB lo) (lo-bound expr))
         (= (IntB hi) (hi-bound expr))
         (> lo hi)
       ) 
       ((set (lo-bound expr) (Dead))
        (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)
(rule (
      (= (BoolB true) (lo-bound expr))
      (= (BoolB false) (hi-bound expr))
      ) 
      ((set (lo-bound expr) (Dead))
       (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)

; combinators
(rewrite (bound-max (IntB x) (IntB y))
         (IntB (max x y))
         :ruleset interval-analysis)
(rewrite (bound-min (IntB x) (IntB y))
         (IntB (min x y))
         :ruleset interval-analysis)
(rewrite (bound-max (BoolB x) (BoolB y))
         (BoolB (or x y))
         :ruleset interval-analysis)
(rewrite (bound-min (BoolB x) (BoolB y))
         (BoolB (and x y))
         :ruleset interval-analysis)
(rewrite (bound-max (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-max anything (Dead))
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min anything (Dead))
         (Dead)
         :ruleset interval-analysis)

; =================================
; Constants
; =================================
(rule ((= lhs (Const (Int x) ty ctx)))
      (
        (set (lo-bound lhs) (IntB x))
        (set (hi-bound lhs) (IntB x))
      )
      :ruleset interval-analysis)

(rule ((= lhs (Const (Bool x) ty ctx)))
      (
        (set (lo-bound lhs) (BoolB x))
        (set (hi-bound lhs) (BoolB x))
      )
      :ruleset interval-analysis)

; =================================
; Constant Folding
; =================================
(rule (
       (= (IntB x) (lo-bound expr))
       (= (IntB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Int x) ty ctx)))
      :ruleset interval-analysis)

(rule (
       (= (BoolB x) (lo-bound expr))
       (= (BoolB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool x) ty ctx)))
      :ruleset interval-analysis)

; lower bound being true means the bool must be true
(rule (
       (= (BoolB true) (lo-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool true) ty ctx)))
      :ruleset interval-analysis)

; upper bound being false means the bool must be false
(rule (
       (= (BoolB false) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool false) ty ctx)))
      :ruleset interval-analysis)

; =================================
; Arithmetic
; =================================
; + a b interval is (+ la lb) (+ ha hb)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (lo-bound lhs) (IntB (+ la lb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (IntB (+ ha hb))))
      :ruleset interval-analysis)

; - a b interval is (- la hb) (- ha lb)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (lo-bound lhs) (IntB (- la hb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (hi-bound lhs) (IntB (- ha lb))))
      :ruleset interval-analysis)

; Multiplication for two constants
; TODO: Make fancier interval analysis
(rule (
       (= lhs (Bop (Mul) a b))
       (= (IntB x) (lo-bound a))
       (= (IntB x) (hi-bound a))
       (= (IntB y) (lo-bound b))
       (= (IntB y) (hi-bound b))
      )
      (
       (set (lo-bound lhs) (IntB (* x y)))
       (set (hi-bound lhs) (IntB (* x y)))
      )
      :ruleset interval-analysis)

; negative * negative is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (< hi-x 0)
        (< hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; negative * positive is negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (< hi-x 0) ; x < 0 (x is negative)
        (> lo-y 0) ; y > 0 (y is positive)
      )
      ((set (hi-bound lhs) (IntB -1)))
      :ruleset interval-analysis)

; positive * positive is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (> lo-x 0)
        (> lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; non-positive * non-positive is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (<= hi-x 0)
        (<= hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-positive * non-negative is non-positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (<= hi-x 0) ; x <= 0 (x is non-positive)
        (>= lo-y 0) ; y >= 0 (y is non-negative)
      )
      ((set (hi-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-negative * non-negative is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (>= lo-x 0)
        (>= lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; < a b interval is (< ha lb) (< la hb)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (BoolB (bool-< ha lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (BoolB (bool-< la hb))))
      :ruleset interval-analysis)

; Abs
; abs(x) = x if x >= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB lx) (lo-bound x))
        (>= lx 0)
      )
      ((union lhs x))
      :ruleset interval-rewrite)

; abs(x) = -x if x <= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB hx) (hi-bound x))
        (<= hx 0)
        (HasArgType lhs ty)
        (ContextOf lhs ctx)
      )
      ((union lhs (Bop (Sub) (Const (Int 0) ty ctx) x)))
      :ruleset interval-rewrite)

; =================================
; Conditionals
; =================================
; if the predicate is true, merge with then branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB true) (lo-bound cond))
      )
      ((union lhs (Subst if_ctx inputs thn)))
      :ruleset interval-rewrite)

; if the predicate is false, merge with else branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB false) (hi-bound cond))
      )
      ((union lhs (Subst if_ctx inputs els)))
      :ruleset interval-rewrite)

; lo-bound of If is the min of the lower bounds
; hi-bound of If is the max of the upper bounds
(rule (
        (= lhs (If cond inputs thn els))
        (= lo-thn (lo-bound thn))
        (= lo-els (lo-bound els))
      )
      ((set (lo-bound lhs) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound thn))
       (= hi-els (hi-bound els))
      )
      ((set (hi-bound lhs) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; Same rules, but for Ifs that have multiple outputs
(rule (
        (= lhs (If pred inputs thn els))
        (= lo-thn (lo-bound (Get thn i)))
        (= lo-els (lo-bound (Get els i)))
      )
      ((set (lo-bound (Get lhs i)) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound (Get thn i)))
       (= hi-els (hi-bound (Get els i)))
      )
      ((set (hi-bound (Get lhs i)) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; If the If takes a tuple
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was true, so we know expr is at most (hi-bound value) - 1
      ((set (hi-bound (Get ctx i)) (IntB (- v 1))))
      :ruleset interval-analysis)
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was false, so we know expr is at least (lo-bound value)
      ((set (lo-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was true, so we know expr is at least (lo-bound value) + 1
      ((set (lo-bound (Get ctx i)) (IntB (+ v 1)))) 
      :ruleset interval-analysis)
(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was false, so we know expr is at most (hi-bound value)
      ((set (hi-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

;; Push intervals for inputs into if region
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= lo (lo-bound (Get inputs i)))

      )
      ((set (lo-bound (Get ctx i)) lo))
      :ruleset interval-analysis)
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= hi (hi-bound (Get inputs i)))

      )
      ((set (hi-bound (Get ctx i)) hi))
      :ruleset interval-analysis)

; (if (a == b) thn els)
; in the thn branch, we know that a has the same bounds as b
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx  (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB lo) (lo-bound val))
      )
      ((set (lo-bound (Get ctx i)) (IntB lo)))
      :ruleset interval-analysis)
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB hi) (hi-bound val))
      )
      ((set (hi-bound (Get ctx i)) (IntB hi)))
      :ruleset interval-analysis)


(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       ;; note that some_ctx is not the same as (InLoop inputs outputs)
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (lo-bound (Get inputs ith)))
      )
      (
       (set (lo-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)
(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (hi-bound (Get inputs ith)))
      )
      (
       (set (hi-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)


(ruleset switch_rewrite)
(ruleset always-switch-rewrite)

; if a < b then a else b ~~> (min a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))
      )
      ((union (Get if_e k) (Bop (Smin) a b)))
      :ruleset switch_rewrite)

; if a < b then b else a ~~> (max a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then b else a
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) j))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) i))
      )
      ((union (Get if_e k) (Bop (Smax) a b)))
      :ruleset switch_rewrite) 

; if pred then a else b ~~> (select pred a b)
; where a and b are inputs to the region
(rule (
       (= if_e (If pred inputs thn els))
       (= a (Get inputs i))
       (= b (Get inputs j))

       ; if pred then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))

       ; If i = j, then the arg is just passed through the if, and we
       ; don't need a select. This will get handled by the passthrough rules.
       (!= i j)
       )
       (
       (union (Get if_e k) (Top (Select) pred a b))
       )
       :ruleset switch_rewrite)

(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)
       (= (Get thn i) (Const x _ty (InIf true pred inputs)))
       (= (Get els i) (Const y _ty (InIf false pred inputs)))
      )
      ((union (Get if_e i) (Top (Select) pred (Const x ty ctx) (Const y ty ctx))))
      :ruleset switch_rewrite)

; if pred then A else Const -> select pred A Const
; where A is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       ; input to the if
       (= a (Get inputs i))
       (= (Get thn k) (Get (Arg _ty (InIf true pred inputs)) i))

       (= els_out (Get els k))
       (= (IntB y) (lo-bound els_out))
       (= (IntB y) (hi-bound els_out))
       )
       (
       (union (Get if_e k) (Top (Select) pred a (Const (Int y) ty ctx)))
       )
       :ruleset switch_rewrite
)

; if pred then Const else B -> select pred Const B
; where B is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       (= thn_out (Get thn k))
       (= (IntB y) (lo-bound thn_out))
       (= (IntB y) (hi-bound thn_out))

       ; input to the if
       (= b (Get inputs i))
       (= (Get els k) (Get (Arg _ty (InIf false pred inputs)) i))
      )
      (
       (union (Get if_e k) (Top (Select) pred (Const (Int y) ty ctx) b))
      )
      :ruleset switch_rewrite
)

; if (a and b) X Y ~~> if a (if b X Y) Y
(rule ((= lhs (If (Bop (And) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf true  a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let inner_X (AddContext (InIf true  inner_pred sub_arg_true) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_true) Y))
       (let outer_Y (Subst      (InIf false a          outer_ins) sub_arg_false Y))

       (let inner (If inner_pred sub_arg_true inner_X inner_Y))
       (union lhs (If a          outer_ins    inner   outer_Y)))

       :ruleset switch_rewrite)

; if (a or b) X Y ~~> if a X (if b X Y)
(rule ((= lhs (If (Bop (Or) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf false a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let outer_X (Subst      (InIf true  a          outer_ins) sub_arg_true X))
       (let inner_X (AddContext (InIf true  inner_pred sub_arg_false) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_false) Y))

       (let inner (If inner_pred sub_arg_false inner_X inner_Y))
       (union lhs (If a          outer_ins     outer_X inner  )))

       :ruleset switch_rewrite)

(rewrite (If (Const (Bool true)  ty ctx) ins thn els)
         (Subst ctx ins thn)
         :ruleset always-switch-rewrite)

(rewrite (If (Const (Bool false) ty ctx) ins thn els)
         (Subst ctx ins els)
         :ruleset always-switch-rewrite)

(ruleset select_opt)


;; inlined (Get thn i) makes the query faster ):
(rule
       (
        (= if_e (If pred inputs thn els))

        (ExprIsPure (Get thn i))
        (ExprIsPure (Get els i))
        
        (> 10 (Expr-size (Get thn i))) ; TODO: Tune these size limits
        (> 10 (Expr-size (Get els i)))
        (= (TCPair t1 c1) (ExtractedExpr (Get thn i)))
        (= (TCPair t2 c2) (ExtractedExpr (Get els i)))

        (ContextOf if_e ctx)
       )
       (
        (union (Get if_e i)
               (Top (Select) pred (TermSubst ctx inputs t1) (TermSubst ctx inputs t2)))
       )
       :ruleset select_opt
)
; Simple rewrites that don't do a ton with control flow.

(ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int 0) ty ctx) e) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 0) ty ctx)) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) (Const (Int 1) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 1) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int 0) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Add) e (Const (Int 0) ty ctx) ) e :ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (* i j)) ty ctx) :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (+ i j)) ty ctx) :ruleset peepholes)

(rewrite (Bop (And) (Const (Bool true) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool true) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (And) (Const (Bool false) ty ctx) e) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool false) ty ctx)) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool false) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool false) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool true) ty ctx) e) (Const (Bool true) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool true) ty ctx)) (Const (Bool true) ty ctx) :ruleset peepholes)

(rule (
        (= expr (Bop (Sub) x x))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Const (Int 0) ty ctx)))
      :ruleset peepholes)

; (x - y) + z => x + (z - y)
(rewrite (Bop (Add) (Bop (Sub) x y) z) (Bop (Add) x (Bop (Sub) z y)) :ruleset peepholes)

; (a + b) - c => a + (b - c)
(rewrite (Bop (Sub) (Bop (Add) a b) c) (Bop (Add) a (Bop (Sub) b c)) :ruleset peepholes)

; (a * x) + a => a * (x + 1)
(rule (
        (= expr (Bop (Add) (Bop (Mul) a x) a))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Bop (Mul) a (Bop (Add) x (Const (Int 1) ty ctx)))))
      :ruleset peepholes)

(rewrite (Top (Select) pred x x) x :ruleset peepholes)

; constant fold `(x + const1) + const2` even when x is not constant
(rewrite (Bop (Add) (Bop (Add) x (Const (Int i) ty ctx)) (Const (Int j) ty ctx))
         (Bop (Add) x (Const (Int (+ i j)) ty ctx))
         :ruleset peepholes)

; ptradd(ptradd(p, x), y) => ptradd(p, x + y)
(rewrite (Bop (PtrAdd) (Bop (PtrAdd) p x) y)
         (Bop (PtrAdd) p (Bop (Add) x y))
         :ruleset peepholes)

(datatype IntOrInfinity
    (Infinity)
    (NegInfinity)
    (I i64))

(constructor MaxIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MaxIntOrInfinity (Infinity) _) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity _ (Infinity)) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity (NegInfinity) x) x :ruleset always-run)
(rewrite (MaxIntOrInfinity x (NegInfinity)) x :ruleset always-run)
(rewrite (MaxIntOrInfinity (I x) (I y)) (I (max x y)) :ruleset always-run)

(constructor MinIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MinIntOrInfinity (NegInfinity) _) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity _ (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity (Infinity) x) x :ruleset always-run)
(rewrite (MinIntOrInfinity x (Infinity)) x :ruleset always-run)
(rewrite (MinIntOrInfinity (I x) (I y)) (I (min x y)) :ruleset always-run)

(constructor AddIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (AddIntOrInfinity (Infinity) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (Infinity) (I _)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (I _)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I x) (I y)) (I (+ x y)) :ruleset always-run)

(datatype IntInterval (MkIntInterval IntOrInfinity IntOrInfinity))

(constructor UnionIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (UnionIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MinIntOrInfinity lo1 lo2) (MaxIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor IntersectIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (IntersectIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MaxIntOrInfinity lo1 lo2) (MinIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor AddIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (AddIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (AddIntOrInfinity lo1 lo2)
                        (AddIntOrInfinity hi1 hi2))
         :ruleset always-run)


(datatype List<i64+IntInterval> 
  (Nil-List<i64+IntInterval>)
  (Cons-List<i64+IntInterval> i64 IntInterval List<i64+IntInterval>))

(function Length-List<i64+IntInterval> (List<i64+IntInterval>) i64 :no-merge)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((IsEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(relation IsNonEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((IsNonEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(constructor RevConcat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (RevConcat-List<i64+IntInterval> (Nil-List<i64+IntInterval>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<i64+IntInterval> (Cons-List<i64+IntInterval> hd0 hd1 tl) l)
         (RevConcat-List<i64+IntInterval> tl (Cons-List<i64+IntInterval> hd0 hd1 l))
         :ruleset always-run)

(constructor Rev-List<i64+IntInterval> (List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Rev-List<i64+IntInterval> m)
         (RevConcat-List<i64+IntInterval> m (Nil-List<i64+IntInterval>))
         :ruleset always-run)

(constructor Concat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Concat-List<i64+IntInterval> x y)
         (RevConcat-List<i64+IntInterval> (Rev-List<i64+IntInterval> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<i64+IntInterval> (List<i64+IntInterval>))
(relation SuffixAt-List<i64+IntInterval> (List<i64+IntInterval> i64 List<i64+IntInterval>))
(relation At-List<i64+IntInterval> (List<i64+IntInterval> i64 i64 IntInterval))
(rule ((DemandAt-List<i64+IntInterval> x))
      ((SuffixAt-List<i64+IntInterval> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<i64+IntInterval> x i (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((SuffixAt-List<i64+IntInterval> x (+ i 1) tl)
       (At-List<i64+IntInterval> x i hd0 hd1))
      :ruleset always-run)

(constructor Union-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor UnionHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Union-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (UnionHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; both m1 and m2 empty
  (rewrite (UnionHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)
  ; take from m1 when m2 empty and vice versa
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      res)
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      tl
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      (Nil-List<i64+IntInterval>)
      res)
    (UnionHelper-List<i64+IntInterval>
      tl
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)

  ; when both nonempty and smallest key different, take smaller key
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 l2 (Cons-List<i64+IntInterval> k1 a1 res))))
        :ruleset always-run)
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f
           (UnionHelper-List<i64+IntInterval> l1 tl2 (Cons-List<i64+IntInterval> k2 b1 res))))
        :ruleset always-run)

  ; when shared smallest key, union interval
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 tl2
             (Cons-List<i64+IntInterval> k (UnionIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor Intersect-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor IntersectHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Intersect-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (IntersectHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; m1 or m2 empty
  (rewrite (IntersectHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) m2 res)
           res
           :ruleset always-run)
  (rewrite (IntersectHelper-List<i64+IntInterval> m1 (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)

  ; when both nonempty and smallest key different, drop smaller key
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)

(datatype MyBool (MyTrue) (MyFalse))

(constructor IntIntervalValid (IntInterval) MyBool)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyTrue)
         :when ((<= lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyFalse)
         :when ((> lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (NegInfinity) _))
         (MyTrue)
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval _ (Infinity)))
         (MyTrue)
         :ruleset always-run)

(constructor ConsIfNonEmpty (i64 IntInterval List<i64+IntInterval>)
          List<i64+IntInterval>
          :cost 100)
(rule ((ConsIfNonEmpty k v tl))
      ((IntIntervalValid v))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyTrue) (IntIntervalValid v)))
      ((union f (Cons-List<i64+IntInterval> k v tl)))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyFalse) (IntIntervalValid v)))
      ((union f tl))
      :ruleset always-run)

  ; when shared smallest key, intersect interval
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (IntersectHelper-List<i64+IntInterval> tl1 tl2
             (ConsIfNonEmpty k (IntersectIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor AddIntIntervalToAll (IntInterval List<i64+IntInterval>)
                              List<i64+IntInterval>)
(rewrite (AddIntIntervalToAll _ (Nil-List<i64+IntInterval>))
         (Nil-List<i64+IntInterval>)
         :ruleset always-run)
(rewrite (AddIntIntervalToAll x (Cons-List<i64+IntInterval> allocid offset tl))
         (Cons-List<i64+IntInterval> allocid (AddIntInterval x offset)
           (AddIntIntervalToAll x tl))
         :ruleset always-run)

(datatype PtrPointees
  (PointsTo List<i64+IntInterval>)
  (PointsAnywhere))

(constructor AddIntIntervalToPtrPointees (IntInterval PtrPointees) PtrPointees)
(rewrite (AddIntIntervalToPtrPointees interval (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (AddIntIntervalToPtrPointees interval (PointsTo l))
         (PointsTo (AddIntIntervalToAll interval l))
         :ruleset always-run)

(constructor Union-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Union-PtrPointees (PointsAnywhere) _)
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees _ (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Union-List<i64+IntInterval> x y))
         :ruleset always-run)
(constructor Intersect-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Intersect-PtrPointees (PointsAnywhere) x)
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees x (PointsAnywhere))
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Intersect-List<i64+IntInterval> x y))
         :ruleset always-run)

(relation PointsNowhere-PtrPointees (PtrPointees))
(rule ((= f (PointsTo x))
       (IsEmpty-List<i64+IntInterval> x))
      ((PointsNowhere-PtrPointees f))
      :ruleset always-run)


(datatype List<PtrPointees> 
  (Nil-List<PtrPointees>)
  (Cons-List<PtrPointees> PtrPointees List<PtrPointees>))

(function Length-List<PtrPointees> (List<PtrPointees>) i64 :no-merge)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((IsEmpty-List<PtrPointees> x))
      :ruleset always-run)

(relation IsNonEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Cons-List<PtrPointees> hd0 tl)))
      ((IsNonEmpty-List<PtrPointees> x))
      :ruleset always-run)

(constructor RevConcat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (RevConcat-List<PtrPointees> (Nil-List<PtrPointees>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<PtrPointees> (Cons-List<PtrPointees> hd0 tl) l)
         (RevConcat-List<PtrPointees> tl (Cons-List<PtrPointees> hd0 l))
         :ruleset always-run)

(constructor Rev-List<PtrPointees> (List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Rev-List<PtrPointees> m)
         (RevConcat-List<PtrPointees> m (Nil-List<PtrPointees>))
         :ruleset always-run)

(constructor Concat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Concat-List<PtrPointees> x y)
         (RevConcat-List<PtrPointees> (Rev-List<PtrPointees> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<PtrPointees> (List<PtrPointees>))
(relation SuffixAt-List<PtrPointees> (List<PtrPointees> i64 List<PtrPointees>))
(relation At-List<PtrPointees> (List<PtrPointees> i64 PtrPointees))
(rule ((DemandAt-List<PtrPointees> x))
      ((SuffixAt-List<PtrPointees> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<PtrPointees> x i (Cons-List<PtrPointees> hd0 tl)))
      ((SuffixAt-List<PtrPointees> x (+ i 1) tl)
       (At-List<PtrPointees> x i hd0))
      :ruleset always-run)

(relation All<PointsNowhere-PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (PointsNowhere-PtrPointees hd0)
       (All<PointsNowhere-PtrPointees> tl))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
        


(constructor Zip<Union-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Union-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Union-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Union-PtrPointees x0 y0)
            (Zip<Union-PtrPointees> tl1 tl2))
         :when ((= (Length-List<PtrPointees> tl1) (Length-List<PtrPointees> tl2)))
         :ruleset always-run)

(constructor Zip<Intersect-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Intersect-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Intersect-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Intersect-PtrPointees x0 y0)
            (Zip<Intersect-PtrPointees> tl1 tl2))
         :ruleset always-run)


(sort ExprSetPrim (Set Expr))

(datatype ExprSet (ES ExprSetPrim))

(constructor ExprSet-intersect (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-intersect (ES set1) (ES set2)) (ES (set-intersect set1 set2))
         :ruleset memory-helpers)
(constructor ExprSet-union (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-union (ES set1) (ES set2)) (ES (set-union set1 set2))
         :ruleset memory-helpers)
(relation ExprSet-contains (ExprSet Expr))
(constructor ExprSet-insert (ExprSet Expr) ExprSet)
(rewrite (ExprSet-insert (ES set1) x)
         (ES (set-insert set1 x))
         :ruleset memory-helpers)
(function ExprSet-length (ExprSet) i64 :no-merge)


; ============================
; Pointees
; ============================


; List<i64+IntInterval> is used as an association list; the i64 keys
; (corresponding to alloc ids) are always unique and sorted, the IntInterval
; values correspond to offset ranges.
;
; (TuplePointsTo [{0->[4,5], 1->[0,0]}, {0->[0,0]}])
; indicates a tuple with two components.
; - The first component might point to Alloc 0 at offsets 4 or 5,
;   or Alloc 1 at offset 0
; - The second component points to Alloc 0 at offset 0
(datatype Pointees
          (TuplePointsTo List<PtrPointees>)
          (PtrPointsTo PtrPointees))

(constructor UnwrapPtrPointsTo (Pointees) PtrPointees)
(rewrite (UnwrapPtrPointsTo (PtrPointsTo x))
         x
         :ruleset memory-helpers)
(constructor UnwrapTuplePointsTo (Pointees) List<PtrPointees>)
(rewrite (UnwrapTuplePointsTo (TuplePointsTo x))
         x
         :ruleset memory-helpers)

(relation PointsNowhere (Pointees))
(rule ((= f (PtrPointsTo x))
       (PointsNowhere-PtrPointees x))
      ((PointsNowhere f))
      :ruleset memory-helpers)
(rule ((= f (TuplePointsTo l))
       (All<PointsNowhere-PtrPointees> l))
      ((PointsNowhere f))
      :ruleset memory-helpers)

(constructor UnionPointees (Pointees Pointees) Pointees)
(rewrite (UnionPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Union-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (UnionPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Union-PtrPointees> x y))
         :when ((= (Length-List<PtrPointees> x) (Length-List<PtrPointees> y)))
         :ruleset memory-helpers)
(constructor IntersectPointees (Pointees Pointees) Pointees)
(rewrite (IntersectPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Intersect-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (IntersectPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Intersect-PtrPointees> x y))
         :ruleset memory-helpers)

(constructor GetPointees (Pointees i64) Pointees)
(rule ((= f (GetPointees (TuplePointsTo l) i))
       (At-List<PtrPointees> l i x))
      ((union f (PtrPointsTo x)))
      :ruleset memory-helpers)

(constructor PointeesDropFirst (Pointees) Pointees)
(rewrite (PointeesDropFirst (TuplePointsTo (Cons-List<PtrPointees> hd tl)))
         (TuplePointsTo tl)
         :ruleset memory-helpers)

; ============================
; Resolved
; ============================

; Resolved checks if an e-class contains a term containing only constructors and
; primitives; i.e. whether equality is decideable
(relation Resolved-IntOrInfinity (IntOrInfinity))
(rule ((= f (I _)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (Infinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (NegInfinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)

(relation Resolved-IntInterval (IntInterval))
(rule ((= f (MkIntInterval lo hi))
       (Resolved-IntOrInfinity lo)
       (Resolved-IntOrInfinity hi))
      ((Resolved-IntInterval f))
      :ruleset memory-helpers)

(relation Resolved-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= f (Nil-List<i64+IntInterval>)))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<i64+IntInterval> allocid offsets tl))
       (Resolved-List<i64+IntInterval> tl)
       (Resolved-IntInterval offsets))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)

(relation Resolved-PtrPointees (PtrPointees))
(rule ((= f (PointsAnywhere)))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)
(rule ((= f (PointsTo x))
       (Resolved-List<i64+IntInterval> x))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)

(relation Resolved-List<PtrPointees> (List<PtrPointees>))
(rule ((= f (Nil-List<PtrPointees>)))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<PtrPointees> hd tl))
       (Resolved-List<PtrPointees> tl)
       (Resolved-PtrPointees hd))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)

(relation Resolved-Pointees (Pointees))
(rule ((= f (TuplePointsTo x))
       (Resolved-List<PtrPointees> x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)
(rule ((= f (PtrPointsTo x))
       (Resolved-PtrPointees x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)


;;;;;

(constructor BaseTypeToPtrPointees (BaseType) PtrPointees :cost 100)
(rewrite (BaseTypeToPtrPointees (PointerT _))
         (PointsAnywhere)
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (IntT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (StateT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (BoolT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)

(constructor TypeListToList<PtrPointees> (TypeList) List<PtrPointees> :cost 1000)
(rewrite (TypeListToList<PtrPointees> (TNil))
         (Nil-List<PtrPointees>)
         :ruleset memory-helpers)
(rewrite (TypeListToList<PtrPointees> (TCons hd tl))
         (Cons-List<PtrPointees>
            (BaseTypeToPtrPointees hd)
            (TypeListToList<PtrPointees> tl))
         :ruleset memory-helpers)

(constructor TypeToPointees (Type) Pointees :cost 1000)
(rewrite (TypeToPointees (TupleT tylist))
         (TuplePointsTo (TypeListToList<PtrPointees> tylist))
         :ruleset memory-helpers)
(rewrite (TypeToPointees (Base basety))
         (PtrPointsTo (BaseTypeToPtrPointees basety))
         :ruleset memory-helpers)

; ============================
; Update PointerishType
; ============================

(relation PointerishType (Type))
(relation PointerishTypeList (TypeList))

(rule ((= f (Base (PointerT ty))))
      ((PointerishType f))
      :ruleset always-run)

(rule ((= f (TCons (PointerT ty) tl)))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TCons hd tl))
       (PointerishTypeList tl))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TupleT l))
       (PointerishTypeList l))
      ((PointerishType f))
      :ruleset always-run)

; ============================
; Update PointsToCells
; ============================

;                             arg pointees  result pointees
(constructor PointsToCells (Expr Pointees)     Pointees :unextractable) 

; Top-level demand
(rule ((Function name in-ty out-ty body))
      ((PointsToCells body (TypeToPointees in-ty)))
      :ruleset memory-helpers)

; Demand PointsToCells along state edge and pointer-typed values
(rule ((PointsToCells (Bop (Print) e state) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Load) e state) ap))
      ((PointsToCells e ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Top (Write) ptr val state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Alloc id sz state ty) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Free) ptr state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Get x i) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Concat x y) ap))
      ((PointsToCells x ap)
       (PointsToCells y ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Single x) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)

; Compute and propagate PointsToCells
(rewrite (PointsToCells concat-x-y aps)
         (TuplePointsTo (Concat-List<PtrPointees>
           (UnwrapTuplePointsTo (PointsToCells x aps))
           (UnwrapTuplePointsTo (PointsToCells y aps))))
         :when ((= concat-x-y (Concat x y))
                (HasType concat-x-y ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells get-x-i aps)
         (GetPointees (PointsToCells x aps) i)
         :when ((= get-x-i (Get x i))
                (HasType get-x-i ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells (Single x) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (UnwrapPtrPointsTo (PointsToCells x aps))
             (Nil-List<PtrPointees>)))
         :when ((HasType (Single x) ty) (PointerishType ty))
         :ruleset memory-helpers) 

(rewrite (PointsToCells (Arg ty_ ctx) aps)
         aps
         :when ((HasType (Arg ty_ ctx) ty) (PointerishType ty))
         :ruleset memory-helpers)

; Allow non-pointer types to resolve
(rule ((PointsToCells x aps)
       (HasType x ty))
      ((TypeToPointees ty))
      :ruleset memory-helpers)
(rule ((= f (PointsToCells x aps))
       (HasType x ty)
       (= pointees (TypeToPointees ty))
       (PointsNowhere pointees))
      ((union f pointees))
      :ruleset memory-helpers)

(rewrite (PointsToCells (Bop (PtrAdd) x e) aps)
         (PtrPointsTo
           (AddIntIntervalToPtrPointees
             (MkIntInterval (I lo) (I hi))
             (UnwrapPtrPointsTo (PointsToCells x aps))))
         :when ((= (IntB lo) (lo-bound e))
                (= (IntB hi) (hi-bound e)))
         :ruleset memory-helpers)

(rewrite (PointsToCells (If c inputs t e) aps)
         (UnionPointees
           (PointsToCells t (PointsToCells inputs aps))
           (PointsToCells e (PointsToCells inputs aps)))
         :when ((HasType (If c inputs t e) ty) (PointerishType ty))
         :ruleset memory)

(rewrite (PointsToCells (Alloc id sz state ty) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (PointsTo
               (Cons-List<i64+IntInterval>
                 id
                 (MkIntInterval (I 0) (I 0))
                 (Nil-List<i64+IntInterval>)))
             (Cons-List<PtrPointees>
               (PointsTo (Nil-List<i64+IntInterval>)) ; state output points to nothing
               (Nil-List<PtrPointees>))))
         :ruleset memory-helpers)

; arg pointees * loop in * loop out * i64 -> result pointees
(constructor PointsToCellsAtIter (Pointees Expr Expr i64) Pointees)

; compute first two
(rule ((= e (DoWhile inputs pred-body))
       (PointsToCells e aps))
      ((set (PointsToCellsAtIter aps inputs pred-body 0)
            (PointsToCells inputs aps))
       (set (PointsToCellsAtIter aps inputs pred-body 1)
            (UnionPointees
              (PointsToCellsAtIter aps inputs pred-body 0)
              (PointeesDropFirst
                (PointsToCells pred-body (PointsToCellsAtIter aps inputs pred-body 0))))))
      :ruleset memory-helpers)

; avoid quadratic query
(function succ (i64) i64 :no-merge)
(rule ((PointsToCellsAtIter aps inputs pred-body i))
      ((set (succ i) (+ i 1)))
      :ruleset memory-helpers)

; Note that this rule is bounded by ruleset memory
(rule ((= pointees0 (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees1 (PointsToCellsAtIter aps inputs pred-body (succ i)))
       (Resolved-Pointees pointees0)
       (Resolved-Pointees pointees1)
       (!= pointees0 pointees1))
      ((set (PointsToCellsAtIter aps inputs pred-body (+ i 2))
            (UnionPointees
              pointees1
              (PointeesDropFirst
                (PointsToCells pred-body pointees1)))))
      :ruleset memory)

(rule ((= pointees (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees (PointsToCellsAtIter aps inputs pred-body (succ i))))
      ((set (PointsToCells (DoWhile inputs pred-body) aps)
            pointees))
      :ruleset memory)

(rule ((PtrPointsTo (PointsTo l)))
      ((DemandAt-List<i64+IntInterval> l))
      :ruleset memory-helpers)
(rule ((TuplePointsTo l))
      ((DemandAt-List<PtrPointees> l))
      :ruleset memory-helpers)

; ============================
; Update DontAlias
; ============================

(relation DemandDontAlias (Expr Expr Pointees))
;                    pointer, pointer, arg pointees
(relation DontAlias (Expr Expr Pointees))


(rule ((DemandDontAlias ptr1 ptr2 arg-pointees)
       (BodyContainsExpr body ptr1)
       (BodyContainsExpr body ptr2)
       (HasType ptr1 (Base (PointerT ty)))
       (HasType ptr2 (Base (PointerT ty)))
       (= pointees1 (PointsToCells ptr1 arg-pointees))
       (= pointees2 (PointsToCells ptr2 arg-pointees)))
      ((IntersectPointees pointees1 pointees2))
      :ruleset memory-helpers)

(rule ((PointsNowhere
         (IntersectPointees
           (PointsToCells ptr1 arg-pointees)
           (PointsToCells ptr2 arg-pointees))))
      ((DontAlias ptr1 ptr2 arg-pointees))
      :ruleset memory-helpers)

; ============================
; Update PointsToExpr
; ============================

;                       program point, pointer
(constructor PointsToExpr (Expr           Expr) Expr :unextractable)

; After a load, the ptr points to the loaded value
(rule ((= f (Bop (Load) ptr state)))
      ((set (PointsToExpr (Get f 1) ptr) (Get f 0)))
      :ruleset memory-helpers)

; If we load and we already know what the pointer points to
; TODO this rule breaks the weakly linear invariant
; when a previous load may not be on the path
;(rule ((= e (Bop (Load) addr state))
;       (= v (PointsToExpr state addr)))
;      ((union (Get e 0) v)
;       (union (Get e 1) state))
;       :ruleset memory-helpers)

; Loads and prints don't affect what what pointers already point to
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Load) any-addr state)))
      ((let new-state (Get e 1))
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Print) any-val state)))
      ((let new-state e)
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)

; Writes don't affect what a pointer points to if it writes to another pointer
; guaranteed to not alias.
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr)))
      ((DemandDontAlias addr otheraddr (TypeToPointees argty)))
      :ruleset memory-helpers)
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr))
       (DontAlias addr otheraddr (TypeToPointees argty)))
      ((set (PointsToExpr e otheraddr) otherdata))
      :ruleset memory-helpers)

; For a write, mark the given expression as containing `data`.
(rule ((= e (Top (Write) addr data state)))
      ((union (PointsToExpr e addr) data))
      :ruleset memory-helpers)

; ============================
; Update CellHasValues (currently unused)
; ============================

; ;                       program point, cell
; (constructor CellHasValues (Expr i64) ExprSet :merge (ExprSet-intersect old new))

; ; At the time of an alloc, a cell doesn't contain any values
; (rule ((= f (Alloc id amt state ty)))
      ; ((set (CellHasValues (Get f 1) id) (ES (set-empty))))
      ; :ruleset memory-helpers)

; ; These two rules find (Write ptr val state) where 
; ; ptr points to cells given no assumptions about where (Arg) points.
; ; TODO: make sensitive to offsets
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty))
      ; ((TypeToPointees argty))
      ; :ruleset memory-helpers)
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty)
       ; (= (PtrPointsTo (PointsTo cells)) (PointsToCells ptr (TypeToPointees argty)))
       ; (At-List<i64+IntInterval> cells any-idx alloc-id offsets)
       ; (= vals (CellHasValues state cell)))
      ; ((set (CellHasValues e cell) (ExprSet-insert vals val)))
      ; :ruleset memory-helpers)


(ruleset mem-simple)

; ============================
; NoAlias analysis
; ============================

(relation NoAlias (Expr Expr))

; Push NoAlias into if
(rule ((= if (If pred inputs thn els))
       (= (Get inputs i) inputs-i)
       (= (Get inputs j) inputs-j)
       (NoAlias inputs-i inputs-j)
       (= arg-i (Get (Arg ty (InIf which pred inputs)) i))
       (= arg-j (Get (Arg ty (InIf which pred inputs)) j)))
      ((NoAlias arg-i arg-j))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (lo-bound i) (IntB lo))
       (> lo 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (hi-bound i) (IntB hi))
       (< hi 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((NoAlias x y))
      ((NoAlias y x))
      :ruleset mem-simple)

; ============================
; Memory optimizations
; ============================

(relation DidMemOptimization (String))

; A write then a load to different addresses can be swapped
(rule ((NoAlias write-addr load-addr)
       (= write (Top (Write) write-addr write-val state))
       (= load (Bop (Load) load-addr write)))
      ((let new-load (Bop (Load) load-addr state))
       (union
          (Get load 1)
          (Top (Write) write-addr write-val (Get new-load 1)))
       (union (Get load 0) (Get new-load 0))
       (DidMemOptimization "commute write then load")
      )
      :ruleset mem-simple)

; A load then a write to different addresses can be swapped
; Actually, does this break WeaklyLinear if the stored value depends on the
; loaded value? Commenting this out for now.
; (rule ((NoAlias load-addr write-addr)
;        (= load (Bop (Load) load-addr state))
;        (= write (Top (Write) write-addr write-val (Get load 1))))
;       ((let new-write (Top (Write) write-addr write-val state))
;        (let new-load (Bop (Load) load-addr new-write))
;        (union write (Get new-load 1))
;        (union (Get load 0) (Get new-load 0))
;        (DidMemOptimization "commute load then write")
;        )
;       :ruleset mem-simple)

; Two loads to the same address can be compressed
(rule ((= first-load (Bop (Load) addr state))
       (= second-load (Bop (Load) addr first-load)))
      ((union (Get first-load 0) (Get second-load 0))
       (union (Get first-load 1) (Get second-load 1))
       (DidMemOptimization "duplicate load")
       )
      :ruleset mem-simple)

; A write and a load to the same address can be forwarded
(rule ((= write (Top (Write) addr write-val state))
       (= load (Bop (Load) addr write)))
      ((union (Get load 0) write-val)
       (union (Get load 1) write)
       (DidMemOptimization "store forward")
       )
      :ruleset mem-simple)

; Two writes of the same value to the same address can be compressed
(rule ((= first-write (Top (Write) addr write-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union first-write second-write)
       (DidMemOptimization "duplicate write"))
      :ruleset mem-simple)

; A write shadows a previous write to the same address
(rule ((= first-write (Top (Write) addr shadowed-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union second-write (Top (Write) addr write-val state))
       (DidMemOptimization "shadowed write"))
      :ruleset mem-simple)

; A load doesn't change the state
; TODO: why does this break weaklylinear?
; (rule ((= load (Bop (Load) addr state)))
;       ((union (Get load 1) state))
;       :ruleset mem-simple)

; (rule ((DidMemOptimization _))
;       ((panic "DidMemOptimization"))
;       :ruleset mem-simple)

;; Loop Invariant

;; bool: whether the term in the Expr is an invariant.
(function is-inv-Expr (Expr Expr) bool :merge (or old new))
(function is-inv-ListExpr (Expr ListExpr) bool :merge (or old new))

;; in default, when there is a find, set is-inv to false
(rule ((BodyContainsExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-Expr loop term) false)) :ruleset always-run)
(rule ((BodyContainsListExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-ListExpr loop term) false)) :ruleset always-run)

(relation is-inv-ListExpr-helper (Expr ListExpr i64))
(rule ((BodyContainsListExpr loop list) 
       (= loop (DoWhile inputs pred_out))) 
      ((is-inv-ListExpr-helper loop list 0)) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= true (is-inv-Expr loop expr))
       (= expr (ListExpr-ith list i)))
    ((is-inv-ListExpr-helper loop list (+ i 1))) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= i (ListExpr-length list)))
    ((set (is-inv-ListExpr loop list) true)) :ruleset always-run)


(ruleset boundary-analysis)
;; An Expr is on boundary when it is invariant and its parent is not
;                       loop invariant-expr
(relation boundary-Expr (Expr Expr))

;; boundary for ListExpr's children
(rule ((= true (is-inv-Expr loop expr))
       (= false (is-inv-ListExpr loop list))
       (= expr (ListExpr-ith list i)))
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)

;; if a output branch/pred is invariant, it's also boundary-Expr
(rule ((= true (is-inv-Expr loop expr))
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out i))) 
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)


(function hoisted-loop (Expr Expr) bool :merge (or old new) )
(rule ((= loop (DoWhile in pred_out)))
      ((set (hoisted-loop in pred_out) false)) :ruleset always-run)

(constructor InExtendedLoop (Expr Expr Expr) Assumption)

;; mock function
(ruleset loop-inv-motion)

(rule ((boundary-Expr loop inv)
       (> (Expr-size inv) 1)
       ;; TODO: replace Expr-size when cost model is ready
       (= loop (DoWhile in pred_out))
       ;; the outter assumption of the loop 
       (ContextOf loop loop_ctx)
       (HasType in in_type)
       (HasType inv inv_type)
       (= inv_type (Base base_inv_ty))
       (= in_type (TupleT tylist))
       (= false (hoisted-loop in pred_out))
       (= len (tuple-length in)))
      ((let new_input (Concat in (Single (Subst loop_ctx in inv))))
       (let new_input_type (TupleT (TLConcat tylist (TCons base_inv_ty (TNil)))))

       ;; create an virtual assume node, union it with actuall InLoop later
       (let assum (InExtendedLoop in pred_out new_input))
       (let new_out_branch (Get (Arg new_input_type assum) len))

       ;; this two subst only change arg to arg with new type
       (let substed_pred_out
         (Subst assum
               (SubTuple (Arg new_input_type assum) 0 len) pred_out))
       (let inv_in_new_loop
            (Subst assum (SubTuple (Arg new_input_type assum) 0 len) inv))
       (let new_pred_out (Concat substed_pred_out (Single new_out_branch)))
       
       (let new_loop (DoWhile new_input new_pred_out))
       (union assum (InLoop new_input new_pred_out))
       (union inv_in_new_loop new_out_branch)
       (let wrapper (SubTuple new_loop 0 len))
       (union loop wrapper)
       (subsume (DoWhile in pred_out)) 
       ;; don't hoist same loop again
       (set (hoisted-loop in pred_out) true)
      )
       :ruleset loop-inv-motion)


(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Const _n _ty _ctx)))
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get (Arg ty ctx) i)) 
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out (+ i 1)))) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Function _name _tyin _tyout _out))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Top _op _x _y _z))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) (= true (is-inv-Expr loop _z)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Bop _op _x _y)) (BinaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Uop _op _x)) (UnaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get _tup _i))  
       (= true (is-inv-Expr loop _tup)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Concat _x _y))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Single _x))  
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Switch _pred _inputs _branches))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _inputs)) (= true (is-inv-ListExpr loop _branches)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (If _pred _input _then _else))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _input)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (DoWhile _in _pred-and-output))  
       (= true (is-inv-Expr loop _in)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Call _func _arg))  
       (= true (is-inv-Expr loop _arg)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Empty _ty _ctx))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _z)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Uop _op _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Single _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _inputs)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _input)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (DoWhile _in _pred-and-output)) 
       (= expr1 _in)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Call _func _arg)) 
       (= expr1 _arg)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _e)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _state)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)
;; Some simple simplifications of loops
(ruleset loop-simplify)

(rewrite
 (DoWhile (Arg ty ctx)
  (Concat (Single (Const (Bool false) ty ctx2))
    (Single (Const constant ty ctx2))))
 (Single (Const constant ty ctx))
 :ruleset loop-simplify)
;; Some simple simplifications of loops
(ruleset loop-unroll)
(ruleset loop-peel)
(ruleset loop-iters-analysis)

;;                      inputs, outputs -> number of iterations
;; The minimum possible guess is 1 because of do-while loops
;; TODO: dead loop deletion can turn loops with a false condition to a body
(function LoopNumItersGuess (Expr Expr) i64 :merge (max 1 (min old new)))

;; by default, guess that all loops run 1000 times
(rule ((DoWhile inputs outputs))
      ((set (LoopNumItersGuess inputs outputs) 1000))
      :ruleset loop-iters-analysis)

;; For a loop that is false, its num iters is 1
(rule 
  ((= loop (DoWhile inputs outputs))
   (= (Const (Bool false) ty ctx) (Get outputs 0)))
  ((set (LoopNumItersGuess inputs outputs) 1))
:ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated before checking pred
;; TODO: we could make it work for decrementing loops
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by some constant each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while next_counter less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (/ (- end_constant start_const) increment))
  )
  :ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated after checking pred
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   (= body-arg (Get (Arg _ty _ctx) counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by a constant each loop
   (= next_counter (Bop (Add) body-arg
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while this counter less than end_constant
   (= pred (Bop (LessThan) body-arg
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (+ (/ (- end_constant start_const) increment) 1))
  )
  :ruleset loop-iters-analysis)

;; loop peeling rule
;; Only peel loops that we know iterate < 3 times
(constructor LoopPeeledPlaceholder (Expr) Assumption :unextractable)
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs))
  (= old_cost (LoopNumItersGuess inputs outputs))
  (< old_cost 3)
  )
 (
  (let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (let else-ctx
    (InIf false (Get executed-once 0) executed-once-body))

  (let new-loop-arg
    (Arg inputs-ty then-ctx))
  (let new-loop-body
    (Subst (LoopPeeledPlaceholder lhs) new-loop-arg outputs))
  (union (InLoop new-loop-arg new-loop-body) (LoopPeeledPlaceholder lhs))

  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
      executed-once-body ;; inputs are the body executed once
      (DoWhile new-loop-arg new-loop-body)
      (Arg inputs-ty else-ctx)))

  (set (LoopNumItersGuess new-loop-arg new-loop-body) (- old_cost 1))
  )
 :ruleset loop-peel)

(constructor TmpCtxUnroll (Expr Expr) Assumption)

;; unroll a loop with constant bounds and initial value
(rule
  ((= lhs (DoWhile inputs outputs))
   (= num-inputs (tuple-length inputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by one each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int 1) _ty2 _ctx2)))
   ;; while less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; start and end constant is a multiple of 4 and greater than start_const
   (> end_constant start_const)
   (= (% start_const 4) 0)
   (= (% end_constant 4) 0)
   (= old_cost (LoopNumItersGuess inputs outputs))
  )
  (
    (let tmp-ctx (TmpCtxUnroll inputs outputs))
    (let one-iter (SubTuple outputs 1 num-inputs))
    (let unrolled
        (Subst tmp-ctx one-iter
          (Subst tmp-ctx one-iter
            (Subst tmp-ctx one-iter
               outputs))))
    (union lhs
      (DoWhile inputs
        unrolled))
    (let actual-ctx (InLoop inputs unrolled))
    (union tmp-ctx actual-ctx)

    (set (LoopNumItersGuess inputs unrolled) (/ old_cost 4))
  )
  :ruleset loop-unroll)



(ruleset swap-if)

;; swaps the order of the then and else branches
;; in an if using Not

(rule
  ((= lhs (If pred inputs then else)))
  (
    (union lhs (If (Uop (Not) pred) inputs else then))
  )
  :ruleset swap-if)


;; for if statements with two outputs, swaps the order
;; of the outputs
(rule
  ((= lhs (If pred inputs then else))
   (= (tuple-length then) 2)
   (= (tuple-length else) 2))
  (
    (union
      (Concat (Single (Get lhs 1)) (Single (Get lhs 0)))
      (If pred inputs
          (Concat (Single (Get then 1)) (Single (Get then 0)))
          (Concat (Single (Get else 1)) (Single (Get else 0)))))
  )
  :ruleset swap-if)
;; this ruleset depends on swap_if running twice
;; swap_if un-permutes the outputs of the function and the if so this rule can match
(ruleset rec-to-loop)



;; this rule finds a recursive functions
;; with a base case and a tail-recursive call
;; transforms them into a loop
;; transforming functions that look like this:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start));
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;      } while (start[0]);
;;    }
;;    ret base_case(start);
;; }
;; for example, printBinary sums the results of recursive calls

(constructor TmpCtxRecToLoop (String Type Type Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs (Call name rec_case) base-case))
   (HasType always-runs start-ty)
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop name in out body))
   (let loop-inputs (Arg start-ty (InIf true pred always-runs)))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx rec_case pred))
         (Subst tmp-ctx rec_case always-runs)))
   (union tmp-ctx (InLoop loop-inputs loop-outputs))

   (let loop
     (DoWhile loop-inputs loop-outputs))
    
    
  ;; initial start value
   (let outer-if
     (If pred always-runs
         loop
         (Arg start-ty (InIf false pred always-runs))))
   (union body (Subst (InFunc name) outer-if base-case)))
  :ruleset rec-to-loop)


;; Stores information about how to use a binary
;; operator to accumulate values
;; (bop start-val base-case-op)
(relation Accum-Bop (BinaryOp i64 BinaryOp))

;; addition is easy, it starts at 0 and adds the result of the recursive call
(Accum-Bop (Add) 0 (Add))

;; subtraction starts at zero, but adds the base case at the end
(Accum-Bop (Sub) 0 (Add))

;; multiplication starts at 1, and multiplies the result of the recursive call
(Accum-Bop (Mul) 1 (Mul))

;; It seems like integers have these properties based on: https://stackoverflow.com/questions/69480173/which-arithmetic-properties-do-twos-complement-integers-have


;; same as above rule, but with an accumulator
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start)) + f(start);
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    let acc = 0;
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;         acc = acc + extra(start);
;;      } while (start[0]);
;;    }
;;    ret base_case(start) + acc;
;; }
(constructor TmpCtxRecToLoop2 (String Expr Expr Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs then-case base-case))
   (= call (Call name rec-case))
   (= then-case
      (Concat (Single (Bop acc-op (Get call 0) extra))
              (Single (Get call 1))))
   (Accum-Bop acc-op initial-int base-case-op)
   (HasType always-runs start-ty)
   (= always-runs-len (tuple-length always-runs))
   (= start-ty (TupleT start-ty-list))
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop2 name pred then-case base-case))
   (let loop-ty
     (TupleT (TLConcat start-ty-list (TCons (IntT) (TNil)))))
   ;; recursive case in the loop
   (let new-rec-case
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) rec-case))
   ;; extra computation in the loop
   (let new-extra
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) extra))
   ;; acc starts at 0
   (let loop-inputs
     (Concat (Arg start-ty (InIf true pred always-runs)) (Single (Const (Int initial-int) start-ty (InIf true pred always-runs)))))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx new-rec-case pred))
         (Concat
           (Subst tmp-ctx new-rec-case always-runs)
           ;; add extra to acc
           (Single (Bop acc-op (Get (Arg loop-ty tmp-ctx) always-runs-len) new-extra)))))
   ;; loop starts at zero, adds extra each iteration
   (let loop
     (DoWhile loop-inputs loop-outputs))
   ;; union tmpctx
   (union tmp-ctx (InLoop loop-inputs loop-outputs))
  
   (let outer-if
     (If pred always-runs
         loop
         (Concat
           (Arg start-ty (InIf false pred always-runs))
           ;; otherwise acc is 0
           (Single (Const (Int 0) start-ty (InIf false pred always-runs))))))
   ;; base case over latest start value
   (let new-base-case
     (Subst (InFunc name) (SubTuple outer-if 0 always-runs-len) base-case))
   ;; add base case to acc
   (let res
     (Concat
      (Single (Bop base-case-op (Get new-base-case 0) (Get outer-if always-runs-len)))
      (Single (Get new-base-case 1))))
   (union body res))
  :ruleset rec-to-loop)

(ruleset passthrough)


;; Pass through thetas
(rule ((= lhs (Get loop i))
        (= loop (DoWhile inputs pred-outputs))
        (= (Get pred-outputs (+ i 1)) (Get (Arg _ty _ctx) i))
        ;; only pass through pure types, since some loops don't terminate
        ;; so the state edge must pass through them
        (HasType lhs lhs_ty)
        (PureType lhs_ty)
        )
       ((union lhs (Get inputs i)))
       :ruleset passthrough)

;; Pass through switch arguments
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Get (Arg _ _ctx0) j))
       (= (Get branch1 i) (Get (Arg _ _ctx1) j))
       (= passed-through (Get inputs j))
       (HasType lhs lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union lhs passed-through))
      :ruleset passthrough)

;; Pass through switch predicate
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Const (Bool false) _ _ctx0))
       (= (Get branch1 i) (Const (Bool true) _ _ctx1)))
      ((union lhs pred))
      :ruleset passthrough)

;; Pass through if arguments
(rule ((= if (If pred inputs then_ else_))
       (= then-branch (Get then_ i))
       (= else-branch (Get else_ i))
       (= then-branch (Get (Arg arg_ty _then_ctx) j))
       (= else-branch (Get (Arg arg_ty _else_ctx) j))
       (HasType then-branch lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union (Get if i) (Get inputs j)))
      :ruleset passthrough)

; Pass through if state edge arguments
; To maintain the invariant, we have to union the other outputs with a pure if statement
(ruleset state-edge-passthrough)

(rule ((= outputs (If pred inputs then_ else_))

       (= (Get then_ i) (Get (Arg arg_ty then_ctx) j))
       (= (Get else_ i) (Get (Arg arg_ty else_ctx) j))

       (HasType (Get then_ i) (Base (StateT))))

      ((let lhs (Get outputs i))
       (let new_inputs (TupleRemoveAt inputs j))

       (let new_then_ctx (InIf true  pred new_inputs))
       (let new_else_ctx (InIf false pred new_inputs))

       (let old_then (TupleRemoveAt then_ i))
       (let old_else (TupleRemoveAt else_ i))

       (let new_then (DropAt new_then_ctx j old_then))
       (let new_else (DropAt new_else_ctx j old_else))

       (let old_outputs (TupleRemoveAt outputs i))
       (let new_if (If pred new_inputs new_then new_else))
       (union new_if old_outputs)

       (union lhs (Get inputs j))
       ;; Be careful not to subsume the original if statement immediately,
       ;;  since TupleRemoveAt still needs to match on it
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset state-edge-passthrough)

;; Pass through if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool true) _ _thenctx))
       (= (Get else_ i) (Const (Bool false) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) pred)
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; Pass through inverted if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool false) _ _thenctx))
       (= (Get else_ i) (Const (Bool true) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) (Uop (Not) pred))
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; ORIGINAL
;; a = 0
;; c = 3
;; for  i = 0 to n:
;;     a = i * c
;;
;; OPTIMIZED
;; a = 0
;; c = 3
;; d = 0
;; for i = 0 to n:
;;     a += d
;;     d += c
(ruleset loop-strength-reduction)

; Finds invariants/constants within a body.
; Columns: body; value of invariant in inputs; value of invariant in outputs
;; Get the input and output value of an invariant, or constant int, within the loop
;;             loop in   out
(relation lsr-inv (Expr Expr Expr))

; TODO: there may be a bug with finding the invariant, or it just may not be extracted.
; Can make this work on loop_with_mul_by_inv and a rust test later.
; (rule (
;     (= loop (DoWhile inputs pred-and-body))
;     (= (Get outputs (+ i 1)) (Get (Arg arg-type assm) i)))
;     ((inv loop (Get inputs i) (Get (Arg arg-type assm) i))) :ruleset always-run)
(rule (
    (= loop (DoWhile inputs pred-and-body))
    (ContextOf inputs loop-input-ctx)
    (ContextOf pred-and-body loop-output-ctx)
    (= constant (Const c out-type loop-output-ctx))
    (HasArgType inputs in-type)
    )
    ((lsr-inv loop (Const c in-type loop-input-ctx) constant)) :ruleset always-run)
(constructor TmpCtxLSR (Expr Expr) Assumption)
(rule 
    (
        ;; Find loop
        (= old-loop (DoWhile inputs pred-and-outputs))
        (ContextOf pred-and-outputs loop-ctx)

        ; Find loop variable (argument that gets incremented with an invariant)
        (lsr-inv old-loop loop-incr-in loop-incr-out)
        ; Since the first el of pred-and-outputs is the pred, we need to offset i
        (= (Get pred-and-outputs (+ i 1)) (Bop (Add) (Get (Arg arg-type assm) i) loop-incr-out))

        ; Find invariant where input is same as output, or constant
        (lsr-inv old-loop c-in c-out)

        ; Find multiplication of loop variable and invariant
        (= old-mul (Bop (Mul) c-out (Get (Arg arg-type assm) i)))
        (ContextOf old-mul loop-ctx)

        (= arg-type (TupleT ty-list))
        ; n is index of our new, temporary variable d
        (= n (tuple-length inputs))
    )
    (
        (let tmp-ctx (TmpCtxLSR inputs pred-and-outputs))
        ; Each time we need to update d by the product of the multiplied constant and the loop increment
        (let addend (Bop (Mul) c-out loop-incr-out))

        ; Initial value of d is i * c
        (let d-init (Bop (Mul) c-in (Get inputs i)))

        ; Construct optimized theta
        ; new-inputs already has the correct context
        (let new-inputs (Concat inputs (Single d-init)))

        ; We need to create a new type, with one more input
        (let new-arg-ty (TupleT (TLConcat ty-list (TCons (IntT) (TNil)))))
        (let replace-arg (SubTuple (Arg new-arg-ty tmp-ctx) 0 n))

        ; Value of d in loop. Add context to addend
        (let d-out (Bop (Add) (Get (Arg new-arg-ty tmp-ctx) n)
                   (Subst tmp-ctx replace-arg addend)))

        ; build the old body, making sure to set the correct arg type and context
        (let new-body
          (Concat
            (Subst tmp-ctx replace-arg pred-and-outputs)
            (Single d-out)))

        (let new-loop (DoWhile new-inputs new-body))

        (let new-c (Subst tmp-ctx replace-arg c-out))

        ; Now that we have the new loop, union the temporary context with the actual ctx
        (union tmp-ctx (InLoop new-inputs new-body))

        ; Substitute d for the *i expression
        (let new-mul
            (Bop (Mul) new-c (Get replace-arg i)))
        (union (Get (Arg new-arg-ty tmp-ctx) n) new-mul)

        ; Subsume the multiplication in the new loop to prevent
        ; from firing loop strength reduction again on the new loop
        ; Workaround of egglog issue: https://github.com/egraphs-good/egglog/issues/462
        ; add the expression we are about to subsume
        (let before
          (Bop (Mul) new-c (Get replace-arg i)))
        ; now subsume it
        (subsume
          (Bop (Mul) new-c (Get replace-arg i)))

        ; Project all but last
        (union old-loop (SubTuple new-loop 0 n))
    )
    :ruleset loop-strength-reduction
)
(relation IVTNewInputsAnalysisDemand (Expr))

(ruleset ivt-analysis)

(sort IVTRes)
;;                              perm passthrough-perm passthrough-type passthrough-type-len
(constructor IVTAnalysisRes (Expr Expr             TypeList         i64) IVTRes)
(constructor IVTMin (IVTRes IVTRes) IVTRes)

(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (<= len1 len2))
      ((union lhs (IVTAnalysisRes _a _b _c len1)))
        :ruleset ivt-analysis)
(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (> len1 len2))
      ((union lhs (IVTAnalysisRes _d _e _f len2)))
        :ruleset ivt-analysis)


;; use an analysis to avoid exploring all combinations of passthrough vs not passed through values. Always prefer not passed through
;;                                  expr1 curr  if  result
(function IVTNewInputsAnalysisImpl (Expr  Expr  Node) IVTRes :merge (IVTMin old new))

;; IVTNewInputsAnalysis computes a permutation perm which corresponds to accessing elements of an if region.
;; It also makes accesses of passthrough arguments access new indices after the length of the if region.
;; For example, if expr1 is: [get(if, 1), get(arg, 1), get(if, 0), get(arg, 3)]
;; It produces a new permutation: [get(arg, 1), get(arg, 2), get(arg, 0), get(arg, 3)]
;; The accesses of the if statement remain unchanged, and the accesses of the passthrough arguments are moved to the end.
;; This new permutation is intended to be used with a substitution argument (Concat if-statement passthrough-args)
;; Also produced is a passthrough-perm, which selects all of the passthrough arguments and puts them in a single tuple
;;                              expr1 if result
(function IVTNewInputsAnalysis (Expr  Node) IVTRes :merge (IVTMin old new))


(rule (
    (DoWhile inpW outW)
) (
    (IVTNewInputsAnalysisDemand outW)
) :ruleset ivt-analysis)

(rule (
    (IVTNewInputsAnalysisDemand loop-body)
    ;; first input is a predicate
    (= loop-body (Concat (Single pred) rest))
    ;; another input is an if statement with shared predicate
    (= if-eclass (If pred inputs thn else))
    (= (Get loop-body i) (Get if-eclass j))
    (!= i 0)
) (
    (let perm (Empty (TmpType) (InFunc "no-ctx")))
    (set
     (IVTNewInputsAnalysisImpl loop-body rest (IfNode if-eclass pred inputs thn else))
     (IVTAnalysisRes perm perm (TNil) 0))
) :ruleset ivt-analysis)

;; recursive case for accessing the if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get if-eclass ith)) rest))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm  pperm passthrough-tys len))
) :ruleset ivt-analysis)

;; recursive case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get (Arg ty ctx) ith)) rest))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)

; base case for accessing if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body (Single last) ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= last (Get if-eclass ith))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm pperm passthrough-tys len))
) :ruleset ivt-analysis)

; base case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Single (Get (Arg ty ctx) ith)))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)


(ruleset loop-inversion)

(constructor TmpCtxLoopInversion (Expr Expr) Assumption)
(rule (
    (= loop (DoWhile inpW outW))
    (= (IVTNewInputsAnalysis outW ifnode) (IVTAnalysisRes perm pperm passthrough-tys _len))
    (= ifnode (IfNode if if-cond if-inputs then else))
    (= if-inputs-len (tuple-length if-inputs))
    (= passthrough-len (TypeList-length passthrough-tys))

    (ContextOf inpW outer-ctx)
    (ContextOf if-inputs if-ctx)
    (HasType if-inputs inputs-ty)
    (= inputs-ty (TupleT inputs-ty-list))
) (
    (let tmp-ctx (TmpCtxLoopInversion inpW outW))
    ;; new peeled condition, checks the if's condition before the first iteration
    (let new-if-cond (Subst outer-ctx inpW if-cond))

    ;; new inputs to the if are 1) the inputs run once unconditionally concatted with
    ;; 2) the passthrough values
    (let new-if-inp
        (Concat (Subst outer-ctx inpW if-inputs)
                (Subst outer-ctx inpW pperm)))
    ;; if contexts
    (let new-if-true-ctx (InIf true new-if-cond new-if-inp))
    (let new-if-false-ctx (InIf false new-if-cond new-if-inp))

    (let new-loop-arg-ty (TupleT (TLConcat inputs-ty-list passthrough-tys)))
    (let new-loop-arg (Arg new-loop-arg-ty tmp-ctx))
    (let new-loop-context tmp-ctx)

    ;; body
    ;; loop begins by running the then branch of the if statement, which uses the first if-inputs-length elements of arg
    (let then-arg (SubTuple new-loop-arg 0 if-inputs-len))
    (let new-then-branch
        (Subst new-loop-context then-arg then))
    ;; the inputs are then run on the combination of
    ;; the then branch and the passthrough values
    (let then-branch-and-passthrough
      (Concat new-then-branch (SubTuple new-loop-arg if-inputs-len passthrough-len)))
    ;; permute them to move passthrough and if outputs back
    ;; to where if-inputs and if-cond expect them to be
    (let permuted-then-branch-and-passthrough
      (Subst new-loop-context then-branch-and-passthrough perm))
    ;; substitute into inputs and condi
    (let new-inputs-after-then-branch 
        (Subst new-loop-context permuted-then-branch-and-passthrough
            (Concat (Single if-cond) if-inputs)))
    (let new-loop-outputs
        (Concat new-inputs-after-then-branch
           (SubTuple new-loop-arg if-inputs-len passthrough-len)))

    (let new-loop (DoWhile (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))
    (let new-if
        (If new-if-cond new-if-inp
            new-loop
            (Arg new-loop-arg-ty new-if-false-ctx)))

    ;; Apply the body of the false branch as an afterprocessing wrapper
    (let final-if-inputs
       (SubTuple new-if 0 if-inputs-len))
    (let else-branch-end
        (Subst outer-ctx final-if-inputs else))
    (let else-branch-end-and-passthrough
        (Concat else-branch-end
               (SubTuple new-if if-inputs-len passthrough-len)))
    (let final-permuted
        (Subst outer-ctx else-branch-end-and-passthrough perm))

    (union final-permuted loop)
    (union new-loop-context (InLoop (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))

    (subsume (DoWhile inpW outW))
) :ruleset loop-inversion)

(ruleset cicm)
(ruleset cicm-index)

(relation InvCodeMotionCandidate (Expr Expr))

(rule (
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t1 c2) (ExtractedExpr e2))
        (ContextOf e1 (InIf true pred1 orig_ins3))
        (ContextOf e2 (InIf false pred2 orig_ins4))
        (!= e1 e2)
     )
     ((InvCodeMotionCandidate e1 e2))
     :ruleset cicm-index)


(rule (
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (= e1 (Uop o x))
        (HasType e1 (Base ty))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (ContextOf e1 (InIf true pred orig_ins))

        (= e2 (Uop o y))
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)
        (ContextOf e2 (InIf false pred orig_ins))

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Uop o (Subst if_tr st_tr x))
        (Uop o (Subst if_fa st_fa y))
        ; Now subsume:
        (subsume (Uop o (Subst if_tr st_tr x)))
        (subsume (Uop o (Subst if_fa st_fa y)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)

       

(rule (
        (InvCodeMotionCandidate e1 e2)
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (ContextOf e1 (InIf true pred orig_ins))
        (ContextOf e2 (InIf false pred orig_ins))
        (= e1 (Bop o x1 y1))
        
        (= e2 (Bop o x2 y2))
        
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (HasType e1 (Base ty))
        

        
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1))
        (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2))
        ; Now subsume:
        (subsume (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1)))
        (subsume (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)


(ruleset push-in)

; new version of the rule where one side of bop is constant
(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o (Const c ty outer_ctx) x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(c, x) in the new regions
        (union (Get arg_tr i) (Bop o (Const c new_ins_ty if_tr) (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Bop o (Const c new_ins_ty if_fa) (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o x (Const c ty outer_ctx)) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(x, c) in the new regions
        (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Const c new_ins_ty if_tr)))
        (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Const c new_ins_ty if_fa)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Uop o x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Uop(x) in the new regions
        (union (Get arg_tr i) (Uop o (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Uop o (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

; OLD VERSION - Too slow for now
; ; push bop input into region
; (rule (
;         (= if_e (If pred orig_inputs thn els))
;         (ContextOf if_e outer_ctx)
;         (= (Bop o x y) (Get orig_inputs i))
;         (HasArgType thn (TupleT tylist))
;         (HasArgType els (TupleT tylist))
;         (HasType x (Base x_ty))
;         (HasType y (Base y_ty))
;       )
;       (
;         ; New inputs
;         (let new_ins (Concat orig_inputs (Concat (Single x) (Single y))))
;         (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TCons y_ty (TNil))))))

;         ; New contexts
;         (let if_tr (InIf true  pred new_ins))
;         (let if_fa (InIf false pred new_ins))
        
;         ; New args
;         (let arg_tr (Arg new_ins_ty if_tr))
;         (let arg_fa (Arg new_ins_ty if_fa))

;         ; SubTuple
;         (let orig_ins_len (TypeList-length tylist))
;         (let st_tr (SubTuple arg_tr 0 orig_ins_len))
;         (let st_fa (SubTuple arg_fa 0 orig_ins_len))

;         ; New regions
;         (let new_thn (Subst if_tr st_tr thn))
;         (let new_els (Subst if_fa st_fa els))

;         ; Union the original input with Bop(x, y) in the new regions
;         (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Get arg_tr (+ orig_ins_len 1))))
;         (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Get arg_fa (+ orig_ins_len 1))))

;         ; Union the ifs
;         (union if_e (If pred new_ins new_thn new_els))
;       )
;       :ruleset push-in)
;; use these rules to clean up the database, removing helpers
;; this makes the visualization easier to read

(ruleset debug-deletes)

(rule ((HasType a b))
      ((delete (HasType a b)))
      :ruleset debug-deletes)

(rule ((BodyContainsExpr a b))
      ((delete (BodyContainsExpr a b)))
      :ruleset debug-deletes)

(rule ((ExprIsPure e))
      ((delete (ExprIsPure e)))
      :ruleset debug-deletes)

(rule ((HasArgType e ty))
      ((delete (HasArgType e ty)))
      :ruleset debug-deletes)

(rule ((is-inv-Expr e ty))
      ((delete (is-inv-Expr e ty)))
      :ruleset debug-deletes)

(rule ((tuple-length e))
      ((delete (tuple-length e)))
      :ruleset debug-deletes)

(rule ((BinaryOpIsPure e))
      ((delete (BinaryOpIsPure e)))
      :ruleset debug-deletes)

(rule ((ContextOf e a))
      ((delete (ContextOf e a)))
      :ruleset debug-deletes)

(rule ((ExprIsResolved e))
      ((delete (ExprIsResolved e)))
      :ruleset debug-deletes)

(rule ((bop->string a b))
      ((delete (bop->string a b)))
      :ruleset debug-deletes)

(rule ((bpred-of-type a b))
      ((delete (bpred-of-type a b)))
      :ruleset debug-deletes)

(rule ((PureType e))
      ((delete (PureType e)))
      :ruleset debug-deletes)

(rule ((PointsToCells a b))
      ((delete (PointsToCells a b)))
      :ruleset debug-deletes)

(rule ((TuplePointsTo e))
      ((delete (TuplePointsTo e)))
      :ruleset debug-deletes)

(rule ((Resolved-List<PtrPointees> e))
      ((delete (Resolved-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((TypeListToList<PtrPointees> e))
      ((delete (TypeListToList<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<PtrPointees> a b))
      ((delete (Cons-List<PtrPointees> a b)))
      :ruleset debug-deletes)

(rule ((Nil-List<PtrPointees>))
      ((delete (Nil-List<PtrPointees>)))
      :ruleset debug-deletes)

(rule ((Length-List<PtrPointees> e))
      ((delete (Length-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((At-List<PtrPointees> a b c))
      ((delete (At-List<PtrPointees> a b c)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<PtrPointees> a))
      ((delete (IsNonEmpty-List<PtrPointees> a)))
      :ruleset debug-deletes)

(rule ((Resolved-List<i64+IntInterval> e))
      ((delete (Resolved-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<i64+IntInterval> a b c))
      ((delete (Cons-List<i64+IntInterval> a b c)))
      :ruleset debug-deletes)

(rule ((Nil-List<i64+IntInterval>))
      ((delete (Nil-List<i64+IntInterval>)))
      :ruleset debug-deletes)

(rule ((Length-List<i64+IntInterval> e))
      ((delete (Length-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((At-List<i64+IntInterval> a b c d))
      ((delete (At-List<i64+IntInterval> a b c d)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<i64+IntInterval> a))
      ((delete (IsNonEmpty-List<i64+IntInterval> a)))
      :ruleset debug-deletes)

(rule ((TypeList-ith a b))
      ((delete (TypeList-ith a b)))
      :ruleset debug-deletes)

(rule ((InIf a b c))
      ((delete (InIf a b c)))
      :ruleset debug-deletes)
(rule ((InLoop a b))
      ((delete (InLoop a b)))
      :ruleset debug-deletes)
(rule ((InFunc a))
      ((delete (InFunc a)))
      :ruleset debug-deletes)

(rule ((TupleT a))
      ((delete (TupleT a)))
      :ruleset debug-deletes)
(rule ((TCons a b))
      ((delete (TCons a b)))
      :ruleset debug-deletes)
(rule ((TNil))
      ((delete (TNil)))
      :ruleset debug-deletes)
(rule ((Base a))
      ((delete (Base a)))
      :ruleset debug-deletes)
(rule ((IntT))
      ((delete (IntT)))
      :ruleset debug-deletes)

;; Hacker's delight optimizations

(ruleset hacker)

;; A simple analysis to identify loops that run exactly #popcount times

;; IsIsEven e x => e is a boolean expression that checks whether x is an even number
(relation IsIsEven (Expr Expr))

(rule (
    (= two (Const (Int 2) ty ctx))
    (= e (Bop (Eq) x (Bop (Mul) (Bop (Div) x two) two)))
) (
    (IsIsEven e x)
) :ruleset hacker)

;; NTZIterations lp n pos => loop lp runs exactly number_of_trailing_zeros(n) times at index pos
(relation NTZIterations (Expr Expr i64))

(rule (
    ;; Grab the outer if
    (= outerif (If cond inputs evenbr oddbr))
    ;; There exists an argument n
    (= n (Get inputs i))
    ;; The condition is on the parity of n
    (IsIsEven cond n)
    ;; In the even/true branch, there is a loop
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    ;; n is passed into to the loop
    (= (Get lp_inputs j) (Get (Arg _ty1 _ctx1) i))
    ;; the loop continues as long as n / 2 is even
    (= two (Const (Int 2) _ty2 _ctx2))
    (= nd2 (Bop (Div) (Get (Arg _ty3 _ctx3) j) two))
    (IsIsEven (Get lp_pred_outputs 0) nd2)
    ;; n is divided by 2 every loop
    (= nd2 (Get lp_pred_outputs (+ j 1)))
    ;; In the odd/false branch, we look for an n
    (= (Get (Arg _ty4 _ctx4) i) (Get oddbr j))
) (
    (NTZIterations outerif n j)
) :ruleset hacker)

;; Identify and optimize lowbit

(rule (
    (NTZIterations outerif n i)
    (= outerif (If cond inputs evenbr oddbr))
    ;; In the even branch, it returns a value that doubles every iter
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    (= (Const (Int 1) _ty1 _ctx1) (Get lp_inputs j))
    (= two (Const (Int 2) _ty2 _ctx2))
    (= (Bop (Mul) (Get (Arg _ty3 _ctx3) j) two) (Get lp_pred_outputs (+ j 1)))    
    ;; In the odd branch, it returns an 1
    (= (Const (Int 1) _ty0 _ctx0) (Get oddbr j))
) (
    (let lowbitn (Bop (Bitand) n (Uop (Neg) n)))
    (union (Get outerif j) lowbitn)
    (union (Get outerif i) (Bop (Div) n lowbitn))
) :ruleset hacker)

;; Try to do a state-edge-passthrough for loops
;; NLZIterations guarantees termination for non-zero values
;; lowbit(0) is undefined behavior

(constructor DummyLoopContext (Expr Expr Expr) Assumption)

(rule (
    (NTZIterations anyif n i)
    (= anyif (If cond inputs thenbr elsebr))
    (= thenbr (DoWhile lpinputs pred_outputs))
    (= (Get pred_outputs (+ j 1)) (Get (Arg arg_ty then_ctx) j))
    (HasType (Get pred_outputs (+ j 1)) (Base (StateT)))
) (
    (let newlpinputs (TupleRemoveAt lpinputs j))
    (let newpred_outputs (TupleRemoveAt pred_outputs (+ j 1)))
    
    (let newlpctx (DummyLoopContext newlpinputs newpred_outputs pred_outputs))

    (let newbody (DropAt newlpctx j newpred_outputs))

    (union newlpctx (InLoop newlpinputs newbody))

    (let newlp (DoWhile newlpinputs newbody))
    (let oldlp (TupleRemoveAt thenbr j))

    (union newlp oldlp)

    (union (Get thenbr j) (Get lpinputs j))

) :ruleset hacker)

(unstable-combined-ruleset cheap-optimizations
    hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)

(unstable-combined-ruleset all-optimizations
    select_opt
loop-unroll
switch_rewrite
loop-inv-motion
loop-strength-reduction
cicm
push-in
hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)
    

; required by function_inlining_unoins
; Function inlining unions
(relation InlinedCall (String Expr))

(ruleset initialization)
(rule () (
    ; Program nodes
    (let __tmp0 (Int 80))
(let __tmp1 (StateT ))
(let __tmp2 (TNil ))
(let __tmp3 (TCons __tmp1 __tmp2))
(let __tmp4 (TupleT __tmp3))
(let __tmp5 (InFunc "main"))
(let __tmp6 (Const __tmp0 __tmp4 __tmp5))
(let __tmp7 (Single __tmp6))
(let __tmp8 (Bool true))
(let __tmp9 (Const __tmp8 __tmp4 __tmp5))
(let __tmp10 (Int 100))
(let __tmp11 (Const __tmp10 __tmp4 __tmp5))
(let __tmp12 (Arg __tmp4 __tmp5))
(let __tmp13 (Get __tmp12 0))
(let __tmp14 (FloatT ))
(let __tmp15 (PointerT __tmp14))
(let __tmp16 (Alloc 0 __tmp6 __tmp13 __tmp15))
(let __tmp17 (Get __tmp16 1))
(let __tmp18 (Single __tmp17))
(let __tmp19 (Single __tmp11))
(let __tmp20 (Float 100.0))
(let __tmp21 (Const __tmp20 __tmp4 __tmp5))
(let __tmp22 (Single __tmp21))
(let __tmp23 (Float 80.0))
(let __tmp24 (Const __tmp23 __tmp4 __tmp5))
(let __tmp25 (Single __tmp24))
(let __tmp26 (Get __tmp16 0))
(let __tmp27 (Single __tmp26))
(let __tmp28 (Int 0))
(let __tmp29 (Const __tmp28 __tmp4 __tmp5))
(let __tmp30 (Single __tmp29))
(let __tmp31 (Int 1))
(let __tmp32 (Const __tmp31 __tmp4 __tmp5))
(let __tmp33 (Single __tmp32))
(let __tmp34 (Float 0.0))
(let __tmp35 (Const __tmp34 __tmp4 __tmp5))
(let __tmp36 (Single __tmp35))
(let __tmp37 (Concat __tmp36 __tmp7))
(let __tmp38 (Concat __tmp27 __tmp37))
(let __tmp39 (Concat __tmp33 __tmp38))
(let __tmp40 (Concat __tmp30 __tmp39))
(let __tmp41 (Concat __tmp27 __tmp40))
(let __tmp42 (Concat __tmp25 __tmp41))
(let __tmp43 (Concat __tmp22 __tmp42))
(let __tmp44 (Concat __tmp19 __tmp43))
(let __tmp45 (Concat __tmp7 __tmp44))
(let __tmp46 (Concat __tmp18 __tmp45))
(let __tmp47 (IntT ))
(let __tmp48 (TCons __tmp47 __tmp2))
(let __tmp49 (TCons __tmp14 __tmp48))
(let __tmp50 (TCons __tmp15 __tmp49))
(let __tmp51 (TCons __tmp47 __tmp50))
(let __tmp52 (TCons __tmp47 __tmp51))
(let __tmp53 (TCons __tmp15 __tmp52))
(let __tmp54 (TCons __tmp14 __tmp53))
(let __tmp55 (TCons __tmp14 __tmp54))
(let __tmp56 (TCons __tmp47 __tmp55))
(let __tmp57 (TCons __tmp47 __tmp56))
(let __tmp58 (TCons __tmp1 __tmp57))
(let __tmp59 (TupleT __tmp58))
(let __tmp60 (InIf true __tmp9 __tmp46))
(let __tmp61 (Arg __tmp59 __tmp60))
(let __tmp62 (LessThan ))
(let __tmp63 (Add ))
(let __tmp64 (InFunc " loop_ctx_4"))
(let __tmp65 (Arg __tmp59 __tmp64))
(let __tmp66 (Get __tmp65 7))
(let __tmp67 (Get __tmp65 6))
(let __tmp68 (Bop __tmp63 __tmp66 __tmp67))
(let __tmp69 (Get __tmp65 1))
(let __tmp70 (Bop __tmp62 __tmp68 __tmp69))
(let __tmp71 (Single __tmp70))
(let __tmp72 (Write ))
(let __tmp73 (Get __tmp65 8))
(let __tmp74 (Get __tmp65 9))
(let __tmp75 (Get __tmp65 0))
(let __tmp76 (Top __tmp72 __tmp73 __tmp74 __tmp75))
(let __tmp77 (Single __tmp76))
(let __tmp78 (Single __tmp69))
(let __tmp79 (Get __tmp65 2))
(let __tmp80 (Single __tmp79))
(let __tmp81 (Get __tmp65 3))
(let __tmp82 (Single __tmp81))
(let __tmp83 (Concat __tmp80 __tmp82))
(let __tmp84 (Concat __tmp78 __tmp83))
(let __tmp85 (Get __tmp65 4))
(let __tmp86 (Single __tmp85))
(let __tmp87 (Concat __tmp84 __tmp86))
(let __tmp88 (Get __tmp65 5))
(let __tmp89 (Single __tmp88))
(let __tmp90 (Concat __tmp87 __tmp89))
(let __tmp91 (Single __tmp68))
(let __tmp92 (Single __tmp66))
(let __tmp93 (Concat __tmp91 __tmp92))
(let __tmp94 (PtrAdd ))
(let __tmp95 (Bop __tmp94 __tmp73 __tmp66))
(let __tmp96 (Single __tmp95))
(let __tmp97 (Concat __tmp93 __tmp96))
(let __tmp98 (Single __tmp74))
(let __tmp99 (Concat __tmp98 __tmp78))
(let __tmp100 (Concat __tmp97 __tmp99))
(let __tmp101 (Concat __tmp90 __tmp100))
(let __tmp102 (Concat __tmp77 __tmp101))
(let __tmp103 (Concat __tmp71 __tmp102))
(let __tmp104 (DoWhile __tmp61 __tmp103))
(let __tmp105 (InIf false __tmp9 __tmp46))
(let __tmp106 (Arg __tmp59 __tmp105))
(let __tmp107 (If __tmp9 __tmp46 __tmp104 __tmp106))
(let __tmp108 (Get __tmp107 0))
(let __tmp109 (PointerT __tmp15))
(let __tmp110 (Alloc 1 __tmp11 __tmp108 __tmp109))
(let __tmp111 (Get __tmp110 1))
(let __tmp112 (Single __tmp111))
(let __tmp113 (Get __tmp107 3))
(let __tmp114 (Single __tmp113))
(let __tmp115 (Get __tmp107 4))
(let __tmp116 (Single __tmp115))
(let __tmp117 (Get __tmp107 5))
(let __tmp118 (Single __tmp117))
(let __tmp119 (Get __tmp110 0))
(let __tmp120 (Single __tmp119))
(let __tmp121 (Concat __tmp120 __tmp19))
(let __tmp122 (Concat __tmp33 __tmp121))
(let __tmp123 (Concat __tmp30 __tmp122))
(let __tmp124 (Concat __tmp120 __tmp123))
(let __tmp125 (Concat __tmp118 __tmp124))
(let __tmp126 (Concat __tmp116 __tmp125))
(let __tmp127 (Concat __tmp114 __tmp126))
(let __tmp128 (Concat __tmp19 __tmp127))
(let __tmp129 (Concat __tmp7 __tmp128))
(let __tmp130 (Concat __tmp112 __tmp129))
(let __tmp131 (TCons __tmp109 __tmp48))
(let __tmp132 (TCons __tmp47 __tmp131))
(let __tmp133 (TCons __tmp47 __tmp132))
(let __tmp134 (TCons __tmp109 __tmp133))
(let __tmp135 (TCons __tmp15 __tmp134))
(let __tmp136 (TCons __tmp14 __tmp135))
(let __tmp137 (TCons __tmp14 __tmp136))
(let __tmp138 (TCons __tmp47 __tmp137))
(let __tmp139 (TCons __tmp47 __tmp138))
(let __tmp140 (TCons __tmp1 __tmp139))
(let __tmp141 (TupleT __tmp140))
(let __tmp142 (InIf true __tmp9 __tmp130))
(let __tmp143 (Arg __tmp141 __tmp142))
(let __tmp144 (InFunc " loop_ctx_5"))
(let __tmp145 (Arg __tmp141 __tmp144))
(let __tmp146 (Get __tmp145 8))
(let __tmp147 (Get __tmp145 7))
(let __tmp148 (Bop __tmp63 __tmp146 __tmp147))
(let __tmp149 (Get __tmp145 2))
(let __tmp150 (Bop __tmp62 __tmp148 __tmp149))
(let __tmp151 (Single __tmp150))
(let __tmp152 (Get __tmp145 9))
(let __tmp153 (Get __tmp145 5))
(let __tmp154 (Get __tmp145 0))
(let __tmp155 (Top __tmp72 __tmp152 __tmp153 __tmp154))
(let __tmp156 (Single __tmp155))
(let __tmp157 (Get __tmp145 1))
(let __tmp158 (Single __tmp157))
(let __tmp159 (Single __tmp149))
(let __tmp160 (Concat __tmp158 __tmp159))
(let __tmp161 (Concat __tmp156 __tmp160))
(let __tmp162 (Get __tmp145 3))
(let __tmp163 (Single __tmp162))
(let __tmp164 (Get __tmp145 4))
(let __tmp165 (Single __tmp164))
(let __tmp166 (Concat __tmp163 __tmp165))
(let __tmp167 (Single __tmp153))
(let __tmp168 (Concat __tmp166 __tmp167))
(let __tmp169 (Get __tmp145 6))
(let __tmp170 (Single __tmp169))
(let __tmp171 (Concat __tmp168 __tmp170))
(let __tmp172 (Single __tmp148))
(let __tmp173 (Single __tmp146))
(let __tmp174 (Concat __tmp172 __tmp173))
(let __tmp175 (Bop __tmp94 __tmp152 __tmp146))
(let __tmp176 (Single __tmp175))
(let __tmp177 (Concat __tmp176 __tmp159))
(let __tmp178 (Concat __tmp174 __tmp177))
(let __tmp179 (Concat __tmp171 __tmp178))
(let __tmp180 (Concat __tmp161 __tmp179))
(let __tmp181 (Concat __tmp151 __tmp180))
(let __tmp182 (DoWhile __tmp143 __tmp181))
(let __tmp183 (InIf false __tmp9 __tmp130))
(let __tmp184 (Arg __tmp141 __tmp183))
(let __tmp185 (If __tmp9 __tmp130 __tmp182 __tmp184))
(let __tmp186 (Get __tmp185 0))
(let __tmp187 (Alloc 2 __tmp6 __tmp186 __tmp109))
(let __tmp188 (Get __tmp187 1))
(let __tmp189 (Single __tmp188))
(let __tmp190 (Get __tmp185 6))
(let __tmp191 (Single __tmp190))
(let __tmp192 (Get __tmp185 3))
(let __tmp193 (Single __tmp192))
(let __tmp194 (Get __tmp185 4))
(let __tmp195 (Single __tmp194))
(let __tmp196 (Get __tmp185 5))
(let __tmp197 (Single __tmp196))
(let __tmp198 (Get __tmp187 0))
(let __tmp199 (Single __tmp198))
(let __tmp200 (Concat __tmp199 __tmp7))
(let __tmp201 (Concat __tmp33 __tmp200))
(let __tmp202 (Concat __tmp30 __tmp201))
(let __tmp203 (Concat __tmp199 __tmp202))
(let __tmp204 (Concat __tmp197 __tmp203))
(let __tmp205 (Concat __tmp195 __tmp204))
(let __tmp206 (Concat __tmp193 __tmp205))
(let __tmp207 (Concat __tmp19 __tmp206))
(let __tmp208 (Concat __tmp7 __tmp207))
(let __tmp209 (Concat __tmp191 __tmp208))
(let __tmp210 (Concat __tmp189 __tmp209))
(let __tmp211 (TCons __tmp109 __tmp139))
(let __tmp212 (TCons __tmp1 __tmp211))
(let __tmp213 (TupleT __tmp212))
(let __tmp214 (InIf true __tmp9 __tmp210))
(let __tmp215 (Arg __tmp213 __tmp214))
(let __tmp216 (InFunc " loop_ctx_6"))
(let __tmp217 (Arg __tmp213 __tmp216))
(let __tmp218 (Get __tmp217 9))
(let __tmp219 (Get __tmp217 8))
(let __tmp220 (Bop __tmp63 __tmp218 __tmp219))
(let __tmp221 (Get __tmp217 2))
(let __tmp222 (Bop __tmp62 __tmp220 __tmp221))
(let __tmp223 (Single __tmp222))
(let __tmp224 (Get __tmp217 10))
(let __tmp225 (Get __tmp217 6))
(let __tmp226 (Get __tmp217 0))
(let __tmp227 (Top __tmp72 __tmp224 __tmp225 __tmp226))
(let __tmp228 (Single __tmp227))
(let __tmp229 (Get __tmp217 1))
(let __tmp230 (Single __tmp229))
(let __tmp231 (Concat __tmp228 __tmp230))
(let __tmp232 (Single __tmp221))
(let __tmp233 (Get __tmp217 3))
(let __tmp234 (Single __tmp233))
(let __tmp235 (Concat __tmp232 __tmp234))
(let __tmp236 (Get __tmp217 4))
(let __tmp237 (Single __tmp236))
(let __tmp238 (Get __tmp217 5))
(let __tmp239 (Single __tmp238))
(let __tmp240 (Concat __tmp237 __tmp239))
(let __tmp241 (Single __tmp225))
(let __tmp242 (Concat __tmp240 __tmp241))
(let __tmp243 (Get __tmp217 7))
(let __tmp244 (Single __tmp243))
(let __tmp245 (Concat __tmp242 __tmp244))
(let __tmp246 (Concat __tmp235 __tmp245))
(let __tmp247 (Single __tmp220))
(let __tmp248 (Single __tmp218))
(let __tmp249 (Concat __tmp247 __tmp248))
(let __tmp250 (Bop __tmp94 __tmp224 __tmp218))
(let __tmp251 (Single __tmp250))
(let __tmp252 (Concat __tmp251 __tmp232))
(let __tmp253 (Concat __tmp249 __tmp252))
(let __tmp254 (Concat __tmp246 __tmp253))
(let __tmp255 (Concat __tmp231 __tmp254))
(let __tmp256 (Concat __tmp223 __tmp255))
(let __tmp257 (DoWhile __tmp215 __tmp256))
(let __tmp258 (InIf false __tmp9 __tmp210))
(let __tmp259 (Arg __tmp213 __tmp258))
(let __tmp260 (If __tmp9 __tmp210 __tmp257 __tmp259))
(let __tmp261 (Get __tmp260 0))
(let __tmp262 (Alloc 3 __tmp6 __tmp261 __tmp15))
(let __tmp263 (Get __tmp262 1))
(let __tmp264 (Single __tmp263))
(let __tmp265 (Get __tmp260 7))
(let __tmp266 (Single __tmp265))
(let __tmp267 (Get __tmp260 1))
(let __tmp268 (Single __tmp267))
(let __tmp269 (Get __tmp260 4))
(let __tmp270 (Single __tmp269))
(let __tmp271 (Get __tmp260 5))
(let __tmp272 (Single __tmp271))
(let __tmp273 (Get __tmp260 6))
(let __tmp274 (Single __tmp273))
(let __tmp275 (Get __tmp262 0))
(let __tmp276 (Single __tmp275))
(let __tmp277 (Concat __tmp276 __tmp37))
(let __tmp278 (Concat __tmp33 __tmp277))
(let __tmp279 (Concat __tmp30 __tmp278))
(let __tmp280 (Concat __tmp276 __tmp279))
(let __tmp281 (Concat __tmp274 __tmp280))
(let __tmp282 (Concat __tmp272 __tmp281))
(let __tmp283 (Concat __tmp270 __tmp282))
(let __tmp284 (Concat __tmp19 __tmp283))
(let __tmp285 (Concat __tmp7 __tmp284))
(let __tmp286 (Concat __tmp268 __tmp285))
(let __tmp287 (Concat __tmp266 __tmp286))
(let __tmp288 (Concat __tmp264 __tmp287))
(let __tmp289 (TCons __tmp15 __tmp53))
(let __tmp290 (TCons __tmp14 __tmp289))
(let __tmp291 (TCons __tmp14 __tmp290))
(let __tmp292 (TCons __tmp47 __tmp291))
(let __tmp293 (TCons __tmp47 __tmp292))
(let __tmp294 (TCons __tmp109 __tmp293))
(let __tmp295 (TCons __tmp109 __tmp294))
(let __tmp296 (TCons __tmp1 __tmp295))
(let __tmp297 (TupleT __tmp296))
(let __tmp298 (InIf true __tmp9 __tmp288))
(let __tmp299 (Arg __tmp297 __tmp298))
(let __tmp300 (InFunc " loop_ctx_7"))
(let __tmp301 (Arg __tmp297 __tmp300))
(let __tmp302 (Get __tmp301 10))
(let __tmp303 (Get __tmp301 9))
(let __tmp304 (Bop __tmp63 __tmp302 __tmp303))
(let __tmp305 (Get __tmp301 3))
(let __tmp306 (Bop __tmp62 __tmp304 __tmp305))
(let __tmp307 (Single __tmp306))
(let __tmp308 (Get __tmp301 11))
(let __tmp309 (Get __tmp301 12))
(let __tmp310 (Get __tmp301 0))
(let __tmp311 (Top __tmp72 __tmp308 __tmp309 __tmp310))
(let __tmp312 (Single __tmp311))
(let __tmp313 (Get __tmp301 1))
(let __tmp314 (Single __tmp313))
(let __tmp315 (Concat __tmp312 __tmp314))
(let __tmp316 (Get __tmp301 2))
(let __tmp317 (Single __tmp316))
(let __tmp318 (Concat __tmp315 __tmp317))
(let __tmp319 (Single __tmp305))
(let __tmp320 (Get __tmp301 4))
(let __tmp321 (Single __tmp320))
(let __tmp322 (Get __tmp301 5))
(let __tmp323 (Single __tmp322))
(let __tmp324 (Concat __tmp321 __tmp323))
(let __tmp325 (Concat __tmp319 __tmp324))
(let __tmp326 (Get __tmp301 6))
(let __tmp327 (Single __tmp326))
(let __tmp328 (Concat __tmp325 __tmp327))
(let __tmp329 (Get __tmp301 7))
(let __tmp330 (Single __tmp329))
(let __tmp331 (Concat __tmp328 __tmp330))
(let __tmp332 (Concat __tmp318 __tmp331))
(let __tmp333 (Get __tmp301 8))
(let __tmp334 (Single __tmp333))
(let __tmp335 (Concat __tmp332 __tmp334))
(let __tmp336 (Single __tmp304))
(let __tmp337 (Single __tmp302))
(let __tmp338 (Concat __tmp336 __tmp337))
(let __tmp339 (Bop __tmp94 __tmp308 __tmp302))
(let __tmp340 (Single __tmp339))
(let __tmp341 (Single __tmp309))
(let __tmp342 (Concat __tmp340 __tmp341))
(let __tmp343 (Concat __tmp338 __tmp342))
(let __tmp344 (Concat __tmp335 __tmp343))
(let __tmp345 (Concat __tmp344 __tmp319))
(let __tmp346 (Concat __tmp307 __tmp345))
(let __tmp347 (DoWhile __tmp299 __tmp346))
(let __tmp348 (InIf false __tmp9 __tmp288))
(let __tmp349 (Arg __tmp297 __tmp348))
(let __tmp350 (If __tmp9 __tmp288 __tmp347 __tmp349))
(let __tmp351 (Get __tmp350 0))
(let __tmp352 (Alloc 4 __tmp6 __tmp351 __tmp15))
(let __tmp353 (Get __tmp352 1))
(let __tmp354 (Single __tmp353))
(let __tmp355 (Get __tmp350 8))
(let __tmp356 (Single __tmp355))
(let __tmp357 (Get __tmp350 1))
(let __tmp358 (Single __tmp357))
(let __tmp359 (Get __tmp350 2))
(let __tmp360 (Single __tmp359))
(let __tmp361 (Get __tmp350 5))
(let __tmp362 (Single __tmp361))
(let __tmp363 (Get __tmp350 6))
(let __tmp364 (Single __tmp363))
(let __tmp365 (Get __tmp350 7))
(let __tmp366 (Single __tmp365))
(let __tmp367 (Get __tmp352 0))
(let __tmp368 (Single __tmp367))
(let __tmp369 (Concat __tmp368 __tmp37))
(let __tmp370 (Concat __tmp33 __tmp369))
(let __tmp371 (Concat __tmp30 __tmp370))
(let __tmp372 (Concat __tmp368 __tmp371))
(let __tmp373 (Concat __tmp366 __tmp372))
(let __tmp374 (Concat __tmp364 __tmp373))
(let __tmp375 (Concat __tmp362 __tmp374))
(let __tmp376 (Concat __tmp19 __tmp375))
(let __tmp377 (Concat __tmp7 __tmp376))
(let __tmp378 (Concat __tmp360 __tmp377))
(let __tmp379 (Concat __tmp358 __tmp378))
(let __tmp380 (Concat __tmp356 __tmp379))
(let __tmp381 (Concat __tmp354 __tmp380))
(let __tmp382 (TCons __tmp15 __tmp295))
(let __tmp383 (TCons __tmp1 __tmp382))
(let __tmp384 (TupleT __tmp383))
(let __tmp385 (InIf true __tmp9 __tmp381))
(let __tmp386 (Arg __tmp384 __tmp385))
(let __tmp387 (InFunc " loop_ctx_8"))
(let __tmp388 (Arg __tmp384 __tmp387))
(let __tmp389 (Get __tmp388 11))
(let __tmp390 (Get __tmp388 10))
(let __tmp391 (Bop __tmp63 __tmp389 __tmp390))
(let __tmp392 (Get __tmp388 4))
(let __tmp393 (Bop __tmp62 __tmp391 __tmp392))
(let __tmp394 (Single __tmp393))
(let __tmp395 (Get __tmp388 12))
(let __tmp396 (Get __tmp388 13))
(let __tmp397 (Get __tmp388 0))
(let __tmp398 (Top __tmp72 __tmp395 __tmp396 __tmp397))
(let __tmp399 (Single __tmp398))
(let __tmp400 (Get __tmp388 1))
(let __tmp401 (Single __tmp400))
(let __tmp402 (Concat __tmp399 __tmp401))
(let __tmp403 (Get __tmp388 2))
(let __tmp404 (Single __tmp403))
(let __tmp405 (Concat __tmp402 __tmp404))
(let __tmp406 (Get __tmp388 3))
(let __tmp407 (Single __tmp406))
(let __tmp408 (Concat __tmp405 __tmp407))
(let __tmp409 (Single __tmp392))
(let __tmp410 (Get __tmp388 5))
(let __tmp411 (Single __tmp410))
(let __tmp412 (Concat __tmp409 __tmp411))
(let __tmp413 (Get __tmp388 6))
(let __tmp414 (Single __tmp413))
(let __tmp415 (Get __tmp388 7))
(let __tmp416 (Single __tmp415))
(let __tmp417 (Concat __tmp414 __tmp416))
(let __tmp418 (Get __tmp388 8))
(let __tmp419 (Single __tmp418))
(let __tmp420 (Concat __tmp417 __tmp419))
(let __tmp421 (Get __tmp388 9))
(let __tmp422 (Single __tmp421))
(let __tmp423 (Concat __tmp420 __tmp422))
(let __tmp424 (Concat __tmp412 __tmp423))
(let __tmp425 (Single __tmp391))
(let __tmp426 (Single __tmp389))
(let __tmp427 (Concat __tmp425 __tmp426))
(let __tmp428 (Bop __tmp94 __tmp395 __tmp389))
(let __tmp429 (Single __tmp428))
(let __tmp430 (Concat __tmp427 __tmp429))
(let __tmp431 (Single __tmp396))
(let __tmp432 (Concat __tmp431 __tmp409))
(let __tmp433 (Concat __tmp430 __tmp432))
(let __tmp434 (Concat __tmp424 __tmp433))
(let __tmp435 (Concat __tmp408 __tmp434))
(let __tmp436 (Concat __tmp394 __tmp435))
(let __tmp437 (DoWhile __tmp386 __tmp436))
(let __tmp438 (InIf false __tmp9 __tmp381))
(let __tmp439 (Arg __tmp384 __tmp438))
(let __tmp440 (If __tmp9 __tmp381 __tmp437 __tmp439))
(let __tmp441 (Get __tmp440 0))
(let __tmp442 (Single __tmp441))
(let __tmp443 (Get __tmp440 9))
(let __tmp444 (Single __tmp443))
(let __tmp445 (Get __tmp440 1))
(let __tmp446 (Single __tmp445))
(let __tmp447 (Get __tmp440 2))
(let __tmp448 (Single __tmp447))
(let __tmp449 (Get __tmp440 3))
(let __tmp450 (Single __tmp449))
(let __tmp451 (Get __tmp440 6))
(let __tmp452 (Single __tmp451))
(let __tmp453 (Get __tmp440 7))
(let __tmp454 (Single __tmp453))
(let __tmp455 (Get __tmp440 8))
(let __tmp456 (Single __tmp455))
(let __tmp457 (Concat __tmp454 __tmp456))
(let __tmp458 (Concat __tmp452 __tmp457))
(let __tmp459 (Concat __tmp19 __tmp458))
(let __tmp460 (Concat __tmp7 __tmp459))
(let __tmp461 (Concat __tmp30 __tmp460))
(let __tmp462 (Concat __tmp450 __tmp461))
(let __tmp463 (Concat __tmp448 __tmp462))
(let __tmp464 (Concat __tmp446 __tmp463))
(let __tmp465 (Concat __tmp444 __tmp464))
(let __tmp466 (Concat __tmp442 __tmp465))
(let __tmp467 (TCons __tmp15 __tmp2))
(let __tmp468 (TCons __tmp14 __tmp467))
(let __tmp469 (TCons __tmp14 __tmp468))
(let __tmp470 (TCons __tmp47 __tmp469))
(let __tmp471 (TCons __tmp47 __tmp470))
(let __tmp472 (TCons __tmp47 __tmp471))
(let __tmp473 (TCons __tmp109 __tmp472))
(let __tmp474 (TCons __tmp109 __tmp473))
(let __tmp475 (TCons __tmp15 __tmp474))
(let __tmp476 (TCons __tmp15 __tmp475))
(let __tmp477 (TCons __tmp1 __tmp476))
(let __tmp478 (TupleT __tmp477))
(let __tmp479 (InFunc " loop_ctx_3"))
(let __tmp480 (Arg __tmp478 __tmp479))
(let __tmp481 (Get __tmp480 5))
(let __tmp482 (Get __tmp480 7))
(let __tmp483 (Bop __tmp62 __tmp481 __tmp482))
(let __tmp484 (Single __tmp483))
(let __tmp485 (InIf true __tmp483 __tmp480))
(let __tmp486 (Const __tmp28 __tmp478 __tmp485))
(let __tmp487 (Arg __tmp478 __tmp485))
(let __tmp488 (Get __tmp487 6))
(let __tmp489 (Bop __tmp62 __tmp486 __tmp488))
(let __tmp490 (Get __tmp487 0))
(let __tmp491 (Alloc 5 __tmp488 __tmp490 __tmp15))
(let __tmp492 (Get __tmp491 1))
(let __tmp493 (Single __tmp492))
(let __tmp494 (Get __tmp487 1))
(let __tmp495 (Single __tmp494))
(let __tmp496 (Get __tmp487 2))
(let __tmp497 (Single __tmp496))
(let __tmp498 (Get __tmp487 3))
(let __tmp499 (Single __tmp498))
(let __tmp500 (Get __tmp487 4))
(let __tmp501 (Single __tmp500))
(let __tmp502 (Get __tmp487 5))
(let __tmp503 (Single __tmp502))
(let __tmp504 (Single __tmp488))
(let __tmp505 (Get __tmp487 7))
(let __tmp506 (Single __tmp505))
(let __tmp507 (Get __tmp487 8))
(let __tmp508 (Single __tmp507))
(let __tmp509 (Get __tmp487 9))
(let __tmp510 (Single __tmp509))
(let __tmp511 (Get __tmp487 10))
(let __tmp512 (Single __tmp511))
(let __tmp513 (Get __tmp491 0))
(let __tmp514 (Single __tmp513))
(let __tmp515 (Single __tmp486))
(let __tmp516 (Const __tmp31 __tmp478 __tmp485))
(let __tmp517 (Single __tmp516))
(let __tmp518 (Const __tmp34 __tmp478 __tmp485))
(let __tmp519 (Single __tmp518))
(let __tmp520 (Concat __tmp519 __tmp504))
(let __tmp521 (Concat __tmp514 __tmp520))
(let __tmp522 (Concat __tmp517 __tmp521))
(let __tmp523 (Concat __tmp515 __tmp522))
(let __tmp524 (Concat __tmp514 __tmp523))
(let __tmp525 (Concat __tmp512 __tmp524))
(let __tmp526 (Concat __tmp510 __tmp525))
(let __tmp527 (Concat __tmp508 __tmp526))
(let __tmp528 (Concat __tmp506 __tmp527))
(let __tmp529 (Concat __tmp504 __tmp528))
(let __tmp530 (Concat __tmp503 __tmp529))
(let __tmp531 (Concat __tmp501 __tmp530))
(let __tmp532 (Concat __tmp499 __tmp531))
(let __tmp533 (Concat __tmp497 __tmp532))
(let __tmp534 (Concat __tmp495 __tmp533))
(let __tmp535 (Concat __tmp493 __tmp534))
(let __tmp536 (TCons __tmp47 __tmp293))
(let __tmp537 (TCons __tmp109 __tmp536))
(let __tmp538 (TCons __tmp109 __tmp537))
(let __tmp539 (TCons __tmp15 __tmp538))
(let __tmp540 (TCons __tmp15 __tmp539))
(let __tmp541 (TCons __tmp1 __tmp540))
(let __tmp542 (TupleT __tmp541))
(let __tmp543 (InIf true __tmp489 __tmp535))
(let __tmp544 (Arg __tmp542 __tmp543))
(let __tmp545 (InFunc " loop_ctx_9"))
(let __tmp546 (Arg __tmp542 __tmp545))
(let __tmp547 (Get __tmp546 13))
(let __tmp548 (Get __tmp546 12))
(let __tmp549 (Bop __tmp63 __tmp547 __tmp548))
(let __tmp550 (Get __tmp546 6))
(let __tmp551 (Bop __tmp62 __tmp549 __tmp550))
(let __tmp552 (Single __tmp551))
(let __tmp553 (Get __tmp546 14))
(let __tmp554 (Get __tmp546 15))
(let __tmp555 (Get __tmp546 0))
(let __tmp556 (Top __tmp72 __tmp553 __tmp554 __tmp555))
(let __tmp557 (Single __tmp556))
(let __tmp558 (Get __tmp546 1))
(let __tmp559 (Single __tmp558))
(let __tmp560 (Concat __tmp557 __tmp559))
(let __tmp561 (Get __tmp546 2))
(let __tmp562 (Single __tmp561))
(let __tmp563 (Concat __tmp560 __tmp562))
(let __tmp564 (Get __tmp546 3))
(let __tmp565 (Single __tmp564))
(let __tmp566 (Concat __tmp563 __tmp565))
(let __tmp567 (Get __tmp546 4))
(let __tmp568 (Single __tmp567))
(let __tmp569 (Concat __tmp566 __tmp568))
(let __tmp570 (Get __tmp546 5))
(let __tmp571 (Single __tmp570))
(let __tmp572 (Concat __tmp569 __tmp571))
(let __tmp573 (Single __tmp550))
(let __tmp574 (Concat __tmp572 __tmp573))
(let __tmp575 (Get __tmp546 7))
(let __tmp576 (Single __tmp575))
(let __tmp577 (Concat __tmp574 __tmp576))
(let __tmp578 (Get __tmp546 8))
(let __tmp579 (Single __tmp578))
(let __tmp580 (Concat __tmp577 __tmp579))
(let __tmp581 (Get __tmp546 9))
(let __tmp582 (Single __tmp581))
(let __tmp583 (Get __tmp546 10))
(let __tmp584 (Single __tmp583))
(let __tmp585 (Concat __tmp582 __tmp584))
(let __tmp586 (Get __tmp546 11))
(let __tmp587 (Single __tmp586))
(let __tmp588 (Concat __tmp585 __tmp587))
(let __tmp589 (Single __tmp549))
(let __tmp590 (Single __tmp547))
(let __tmp591 (Concat __tmp589 __tmp590))
(let __tmp592 (Concat __tmp588 __tmp591))
(let __tmp593 (Bop __tmp94 __tmp553 __tmp547))
(let __tmp594 (Single __tmp593))
(let __tmp595 (Single __tmp554))
(let __tmp596 (Concat __tmp594 __tmp595))
(let __tmp597 (Concat __tmp596 __tmp573))
(let __tmp598 (Concat __tmp592 __tmp597))
(let __tmp599 (Concat __tmp580 __tmp598))
(let __tmp600 (Concat __tmp552 __tmp599))
(let __tmp601 (DoWhile __tmp544 __tmp600))
(let __tmp602 (InIf false __tmp489 __tmp535))
(let __tmp603 (Arg __tmp542 __tmp602))
(let __tmp604 (If __tmp489 __tmp535 __tmp601 __tmp603))
(let __tmp605 (Get __tmp604 4))
(let __tmp606 (Bop __tmp94 __tmp605 __tmp502))
(let __tmp607 (Get __tmp604 11))
(let __tmp608 (Get __tmp604 0))
(let __tmp609 (Top __tmp72 __tmp606 __tmp607 __tmp608))
(let __tmp610 (Single __tmp609))
(let __tmp611 (Get __tmp604 1))
(let __tmp612 (Single __tmp611))
(let __tmp613 (Get __tmp604 2))
(let __tmp614 (Single __tmp613))
(let __tmp615 (Get __tmp604 3))
(let __tmp616 (Single __tmp615))
(let __tmp617 (Single __tmp605))
(let __tmp618 (Bop __tmp63 __tmp516 __tmp502))
(let __tmp619 (Single __tmp618))
(let __tmp620 (Get __tmp604 8))
(let __tmp621 (Single __tmp620))
(let __tmp622 (Get __tmp604 9))
(let __tmp623 (Single __tmp622))
(let __tmp624 (Concat __tmp621 __tmp623))
(let __tmp625 (Get __tmp604 10))
(let __tmp626 (Single __tmp625))
(let __tmp627 (Concat __tmp624 __tmp626))
(let __tmp628 (Concat __tmp506 __tmp627))
(let __tmp629 (Concat __tmp504 __tmp628))
(let __tmp630 (Concat __tmp619 __tmp629))
(let __tmp631 (Concat __tmp617 __tmp630))
(let __tmp632 (Concat __tmp616 __tmp631))
(let __tmp633 (Concat __tmp614 __tmp632))
(let __tmp634 (Concat __tmp612 __tmp633))
(let __tmp635 (Concat __tmp610 __tmp634))
(let __tmp636 (InIf false __tmp483 __tmp480))
(let __tmp637 (Arg __tmp478 __tmp636))
(let __tmp638 (If __tmp483 __tmp480 __tmp635 __tmp637))
(let __tmp639 (Concat __tmp484 __tmp638))
(let __tmp640 (DoWhile __tmp466 __tmp639))
(let __tmp641 (Get __tmp640 0))
(let __tmp642 (Single __tmp641))
(let __tmp643 (Get __tmp640 1))
(let __tmp644 (Single __tmp643))
(let __tmp645 (Get __tmp640 2))
(let __tmp646 (Single __tmp645))
(let __tmp647 (Get __tmp640 3))
(let __tmp648 (Single __tmp647))
(let __tmp649 (Get __tmp640 4))
(let __tmp650 (Single __tmp649))
(let __tmp651 (Get __tmp640 8))
(let __tmp652 (Single __tmp651))
(let __tmp653 (Get __tmp640 9))
(let __tmp654 (Single __tmp653))
(let __tmp655 (Get __tmp640 10))
(let __tmp656 (Single __tmp655))
(let __tmp657 (Concat __tmp654 __tmp656))
(let __tmp658 (Concat __tmp652 __tmp657))
(let __tmp659 (Concat __tmp19 __tmp658))
(let __tmp660 (Concat __tmp7 __tmp659))
(let __tmp661 (Concat __tmp30 __tmp660))
(let __tmp662 (Concat __tmp650 __tmp661))
(let __tmp663 (Concat __tmp648 __tmp662))
(let __tmp664 (Concat __tmp646 __tmp663))
(let __tmp665 (Concat __tmp644 __tmp664))
(let __tmp666 (Concat __tmp642 __tmp665))
(let __tmp667 (InFunc " loop_ctx_2"))
(let __tmp668 (Arg __tmp478 __tmp667))
(let __tmp669 (Get __tmp668 5))
(let __tmp670 (Get __tmp668 6))
(let __tmp671 (Bop __tmp62 __tmp669 __tmp670))
(let __tmp672 (Single __tmp671))
(let __tmp673 (InIf true __tmp671 __tmp668))
(let __tmp674 (Const __tmp28 __tmp478 __tmp673))
(let __tmp675 (Arg __tmp478 __tmp673))
(let __tmp676 (Get __tmp675 6))
(let __tmp677 (Bop __tmp62 __tmp674 __tmp676))
(let __tmp678 (Get __tmp675 0))
(let __tmp679 (Alloc 6 __tmp676 __tmp678 __tmp15))
(let __tmp680 (Get __tmp679 1))
(let __tmp681 (Single __tmp680))
(let __tmp682 (Get __tmp675 1))
(let __tmp683 (Single __tmp682))
(let __tmp684 (Get __tmp675 2))
(let __tmp685 (Single __tmp684))
(let __tmp686 (Get __tmp675 3))
(let __tmp687 (Single __tmp686))
(let __tmp688 (Get __tmp675 4))
(let __tmp689 (Single __tmp688))
(let __tmp690 (Get __tmp675 5))
(let __tmp691 (Single __tmp690))
(let __tmp692 (Single __tmp676))
(let __tmp693 (Get __tmp675 7))
(let __tmp694 (Single __tmp693))
(let __tmp695 (Get __tmp675 8))
(let __tmp696 (Single __tmp695))
(let __tmp697 (Get __tmp675 9))
(let __tmp698 (Single __tmp697))
(let __tmp699 (Get __tmp675 10))
(let __tmp700 (Single __tmp699))
(let __tmp701 (Get __tmp679 0))
(let __tmp702 (Single __tmp701))
(let __tmp703 (Single __tmp674))
(let __tmp704 (Const __tmp31 __tmp478 __tmp673))
(let __tmp705 (Single __tmp704))
(let __tmp706 (Const __tmp34 __tmp478 __tmp673))
(let __tmp707 (Single __tmp706))
(let __tmp708 (Concat __tmp707 __tmp692))
(let __tmp709 (Concat __tmp702 __tmp708))
(let __tmp710 (Concat __tmp705 __tmp709))
(let __tmp711 (Concat __tmp703 __tmp710))
(let __tmp712 (Concat __tmp702 __tmp711))
(let __tmp713 (Concat __tmp700 __tmp712))
(let __tmp714 (Concat __tmp698 __tmp713))
(let __tmp715 (Concat __tmp696 __tmp714))
(let __tmp716 (Concat __tmp694 __tmp715))
(let __tmp717 (Concat __tmp692 __tmp716))
(let __tmp718 (Concat __tmp691 __tmp717))
(let __tmp719 (Concat __tmp689 __tmp718))
(let __tmp720 (Concat __tmp687 __tmp719))
(let __tmp721 (Concat __tmp685 __tmp720))
(let __tmp722 (Concat __tmp683 __tmp721))
(let __tmp723 (Concat __tmp681 __tmp722))
(let __tmp724 (InIf true __tmp677 __tmp723))
(let __tmp725 (Arg __tmp542 __tmp724))
(let __tmp726 (InFunc " loop_ctx_10"))
(let __tmp727 (Arg __tmp542 __tmp726))
(let __tmp728 (Get __tmp727 13))
(let __tmp729 (Get __tmp727 12))
(let __tmp730 (Bop __tmp63 __tmp728 __tmp729))
(let __tmp731 (Get __tmp727 6))
(let __tmp732 (Bop __tmp62 __tmp730 __tmp731))
(let __tmp733 (Single __tmp732))
(let __tmp734 (Get __tmp727 14))
(let __tmp735 (Get __tmp727 15))
(let __tmp736 (Get __tmp727 0))
(let __tmp737 (Top __tmp72 __tmp734 __tmp735 __tmp736))
(let __tmp738 (Single __tmp737))
(let __tmp739 (Get __tmp727 1))
(let __tmp740 (Single __tmp739))
(let __tmp741 (Concat __tmp738 __tmp740))
(let __tmp742 (Get __tmp727 2))
(let __tmp743 (Single __tmp742))
(let __tmp744 (Concat __tmp741 __tmp743))
(let __tmp745 (Get __tmp727 3))
(let __tmp746 (Single __tmp745))
(let __tmp747 (Concat __tmp744 __tmp746))
(let __tmp748 (Get __tmp727 4))
(let __tmp749 (Single __tmp748))
(let __tmp750 (Concat __tmp747 __tmp749))
(let __tmp751 (Get __tmp727 5))
(let __tmp752 (Single __tmp751))
(let __tmp753 (Concat __tmp750 __tmp752))
(let __tmp754 (Single __tmp731))
(let __tmp755 (Concat __tmp753 __tmp754))
(let __tmp756 (Get __tmp727 7))
(let __tmp757 (Single __tmp756))
(let __tmp758 (Concat __tmp755 __tmp757))
(let __tmp759 (Get __tmp727 8))
(let __tmp760 (Single __tmp759))
(let __tmp761 (Concat __tmp758 __tmp760))
(let __tmp762 (Get __tmp727 9))
(let __tmp763 (Single __tmp762))
(let __tmp764 (Get __tmp727 10))
(let __tmp765 (Single __tmp764))
(let __tmp766 (Concat __tmp763 __tmp765))
(let __tmp767 (Get __tmp727 11))
(let __tmp768 (Single __tmp767))
(let __tmp769 (Concat __tmp766 __tmp768))
(let __tmp770 (Single __tmp730))
(let __tmp771 (Single __tmp728))
(let __tmp772 (Concat __tmp770 __tmp771))
(let __tmp773 (Concat __tmp769 __tmp772))
(let __tmp774 (Bop __tmp94 __tmp734 __tmp728))
(let __tmp775 (Single __tmp774))
(let __tmp776 (Single __tmp735))
(let __tmp777 (Concat __tmp775 __tmp776))
(let __tmp778 (Concat __tmp777 __tmp754))
(let __tmp779 (Concat __tmp773 __tmp778))
(let __tmp780 (Concat __tmp761 __tmp779))
(let __tmp781 (Concat __tmp733 __tmp780))
(let __tmp782 (DoWhile __tmp725 __tmp781))
(let __tmp783 (InIf false __tmp677 __tmp723))
(let __tmp784 (Arg __tmp542 __tmp783))
(let __tmp785 (If __tmp677 __tmp723 __tmp782 __tmp784))
(let __tmp786 (Get __tmp785 3))
(let __tmp787 (Bop __tmp94 __tmp786 __tmp690))
(let __tmp788 (Get __tmp785 11))
(let __tmp789 (Get __tmp785 0))
(let __tmp790 (Top __tmp72 __tmp787 __tmp788 __tmp789))
(let __tmp791 (Single __tmp790))
(let __tmp792 (Get __tmp785 1))
(let __tmp793 (Single __tmp792))
(let __tmp794 (Get __tmp785 2))
(let __tmp795 (Single __tmp794))
(let __tmp796 (Single __tmp786))
(let __tmp797 (Get __tmp785 4))
(let __tmp798 (Single __tmp797))
(let __tmp799 (Bop __tmp63 __tmp704 __tmp690))
(let __tmp800 (Single __tmp799))
(let __tmp801 (Get __tmp785 8))
(let __tmp802 (Single __tmp801))
(let __tmp803 (Get __tmp785 9))
(let __tmp804 (Single __tmp803))
(let __tmp805 (Concat __tmp802 __tmp804))
(let __tmp806 (Get __tmp785 10))
(let __tmp807 (Single __tmp806))
(let __tmp808 (Concat __tmp805 __tmp807))
(let __tmp809 (Concat __tmp694 __tmp808))
(let __tmp810 (Concat __tmp692 __tmp809))
(let __tmp811 (Concat __tmp800 __tmp810))
(let __tmp812 (Concat __tmp798 __tmp811))
(let __tmp813 (Concat __tmp796 __tmp812))
(let __tmp814 (Concat __tmp795 __tmp813))
(let __tmp815 (Concat __tmp793 __tmp814))
(let __tmp816 (Concat __tmp791 __tmp815))
(let __tmp817 (InIf false __tmp671 __tmp668))
(let __tmp818 (Arg __tmp478 __tmp817))
(let __tmp819 (If __tmp671 __tmp668 __tmp816 __tmp818))
(let __tmp820 (Concat __tmp672 __tmp819))
(let __tmp821 (DoWhile __tmp666 __tmp820))
(let __tmp822 (Get __tmp821 9))
(let __tmp823 (Single __tmp822))
(let __tmp824 (Get __tmp821 4))
(let __tmp825 (Single __tmp824))
(let __tmp826 (Free ))
(let __tmp827 (Get __tmp821 10))
(let __tmp828 (Get __tmp821 0))
(let __tmp829 (Bop __tmp826 __tmp827 __tmp828))
(let __tmp830 (Single __tmp829))
(let __tmp831 (Concat __tmp825 __tmp830))
(let __tmp832 (Concat __tmp19 __tmp831))
(let __tmp833 (Concat __tmp823 __tmp832))
(let __tmp834 (Concat __tmp7 __tmp833))
(let __tmp835 (Call "init_array" __tmp834))
(let __tmp836 (Get __tmp834 4))
(let __tmp837 (Single __tmp836))
(let __tmp838 (Get __tmp834 3))
(let __tmp839 (Single __tmp838))
(let __tmp840 (Get __tmp834 1))
(let __tmp841 (Single __tmp840))
(let __tmp842 (Get __tmp834 0))
(let __tmp843 (Single __tmp842))
(let __tmp844 (Get __tmp834 2))
(let __tmp845 (Single __tmp844))
(let __tmp846 (Concat __tmp843 __tmp845))
(let __tmp847 (Concat __tmp841 __tmp846))
(let __tmp848 (Concat __tmp839 __tmp847))
(let __tmp849 (Concat __tmp30 __tmp848))
(let __tmp850 (Concat __tmp36 __tmp849))
(let __tmp851 (Concat __tmp837 __tmp850))
(let __tmp852 (TCons __tmp47 __tmp48))
(let __tmp853 (TCons __tmp14 __tmp852))
(let __tmp854 (TCons __tmp109 __tmp853))
(let __tmp855 (TCons __tmp47 __tmp854))
(let __tmp856 (TCons __tmp14 __tmp855))
(let __tmp857 (TCons __tmp1 __tmp856))
(let __tmp858 (TupleT __tmp857))
(let __tmp859 (InFunc " loop_ctx_25"))
(let __tmp860 (Arg __tmp858 __tmp859))
(let __tmp861 (Get __tmp860 2))
(let __tmp862 (Get __tmp860 6))
(let __tmp863 (Bop __tmp62 __tmp861 __tmp862))
(let __tmp864 (Single __tmp863))
(let __tmp865 (InIf true __tmp863 __tmp860))
(let __tmp866 (Const __tmp28 __tmp858 __tmp865))
(let __tmp867 (Arg __tmp858 __tmp865))
(let __tmp868 (Get __tmp867 5))
(let __tmp869 (Bop __tmp62 __tmp866 __tmp868))
(let __tmp870 (Get __tmp867 0))
(let __tmp871 (Single __tmp870))
(let __tmp872 (Get __tmp867 1))
(let __tmp873 (Single __tmp872))
(let __tmp874 (Get __tmp867 2))
(let __tmp875 (Single __tmp874))
(let __tmp876 (Const __tmp34 __tmp858 __tmp865))
(let __tmp877 (Single __tmp876))
(let __tmp878 (Single __tmp866))
(let __tmp879 (Get __tmp867 3))
(let __tmp880 (Single __tmp879))
(let __tmp881 (Get __tmp867 4))
(let __tmp882 (Single __tmp881))
(let __tmp883 (Single __tmp868))
(let __tmp884 (Get __tmp867 6))
(let __tmp885 (Single __tmp884))
(let __tmp886 (Concat __tmp883 __tmp885))
(let __tmp887 (Concat __tmp882 __tmp886))
(let __tmp888 (Concat __tmp880 __tmp887))
(let __tmp889 (Concat __tmp878 __tmp888))
(let __tmp890 (Concat __tmp877 __tmp889))
(let __tmp891 (Concat __tmp875 __tmp890))
(let __tmp892 (Concat __tmp873 __tmp891))
(let __tmp893 (Concat __tmp871 __tmp892))
(let __tmp894 (TCons __tmp47 __tmp856))
(let __tmp895 (TCons __tmp14 __tmp894))
(let __tmp896 (TCons __tmp1 __tmp895))
(let __tmp897 (TupleT __tmp896))
(let __tmp898 (InIf true __tmp869 __tmp893))
(let __tmp899 (Arg __tmp897 __tmp898))
(let __tmp900 (InFunc " loop_ctx_26"))
(let __tmp901 (Arg __tmp897 __tmp900))
(let __tmp902 (Get __tmp901 4))
(let __tmp903 (Const __tmp31 __tmp897 __tmp900))
(let __tmp904 (Bop __tmp63 __tmp902 __tmp903))
(let __tmp905 (Get __tmp901 7))
(let __tmp906 (Bop __tmp62 __tmp904 __tmp905))
(let __tmp907 (Single __tmp906))
(let __tmp908 (Load ))
(let __tmp909 (Get __tmp901 5))
(let __tmp910 (Get __tmp901 2))
(let __tmp911 (Bop __tmp94 __tmp909 __tmp910))
(let __tmp912 (Get __tmp901 0))
(let __tmp913 (Bop __tmp908 __tmp911 __tmp912))
(let __tmp914 (Get __tmp913 0))
(let __tmp915 (Bop __tmp94 __tmp914 __tmp902))
(let __tmp916 (FAdd ))
(let __tmp917 (FDiv ))
(let __tmp918 (FMul ))
(let __tmp919 (Get __tmp901 1))
(let __tmp920 (Get __tmp901 3))
(let __tmp921 (Bop __tmp918 __tmp919 __tmp920))
(let __tmp922 (Get __tmp901 6))
(let __tmp923 (Bop __tmp917 __tmp921 __tmp922))
(let __tmp924 (Bop __tmp916 __tmp923 __tmp919))
(let __tmp925 (Get __tmp913 1))
(let __tmp926 (Top __tmp72 __tmp915 __tmp924 __tmp925))
(let __tmp927 (Single __tmp926))
(let __tmp928 (Single __tmp919))
(let __tmp929 (Single __tmp910))
(let __tmp930 (Float 1.0))
(let __tmp931 (Const __tmp930 __tmp897 __tmp900))
(let __tmp932 (Bop __tmp916 __tmp920 __tmp931))
(let __tmp933 (Single __tmp932))
(let __tmp934 (Concat __tmp929 __tmp933))
(let __tmp935 (Concat __tmp928 __tmp934))
(let __tmp936 (Single __tmp904))
(let __tmp937 (Single __tmp909))
(let __tmp938 (Single __tmp922))
(let __tmp939 (Concat __tmp937 __tmp938))
(let __tmp940 (Concat __tmp936 __tmp939))
(let __tmp941 (Single __tmp905))
(let __tmp942 (Get __tmp901 8))
(let __tmp943 (Single __tmp942))
(let __tmp944 (Concat __tmp941 __tmp943))
(let __tmp945 (Concat __tmp940 __tmp944))
(let __tmp946 (Concat __tmp935 __tmp945))
(let __tmp947 (Concat __tmp927 __tmp946))
(let __tmp948 (Concat __tmp907 __tmp947))
(let __tmp949 (DoWhile __tmp899 __tmp948))
(let __tmp950 (InIf false __tmp869 __tmp893))
(let __tmp951 (Arg __tmp897 __tmp950))
(let __tmp952 (If __tmp869 __tmp893 __tmp949 __tmp951))
(let __tmp953 (Get __tmp952 0))
(let __tmp954 (Single __tmp953))
(let __tmp955 (Get __tmp952 1))
(let __tmp956 (Const __tmp930 __tmp858 __tmp865))
(let __tmp957 (Bop __tmp916 __tmp955 __tmp956))
(let __tmp958 (Single __tmp957))
(let __tmp959 (Const __tmp31 __tmp858 __tmp865))
(let __tmp960 (Bop __tmp63 __tmp959 __tmp874))
(let __tmp961 (Single __tmp960))
(let __tmp962 (Get __tmp952 5))
(let __tmp963 (Single __tmp962))
(let __tmp964 (Get __tmp952 6))
(let __tmp965 (Single __tmp964))
(let __tmp966 (Concat __tmp965 __tmp886))
(let __tmp967 (Concat __tmp963 __tmp966))
(let __tmp968 (Concat __tmp961 __tmp967))
(let __tmp969 (Concat __tmp958 __tmp968))
(let __tmp970 (Concat __tmp954 __tmp969))
(let __tmp971 (InIf false __tmp863 __tmp860))
(let __tmp972 (Arg __tmp858 __tmp971))
(let __tmp973 (If __tmp863 __tmp860 __tmp970 __tmp972))
(let __tmp974 (Concat __tmp864 __tmp973))
(let __tmp975 (DoWhile __tmp851 __tmp974))
(let __tmp976 (Get __tmp975 0))
(let __tmp977 (Single __tmp976))
(let __tmp978 (Get __tmp821 8))
(let __tmp979 (Single __tmp978))
(let __tmp980 (Get __tmp821 3))
(let __tmp981 (Single __tmp980))
(let __tmp982 (Get __tmp821 2))
(let __tmp983 (Single __tmp982))
(let __tmp984 (Get __tmp821 1))
(let __tmp985 (Single __tmp984))
(let __tmp986 (Concat __tmp985 __tmp835))
(let __tmp987 (Concat __tmp983 __tmp986))
(let __tmp988 (Concat __tmp981 __tmp987))
(let __tmp989 (Concat __tmp825 __tmp988))
(let __tmp990 (Concat __tmp979 __tmp989))
(let __tmp991 (Concat __tmp19 __tmp990))
(let __tmp992 (Concat __tmp7 __tmp991))
(let __tmp993 (Call "kernel_correlation" __tmp992))
(let __tmp994 (Get __tmp992 7))
(let __tmp995 (Single __tmp994))
(let __tmp996 (Get __tmp992 0))
(let __tmp997 (Single __tmp996))
(let __tmp998 (Get __tmp992 4))
(let __tmp999 (Single __tmp998))
(let __tmp1000 (Get __tmp992 3))
(let __tmp1001 (Single __tmp1000))
(let __tmp1002 (Get __tmp992 1))
(let __tmp1003 (Single __tmp1002))
(let __tmp1004 (Get __tmp992 6))
(let __tmp1005 (Single __tmp1004))
(let __tmp1006 (Get __tmp992 2))
(let __tmp1007 (Single __tmp1006))
(let __tmp1008 (Get __tmp992 5))
(let __tmp1009 (Single __tmp1008))
(let __tmp1010 (Float 0.1))
(let __tmp1011 (Const __tmp1010 __tmp4 __tmp5))
(let __tmp1012 (Single __tmp1011))
(let __tmp1013 (Concat __tmp1009 __tmp1012))
(let __tmp1014 (Concat __tmp1007 __tmp1013))
(let __tmp1015 (Concat __tmp1005 __tmp1014))
(let __tmp1016 (Concat __tmp1003 __tmp1015))
(let __tmp1017 (Concat __tmp1001 __tmp1016))
(let __tmp1018 (Concat __tmp30 __tmp1017))
(let __tmp1019 (Concat __tmp999 __tmp1018))
(let __tmp1020 (Concat __tmp997 __tmp1019))
(let __tmp1021 (Concat __tmp995 __tmp1020))
(let __tmp1022 (TCons __tmp14 __tmp2))
(let __tmp1023 (TCons __tmp15 __tmp1022))
(let __tmp1024 (TCons __tmp14 __tmp1023))
(let __tmp1025 (TCons __tmp15 __tmp1024))
(let __tmp1026 (TCons __tmp47 __tmp1025))
(let __tmp1027 (TCons __tmp109 __tmp1026))
(let __tmp1028 (TCons __tmp47 __tmp1027))
(let __tmp1029 (TCons __tmp109 __tmp1028))
(let __tmp1030 (TCons __tmp47 __tmp1029))
(let __tmp1031 (TCons __tmp1 __tmp1030))
(let __tmp1032 (TupleT __tmp1031))
(let __tmp1033 (InFunc " loop_ctx_30"))
(let __tmp1034 (Arg __tmp1032 __tmp1033))
(let __tmp1035 (Get __tmp1034 3))
(let __tmp1036 (Get __tmp1034 1))
(let __tmp1037 (Bop __tmp62 __tmp1035 __tmp1036))
(let __tmp1038 (Single __tmp1037))
(let __tmp1039 (InIf true __tmp1037 __tmp1034))
(let __tmp1040 (Const __tmp28 __tmp1032 __tmp1039))
(let __tmp1041 (Arg __tmp1032 __tmp1039))
(let __tmp1042 (Get __tmp1041 5))
(let __tmp1043 (Bop __tmp62 __tmp1040 __tmp1042))
(let __tmp1044 (Get __tmp1041 8))
(let __tmp1045 (Get __tmp1041 3))
(let __tmp1046 (Bop __tmp94 __tmp1044 __tmp1045))
(let __tmp1047 (Const __tmp34 __tmp1032 __tmp1039))
(let __tmp1048 (Get __tmp1041 0))
(let __tmp1049 (Top __tmp72 __tmp1046 __tmp1047 __tmp1048))
(let __tmp1050 (Single __tmp1049))
(let __tmp1051 (Get __tmp1041 1))
(let __tmp1052 (Single __tmp1051))
(let __tmp1053 (Get __tmp1041 2))
(let __tmp1054 (Single __tmp1053))
(let __tmp1055 (Single __tmp1040))
(let __tmp1056 (Single __tmp1045))
(let __tmp1057 (Get __tmp1041 4))
(let __tmp1058 (Single __tmp1057))
(let __tmp1059 (Single __tmp1042))
(let __tmp1060 (Get __tmp1041 6))
(let __tmp1061 (Single __tmp1060))
(let __tmp1062 (Get __tmp1041 7))
(let __tmp1063 (Single __tmp1062))
(let __tmp1064 (Single __tmp1044))
(let __tmp1065 (Get __tmp1041 9))
(let __tmp1066 (Single __tmp1065))
(let __tmp1067 (Concat __tmp1064 __tmp1066))
(let __tmp1068 (Concat __tmp1063 __tmp1067))
(let __tmp1069 (Concat __tmp1061 __tmp1068))
(let __tmp1070 (Concat __tmp1059 __tmp1069))
(let __tmp1071 (Concat __tmp1058 __tmp1070))
(let __tmp1072 (Concat __tmp1056 __tmp1071))
(let __tmp1073 (Concat __tmp1055 __tmp1072))
(let __tmp1074 (Concat __tmp1054 __tmp1073))
(let __tmp1075 (Concat __tmp1052 __tmp1074))
(let __tmp1076 (Concat __tmp1050 __tmp1075))
(let __tmp1077 (TCons __tmp47 __tmp1028))
(let __tmp1078 (TCons __tmp109 __tmp1077))
(let __tmp1079 (TCons __tmp47 __tmp1078))
(let __tmp1080 (TCons __tmp1 __tmp1079))
(let __tmp1081 (TupleT __tmp1080))
(let __tmp1082 (InIf true __tmp1043 __tmp1076))
(let __tmp1083 (Arg __tmp1081 __tmp1082))
(let __tmp1084 (InFunc " loop_ctx_31"))
(let __tmp1085 (Const __tmp31 __tmp1081 __tmp1084))
(let __tmp1086 (Arg __tmp1081 __tmp1084))
(let __tmp1087 (Get __tmp1086 3))
(let __tmp1088 (Bop __tmp63 __tmp1085 __tmp1087))
(let __tmp1089 (Get __tmp1086 6))
(let __tmp1090 (Bop __tmp62 __tmp1088 __tmp1089))
(let __tmp1091 (Single __tmp1090))
(let __tmp1092 (Get __tmp1086 9))
(let __tmp1093 (Get __tmp1086 4))
(let __tmp1094 (Bop __tmp94 __tmp1092 __tmp1093))
(let __tmp1095 (Get __tmp1086 0))
(let __tmp1096 (Bop __tmp908 __tmp1094 __tmp1095))
(let __tmp1097 (Get __tmp1096 0))
(let __tmp1098 (Get __tmp1086 5))
(let __tmp1099 (Bop __tmp94 __tmp1098 __tmp1087))
(let __tmp1100 (Get __tmp1096 1))
(let __tmp1101 (Bop __tmp908 __tmp1099 __tmp1100))
(let __tmp1102 (Get __tmp1101 0))
(let __tmp1103 (Bop __tmp94 __tmp1102 __tmp1093))
(let __tmp1104 (Get __tmp1101 1))
(let __tmp1105 (Bop __tmp908 __tmp1103 __tmp1104))
(let __tmp1106 (Get __tmp1105 0))
(let __tmp1107 (Bop __tmp916 __tmp1097 __tmp1106))
(let __tmp1108 (Get __tmp1105 1))
(let __tmp1109 (Top __tmp72 __tmp1094 __tmp1107 __tmp1108))
(let __tmp1110 (Single __tmp1109))
(let __tmp1111 (Get __tmp1086 1))
(let __tmp1112 (Single __tmp1111))
(let __tmp1113 (Get __tmp1086 2))
(let __tmp1114 (Single __tmp1113))
(let __tmp1115 (Concat __tmp1112 __tmp1114))
(let __tmp1116 (Single __tmp1088))
(let __tmp1117 (Concat __tmp1115 __tmp1116))
(let __tmp1118 (Concat __tmp1110 __tmp1117))
(let __tmp1119 (Single __tmp1093))
(let __tmp1120 (Single __tmp1098))
(let __tmp1121 (Concat __tmp1119 __tmp1120))
(let __tmp1122 (Single __tmp1089))
(let __tmp1123 (Concat __tmp1121 __tmp1122))
(let __tmp1124 (Get __tmp1086 7))
(let __tmp1125 (Single __tmp1124))
(let __tmp1126 (Concat __tmp1123 __tmp1125))
(let __tmp1127 (Concat __tmp1118 __tmp1126))
(let __tmp1128 (Get __tmp1086 8))
(let __tmp1129 (Single __tmp1128))
(let __tmp1130 (Single __tmp1092))
(let __tmp1131 (Concat __tmp1129 __tmp1130))
(let __tmp1132 (Get __tmp1086 10))
(let __tmp1133 (Single __tmp1132))
(let __tmp1134 (Concat __tmp1131 __tmp1133))
(let __tmp1135 (Concat __tmp1127 __tmp1134))
(let __tmp1136 (Concat __tmp1091 __tmp1135))
(let __tmp1137 (DoWhile __tmp1083 __tmp1136))
(let __tmp1138 (InIf false __tmp1043 __tmp1076))
(let __tmp1139 (Arg __tmp1081 __tmp1138))
(let __tmp1140 (If __tmp1043 __tmp1076 __tmp1137 __tmp1139))
(let __tmp1141 (Get __tmp1140 9))
(let __tmp1142 (Bop __tmp94 __tmp1141 __tmp1045))
(let __tmp1143 (Get __tmp1140 0))
(let __tmp1144 (Bop __tmp908 __tmp1142 __tmp1143))
(let __tmp1145 (Get __tmp1144 0))
(let __tmp1146 (Get __tmp1140 8))
(let __tmp1147 (Bop __tmp917 __tmp1145 __tmp1146))
(let __tmp1148 (Get __tmp1144 1))
(let __tmp1149 (Top __tmp72 __tmp1142 __tmp1147 __tmp1148))
(let __tmp1150 (Single __tmp1149))
(let __tmp1151 (Get __tmp1140 2))
(let __tmp1152 (Single __tmp1151))
(let __tmp1153 (Const __tmp31 __tmp1032 __tmp1039))
(let __tmp1154 (Bop __tmp63 __tmp1045 __tmp1153))
(let __tmp1155 (Single __tmp1154))
(let __tmp1156 (Get __tmp1140 5))
(let __tmp1157 (Single __tmp1156))
(let __tmp1158 (Get __tmp1140 7))
(let __tmp1159 (Single __tmp1158))
(let __tmp1160 (Single __tmp1146))
(let __tmp1161 (Concat __tmp1159 __tmp1160))
(let __tmp1162 (Single __tmp1141))
(let __tmp1163 (Concat __tmp1161 __tmp1162))
(let __tmp1164 (Get __tmp1140 10))
(let __tmp1165 (Single __tmp1164))
(let __tmp1166 (Concat __tmp1163 __tmp1165))
(let __tmp1167 (Concat __tmp1059 __tmp1166))
(let __tmp1168 (Concat __tmp1157 __tmp1167))
(let __tmp1169 (Concat __tmp1155 __tmp1168))
(let __tmp1170 (Concat __tmp1152 __tmp1169))
(let __tmp1171 (Concat __tmp1052 __tmp1170))
(let __tmp1172 (Concat __tmp1150 __tmp1171))
(let __tmp1173 (InIf false __tmp1037 __tmp1034))
(let __tmp1174 (Arg __tmp1032 __tmp1173))
(let __tmp1175 (If __tmp1037 __tmp1034 __tmp1172 __tmp1174))
(let __tmp1176 (Concat __tmp1038 __tmp1175))
(let __tmp1177 (DoWhile __tmp1021 __tmp1176))
(let __tmp1178 (Get __tmp1177 0))
(let __tmp1179 (Single __tmp1178))
(let __tmp1180 (Get __tmp1177 2))
(let __tmp1181 (Single __tmp1180))
(let __tmp1182 (Get __tmp1177 4))
(let __tmp1183 (Single __tmp1182))
(let __tmp1184 (Get __tmp1177 6))
(let __tmp1185 (Single __tmp1184))
(let __tmp1186 (Get __tmp1177 7))
(let __tmp1187 (Single __tmp1186))
(let __tmp1188 (Get __tmp1177 8))
(let __tmp1189 (Single __tmp1188))
(let __tmp1190 (Get __tmp1177 9))
(let __tmp1191 (Single __tmp1190))
(let __tmp1192 (Concat __tmp1189 __tmp1191))
(let __tmp1193 (Concat __tmp1187 __tmp1192))
(let __tmp1194 (Concat __tmp1185 __tmp1193))
(let __tmp1195 (Concat __tmp1003 __tmp1194))
(let __tmp1196 (Concat __tmp1183 __tmp1195))
(let __tmp1197 (Concat __tmp30 __tmp1196))
(let __tmp1198 (Concat __tmp1181 __tmp1197))
(let __tmp1199 (Concat __tmp997 __tmp1198))
(let __tmp1200 (Concat __tmp1179 __tmp1199))
(let __tmp1201 (InFunc " loop_ctx_29"))
(let __tmp1202 (Arg __tmp1032 __tmp1201))
(let __tmp1203 (Get __tmp1202 3))
(let __tmp1204 (Get __tmp1202 1))
(let __tmp1205 (Bop __tmp62 __tmp1203 __tmp1204))
(let __tmp1206 (Single __tmp1205))
(let __tmp1207 (FLessEq ))
(let __tmp1208 (InIf true __tmp1205 __tmp1202))
(let __tmp1209 (Const __tmp28 __tmp1032 __tmp1208))
(let __tmp1210 (Arg __tmp1032 __tmp1208))
(let __tmp1211 (Get __tmp1210 5))
(let __tmp1212 (Bop __tmp62 __tmp1209 __tmp1211))
(let __tmp1213 (Get __tmp1210 6))
(let __tmp1214 (Get __tmp1210 3))
(let __tmp1215 (Bop __tmp94 __tmp1213 __tmp1214))
(let __tmp1216 (Const __tmp34 __tmp1032 __tmp1208))
(let __tmp1217 (Get __tmp1210 0))
(let __tmp1218 (Top __tmp72 __tmp1215 __tmp1216 __tmp1217))
(let __tmp1219 (Single __tmp1218))
(let __tmp1220 (Get __tmp1210 1))
(let __tmp1221 (Single __tmp1220))
(let __tmp1222 (Get __tmp1210 2))
(let __tmp1223 (Single __tmp1222))
(let __tmp1224 (Single __tmp1209))
(let __tmp1225 (Single __tmp1214))
(let __tmp1226 (Get __tmp1210 4))
(let __tmp1227 (Single __tmp1226))
(let __tmp1228 (Single __tmp1211))
(let __tmp1229 (Single __tmp1213))
(let __tmp1230 (Get __tmp1210 7))
(let __tmp1231 (Single __tmp1230))
(let __tmp1232 (Get __tmp1210 8))
(let __tmp1233 (Single __tmp1232))
(let __tmp1234 (Get __tmp1210 9))
(let __tmp1235 (Single __tmp1234))
(let __tmp1236 (Concat __tmp1233 __tmp1235))
(let __tmp1237 (Concat __tmp1231 __tmp1236))
(let __tmp1238 (Concat __tmp1229 __tmp1237))
(let __tmp1239 (Concat __tmp1228 __tmp1238))
(let __tmp1240 (Concat __tmp1227 __tmp1239))
(let __tmp1241 (Concat __tmp1225 __tmp1240))
(let __tmp1242 (Concat __tmp1224 __tmp1241))
(let __tmp1243 (Concat __tmp1223 __tmp1242))
(let __tmp1244 (Concat __tmp1221 __tmp1243))
(let __tmp1245 (Concat __tmp1219 __tmp1244))
(let __tmp1246 (InIf true __tmp1212 __tmp1245))
(let __tmp1247 (Arg __tmp1081 __tmp1246))
(let __tmp1248 (InFunc " loop_ctx_32"))
(let __tmp1249 (Const __tmp31 __tmp1081 __tmp1248))
(let __tmp1250 (Arg __tmp1081 __tmp1248))
(let __tmp1251 (Get __tmp1250 3))
(let __tmp1252 (Bop __tmp63 __tmp1249 __tmp1251))
(let __tmp1253 (Get __tmp1250 6))
(let __tmp1254 (Bop __tmp62 __tmp1252 __tmp1253))
(let __tmp1255 (Single __tmp1254))
(let __tmp1256 (Get __tmp1250 7))
(let __tmp1257 (Get __tmp1250 4))
(let __tmp1258 (Bop __tmp94 __tmp1256 __tmp1257))
(let __tmp1259 (Get __tmp1250 0))
(let __tmp1260 (Bop __tmp908 __tmp1258 __tmp1259))
(let __tmp1261 (Get __tmp1260 0))
(let __tmp1262 (FSub ))
(let __tmp1263 (Get __tmp1250 5))
(let __tmp1264 (Bop __tmp94 __tmp1263 __tmp1251))
(let __tmp1265 (Get __tmp1260 1))
(let __tmp1266 (Bop __tmp908 __tmp1264 __tmp1265))
(let __tmp1267 (Get __tmp1266 0))
(let __tmp1268 (Bop __tmp94 __tmp1267 __tmp1257))
(let __tmp1269 (Get __tmp1266 1))
(let __tmp1270 (Bop __tmp908 __tmp1268 __tmp1269))
(let __tmp1271 (Get __tmp1270 0))
(let __tmp1272 (Get __tmp1250 9))
(let __tmp1273 (Bop __tmp94 __tmp1272 __tmp1257))
(let __tmp1274 (Get __tmp1270 1))
(let __tmp1275 (Bop __tmp908 __tmp1273 __tmp1274))
(let __tmp1276 (Get __tmp1275 0))
(let __tmp1277 (Bop __tmp1262 __tmp1271 __tmp1276))
(let __tmp1278 (Get __tmp1275 1))
(let __tmp1279 (Bop __tmp908 __tmp1264 __tmp1278))
(let __tmp1280 (Get __tmp1279 0))
(let __tmp1281 (Bop __tmp94 __tmp1280 __tmp1257))
(let __tmp1282 (Get __tmp1279 1))
(let __tmp1283 (Bop __tmp908 __tmp1281 __tmp1282))
(let __tmp1284 (Get __tmp1283 0))
(let __tmp1285 (Get __tmp1283 1))
(let __tmp1286 (Bop __tmp908 __tmp1273 __tmp1285))
(let __tmp1287 (Get __tmp1286 0))
(let __tmp1288 (Bop __tmp1262 __tmp1284 __tmp1287))
(let __tmp1289 (Bop __tmp918 __tmp1277 __tmp1288))
(let __tmp1290 (Bop __tmp916 __tmp1261 __tmp1289))
(let __tmp1291 (Get __tmp1286 1))
(let __tmp1292 (Top __tmp72 __tmp1258 __tmp1290 __tmp1291))
(let __tmp1293 (Single __tmp1292))
(let __tmp1294 (Get __tmp1250 1))
(let __tmp1295 (Single __tmp1294))
(let __tmp1296 (Get __tmp1250 2))
(let __tmp1297 (Single __tmp1296))
(let __tmp1298 (Concat __tmp1295 __tmp1297))
(let __tmp1299 (Single __tmp1252))
(let __tmp1300 (Single __tmp1257))
(let __tmp1301 (Single __tmp1263))
(let __tmp1302 (Concat __tmp1300 __tmp1301))
(let __tmp1303 (Single __tmp1253))
(let __tmp1304 (Concat __tmp1302 __tmp1303))
(let __tmp1305 (Concat __tmp1299 __tmp1304))
(let __tmp1306 (Single __tmp1256))
(let __tmp1307 (Get __tmp1250 8))
(let __tmp1308 (Single __tmp1307))
(let __tmp1309 (Concat __tmp1306 __tmp1308))
(let __tmp1310 (Concat __tmp1305 __tmp1309))
(let __tmp1311 (Single __tmp1272))
(let __tmp1312 (Get __tmp1250 10))
(let __tmp1313 (Single __tmp1312))
(let __tmp1314 (Concat __tmp1311 __tmp1313))
(let __tmp1315 (Concat __tmp1310 __tmp1314))
(let __tmp1316 (Concat __tmp1298 __tmp1315))
(let __tmp1317 (Concat __tmp1293 __tmp1316))
(let __tmp1318 (Concat __tmp1255 __tmp1317))
(let __tmp1319 (DoWhile __tmp1247 __tmp1318))
(let __tmp1320 (InIf false __tmp1212 __tmp1245))
(let __tmp1321 (Arg __tmp1081 __tmp1320))
(let __tmp1322 (If __tmp1212 __tmp1245 __tmp1319 __tmp1321))
(let __tmp1323 (Get __tmp1322 7))
(let __tmp1324 (Bop __tmp94 __tmp1323 __tmp1214))
(let __tmp1325 (Get __tmp1322 0))
(let __tmp1326 (Bop __tmp908 __tmp1324 __tmp1325))
(let __tmp1327 (Get __tmp1326 0))
(let __tmp1328 (Get __tmp1322 8))
(let __tmp1329 (Bop __tmp917 __tmp1327 __tmp1328))
(let __tmp1330 (Single __tmp1329))
(let __tmp1331 (Get __tmp1326 1))
(let __tmp1332 (Top __tmp72 __tmp1324 __tmp1329 __tmp1331))
(let __tmp1333 (Single __tmp1332))
(let __tmp1334 (Concat __tmp1330 __tmp1333))
(let __tmp1335 (Call "custom_sqrt" __tmp1334))
(let __tmp1336 (Get __tmp1335 0))
(let __tmp1337 (Get __tmp1322 10))
(let __tmp1338 (Bop __tmp1207 __tmp1336 __tmp1337))
(let __tmp1339 (Get __tmp1335 1))
(let __tmp1340 (Top __tmp72 __tmp1324 __tmp1336 __tmp1339))
(let __tmp1341 (Single __tmp1340))
(let __tmp1342 (Get __tmp1322 2))
(let __tmp1343 (Single __tmp1342))
(let __tmp1344 (Get __tmp1322 5))
(let __tmp1345 (Single __tmp1344))
(let __tmp1346 (Single __tmp1323))
(let __tmp1347 (Single __tmp1328))
(let __tmp1348 (Get __tmp1322 9))
(let __tmp1349 (Single __tmp1348))
(let __tmp1350 (Single __tmp1337))
(let __tmp1351 (Concat __tmp1349 __tmp1350))
(let __tmp1352 (Concat __tmp1347 __tmp1351))
(let __tmp1353 (Concat __tmp1346 __tmp1352))
(let __tmp1354 (Concat __tmp1228 __tmp1353))
(let __tmp1355 (Concat __tmp1345 __tmp1354))
(let __tmp1356 (Concat __tmp1225 __tmp1355))
(let __tmp1357 (Concat __tmp1343 __tmp1356))
(let __tmp1358 (Concat __tmp1221 __tmp1357))
(let __tmp1359 (Concat __tmp1341 __tmp1358))
(let __tmp1360 (InIf true __tmp1338 __tmp1359))
(let __tmp1361 (Arg __tmp1032 __tmp1360))
(let __tmp1362 (Get __tmp1361 6))
(let __tmp1363 (Get __tmp1361 3))
(let __tmp1364 (Bop __tmp94 __tmp1362 __tmp1363))
(let __tmp1365 (Const __tmp930 __tmp1032 __tmp1360))
(let __tmp1366 (Get __tmp1361 0))
(let __tmp1367 (Top __tmp72 __tmp1364 __tmp1365 __tmp1366))
(let __tmp1368 (Single __tmp1367))
(let __tmp1369 (Get __tmp1361 1))
(let __tmp1370 (Single __tmp1369))
(let __tmp1371 (Get __tmp1361 2))
(let __tmp1372 (Single __tmp1371))
(let __tmp1373 (Single __tmp1363))
(let __tmp1374 (Get __tmp1361 4))
(let __tmp1375 (Single __tmp1374))
(let __tmp1376 (Get __tmp1361 5))
(let __tmp1377 (Single __tmp1376))
(let __tmp1378 (Single __tmp1362))
(let __tmp1379 (Get __tmp1361 7))
(let __tmp1380 (Single __tmp1379))
(let __tmp1381 (Get __tmp1361 8))
(let __tmp1382 (Single __tmp1381))
(let __tmp1383 (Get __tmp1361 9))
(let __tmp1384 (Single __tmp1383))
(let __tmp1385 (Concat __tmp1382 __tmp1384))
(let __tmp1386 (Concat __tmp1380 __tmp1385))
(let __tmp1387 (Concat __tmp1378 __tmp1386))
(let __tmp1388 (Concat __tmp1377 __tmp1387))
(let __tmp1389 (Concat __tmp1375 __tmp1388))
(let __tmp1390 (Concat __tmp1373 __tmp1389))
(let __tmp1391 (Concat __tmp1372 __tmp1390))
(let __tmp1392 (Concat __tmp1370 __tmp1391))
(let __tmp1393 (Concat __tmp1368 __tmp1392))
(let __tmp1394 (InIf false __tmp1338 __tmp1359))
(let __tmp1395 (Arg __tmp1032 __tmp1394))
(let __tmp1396 (If __tmp1338 __tmp1359 __tmp1393 __tmp1395))
(let __tmp1397 (Get __tmp1396 0))
(let __tmp1398 (Single __tmp1397))
(let __tmp1399 (Const __tmp31 __tmp1032 __tmp1208))
(let __tmp1400 (Bop __tmp63 __tmp1214 __tmp1399))
(let __tmp1401 (Single __tmp1400))
(let __tmp1402 (Concat __tmp1346 __tmp1347))
(let __tmp1403 (Concat __tmp1402 __tmp1351))
(let __tmp1404 (Concat __tmp1228 __tmp1403))
(let __tmp1405 (Concat __tmp1345 __tmp1404))
(let __tmp1406 (Concat __tmp1401 __tmp1405))
(let __tmp1407 (Concat __tmp1343 __tmp1406))
(let __tmp1408 (Concat __tmp1221 __tmp1407))
(let __tmp1409 (Concat __tmp1398 __tmp1408))
(let __tmp1410 (InIf false __tmp1205 __tmp1202))
(let __tmp1411 (Arg __tmp1032 __tmp1410))
(let __tmp1412 (If __tmp1205 __tmp1202 __tmp1409 __tmp1411))
(let __tmp1413 (Concat __tmp1206 __tmp1412))
(let __tmp1414 (DoWhile __tmp1200 __tmp1413))
(let __tmp1415 (Get __tmp1414 0))
(let __tmp1416 (Single __tmp1415))
(let __tmp1417 (Get __tmp1414 2))
(let __tmp1418 (Single __tmp1417))
(let __tmp1419 (Get __tmp1414 4))
(let __tmp1420 (Single __tmp1419))
(let __tmp1421 (Get __tmp1414 6))
(let __tmp1422 (Single __tmp1421))
(let __tmp1423 (Get __tmp1414 7))
(let __tmp1424 (Single __tmp1423))
(let __tmp1425 (Get __tmp1414 8))
(let __tmp1426 (Single __tmp1425))
(let __tmp1427 (Concat __tmp1424 __tmp1426))
(let __tmp1428 (Concat __tmp1422 __tmp1427))
(let __tmp1429 (Concat __tmp1003 __tmp1428))
(let __tmp1430 (Concat __tmp1420 __tmp1429))
(let __tmp1431 (Concat __tmp30 __tmp1430))
(let __tmp1432 (Concat __tmp1418 __tmp1431))
(let __tmp1433 (Concat __tmp997 __tmp1432))
(let __tmp1434 (Concat __tmp1416 __tmp1433))
(let __tmp1435 (TCons __tmp15 __tmp468))
(let __tmp1436 (TCons __tmp47 __tmp1435))
(let __tmp1437 (TCons __tmp109 __tmp1436))
(let __tmp1438 (TCons __tmp47 __tmp1437))
(let __tmp1439 (TCons __tmp109 __tmp1438))
(let __tmp1440 (TCons __tmp47 __tmp1439))
(let __tmp1441 (TCons __tmp1 __tmp1440))
(let __tmp1442 (TupleT __tmp1441))
(let __tmp1443 (InFunc " loop_ctx_28"))
(let __tmp1444 (Arg __tmp1442 __tmp1443))
(let __tmp1445 (Get __tmp1444 3))
(let __tmp1446 (Get __tmp1444 5))
(let __tmp1447 (Bop __tmp62 __tmp1445 __tmp1446))
(let __tmp1448 (Single __tmp1447))
(let __tmp1449 (InIf true __tmp1447 __tmp1444))
(let __tmp1450 (Const __tmp28 __tmp1442 __tmp1449))
(let __tmp1451 (Arg __tmp1442 __tmp1449))
(let __tmp1452 (Get __tmp1451 1))
(let __tmp1453 (Bop __tmp62 __tmp1450 __tmp1452))
(let __tmp1454 (Get __tmp1451 0))
(let __tmp1455 (Single __tmp1454))
(let __tmp1456 (Single __tmp1452))
(let __tmp1457 (Get __tmp1451 2))
(let __tmp1458 (Single __tmp1457))
(let __tmp1459 (Get __tmp1451 3))
(let __tmp1460 (Single __tmp1459))
(let __tmp1461 (Single __tmp1450))
(let __tmp1462 (Get __tmp1451 4))
(let __tmp1463 (Single __tmp1462))
(let __tmp1464 (Get __tmp1451 5))
(let __tmp1465 (Single __tmp1464))
(let __tmp1466 (Get __tmp1451 6))
(let __tmp1467 (Single __tmp1466))
(let __tmp1468 (Get __tmp1451 7))
(let __tmp1469 (Single __tmp1468))
(let __tmp1470 (Get __tmp1451 8))
(let __tmp1471 (Single __tmp1470))
(let __tmp1472 (Concat __tmp1469 __tmp1471))
(let __tmp1473 (Concat __tmp1467 __tmp1472))
(let __tmp1474 (Concat __tmp1465 __tmp1473))
(let __tmp1475 (Concat __tmp1463 __tmp1474))
(let __tmp1476 (Concat __tmp1461 __tmp1475))
(let __tmp1477 (Concat __tmp1460 __tmp1476))
(let __tmp1478 (Concat __tmp1458 __tmp1477))
(let __tmp1479 (Concat __tmp1456 __tmp1478))
(let __tmp1480 (Concat __tmp1455 __tmp1479))
(let __tmp1481 (TCons __tmp47 __tmp1438))
(let __tmp1482 (TCons __tmp109 __tmp1481))
(let __tmp1483 (TCons __tmp47 __tmp1482))
(let __tmp1484 (TCons __tmp1 __tmp1483))
(let __tmp1485 (TupleT __tmp1484))
(let __tmp1486 (InIf true __tmp1453 __tmp1480))
(let __tmp1487 (Arg __tmp1485 __tmp1486))
(let __tmp1488 (InFunc " loop_ctx_33"))
(let __tmp1489 (Arg __tmp1485 __tmp1488))
(let __tmp1490 (Get __tmp1489 4))
(let __tmp1491 (Const __tmp31 __tmp1485 __tmp1488))
(let __tmp1492 (Bop __tmp63 __tmp1490 __tmp1491))
(let __tmp1493 (Get __tmp1489 1))
(let __tmp1494 (Bop __tmp62 __tmp1492 __tmp1493))
(let __tmp1495 (Single __tmp1494))
(let __tmp1496 (Get __tmp1489 5))
(let __tmp1497 (Get __tmp1489 3))
(let __tmp1498 (Bop __tmp94 __tmp1496 __tmp1497))
(let __tmp1499 (Get __tmp1489 0))
(let __tmp1500 (Bop __tmp908 __tmp1498 __tmp1499))
(let __tmp1501 (Get __tmp1500 0))
(let __tmp1502 (Bop __tmp94 __tmp1501 __tmp1490))
(let __tmp1503 (Get __tmp1500 1))
(let __tmp1504 (Bop __tmp908 __tmp1498 __tmp1503))
(let __tmp1505 (Get __tmp1504 0))
(let __tmp1506 (Bop __tmp94 __tmp1505 __tmp1490))
(let __tmp1507 (Get __tmp1504 1))
(let __tmp1508 (Bop __tmp908 __tmp1506 __tmp1507))
(let __tmp1509 (Get __tmp1508 0))
(let __tmp1510 (Get __tmp1489 9))
(let __tmp1511 (Bop __tmp94 __tmp1510 __tmp1490))
(let __tmp1512 (Get __tmp1508 1))
(let __tmp1513 (Bop __tmp908 __tmp1511 __tmp1512))
(let __tmp1514 (Get __tmp1513 0))
(let __tmp1515 (Bop __tmp1262 __tmp1509 __tmp1514))
(let __tmp1516 (Get __tmp1513 1))
(let __tmp1517 (Top __tmp72 __tmp1502 __tmp1515 __tmp1516))
(let __tmp1518 (Bop __tmp908 __tmp1498 __tmp1517))
(let __tmp1519 (Get __tmp1518 0))
(let __tmp1520 (Bop __tmp94 __tmp1519 __tmp1490))
(let __tmp1521 (Get __tmp1518 1))
(let __tmp1522 (Bop __tmp908 __tmp1498 __tmp1521))
(let __tmp1523 (Get __tmp1522 0))
(let __tmp1524 (Bop __tmp94 __tmp1523 __tmp1490))
(let __tmp1525 (Get __tmp1522 1))
(let __tmp1526 (Bop __tmp908 __tmp1524 __tmp1525))
(let __tmp1527 (Get __tmp1526 0))
(let __tmp1528 (Get __tmp1489 8))
(let __tmp1529 (Single __tmp1528))
(let __tmp1530 (Get __tmp1526 1))
(let __tmp1531 (Single __tmp1530))
(let __tmp1532 (Concat __tmp1529 __tmp1531))
(let __tmp1533 (Call "custom_sqrt" __tmp1532))
(let __tmp1534 (Get __tmp1533 0))
(let __tmp1535 (Get __tmp1489 7))
(let __tmp1536 (Bop __tmp94 __tmp1535 __tmp1490))
(let __tmp1537 (Get __tmp1533 1))
(let __tmp1538 (Bop __tmp908 __tmp1536 __tmp1537))
(let __tmp1539 (Get __tmp1538 0))
(let __tmp1540 (Bop __tmp918 __tmp1534 __tmp1539))
(let __tmp1541 (Bop __tmp917 __tmp1527 __tmp1540))
(let __tmp1542 (Get __tmp1538 1))
(let __tmp1543 (Top __tmp72 __tmp1520 __tmp1541 __tmp1542))
(let __tmp1544 (Single __tmp1543))
(let __tmp1545 (Single __tmp1493))
(let __tmp1546 (Get __tmp1489 2))
(let __tmp1547 (Single __tmp1546))
(let __tmp1548 (Concat __tmp1545 __tmp1547))
(let __tmp1549 (Single __tmp1497))
(let __tmp1550 (Concat __tmp1548 __tmp1549))
(let __tmp1551 (Single __tmp1492))
(let __tmp1552 (Single __tmp1496))
(let __tmp1553 (Concat __tmp1551 __tmp1552))
(let __tmp1554 (Concat __tmp1550 __tmp1553))
(let __tmp1555 (Get __tmp1489 6))
(let __tmp1556 (Single __tmp1555))
(let __tmp1557 (Single __tmp1535))
(let __tmp1558 (Concat __tmp1556 __tmp1557))
(let __tmp1559 (Concat __tmp1554 __tmp1558))
(let __tmp1560 (Single __tmp1510))
(let __tmp1561 (Concat __tmp1529 __tmp1560))
(let __tmp1562 (Concat __tmp1559 __tmp1561))
(let __tmp1563 (Concat __tmp1544 __tmp1562))
(let __tmp1564 (Concat __tmp1495 __tmp1563))
(let __tmp1565 (DoWhile __tmp1487 __tmp1564))
(let __tmp1566 (InIf false __tmp1453 __tmp1480))
(let __tmp1567 (Arg __tmp1485 __tmp1566))
(let __tmp1568 (If __tmp1453 __tmp1480 __tmp1565 __tmp1567))
(let __tmp1569 (Get __tmp1568 0))
(let __tmp1570 (Single __tmp1569))
(let __tmp1571 (Get __tmp1568 2))
(let __tmp1572 (Single __tmp1571))
(let __tmp1573 (Const __tmp31 __tmp1442 __tmp1449))
(let __tmp1574 (Bop __tmp63 __tmp1573 __tmp1459))
(let __tmp1575 (Single __tmp1574))
(let __tmp1576 (Get __tmp1568 5))
(let __tmp1577 (Single __tmp1576))
(let __tmp1578 (Concat __tmp1577 __tmp1465))
(let __tmp1579 (Concat __tmp1575 __tmp1578))
(let __tmp1580 (Get __tmp1568 7))
(let __tmp1581 (Single __tmp1580))
(let __tmp1582 (Get __tmp1568 8))
(let __tmp1583 (Single __tmp1582))
(let __tmp1584 (Concat __tmp1581 __tmp1583))
(let __tmp1585 (Get __tmp1568 9))
(let __tmp1586 (Single __tmp1585))
(let __tmp1587 (Concat __tmp1584 __tmp1586))
(let __tmp1588 (Concat __tmp1579 __tmp1587))
(let __tmp1589 (Concat __tmp1572 __tmp1588))
(let __tmp1590 (Concat __tmp1456 __tmp1589))
(let __tmp1591 (Concat __tmp1570 __tmp1590))
(let __tmp1592 (InIf false __tmp1447 __tmp1444))
(let __tmp1593 (Arg __tmp1442 __tmp1592))
(let __tmp1594 (If __tmp1447 __tmp1444 __tmp1591 __tmp1593))
(let __tmp1595 (Concat __tmp1448 __tmp1594))
(let __tmp1596 (DoWhile __tmp1434 __tmp1595))
(let __tmp1597 (Get __tmp1596 0))
(let __tmp1598 (Single __tmp1597))
(let __tmp1599 (Get __tmp1596 2))
(let __tmp1600 (Single __tmp1599))
(let __tmp1601 (Get __tmp1596 4))
(let __tmp1602 (Single __tmp1601))
(let __tmp1603 (Concat __tmp1602 __tmp1003))
(let __tmp1604 (Concat __tmp30 __tmp1603))
(let __tmp1605 (Concat __tmp1600 __tmp1604))
(let __tmp1606 (Concat __tmp997 __tmp1605))
(let __tmp1607 (Concat __tmp1598 __tmp1606))
(let __tmp1608 (TCons __tmp109 __tmp132))
(let __tmp1609 (TCons __tmp47 __tmp1608))
(let __tmp1610 (TCons __tmp1 __tmp1609))
(let __tmp1611 (TupleT __tmp1610))
(let __tmp1612 (InFunc " loop_ctx_27"))
(let __tmp1613 (Arg __tmp1611 __tmp1612))
(let __tmp1614 (Get __tmp1613 3))
(let __tmp1615 (Sub ))
(let __tmp1616 (Get __tmp1613 1))
(let __tmp1617 (Const __tmp31 __tmp1611 __tmp1612))
(let __tmp1618 (Bop __tmp1615 __tmp1616 __tmp1617))
(let __tmp1619 (Bop __tmp62 __tmp1614 __tmp1618))
(let __tmp1620 (Single __tmp1619))
(let __tmp1621 (InIf true __tmp1619 __tmp1613))
(let __tmp1622 (Arg __tmp1611 __tmp1621))
(let __tmp1623 (Get __tmp1622 2))
(let __tmp1624 (Get __tmp1622 3))
(let __tmp1625 (Bop __tmp94 __tmp1623 __tmp1624))
(let __tmp1626 (Get __tmp1622 0))
(let __tmp1627 (Bop __tmp908 __tmp1625 __tmp1626))
(let __tmp1628 (Get __tmp1627 0))
(let __tmp1629 (Bop __tmp94 __tmp1628 __tmp1624))
(let __tmp1630 (Const __tmp930 __tmp1611 __tmp1621))
(let __tmp1631 (Get __tmp1627 1))
(let __tmp1632 (Top __tmp72 __tmp1629 __tmp1630 __tmp1631))
(let __tmp1633 (Single __tmp1632))
(let __tmp1634 (Get __tmp1622 1))
(let __tmp1635 (Single __tmp1634))
(let __tmp1636 (Single __tmp1623))
(let __tmp1637 (Single __tmp1624))
(let __tmp1638 (Const __tmp31 __tmp1611 __tmp1621))
(let __tmp1639 (Bop __tmp63 __tmp1624 __tmp1638))
(let __tmp1640 (Single __tmp1639))
(let __tmp1641 (Get __tmp1622 4))
(let __tmp1642 (Single __tmp1641))
(let __tmp1643 (Get __tmp1622 5))
(let __tmp1644 (Single __tmp1643))
(let __tmp1645 (Concat __tmp1642 __tmp1644))
(let __tmp1646 (Concat __tmp1640 __tmp1645))
(let __tmp1647 (Concat __tmp1637 __tmp1646))
(let __tmp1648 (Concat __tmp1636 __tmp1647))
(let __tmp1649 (Concat __tmp1635 __tmp1648))
(let __tmp1650 (Concat __tmp1633 __tmp1649))
(let __tmp1651 (TCons __tmp47 __tmp134))
(let __tmp1652 (TCons __tmp1 __tmp1651))
(let __tmp1653 (TupleT __tmp1652))
(let __tmp1654 (InFunc " loop_ctx_34"))
(let __tmp1655 (Arg __tmp1653 __tmp1654))
(let __tmp1656 (Get __tmp1655 4))
(let __tmp1657 (Get __tmp1655 1))
(let __tmp1658 (Bop __tmp62 __tmp1656 __tmp1657))
(let __tmp1659 (Single __tmp1658))
(let __tmp1660 (InIf true __tmp1658 __tmp1655))
(let __tmp1661 (Const __tmp28 __tmp1653 __tmp1660))
(let __tmp1662 (Arg __tmp1653 __tmp1660))
(let __tmp1663 (Get __tmp1662 6))
(let __tmp1664 (Bop __tmp62 __tmp1661 __tmp1663))
(let __tmp1665 (Get __tmp1662 2))
(let __tmp1666 (Get __tmp1662 3))
(let __tmp1667 (Bop __tmp94 __tmp1665 __tmp1666))
(let __tmp1668 (Get __tmp1662 0))
(let __tmp1669 (Bop __tmp908 __tmp1667 __tmp1668))
(let __tmp1670 (Get __tmp1669 0))
(let __tmp1671 (Get __tmp1662 4))
(let __tmp1672 (Bop __tmp94 __tmp1670 __tmp1671))
(let __tmp1673 (Const __tmp34 __tmp1653 __tmp1660))
(let __tmp1674 (Get __tmp1669 1))
(let __tmp1675 (Top __tmp72 __tmp1672 __tmp1673 __tmp1674))
(let __tmp1676 (Single __tmp1675))
(let __tmp1677 (Get __tmp1662 1))
(let __tmp1678 (Single __tmp1677))
(let __tmp1679 (Single __tmp1665))
(let __tmp1680 (Single __tmp1666))
(let __tmp1681 (Single __tmp1671))
(let __tmp1682 (Single __tmp1661))
(let __tmp1683 (Get __tmp1662 5))
(let __tmp1684 (Single __tmp1683))
(let __tmp1685 (Single __tmp1663))
(let __tmp1686 (Concat __tmp1684 __tmp1685))
(let __tmp1687 (Concat __tmp1682 __tmp1686))
(let __tmp1688 (Concat __tmp1681 __tmp1687))
(let __tmp1689 (Concat __tmp1680 __tmp1688))
(let __tmp1690 (Concat __tmp1679 __tmp1689))
(let __tmp1691 (Concat __tmp1678 __tmp1690))
(let __tmp1692 (Concat __tmp1676 __tmp1691))
(let __tmp1693 (TCons __tmp47 __tmp133))
(let __tmp1694 (TCons __tmp109 __tmp1693))
(let __tmp1695 (TCons __tmp47 __tmp1694))
(let __tmp1696 (TCons __tmp1 __tmp1695))
(let __tmp1697 (TupleT __tmp1696))
(let __tmp1698 (InIf true __tmp1664 __tmp1692))
(let __tmp1699 (Arg __tmp1697 __tmp1698))
(let __tmp1700 (InFunc " loop_ctx_35"))
(let __tmp1701 (Const __tmp31 __tmp1697 __tmp1700))
(let __tmp1702 (Arg __tmp1697 __tmp1700))
(let __tmp1703 (Get __tmp1702 5))
(let __tmp1704 (Bop __tmp63 __tmp1701 __tmp1703))
(let __tmp1705 (Get __tmp1702 7))
(let __tmp1706 (Bop __tmp62 __tmp1704 __tmp1705))
(let __tmp1707 (Single __tmp1706))
(let __tmp1708 (Get __tmp1702 2))
(let __tmp1709 (Get __tmp1702 3))
(let __tmp1710 (Bop __tmp94 __tmp1708 __tmp1709))
(let __tmp1711 (Get __tmp1702 0))
(let __tmp1712 (Bop __tmp908 __tmp1710 __tmp1711))
(let __tmp1713 (Get __tmp1712 0))
(let __tmp1714 (Get __tmp1702 4))
(let __tmp1715 (Bop __tmp94 __tmp1713 __tmp1714))
(let __tmp1716 (Get __tmp1712 1))
(let __tmp1717 (Bop __tmp908 __tmp1710 __tmp1716))
(let __tmp1718 (Get __tmp1717 0))
(let __tmp1719 (Bop __tmp94 __tmp1718 __tmp1714))
(let __tmp1720 (Get __tmp1717 1))
(let __tmp1721 (Bop __tmp908 __tmp1719 __tmp1720))
(let __tmp1722 (Get __tmp1721 0))
(let __tmp1723 (Get __tmp1702 6))
(let __tmp1724 (Bop __tmp94 __tmp1723 __tmp1703))
(let __tmp1725 (Get __tmp1721 1))
(let __tmp1726 (Bop __tmp908 __tmp1724 __tmp1725))
(let __tmp1727 (Get __tmp1726 0))
(let __tmp1728 (Bop __tmp94 __tmp1727 __tmp1709))
(let __tmp1729 (Get __tmp1726 1))
(let __tmp1730 (Bop __tmp908 __tmp1728 __tmp1729))
(let __tmp1731 (Get __tmp1730 0))
(let __tmp1732 (Get __tmp1730 1))
(let __tmp1733 (Bop __tmp908 __tmp1724 __tmp1732))
(let __tmp1734 (Get __tmp1733 0))
(let __tmp1735 (Bop __tmp94 __tmp1734 __tmp1714))
(let __tmp1736 (Get __tmp1733 1))
(let __tmp1737 (Bop __tmp908 __tmp1735 __tmp1736))
(let __tmp1738 (Get __tmp1737 0))
(let __tmp1739 (Bop __tmp918 __tmp1731 __tmp1738))
(let __tmp1740 (Bop __tmp916 __tmp1722 __tmp1739))
(let __tmp1741 (Get __tmp1737 1))
(let __tmp1742 (Top __tmp72 __tmp1715 __tmp1740 __tmp1741))
(let __tmp1743 (Single __tmp1742))
(let __tmp1744 (Get __tmp1702 1))
(let __tmp1745 (Single __tmp1744))
(let __tmp1746 (Single __tmp1708))
(let __tmp1747 (Concat __tmp1745 __tmp1746))
(let __tmp1748 (Single __tmp1709))
(let __tmp1749 (Concat __tmp1747 __tmp1748))
(let __tmp1750 (Single __tmp1714))
(let __tmp1751 (Single __tmp1704))
(let __tmp1752 (Concat __tmp1750 __tmp1751))
(let __tmp1753 (Concat __tmp1749 __tmp1752))
(let __tmp1754 (Single __tmp1723))
(let __tmp1755 (Single __tmp1705))
(let __tmp1756 (Concat __tmp1754 __tmp1755))
(let __tmp1757 (Concat __tmp1753 __tmp1756))
(let __tmp1758 (Concat __tmp1743 __tmp1757))
(let __tmp1759 (Concat __tmp1707 __tmp1758))
(let __tmp1760 (DoWhile __tmp1699 __tmp1759))
(let __tmp1761 (InIf false __tmp1664 __tmp1692))
(let __tmp1762 (Arg __tmp1697 __tmp1761))
(let __tmp1763 (If __tmp1664 __tmp1692 __tmp1760 __tmp1762))
(let __tmp1764 (Get __tmp1763 2))
(let __tmp1765 (Bop __tmp94 __tmp1764 __tmp1671))
(let __tmp1766 (Get __tmp1763 0))
(let __tmp1767 (Bop __tmp908 __tmp1765 __tmp1766))
(let __tmp1768 (Get __tmp1767 0))
(let __tmp1769 (Bop __tmp94 __tmp1768 __tmp1666))
(let __tmp1770 (Bop __tmp94 __tmp1764 __tmp1666))
(let __tmp1771 (Get __tmp1767 1))
(let __tmp1772 (Bop __tmp908 __tmp1770 __tmp1771))
(let __tmp1773 (Get __tmp1772 0))
(let __tmp1774 (Bop __tmp94 __tmp1773 __tmp1671))
(let __tmp1775 (Get __tmp1772 1))
(let __tmp1776 (Bop __tmp908 __tmp1774 __tmp1775))
(let __tmp1777 (Get __tmp1776 0))
(let __tmp1778 (Get __tmp1776 1))
(let __tmp1779 (Top __tmp72 __tmp1769 __tmp1777 __tmp1778))
(let __tmp1780 (Single __tmp1779))
(let __tmp1781 (Single __tmp1764))
(let __tmp1782 (Concat __tmp1781 __tmp1680))
(let __tmp1783 (Concat __tmp1678 __tmp1782))
(let __tmp1784 (Const __tmp31 __tmp1653 __tmp1660))
(let __tmp1785 (Bop __tmp63 __tmp1671 __tmp1784))
(let __tmp1786 (Single __tmp1785))
(let __tmp1787 (Get __tmp1763 6))
(let __tmp1788 (Single __tmp1787))
(let __tmp1789 (Concat __tmp1788 __tmp1685))
(let __tmp1790 (Concat __tmp1786 __tmp1789))
(let __tmp1791 (Concat __tmp1783 __tmp1790))
(let __tmp1792 (Concat __tmp1780 __tmp1791))
(let __tmp1793 (InIf false __tmp1658 __tmp1655))
(let __tmp1794 (Arg __tmp1653 __tmp1793))
(let __tmp1795 (If __tmp1658 __tmp1655 __tmp1792 __tmp1794))
(let __tmp1796 (Concat __tmp1659 __tmp1795))
(let __tmp1797 (DoWhile __tmp1650 __tmp1796))
(let __tmp1798 (Get __tmp1797 0))
(let __tmp1799 (Single __tmp1798))
(let __tmp1800 (Get __tmp1797 2))
(let __tmp1801 (Single __tmp1800))
(let __tmp1802 (Concat __tmp1635 __tmp1801))
(let __tmp1803 (Concat __tmp1799 __tmp1802))
(let __tmp1804 (Get __tmp1797 5))
(let __tmp1805 (Single __tmp1804))
(let __tmp1806 (Concat __tmp1805 __tmp1644))
(let __tmp1807 (Concat __tmp1640 __tmp1806))
(let __tmp1808 (Concat __tmp1803 __tmp1807))
(let __tmp1809 (InIf false __tmp1619 __tmp1613))
(let __tmp1810 (Arg __tmp1611 __tmp1809))
(let __tmp1811 (If __tmp1619 __tmp1613 __tmp1808 __tmp1810))
(let __tmp1812 (Concat __tmp1620 __tmp1811))
(let __tmp1813 (DoWhile __tmp1607 __tmp1812))
(let __tmp1814 (Get __tmp1813 2))
(let __tmp1815 (Bop __tmp1615 __tmp996 __tmp32))
(let __tmp1816 (Bop __tmp94 __tmp1814 __tmp1815))
(let __tmp1817 (Get __tmp1813 0))
(let __tmp1818 (Bop __tmp908 __tmp1816 __tmp1817))
(let __tmp1819 (Get __tmp1818 0))
(let __tmp1820 (Bop __tmp94 __tmp1819 __tmp1815))
(let __tmp1821 (Const __tmp930 __tmp4 __tmp5))
(let __tmp1822 (Get __tmp1818 1))
(let __tmp1823 (Top __tmp72 __tmp1820 __tmp1821 __tmp1822))
(let __tmp1824 (Single __tmp1823))
(let __tmp1825 (Concat __tmp981 __tmp993))
(let __tmp1826 (Concat __tmp7 __tmp1825))
(let __tmp1827 (Call "sum_array" __tmp1826))
(let __tmp1828 (Get __tmp1826 2))
(let __tmp1829 (Single __tmp1828))
(let __tmp1830 (Get __tmp1826 1))
(let __tmp1831 (Single __tmp1830))
(let __tmp1832 (Get __tmp1826 0))
(let __tmp1833 (Single __tmp1832))
(let __tmp1834 (Concat __tmp1831 __tmp1833))
(let __tmp1835 (Concat __tmp30 __tmp1834))
(let __tmp1836 (Concat __tmp36 __tmp1835))
(let __tmp1837 (Concat __tmp1829 __tmp1836))
(let __tmp1838 (TCons __tmp14 __tmp132))
(let __tmp1839 (TCons __tmp1 __tmp1838))
(let __tmp1840 (TupleT __tmp1839))
(let __tmp1841 (InFunc " loop_ctx_36"))
(let __tmp1842 (Arg __tmp1840 __tmp1841))
(let __tmp1843 (Get __tmp1842 2))
(let __tmp1844 (Get __tmp1842 4))
(let __tmp1845 (Bop __tmp62 __tmp1843 __tmp1844))
(let __tmp1846 (Single __tmp1845))
(let __tmp1847 (InIf true __tmp1845 __tmp1842))
(let __tmp1848 (Const __tmp28 __tmp1840 __tmp1847))
(let __tmp1849 (Arg __tmp1840 __tmp1847))
(let __tmp1850 (Get __tmp1849 4))
(let __tmp1851 (Bop __tmp62 __tmp1848 __tmp1850))
(let __tmp1852 (Get __tmp1849 0))
(let __tmp1853 (Single __tmp1852))
(let __tmp1854 (Get __tmp1849 1))
(let __tmp1855 (Single __tmp1854))
(let __tmp1856 (Get __tmp1849 2))
(let __tmp1857 (Single __tmp1856))
(let __tmp1858 (Single __tmp1848))
(let __tmp1859 (Get __tmp1849 3))
(let __tmp1860 (Single __tmp1859))
(let __tmp1861 (Single __tmp1850))
(let __tmp1862 (Concat __tmp1860 __tmp1861))
(let __tmp1863 (Concat __tmp1858 __tmp1862))
(let __tmp1864 (Concat __tmp1857 __tmp1863))
(let __tmp1865 (Concat __tmp1855 __tmp1864))
(let __tmp1866 (Concat __tmp1853 __tmp1865))
(let __tmp1867 (TCons __tmp14 __tmp133))
(let __tmp1868 (TCons __tmp1 __tmp1867))
(let __tmp1869 (TupleT __tmp1868))
(let __tmp1870 (InIf true __tmp1851 __tmp1866))
(let __tmp1871 (Arg __tmp1869 __tmp1870))
(let __tmp1872 (InFunc " loop_ctx_37"))
(let __tmp1873 (Arg __tmp1869 __tmp1872))
(let __tmp1874 (Get __tmp1873 3))
(let __tmp1875 (Const __tmp31 __tmp1869 __tmp1872))
(let __tmp1876 (Bop __tmp63 __tmp1874 __tmp1875))
(let __tmp1877 (Get __tmp1873 5))
(let __tmp1878 (Bop __tmp62 __tmp1876 __tmp1877))
(let __tmp1879 (Single __tmp1878))
(let __tmp1880 (Get __tmp1873 4))
(let __tmp1881 (Get __tmp1873 2))
(let __tmp1882 (Bop __tmp94 __tmp1880 __tmp1881))
(let __tmp1883 (Get __tmp1873 0))
(let __tmp1884 (Bop __tmp908 __tmp1882 __tmp1883))
(let __tmp1885 (Get __tmp1884 0))
(let __tmp1886 (Bop __tmp94 __tmp1885 __tmp1874))
(let __tmp1887 (Get __tmp1884 1))
(let __tmp1888 (Bop __tmp908 __tmp1886 __tmp1887))
(let __tmp1889 (Get __tmp1888 1))
(let __tmp1890 (Single __tmp1889))
(let __tmp1891 (Get __tmp1873 1))
(let __tmp1892 (Get __tmp1888 0))
(let __tmp1893 (Bop __tmp916 __tmp1891 __tmp1892))
(let __tmp1894 (Single __tmp1893))
(let __tmp1895 (Concat __tmp1890 __tmp1894))
(let __tmp1896 (Single __tmp1881))
(let __tmp1897 (Single __tmp1876))
(let __tmp1898 (Single __tmp1880))
(let __tmp1899 (Concat __tmp1897 __tmp1898))
(let __tmp1900 (Single __tmp1877))
(let __tmp1901 (Concat __tmp1899 __tmp1900))
(let __tmp1902 (Concat __tmp1896 __tmp1901))
(let __tmp1903 (Concat __tmp1895 __tmp1902))
(let __tmp1904 (Concat __tmp1879 __tmp1903))
(let __tmp1905 (DoWhile __tmp1871 __tmp1904))
(let __tmp1906 (InIf false __tmp1851 __tmp1866))
(let __tmp1907 (Arg __tmp1869 __tmp1906))
(let __tmp1908 (If __tmp1851 __tmp1866 __tmp1905 __tmp1907))
(let __tmp1909 (Get __tmp1908 0))
(let __tmp1910 (Single __tmp1909))
(let __tmp1911 (Get __tmp1908 1))
(let __tmp1912 (Single __tmp1911))
(let __tmp1913 (Const __tmp31 __tmp1840 __tmp1847))
(let __tmp1914 (Bop __tmp63 __tmp1913 __tmp1856))
(let __tmp1915 (Single __tmp1914))
(let __tmp1916 (Get __tmp1908 4))
(let __tmp1917 (Single __tmp1916))
(let __tmp1918 (Concat __tmp1917 __tmp1861))
(let __tmp1919 (Concat __tmp1915 __tmp1918))
(let __tmp1920 (Concat __tmp1912 __tmp1919))
(let __tmp1921 (Concat __tmp1910 __tmp1920))
(let __tmp1922 (InIf false __tmp1845 __tmp1842))
(let __tmp1923 (Arg __tmp1840 __tmp1922))
(let __tmp1924 (If __tmp1845 __tmp1842 __tmp1921 __tmp1923))
(let __tmp1925 (Concat __tmp1846 __tmp1924))
(let __tmp1926 (DoWhile __tmp1837 __tmp1925))
(let __tmp1927 (Get __tmp1926 1))
(let __tmp1928 (Single __tmp1927))
(let __tmp1929 (Get __tmp1926 0))
(let __tmp1930 (Single __tmp1929))
(let __tmp1931 (Concat __tmp1928 __tmp1930))
(let __tmp1932 (Const __tmp8 __tmp1032 __tmp1208))
(let __tmp1933 (Get __tmp1334 1))
(let __tmp1934 (Single __tmp1933))
(let __tmp1935 (Get __tmp1334 0))
(let __tmp1936 (Float 2.0))
(let __tmp1937 (Const __tmp1936 __tmp1032 __tmp1208))
(let __tmp1938 (Bop __tmp917 __tmp1935 __tmp1937))
(let __tmp1939 (Single __tmp1938))
(let __tmp1940 (Single __tmp1935))
(let __tmp1941 (Concat __tmp1224 __tmp1940))
(let __tmp1942 (Concat __tmp1939 __tmp1941))
(let __tmp1943 (Concat __tmp1934 __tmp1942))
(let __tmp1944 (TCons __tmp47 __tmp1022))
(let __tmp1945 (TCons __tmp14 __tmp1944))
(let __tmp1946 (TCons __tmp1 __tmp1945))
(let __tmp1947 (TupleT __tmp1946))
(let __tmp1948 (InIf true __tmp1932 __tmp1943))
(let __tmp1949 (Arg __tmp1947 __tmp1948))
(let __tmp1950 (InFunc " loop_ctx_38"))
(let __tmp1951 (Arg __tmp1947 __tmp1950))
(let __tmp1952 (Get __tmp1951 2))
(let __tmp1953 (Const __tmp31 __tmp1947 __tmp1950))
(let __tmp1954 (Bop __tmp63 __tmp1952 __tmp1953))
(let __tmp1955 (Int 10))
(let __tmp1956 (Const __tmp1955 __tmp1947 __tmp1950))
(let __tmp1957 (Bop __tmp62 __tmp1954 __tmp1956))
(let __tmp1958 (Single __tmp1957))
(let __tmp1959 (Get __tmp1951 0))
(let __tmp1960 (Single __tmp1959))
(let __tmp1961 (Get __tmp1951 1))
(let __tmp1962 (Get __tmp1951 3))
(let __tmp1963 (Bop __tmp917 __tmp1962 __tmp1961))
(let __tmp1964 (Bop __tmp916 __tmp1961 __tmp1963))
(let __tmp1965 (Const __tmp1936 __tmp1947 __tmp1950))
(let __tmp1966 (Bop __tmp917 __tmp1964 __tmp1965))
(let __tmp1967 (Single __tmp1966))
(let __tmp1968 (Single __tmp1954))
(let __tmp1969 (Single __tmp1962))
(let __tmp1970 (Concat __tmp1968 __tmp1969))
(let __tmp1971 (Concat __tmp1967 __tmp1970))
(let __tmp1972 (Concat __tmp1960 __tmp1971))
(let __tmp1973 (Concat __tmp1958 __tmp1972))
(let __tmp1974 (DoWhile __tmp1949 __tmp1973))
(let __tmp1975 (InIf false __tmp1932 __tmp1943))
(let __tmp1976 (Arg __tmp1947 __tmp1975))
(let __tmp1977 (If __tmp1932 __tmp1943 __tmp1974 __tmp1976))
(let __tmp1978 (Get __tmp1977 1))
(let __tmp1979 (Single __tmp1978))
(let __tmp1980 (Get __tmp1977 0))
(let __tmp1981 (Single __tmp1980))
(let __tmp1982 (Concat __tmp1979 __tmp1981))
(let __tmp1983 (Const __tmp8 __tmp1485 __tmp1488))
(let __tmp1984 (Get __tmp1532 1))
(let __tmp1985 (Single __tmp1984))
(let __tmp1986 (Get __tmp1532 0))
(let __tmp1987 (Const __tmp1936 __tmp1485 __tmp1488))
(let __tmp1988 (Bop __tmp917 __tmp1986 __tmp1987))
(let __tmp1989 (Single __tmp1988))
(let __tmp1990 (Const __tmp28 __tmp1485 __tmp1488))
(let __tmp1991 (Single __tmp1990))
(let __tmp1992 (Single __tmp1986))
(let __tmp1993 (Concat __tmp1991 __tmp1992))
(let __tmp1994 (Concat __tmp1989 __tmp1993))
(let __tmp1995 (Concat __tmp1985 __tmp1994))
(let __tmp1996 (InIf true __tmp1983 __tmp1995))
(let __tmp1997 (Arg __tmp1947 __tmp1996))
(let __tmp1998 (InFunc " loop_ctx_39"))
(let __tmp1999 (Arg __tmp1947 __tmp1998))
(let __tmp2000 (Get __tmp1999 2))
(let __tmp2001 (Const __tmp31 __tmp1947 __tmp1998))
(let __tmp2002 (Bop __tmp63 __tmp2000 __tmp2001))
(let __tmp2003 (Const __tmp1955 __tmp1947 __tmp1998))
(let __tmp2004 (Bop __tmp62 __tmp2002 __tmp2003))
(let __tmp2005 (Single __tmp2004))
(let __tmp2006 (Get __tmp1999 0))
(let __tmp2007 (Single __tmp2006))
(let __tmp2008 (Get __tmp1999 1))
(let __tmp2009 (Get __tmp1999 3))
(let __tmp2010 (Bop __tmp917 __tmp2009 __tmp2008))
(let __tmp2011 (Bop __tmp916 __tmp2008 __tmp2010))
(let __tmp2012 (Const __tmp1936 __tmp1947 __tmp1998))
(let __tmp2013 (Bop __tmp917 __tmp2011 __tmp2012))
(let __tmp2014 (Single __tmp2013))
(let __tmp2015 (Single __tmp2002))
(let __tmp2016 (Single __tmp2009))
(let __tmp2017 (Concat __tmp2015 __tmp2016))
(let __tmp2018 (Concat __tmp2014 __tmp2017))
(let __tmp2019 (Concat __tmp2007 __tmp2018))
(let __tmp2020 (Concat __tmp2005 __tmp2019))
(let __tmp2021 (DoWhile __tmp1997 __tmp2020))
(let __tmp2022 (InIf false __tmp1983 __tmp1995))
(let __tmp2023 (Arg __tmp1947 __tmp2022))
(let __tmp2024 (If __tmp1983 __tmp1995 __tmp2021 __tmp2023))
(let __tmp2025 (Get __tmp2024 1))
(let __tmp2026 (Single __tmp2025))
(let __tmp2027 (Get __tmp2024 0))
(let __tmp2028 (Single __tmp2027))
(let __tmp2029 (Concat __tmp2026 __tmp2028))
(let __tmp2030 (InFunc " loop_ctx_18"))
(let __tmp2031 (Arg __tmp1032 __tmp2030))
(let __tmp2032 (Get __tmp2031 3))
(let __tmp2033 (Get __tmp2031 1))
(let __tmp2034 (Bop __tmp62 __tmp2032 __tmp2033))
(let __tmp2035 (InIf true __tmp2034 __tmp2031))
(let __tmp2036 (Const __tmp28 __tmp1032 __tmp2035))
(let __tmp2037 (Arg __tmp1032 __tmp2035))
(let __tmp2038 (Get __tmp2037 5))
(let __tmp2039 (Bop __tmp62 __tmp2036 __tmp2038))
(let __tmp2040 (Get __tmp2037 6))
(let __tmp2041 (Get __tmp2037 3))
(let __tmp2042 (Bop __tmp94 __tmp2040 __tmp2041))
(let __tmp2043 (Const __tmp34 __tmp1032 __tmp2035))
(let __tmp2044 (Get __tmp2037 0))
(let __tmp2045 (Top __tmp72 __tmp2042 __tmp2043 __tmp2044))
(let __tmp2046 (Single __tmp2045))
(let __tmp2047 (Get __tmp2037 1))
(let __tmp2048 (Single __tmp2047))
(let __tmp2049 (Get __tmp2037 2))
(let __tmp2050 (Single __tmp2049))
(let __tmp2051 (Single __tmp2036))
(let __tmp2052 (Single __tmp2041))
(let __tmp2053 (Get __tmp2037 4))
(let __tmp2054 (Single __tmp2053))
(let __tmp2055 (Single __tmp2038))
(let __tmp2056 (Single __tmp2040))
(let __tmp2057 (Get __tmp2037 7))
(let __tmp2058 (Single __tmp2057))
(let __tmp2059 (Get __tmp2037 8))
(let __tmp2060 (Single __tmp2059))
(let __tmp2061 (Get __tmp2037 9))
(let __tmp2062 (Single __tmp2061))
(let __tmp2063 (Concat __tmp2060 __tmp2062))
(let __tmp2064 (Concat __tmp2058 __tmp2063))
(let __tmp2065 (Concat __tmp2056 __tmp2064))
(let __tmp2066 (Concat __tmp2055 __tmp2065))
(let __tmp2067 (Concat __tmp2054 __tmp2066))
(let __tmp2068 (Concat __tmp2052 __tmp2067))
(let __tmp2069 (Concat __tmp2051 __tmp2068))
(let __tmp2070 (Concat __tmp2050 __tmp2069))
(let __tmp2071 (Concat __tmp2048 __tmp2070))
(let __tmp2072 (Concat __tmp2046 __tmp2071))
(let __tmp2073 (InIf true __tmp2039 __tmp2072))
(let __tmp2074 (Arg __tmp1081 __tmp2073))
(let __tmp2075 (InFunc " loop_ctx_21"))
(let __tmp2076 (Const __tmp31 __tmp1081 __tmp2075))
(let __tmp2077 (Arg __tmp1081 __tmp2075))
(let __tmp2078 (Get __tmp2077 3))
(let __tmp2079 (Bop __tmp63 __tmp2076 __tmp2078))
(let __tmp2080 (Get __tmp2077 6))
(let __tmp2081 (Bop __tmp62 __tmp2079 __tmp2080))
(let __tmp2082 (Single __tmp2081))
(let __tmp2083 (Get __tmp2077 7))
(let __tmp2084 (Get __tmp2077 4))
(let __tmp2085 (Bop __tmp94 __tmp2083 __tmp2084))
(let __tmp2086 (Get __tmp2077 0))
(let __tmp2087 (Bop __tmp908 __tmp2085 __tmp2086))
(let __tmp2088 (Get __tmp2087 0))
(let __tmp2089 (Get __tmp2077 5))
(let __tmp2090 (Bop __tmp94 __tmp2089 __tmp2078))
(let __tmp2091 (Get __tmp2087 1))
(let __tmp2092 (Bop __tmp908 __tmp2090 __tmp2091))
(let __tmp2093 (Get __tmp2092 0))
(let __tmp2094 (Bop __tmp94 __tmp2093 __tmp2084))
(let __tmp2095 (Get __tmp2092 1))
(let __tmp2096 (Bop __tmp908 __tmp2094 __tmp2095))
(let __tmp2097 (Get __tmp2096 0))
(let __tmp2098 (Get __tmp2077 9))
(let __tmp2099 (Bop __tmp94 __tmp2098 __tmp2084))
(let __tmp2100 (Get __tmp2096 1))
(let __tmp2101 (Bop __tmp908 __tmp2099 __tmp2100))
(let __tmp2102 (Get __tmp2101 0))
(let __tmp2103 (Bop __tmp1262 __tmp2097 __tmp2102))
(let __tmp2104 (Get __tmp2101 1))
(let __tmp2105 (Bop __tmp908 __tmp2090 __tmp2104))
(let __tmp2106 (Get __tmp2105 0))
(let __tmp2107 (Bop __tmp94 __tmp2106 __tmp2084))
(let __tmp2108 (Get __tmp2105 1))
(let __tmp2109 (Bop __tmp908 __tmp2107 __tmp2108))
(let __tmp2110 (Get __tmp2109 0))
(let __tmp2111 (Get __tmp2109 1))
(let __tmp2112 (Bop __tmp908 __tmp2099 __tmp2111))
(let __tmp2113 (Get __tmp2112 0))
(let __tmp2114 (Bop __tmp1262 __tmp2110 __tmp2113))
(let __tmp2115 (Bop __tmp918 __tmp2103 __tmp2114))
(let __tmp2116 (Bop __tmp916 __tmp2088 __tmp2115))
(let __tmp2117 (Get __tmp2112 1))
(let __tmp2118 (Top __tmp72 __tmp2085 __tmp2116 __tmp2117))
(let __tmp2119 (Single __tmp2118))
(let __tmp2120 (Get __tmp2077 1))
(let __tmp2121 (Single __tmp2120))
(let __tmp2122 (Get __tmp2077 2))
(let __tmp2123 (Single __tmp2122))
(let __tmp2124 (Concat __tmp2121 __tmp2123))
(let __tmp2125 (Single __tmp2079))
(let __tmp2126 (Single __tmp2084))
(let __tmp2127 (Single __tmp2089))
(let __tmp2128 (Concat __tmp2126 __tmp2127))
(let __tmp2129 (Single __tmp2080))
(let __tmp2130 (Concat __tmp2128 __tmp2129))
(let __tmp2131 (Concat __tmp2125 __tmp2130))
(let __tmp2132 (Single __tmp2083))
(let __tmp2133 (Get __tmp2077 8))
(let __tmp2134 (Single __tmp2133))
(let __tmp2135 (Concat __tmp2132 __tmp2134))
(let __tmp2136 (Concat __tmp2131 __tmp2135))
(let __tmp2137 (Single __tmp2098))
(let __tmp2138 (Get __tmp2077 10))
(let __tmp2139 (Single __tmp2138))
(let __tmp2140 (Concat __tmp2137 __tmp2139))
(let __tmp2141 (Concat __tmp2136 __tmp2140))
(let __tmp2142 (Concat __tmp2124 __tmp2141))
(let __tmp2143 (Concat __tmp2119 __tmp2142))
(let __tmp2144 (Concat __tmp2082 __tmp2143))
(let __tmp2145 (DoWhile __tmp2074 __tmp2144))
(let __tmp2146 (InIf false __tmp2039 __tmp2072))
(let __tmp2147 (Arg __tmp1081 __tmp2146))
(let __tmp2148 (If __tmp2039 __tmp2072 __tmp2145 __tmp2147))
(let __tmp2149 (Get __tmp2148 7))
(let __tmp2150 (Bop __tmp94 __tmp2149 __tmp2041))
(let __tmp2151 (Get __tmp2148 0))
(let __tmp2152 (Bop __tmp908 __tmp2150 __tmp2151))
(let __tmp2153 (Get __tmp2152 0))
(let __tmp2154 (Get __tmp2148 8))
(let __tmp2155 (Bop __tmp917 __tmp2153 __tmp2154))
(let __tmp2156 (Single __tmp2155))
(let __tmp2157 (Get __tmp2152 1))
(let __tmp2158 (Top __tmp72 __tmp2150 __tmp2155 __tmp2157))
(let __tmp2159 (Single __tmp2158))
(let __tmp2160 (Concat __tmp2156 __tmp2159))
(let __tmp2161 (Call "custom_sqrt" __tmp2160))
(let __tmp2162 (Const __tmp8 __tmp1032 __tmp2035))
(let __tmp2163 (Get __tmp2160 1))
(let __tmp2164 (Single __tmp2163))
(let __tmp2165 (Get __tmp2160 0))
(let __tmp2166 (Const __tmp1936 __tmp1032 __tmp2035))
(let __tmp2167 (Bop __tmp917 __tmp2165 __tmp2166))
(let __tmp2168 (Single __tmp2167))
(let __tmp2169 (Single __tmp2165))
(let __tmp2170 (Concat __tmp2051 __tmp2169))
(let __tmp2171 (Concat __tmp2168 __tmp2170))
(let __tmp2172 (Concat __tmp2164 __tmp2171))
(let __tmp2173 (InIf true __tmp2162 __tmp2172))
(let __tmp2174 (Arg __tmp1947 __tmp2173))
(let __tmp2175 (InFunc " loop_ctx_40"))
(let __tmp2176 (Arg __tmp1947 __tmp2175))
(let __tmp2177 (Get __tmp2176 2))
(let __tmp2178 (Const __tmp31 __tmp1947 __tmp2175))
(let __tmp2179 (Bop __tmp63 __tmp2177 __tmp2178))
(let __tmp2180 (Const __tmp1955 __tmp1947 __tmp2175))
(let __tmp2181 (Bop __tmp62 __tmp2179 __tmp2180))
(let __tmp2182 (Single __tmp2181))
(let __tmp2183 (Get __tmp2176 0))
(let __tmp2184 (Single __tmp2183))
(let __tmp2185 (Get __tmp2176 1))
(let __tmp2186 (Get __tmp2176 3))
(let __tmp2187 (Bop __tmp917 __tmp2186 __tmp2185))
(let __tmp2188 (Bop __tmp916 __tmp2185 __tmp2187))
(let __tmp2189 (Const __tmp1936 __tmp1947 __tmp2175))
(let __tmp2190 (Bop __tmp917 __tmp2188 __tmp2189))
(let __tmp2191 (Single __tmp2190))
(let __tmp2192 (Single __tmp2179))
(let __tmp2193 (Single __tmp2186))
(let __tmp2194 (Concat __tmp2192 __tmp2193))
(let __tmp2195 (Concat __tmp2191 __tmp2194))
(let __tmp2196 (Concat __tmp2184 __tmp2195))
(let __tmp2197 (Concat __tmp2182 __tmp2196))
(let __tmp2198 (DoWhile __tmp2174 __tmp2197))
(let __tmp2199 (InIf false __tmp2162 __tmp2172))
(let __tmp2200 (Arg __tmp1947 __tmp2199))
(let __tmp2201 (If __tmp2162 __tmp2172 __tmp2198 __tmp2200))
(let __tmp2202 (Get __tmp2201 1))
(let __tmp2203 (Single __tmp2202))
(let __tmp2204 (Get __tmp2201 0))
(let __tmp2205 (Single __tmp2204))
(let __tmp2206 (Concat __tmp2203 __tmp2205))
(let __tmp2207 (InFunc " loop_ctx_22"))
(let __tmp2208 (Arg __tmp1485 __tmp2207))
(let __tmp2209 (Get __tmp2208 8))
(let __tmp2210 (Single __tmp2209))
(let __tmp2211 (Get __tmp2208 5))
(let __tmp2212 (Get __tmp2208 3))
(let __tmp2213 (Bop __tmp94 __tmp2211 __tmp2212))
(let __tmp2214 (Get __tmp2208 0))
(let __tmp2215 (Bop __tmp908 __tmp2213 __tmp2214))
(let __tmp2216 (Get __tmp2215 0))
(let __tmp2217 (Get __tmp2208 4))
(let __tmp2218 (Bop __tmp94 __tmp2216 __tmp2217))
(let __tmp2219 (Get __tmp2215 1))
(let __tmp2220 (Bop __tmp908 __tmp2213 __tmp2219))
(let __tmp2221 (Get __tmp2220 0))
(let __tmp2222 (Bop __tmp94 __tmp2221 __tmp2217))
(let __tmp2223 (Get __tmp2220 1))
(let __tmp2224 (Bop __tmp908 __tmp2222 __tmp2223))
(let __tmp2225 (Get __tmp2224 0))
(let __tmp2226 (Get __tmp2208 9))
(let __tmp2227 (Bop __tmp94 __tmp2226 __tmp2217))
(let __tmp2228 (Get __tmp2224 1))
(let __tmp2229 (Bop __tmp908 __tmp2227 __tmp2228))
(let __tmp2230 (Get __tmp2229 0))
(let __tmp2231 (Bop __tmp1262 __tmp2225 __tmp2230))
(let __tmp2232 (Get __tmp2229 1))
(let __tmp2233 (Top __tmp72 __tmp2218 __tmp2231 __tmp2232))
(let __tmp2234 (Bop __tmp908 __tmp2213 __tmp2233))
(let __tmp2235 (Get __tmp2234 1))
(let __tmp2236 (Bop __tmp908 __tmp2213 __tmp2235))
(let __tmp2237 (Get __tmp2236 0))
(let __tmp2238 (Bop __tmp94 __tmp2237 __tmp2217))
(let __tmp2239 (Get __tmp2236 1))
(let __tmp2240 (Bop __tmp908 __tmp2238 __tmp2239))
(let __tmp2241 (Get __tmp2240 1))
(let __tmp2242 (Single __tmp2241))
(let __tmp2243 (Concat __tmp2210 __tmp2242))
(let __tmp2244 (Call "custom_sqrt" __tmp2243))
(let __tmp2245 (Const __tmp8 __tmp1485 __tmp2207))
(let __tmp2246 (Get __tmp2243 1))
(let __tmp2247 (Single __tmp2246))
(let __tmp2248 (Get __tmp2243 0))
(let __tmp2249 (Const __tmp1936 __tmp1485 __tmp2207))
(let __tmp2250 (Bop __tmp917 __tmp2248 __tmp2249))
(let __tmp2251 (Single __tmp2250))
(let __tmp2252 (Const __tmp28 __tmp1485 __tmp2207))
(let __tmp2253 (Single __tmp2252))
(let __tmp2254 (Single __tmp2248))
(let __tmp2255 (Concat __tmp2253 __tmp2254))
(let __tmp2256 (Concat __tmp2251 __tmp2255))
(let __tmp2257 (Concat __tmp2247 __tmp2256))
(let __tmp2258 (InIf true __tmp2245 __tmp2257))
(let __tmp2259 (Arg __tmp1947 __tmp2258))
(let __tmp2260 (InFunc " loop_ctx_41"))
(let __tmp2261 (Arg __tmp1947 __tmp2260))
(let __tmp2262 (Get __tmp2261 2))
(let __tmp2263 (Const __tmp31 __tmp1947 __tmp2260))
(let __tmp2264 (Bop __tmp63 __tmp2262 __tmp2263))
(let __tmp2265 (Const __tmp1955 __tmp1947 __tmp2260))
(let __tmp2266 (Bop __tmp62 __tmp2264 __tmp2265))
(let __tmp2267 (Single __tmp2266))
(let __tmp2268 (Get __tmp2261 0))
(let __tmp2269 (Single __tmp2268))
(let __tmp2270 (Get __tmp2261 1))
(let __tmp2271 (Get __tmp2261 3))
(let __tmp2272 (Bop __tmp917 __tmp2271 __tmp2270))
(let __tmp2273 (Bop __tmp916 __tmp2270 __tmp2272))
(let __tmp2274 (Const __tmp1936 __tmp1947 __tmp2260))
(let __tmp2275 (Bop __tmp917 __tmp2273 __tmp2274))
(let __tmp2276 (Single __tmp2275))
(let __tmp2277 (Single __tmp2264))
(let __tmp2278 (Single __tmp2271))
(let __tmp2279 (Concat __tmp2277 __tmp2278))
(let __tmp2280 (Concat __tmp2276 __tmp2279))
(let __tmp2281 (Concat __tmp2269 __tmp2280))
(let __tmp2282 (Concat __tmp2267 __tmp2281))
(let __tmp2283 (DoWhile __tmp2259 __tmp2282))
(let __tmp2284 (InIf false __tmp2245 __tmp2257))
(let __tmp2285 (Arg __tmp1947 __tmp2284))
(let __tmp2286 (If __tmp2245 __tmp2257 __tmp2283 __tmp2285))
(let __tmp2287 (Get __tmp2286 1))
(let __tmp2288 (Single __tmp2287))
(let __tmp2289 (Get __tmp2286 0))
(let __tmp2290 (Single __tmp2289))
(let __tmp2291 (Concat __tmp2288 __tmp2290))
(let __tmp2292 (Print ))
(let __tmp2293 (Get __tmp1827 1))
(let __tmp2294 (Single __tmp2293))
(let __tmp2295 (Get __tmp1827 0))
(let __tmp2296 (Single __tmp2295))
(let __tmp2297 (Concat __tmp7 __tmp19))
(let __tmp2298 (Concat __tmp30 __tmp2297))
(let __tmp2299 (Concat __tmp825 __tmp2298))
(let __tmp2300 (Concat __tmp981 __tmp2299))
(let __tmp2301 (Concat __tmp983 __tmp2300))
(let __tmp2302 (Concat __tmp985 __tmp2301))
(let __tmp2303 (Concat __tmp2296 __tmp2302))
(let __tmp2304 (Concat __tmp2294 __tmp2303))
(let __tmp2305 (TCons __tmp47 __tmp852))
(let __tmp2306 (TCons __tmp109 __tmp2305))
(let __tmp2307 (TCons __tmp109 __tmp2306))
(let __tmp2308 (TCons __tmp15 __tmp2307))
(let __tmp2309 (TCons __tmp15 __tmp2308))
(let __tmp2310 (TCons __tmp14 __tmp2309))
(let __tmp2311 (TCons __tmp1 __tmp2310))
(let __tmp2312 (TupleT __tmp2311))
(let __tmp2313 (InFunc " loop_ctx_1"))
(let __tmp2314 (Arg __tmp2312 __tmp2313))
(let __tmp2315 (Get __tmp2314 6))
(let __tmp2316 (Get __tmp2314 8))
(let __tmp2317 (Bop __tmp62 __tmp2315 __tmp2316))
(let __tmp2318 (Single __tmp2317))
(let __tmp2319 (InIf true __tmp2317 __tmp2314))
(let __tmp2320 (Arg __tmp2312 __tmp2319))
(let __tmp2321 (Get __tmp2320 5))
(let __tmp2322 (Get __tmp2320 6))
(let __tmp2323 (Bop __tmp94 __tmp2321 __tmp2322))
(let __tmp2324 (Get __tmp2320 0))
(let __tmp2325 (Bop __tmp908 __tmp2323 __tmp2324))
(let __tmp2326 (Get __tmp2325 0))
(let __tmp2327 (Get __tmp2325 1))
(let __tmp2328 (Bop __tmp826 __tmp2326 __tmp2327))
(let __tmp2329 (Single __tmp2328))
(let __tmp2330 (Get __tmp2320 1))
(let __tmp2331 (Single __tmp2330))
(let __tmp2332 (Get __tmp2320 2))
(let __tmp2333 (Single __tmp2332))
(let __tmp2334 (Get __tmp2320 3))
(let __tmp2335 (Single __tmp2334))
(let __tmp2336 (Get __tmp2320 4))
(let __tmp2337 (Single __tmp2336))
(let __tmp2338 (Single __tmp2321))
(let __tmp2339 (Const __tmp31 __tmp2312 __tmp2319))
(let __tmp2340 (Bop __tmp63 __tmp2322 __tmp2339))
(let __tmp2341 (Single __tmp2340))
(let __tmp2342 (Get __tmp2320 7))
(let __tmp2343 (Single __tmp2342))
(let __tmp2344 (Get __tmp2320 8))
(let __tmp2345 (Single __tmp2344))
(let __tmp2346 (Concat __tmp2343 __tmp2345))
(let __tmp2347 (Concat __tmp2341 __tmp2346))
(let __tmp2348 (Concat __tmp2338 __tmp2347))
(let __tmp2349 (Concat __tmp2337 __tmp2348))
(let __tmp2350 (Concat __tmp2335 __tmp2349))
(let __tmp2351 (Concat __tmp2333 __tmp2350))
(let __tmp2352 (Concat __tmp2331 __tmp2351))
(let __tmp2353 (Concat __tmp2329 __tmp2352))
(let __tmp2354 (InIf false __tmp2317 __tmp2314))
(let __tmp2355 (Arg __tmp2312 __tmp2354))
(let __tmp2356 (If __tmp2317 __tmp2314 __tmp2353 __tmp2355))
(let __tmp2357 (Concat __tmp2318 __tmp2356))
(let __tmp2358 (DoWhile __tmp2304 __tmp2357))
(let __tmp2359 (Get __tmp2358 0))
(let __tmp2360 (Single __tmp2359))
(let __tmp2361 (Get __tmp2358 1))
(let __tmp2362 (Single __tmp2361))
(let __tmp2363 (Get __tmp2358 2))
(let __tmp2364 (Single __tmp2363))
(let __tmp2365 (Get __tmp2358 3))
(let __tmp2366 (Single __tmp2365))
(let __tmp2367 (Get __tmp2358 4))
(let __tmp2368 (Single __tmp2367))
(let __tmp2369 (Get __tmp2358 5))
(let __tmp2370 (Single __tmp2369))
(let __tmp2371 (Concat __tmp30 __tmp7))
(let __tmp2372 (Concat __tmp2370 __tmp2371))
(let __tmp2373 (Concat __tmp2368 __tmp2372))
(let __tmp2374 (Concat __tmp2366 __tmp2373))
(let __tmp2375 (Concat __tmp2364 __tmp2374))
(let __tmp2376 (Concat __tmp2362 __tmp2375))
(let __tmp2377 (Concat __tmp2360 __tmp2376))
(let __tmp2378 (TCons __tmp109 __tmp852))
(let __tmp2379 (TCons __tmp109 __tmp2378))
(let __tmp2380 (TCons __tmp15 __tmp2379))
(let __tmp2381 (TCons __tmp15 __tmp2380))
(let __tmp2382 (TCons __tmp14 __tmp2381))
(let __tmp2383 (TCons __tmp1 __tmp2382))
(let __tmp2384 (TupleT __tmp2383))
(let __tmp2385 (InFunc " loop_ctx_0"))
(let __tmp2386 (Arg __tmp2384 __tmp2385))
(let __tmp2387 (Get __tmp2386 6))
(let __tmp2388 (Get __tmp2386 7))
(let __tmp2389 (Bop __tmp62 __tmp2387 __tmp2388))
(let __tmp2390 (Single __tmp2389))
(let __tmp2391 (InIf true __tmp2389 __tmp2386))
(let __tmp2392 (Arg __tmp2384 __tmp2391))
(let __tmp2393 (Get __tmp2392 4))
(let __tmp2394 (Get __tmp2392 6))
(let __tmp2395 (Bop __tmp94 __tmp2393 __tmp2394))
(let __tmp2396 (Get __tmp2392 0))
(let __tmp2397 (Bop __tmp908 __tmp2395 __tmp2396))
(let __tmp2398 (Get __tmp2397 0))
(let __tmp2399 (Get __tmp2397 1))
(let __tmp2400 (Bop __tmp826 __tmp2398 __tmp2399))
(let __tmp2401 (Single __tmp2400))
(let __tmp2402 (Get __tmp2392 1))
(let __tmp2403 (Single __tmp2402))
(let __tmp2404 (Get __tmp2392 2))
(let __tmp2405 (Single __tmp2404))
(let __tmp2406 (Get __tmp2392 3))
(let __tmp2407 (Single __tmp2406))
(let __tmp2408 (Single __tmp2393))
(let __tmp2409 (Get __tmp2392 5))
(let __tmp2410 (Single __tmp2409))
(let __tmp2411 (Concat __tmp2408 __tmp2410))
(let __tmp2412 (Concat __tmp2407 __tmp2411))
(let __tmp2413 (Concat __tmp2405 __tmp2412))
(let __tmp2414 (Concat __tmp2403 __tmp2413))
(let __tmp2415 (Concat __tmp2401 __tmp2414))
(let __tmp2416 (Const __tmp31 __tmp2384 __tmp2391))
(let __tmp2417 (Bop __tmp63 __tmp2394 __tmp2416))
(let __tmp2418 (Single __tmp2417))
(let __tmp2419 (Get __tmp2392 7))
(let __tmp2420 (Single __tmp2419))
(let __tmp2421 (Concat __tmp2418 __tmp2420))
(let __tmp2422 (Concat __tmp2415 __tmp2421))
(let __tmp2423 (InIf false __tmp2389 __tmp2386))
(let __tmp2424 (Arg __tmp2384 __tmp2423))
(let __tmp2425 (If __tmp2389 __tmp2386 __tmp2422 __tmp2424))
(let __tmp2426 (Concat __tmp2390 __tmp2425))
(let __tmp2427 (DoWhile __tmp2377 __tmp2426))
(let __tmp2428 (Get __tmp2427 1))
(let __tmp2429 (Get __tmp2427 2))
(let __tmp2430 (Get __tmp2427 3))
(let __tmp2431 (Get __tmp2427 4))
(let __tmp2432 (Get __tmp2427 5))
(let __tmp2433 (Get __tmp2427 0))
(let __tmp2434 (Bop __tmp826 __tmp2432 __tmp2433))
(let __tmp2435 (Bop __tmp826 __tmp2431 __tmp2434))
(let __tmp2436 (Bop __tmp826 __tmp2430 __tmp2435))
(let __tmp2437 (Bop __tmp826 __tmp2429 __tmp2436))
(let __tmp2438 (Bop __tmp2292 __tmp2428 __tmp2437))
(let __tmp2439 (Single __tmp2438))
(let __tmp2440 (Function "main" __tmp4 __tmp4 __tmp2439))
(let __tmp2441 (TCons __tmp14 __tmp3))
(let __tmp2442 (TupleT __tmp2441))
(let __tmp2443 (InFunc "custom_sqrt"))
(let __tmp2444 (Const __tmp8 __tmp2442 __tmp2443))
(let __tmp2445 (Arg __tmp2442 __tmp2443))
(let __tmp2446 (Get __tmp2445 1))
(let __tmp2447 (Single __tmp2446))
(let __tmp2448 (Get __tmp2445 0))
(let __tmp2449 (Const __tmp1936 __tmp2442 __tmp2443))
(let __tmp2450 (Bop __tmp917 __tmp2448 __tmp2449))
(let __tmp2451 (Single __tmp2450))
(let __tmp2452 (Const __tmp28 __tmp2442 __tmp2443))
(let __tmp2453 (Single __tmp2452))
(let __tmp2454 (Single __tmp2448))
(let __tmp2455 (Concat __tmp2453 __tmp2454))
(let __tmp2456 (Concat __tmp2451 __tmp2455))
(let __tmp2457 (Concat __tmp2447 __tmp2456))
(let __tmp2458 (InIf true __tmp2444 __tmp2457))
(let __tmp2459 (Arg __tmp1947 __tmp2458))
(let __tmp2460 (InFunc " loop_ctx_11"))
(let __tmp2461 (Arg __tmp1947 __tmp2460))
(let __tmp2462 (Get __tmp2461 2))
(let __tmp2463 (Const __tmp31 __tmp1947 __tmp2460))
(let __tmp2464 (Bop __tmp63 __tmp2462 __tmp2463))
(let __tmp2465 (Const __tmp1955 __tmp1947 __tmp2460))
(let __tmp2466 (Bop __tmp62 __tmp2464 __tmp2465))
(let __tmp2467 (Single __tmp2466))
(let __tmp2468 (Get __tmp2461 0))
(let __tmp2469 (Single __tmp2468))
(let __tmp2470 (Get __tmp2461 1))
(let __tmp2471 (Get __tmp2461 3))
(let __tmp2472 (Bop __tmp917 __tmp2471 __tmp2470))
(let __tmp2473 (Bop __tmp916 __tmp2470 __tmp2472))
(let __tmp2474 (Const __tmp1936 __tmp1947 __tmp2460))
(let __tmp2475 (Bop __tmp917 __tmp2473 __tmp2474))
(let __tmp2476 (Single __tmp2475))
(let __tmp2477 (Single __tmp2464))
(let __tmp2478 (Single __tmp2471))
(let __tmp2479 (Concat __tmp2477 __tmp2478))
(let __tmp2480 (Concat __tmp2476 __tmp2479))
(let __tmp2481 (Concat __tmp2469 __tmp2480))
(let __tmp2482 (Concat __tmp2467 __tmp2481))
(let __tmp2483 (DoWhile __tmp2459 __tmp2482))
(let __tmp2484 (InIf false __tmp2444 __tmp2457))
(let __tmp2485 (Arg __tmp1947 __tmp2484))
(let __tmp2486 (If __tmp2444 __tmp2457 __tmp2483 __tmp2485))
(let __tmp2487 (Get __tmp2486 1))
(let __tmp2488 (Single __tmp2487))
(let __tmp2489 (Get __tmp2486 0))
(let __tmp2490 (Single __tmp2489))
(let __tmp2491 (Concat __tmp2488 __tmp2490))
(let __tmp2492 (Function "custom_sqrt" __tmp2442 __tmp2442 __tmp2491))
(let __tmp2493 (TCons __tmp109 __tmp3))
(let __tmp2494 (TCons __tmp47 __tmp2493))
(let __tmp2495 (TCons __tmp14 __tmp2494))
(let __tmp2496 (TCons __tmp47 __tmp2495))
(let __tmp2497 (TupleT __tmp2496))
(let __tmp2498 (InFunc "init_array"))
(let __tmp2499 (Arg __tmp2497 __tmp2498))
(let __tmp2500 (Get __tmp2499 4))
(let __tmp2501 (Single __tmp2500))
(let __tmp2502 (Const __tmp34 __tmp2497 __tmp2498))
(let __tmp2503 (Single __tmp2502))
(let __tmp2504 (Const __tmp28 __tmp2497 __tmp2498))
(let __tmp2505 (Single __tmp2504))
(let __tmp2506 (Get __tmp2499 3))
(let __tmp2507 (Single __tmp2506))
(let __tmp2508 (Get __tmp2499 1))
(let __tmp2509 (Single __tmp2508))
(let __tmp2510 (Get __tmp2499 0))
(let __tmp2511 (Single __tmp2510))
(let __tmp2512 (Get __tmp2499 2))
(let __tmp2513 (Single __tmp2512))
(let __tmp2514 (Concat __tmp2511 __tmp2513))
(let __tmp2515 (Concat __tmp2509 __tmp2514))
(let __tmp2516 (Concat __tmp2507 __tmp2515))
(let __tmp2517 (Concat __tmp2505 __tmp2516))
(let __tmp2518 (Concat __tmp2503 __tmp2517))
(let __tmp2519 (Concat __tmp2501 __tmp2518))
(let __tmp2520 (InFunc " loop_ctx_12"))
(let __tmp2521 (Arg __tmp858 __tmp2520))
(let __tmp2522 (Get __tmp2521 2))
(let __tmp2523 (Get __tmp2521 6))
(let __tmp2524 (Bop __tmp62 __tmp2522 __tmp2523))
(let __tmp2525 (Single __tmp2524))
(let __tmp2526 (InIf true __tmp2524 __tmp2521))
(let __tmp2527 (Const __tmp28 __tmp858 __tmp2526))
(let __tmp2528 (Arg __tmp858 __tmp2526))
(let __tmp2529 (Get __tmp2528 5))
(let __tmp2530 (Bop __tmp62 __tmp2527 __tmp2529))
(let __tmp2531 (Get __tmp2528 0))
(let __tmp2532 (Single __tmp2531))
(let __tmp2533 (Get __tmp2528 1))
(let __tmp2534 (Single __tmp2533))
(let __tmp2535 (Get __tmp2528 2))
(let __tmp2536 (Single __tmp2535))
(let __tmp2537 (Const __tmp34 __tmp858 __tmp2526))
(let __tmp2538 (Single __tmp2537))
(let __tmp2539 (Single __tmp2527))
(let __tmp2540 (Get __tmp2528 3))
(let __tmp2541 (Single __tmp2540))
(let __tmp2542 (Get __tmp2528 4))
(let __tmp2543 (Single __tmp2542))
(let __tmp2544 (Single __tmp2529))
(let __tmp2545 (Get __tmp2528 6))
(let __tmp2546 (Single __tmp2545))
(let __tmp2547 (Concat __tmp2544 __tmp2546))
(let __tmp2548 (Concat __tmp2543 __tmp2547))
(let __tmp2549 (Concat __tmp2541 __tmp2548))
(let __tmp2550 (Concat __tmp2539 __tmp2549))
(let __tmp2551 (Concat __tmp2538 __tmp2550))
(let __tmp2552 (Concat __tmp2536 __tmp2551))
(let __tmp2553 (Concat __tmp2534 __tmp2552))
(let __tmp2554 (Concat __tmp2532 __tmp2553))
(let __tmp2555 (InIf true __tmp2530 __tmp2554))
(let __tmp2556 (Arg __tmp897 __tmp2555))
(let __tmp2557 (InFunc " loop_ctx_13"))
(let __tmp2558 (Arg __tmp897 __tmp2557))
(let __tmp2559 (Get __tmp2558 4))
(let __tmp2560 (Const __tmp31 __tmp897 __tmp2557))
(let __tmp2561 (Bop __tmp63 __tmp2559 __tmp2560))
(let __tmp2562 (Get __tmp2558 7))
(let __tmp2563 (Bop __tmp62 __tmp2561 __tmp2562))
(let __tmp2564 (Single __tmp2563))
(let __tmp2565 (Get __tmp2558 5))
(let __tmp2566 (Get __tmp2558 2))
(let __tmp2567 (Bop __tmp94 __tmp2565 __tmp2566))
(let __tmp2568 (Get __tmp2558 0))
(let __tmp2569 (Bop __tmp908 __tmp2567 __tmp2568))
(let __tmp2570 (Get __tmp2569 0))
(let __tmp2571 (Bop __tmp94 __tmp2570 __tmp2559))
(let __tmp2572 (Get __tmp2558 1))
(let __tmp2573 (Get __tmp2558 3))
(let __tmp2574 (Bop __tmp918 __tmp2572 __tmp2573))
(let __tmp2575 (Get __tmp2558 6))
(let __tmp2576 (Bop __tmp917 __tmp2574 __tmp2575))
(let __tmp2577 (Bop __tmp916 __tmp2576 __tmp2572))
(let __tmp2578 (Get __tmp2569 1))
(let __tmp2579 (Top __tmp72 __tmp2571 __tmp2577 __tmp2578))
(let __tmp2580 (Single __tmp2579))
(let __tmp2581 (Single __tmp2572))
(let __tmp2582 (Single __tmp2566))
(let __tmp2583 (Const __tmp930 __tmp897 __tmp2557))
(let __tmp2584 (Bop __tmp916 __tmp2573 __tmp2583))
(let __tmp2585 (Single __tmp2584))
(let __tmp2586 (Concat __tmp2582 __tmp2585))
(let __tmp2587 (Concat __tmp2581 __tmp2586))
(let __tmp2588 (Single __tmp2561))
(let __tmp2589 (Single __tmp2565))
(let __tmp2590 (Single __tmp2575))
(let __tmp2591 (Concat __tmp2589 __tmp2590))
(let __tmp2592 (Concat __tmp2588 __tmp2591))
(let __tmp2593 (Single __tmp2562))
(let __tmp2594 (Get __tmp2558 8))
(let __tmp2595 (Single __tmp2594))
(let __tmp2596 (Concat __tmp2593 __tmp2595))
(let __tmp2597 (Concat __tmp2592 __tmp2596))
(let __tmp2598 (Concat __tmp2587 __tmp2597))
(let __tmp2599 (Concat __tmp2580 __tmp2598))
(let __tmp2600 (Concat __tmp2564 __tmp2599))
(let __tmp2601 (DoWhile __tmp2556 __tmp2600))
(let __tmp2602 (InIf false __tmp2530 __tmp2554))
(let __tmp2603 (Arg __tmp897 __tmp2602))
(let __tmp2604 (If __tmp2530 __tmp2554 __tmp2601 __tmp2603))
(let __tmp2605 (Get __tmp2604 0))
(let __tmp2606 (Single __tmp2605))
(let __tmp2607 (Get __tmp2604 1))
(let __tmp2608 (Const __tmp930 __tmp858 __tmp2526))
(let __tmp2609 (Bop __tmp916 __tmp2607 __tmp2608))
(let __tmp2610 (Single __tmp2609))
(let __tmp2611 (Const __tmp31 __tmp858 __tmp2526))
(let __tmp2612 (Bop __tmp63 __tmp2611 __tmp2535))
(let __tmp2613 (Single __tmp2612))
(let __tmp2614 (Get __tmp2604 5))
(let __tmp2615 (Single __tmp2614))
(let __tmp2616 (Get __tmp2604 6))
(let __tmp2617 (Single __tmp2616))
(let __tmp2618 (Concat __tmp2617 __tmp2547))
(let __tmp2619 (Concat __tmp2615 __tmp2618))
(let __tmp2620 (Concat __tmp2613 __tmp2619))
(let __tmp2621 (Concat __tmp2610 __tmp2620))
(let __tmp2622 (Concat __tmp2606 __tmp2621))
(let __tmp2623 (InIf false __tmp2524 __tmp2521))
(let __tmp2624 (Arg __tmp858 __tmp2623))
(let __tmp2625 (If __tmp2524 __tmp2521 __tmp2622 __tmp2624))
(let __tmp2626 (Concat __tmp2525 __tmp2625))
(let __tmp2627 (DoWhile __tmp2519 __tmp2626))
(let __tmp2628 (Get __tmp2627 0))
(let __tmp2629 (Single __tmp2628))
(let __tmp2630 (Function "init_array" __tmp2497 __tmp4 __tmp2629))
(let __tmp2631 (TupleT __tmp2494))
(let __tmp2632 (InFunc "sum_array"))
(let __tmp2633 (Arg __tmp2631 __tmp2632))
(let __tmp2634 (Get __tmp2633 2))
(let __tmp2635 (Single __tmp2634))
(let __tmp2636 (Const __tmp34 __tmp2631 __tmp2632))
(let __tmp2637 (Single __tmp2636))
(let __tmp2638 (Const __tmp28 __tmp2631 __tmp2632))
(let __tmp2639 (Single __tmp2638))
(let __tmp2640 (Get __tmp2633 1))
(let __tmp2641 (Single __tmp2640))
(let __tmp2642 (Get __tmp2633 0))
(let __tmp2643 (Single __tmp2642))
(let __tmp2644 (Concat __tmp2641 __tmp2643))
(let __tmp2645 (Concat __tmp2639 __tmp2644))
(let __tmp2646 (Concat __tmp2637 __tmp2645))
(let __tmp2647 (Concat __tmp2635 __tmp2646))
(let __tmp2648 (InFunc " loop_ctx_14"))
(let __tmp2649 (Arg __tmp1840 __tmp2648))
(let __tmp2650 (Get __tmp2649 2))
(let __tmp2651 (Get __tmp2649 4))
(let __tmp2652 (Bop __tmp62 __tmp2650 __tmp2651))
(let __tmp2653 (Single __tmp2652))
(let __tmp2654 (InIf true __tmp2652 __tmp2649))
(let __tmp2655 (Const __tmp28 __tmp1840 __tmp2654))
(let __tmp2656 (Arg __tmp1840 __tmp2654))
(let __tmp2657 (Get __tmp2656 4))
(let __tmp2658 (Bop __tmp62 __tmp2655 __tmp2657))
(let __tmp2659 (Get __tmp2656 0))
(let __tmp2660 (Single __tmp2659))
(let __tmp2661 (Get __tmp2656 1))
(let __tmp2662 (Single __tmp2661))
(let __tmp2663 (Get __tmp2656 2))
(let __tmp2664 (Single __tmp2663))
(let __tmp2665 (Single __tmp2655))
(let __tmp2666 (Get __tmp2656 3))
(let __tmp2667 (Single __tmp2666))
(let __tmp2668 (Single __tmp2657))
(let __tmp2669 (Concat __tmp2667 __tmp2668))
(let __tmp2670 (Concat __tmp2665 __tmp2669))
(let __tmp2671 (Concat __tmp2664 __tmp2670))
(let __tmp2672 (Concat __tmp2662 __tmp2671))
(let __tmp2673 (Concat __tmp2660 __tmp2672))
(let __tmp2674 (InIf true __tmp2658 __tmp2673))
(let __tmp2675 (Arg __tmp1869 __tmp2674))
(let __tmp2676 (InFunc " loop_ctx_15"))
(let __tmp2677 (Arg __tmp1869 __tmp2676))
(let __tmp2678 (Get __tmp2677 3))
(let __tmp2679 (Const __tmp31 __tmp1869 __tmp2676))
(let __tmp2680 (Bop __tmp63 __tmp2678 __tmp2679))
(let __tmp2681 (Get __tmp2677 5))
(let __tmp2682 (Bop __tmp62 __tmp2680 __tmp2681))
(let __tmp2683 (Single __tmp2682))
(let __tmp2684 (Get __tmp2677 4))
(let __tmp2685 (Get __tmp2677 2))
(let __tmp2686 (Bop __tmp94 __tmp2684 __tmp2685))
(let __tmp2687 (Get __tmp2677 0))
(let __tmp2688 (Bop __tmp908 __tmp2686 __tmp2687))
(let __tmp2689 (Get __tmp2688 0))
(let __tmp2690 (Bop __tmp94 __tmp2689 __tmp2678))
(let __tmp2691 (Get __tmp2688 1))
(let __tmp2692 (Bop __tmp908 __tmp2690 __tmp2691))
(let __tmp2693 (Get __tmp2692 1))
(let __tmp2694 (Single __tmp2693))
(let __tmp2695 (Get __tmp2677 1))
(let __tmp2696 (Get __tmp2692 0))
(let __tmp2697 (Bop __tmp916 __tmp2695 __tmp2696))
(let __tmp2698 (Single __tmp2697))
(let __tmp2699 (Concat __tmp2694 __tmp2698))
(let __tmp2700 (Single __tmp2685))
(let __tmp2701 (Single __tmp2680))
(let __tmp2702 (Single __tmp2684))
(let __tmp2703 (Concat __tmp2701 __tmp2702))
(let __tmp2704 (Single __tmp2681))
(let __tmp2705 (Concat __tmp2703 __tmp2704))
(let __tmp2706 (Concat __tmp2700 __tmp2705))
(let __tmp2707 (Concat __tmp2699 __tmp2706))
(let __tmp2708 (Concat __tmp2683 __tmp2707))
(let __tmp2709 (DoWhile __tmp2675 __tmp2708))
(let __tmp2710 (InIf false __tmp2658 __tmp2673))
(let __tmp2711 (Arg __tmp1869 __tmp2710))
(let __tmp2712 (If __tmp2658 __tmp2673 __tmp2709 __tmp2711))
(let __tmp2713 (Get __tmp2712 0))
(let __tmp2714 (Single __tmp2713))
(let __tmp2715 (Get __tmp2712 1))
(let __tmp2716 (Single __tmp2715))
(let __tmp2717 (Const __tmp31 __tmp1840 __tmp2654))
(let __tmp2718 (Bop __tmp63 __tmp2717 __tmp2663))
(let __tmp2719 (Single __tmp2718))
(let __tmp2720 (Get __tmp2712 4))
(let __tmp2721 (Single __tmp2720))
(let __tmp2722 (Concat __tmp2721 __tmp2668))
(let __tmp2723 (Concat __tmp2719 __tmp2722))
(let __tmp2724 (Concat __tmp2716 __tmp2723))
(let __tmp2725 (Concat __tmp2714 __tmp2724))
(let __tmp2726 (InIf false __tmp2652 __tmp2649))
(let __tmp2727 (Arg __tmp1840 __tmp2726))
(let __tmp2728 (If __tmp2652 __tmp2649 __tmp2725 __tmp2727))
(let __tmp2729 (Concat __tmp2653 __tmp2728))
(let __tmp2730 (DoWhile __tmp2647 __tmp2729))
(let __tmp2731 (Get __tmp2730 1))
(let __tmp2732 (Single __tmp2731))
(let __tmp2733 (Get __tmp2730 0))
(let __tmp2734 (Single __tmp2733))
(let __tmp2735 (Concat __tmp2732 __tmp2734))
(let __tmp2736 (Function "sum_array" __tmp2631 __tmp2442 __tmp2735))
(let __tmp2737 (TCons __tmp15 __tmp3))
(let __tmp2738 (TCons __tmp15 __tmp2737))
(let __tmp2739 (TCons __tmp109 __tmp2738))
(let __tmp2740 (TCons __tmp109 __tmp2739))
(let __tmp2741 (TCons __tmp14 __tmp2740))
(let __tmp2742 (TCons __tmp47 __tmp2741))
(let __tmp2743 (TCons __tmp47 __tmp2742))
(let __tmp2744 (TupleT __tmp2743))
(let __tmp2745 (InFunc "kernel_correlation"))
(let __tmp2746 (Arg __tmp2744 __tmp2745))
(let __tmp2747 (Get __tmp2746 7))
(let __tmp2748 (Single __tmp2747))
(let __tmp2749 (Get __tmp2746 0))
(let __tmp2750 (Single __tmp2749))
(let __tmp2751 (Get __tmp2746 4))
(let __tmp2752 (Single __tmp2751))
(let __tmp2753 (Const __tmp28 __tmp2744 __tmp2745))
(let __tmp2754 (Single __tmp2753))
(let __tmp2755 (Get __tmp2746 3))
(let __tmp2756 (Single __tmp2755))
(let __tmp2757 (Get __tmp2746 1))
(let __tmp2758 (Single __tmp2757))
(let __tmp2759 (Get __tmp2746 6))
(let __tmp2760 (Single __tmp2759))
(let __tmp2761 (Get __tmp2746 2))
(let __tmp2762 (Single __tmp2761))
(let __tmp2763 (Get __tmp2746 5))
(let __tmp2764 (Single __tmp2763))
(let __tmp2765 (Const __tmp1010 __tmp2744 __tmp2745))
(let __tmp2766 (Single __tmp2765))
(let __tmp2767 (Concat __tmp2764 __tmp2766))
(let __tmp2768 (Concat __tmp2762 __tmp2767))
(let __tmp2769 (Concat __tmp2760 __tmp2768))
(let __tmp2770 (Concat __tmp2758 __tmp2769))
(let __tmp2771 (Concat __tmp2756 __tmp2770))
(let __tmp2772 (Concat __tmp2754 __tmp2771))
(let __tmp2773 (Concat __tmp2752 __tmp2772))
(let __tmp2774 (Concat __tmp2750 __tmp2773))
(let __tmp2775 (Concat __tmp2748 __tmp2774))
(let __tmp2776 (InFunc " loop_ctx_19"))
(let __tmp2777 (Arg __tmp1032 __tmp2776))
(let __tmp2778 (Get __tmp2777 3))
(let __tmp2779 (Get __tmp2777 1))
(let __tmp2780 (Bop __tmp62 __tmp2778 __tmp2779))
(let __tmp2781 (Single __tmp2780))
(let __tmp2782 (InIf true __tmp2780 __tmp2777))
(let __tmp2783 (Const __tmp28 __tmp1032 __tmp2782))
(let __tmp2784 (Arg __tmp1032 __tmp2782))
(let __tmp2785 (Get __tmp2784 5))
(let __tmp2786 (Bop __tmp62 __tmp2783 __tmp2785))
(let __tmp2787 (Get __tmp2784 8))
(let __tmp2788 (Get __tmp2784 3))
(let __tmp2789 (Bop __tmp94 __tmp2787 __tmp2788))
(let __tmp2790 (Const __tmp34 __tmp1032 __tmp2782))
(let __tmp2791 (Get __tmp2784 0))
(let __tmp2792 (Top __tmp72 __tmp2789 __tmp2790 __tmp2791))
(let __tmp2793 (Single __tmp2792))
(let __tmp2794 (Get __tmp2784 1))
(let __tmp2795 (Single __tmp2794))
(let __tmp2796 (Get __tmp2784 2))
(let __tmp2797 (Single __tmp2796))
(let __tmp2798 (Single __tmp2783))
(let __tmp2799 (Single __tmp2788))
(let __tmp2800 (Get __tmp2784 4))
(let __tmp2801 (Single __tmp2800))
(let __tmp2802 (Single __tmp2785))
(let __tmp2803 (Get __tmp2784 6))
(let __tmp2804 (Single __tmp2803))
(let __tmp2805 (Get __tmp2784 7))
(let __tmp2806 (Single __tmp2805))
(let __tmp2807 (Single __tmp2787))
(let __tmp2808 (Get __tmp2784 9))
(let __tmp2809 (Single __tmp2808))
(let __tmp2810 (Concat __tmp2807 __tmp2809))
(let __tmp2811 (Concat __tmp2806 __tmp2810))
(let __tmp2812 (Concat __tmp2804 __tmp2811))
(let __tmp2813 (Concat __tmp2802 __tmp2812))
(let __tmp2814 (Concat __tmp2801 __tmp2813))
(let __tmp2815 (Concat __tmp2799 __tmp2814))
(let __tmp2816 (Concat __tmp2798 __tmp2815))
(let __tmp2817 (Concat __tmp2797 __tmp2816))
(let __tmp2818 (Concat __tmp2795 __tmp2817))
(let __tmp2819 (Concat __tmp2793 __tmp2818))
(let __tmp2820 (InIf true __tmp2786 __tmp2819))
(let __tmp2821 (Arg __tmp1081 __tmp2820))
(let __tmp2822 (InFunc " loop_ctx_20"))
(let __tmp2823 (Const __tmp31 __tmp1081 __tmp2822))
(let __tmp2824 (Arg __tmp1081 __tmp2822))
(let __tmp2825 (Get __tmp2824 3))
(let __tmp2826 (Bop __tmp63 __tmp2823 __tmp2825))
(let __tmp2827 (Get __tmp2824 6))
(let __tmp2828 (Bop __tmp62 __tmp2826 __tmp2827))
(let __tmp2829 (Single __tmp2828))
(let __tmp2830 (Get __tmp2824 9))
(let __tmp2831 (Get __tmp2824 4))
(let __tmp2832 (Bop __tmp94 __tmp2830 __tmp2831))
(let __tmp2833 (Get __tmp2824 0))
(let __tmp2834 (Bop __tmp908 __tmp2832 __tmp2833))
(let __tmp2835 (Get __tmp2834 0))
(let __tmp2836 (Get __tmp2824 5))
(let __tmp2837 (Bop __tmp94 __tmp2836 __tmp2825))
(let __tmp2838 (Get __tmp2834 1))
(let __tmp2839 (Bop __tmp908 __tmp2837 __tmp2838))
(let __tmp2840 (Get __tmp2839 0))
(let __tmp2841 (Bop __tmp94 __tmp2840 __tmp2831))
(let __tmp2842 (Get __tmp2839 1))
(let __tmp2843 (Bop __tmp908 __tmp2841 __tmp2842))
(let __tmp2844 (Get __tmp2843 0))
(let __tmp2845 (Bop __tmp916 __tmp2835 __tmp2844))
(let __tmp2846 (Get __tmp2843 1))
(let __tmp2847 (Top __tmp72 __tmp2832 __tmp2845 __tmp2846))
(let __tmp2848 (Single __tmp2847))
(let __tmp2849 (Get __tmp2824 1))
(let __tmp2850 (Single __tmp2849))
(let __tmp2851 (Get __tmp2824 2))
(let __tmp2852 (Single __tmp2851))
(let __tmp2853 (Concat __tmp2850 __tmp2852))
(let __tmp2854 (Single __tmp2826))
(let __tmp2855 (Concat __tmp2853 __tmp2854))
(let __tmp2856 (Concat __tmp2848 __tmp2855))
(let __tmp2857 (Single __tmp2831))
(let __tmp2858 (Single __tmp2836))
(let __tmp2859 (Concat __tmp2857 __tmp2858))
(let __tmp2860 (Single __tmp2827))
(let __tmp2861 (Concat __tmp2859 __tmp2860))
(let __tmp2862 (Get __tmp2824 7))
(let __tmp2863 (Single __tmp2862))
(let __tmp2864 (Concat __tmp2861 __tmp2863))
(let __tmp2865 (Concat __tmp2856 __tmp2864))
(let __tmp2866 (Get __tmp2824 8))
(let __tmp2867 (Single __tmp2866))
(let __tmp2868 (Single __tmp2830))
(let __tmp2869 (Concat __tmp2867 __tmp2868))
(let __tmp2870 (Get __tmp2824 10))
(let __tmp2871 (Single __tmp2870))
(let __tmp2872 (Concat __tmp2869 __tmp2871))
(let __tmp2873 (Concat __tmp2865 __tmp2872))
(let __tmp2874 (Concat __tmp2829 __tmp2873))
(let __tmp2875 (DoWhile __tmp2821 __tmp2874))
(let __tmp2876 (InIf false __tmp2786 __tmp2819))
(let __tmp2877 (Arg __tmp1081 __tmp2876))
(let __tmp2878 (If __tmp2786 __tmp2819 __tmp2875 __tmp2877))
(let __tmp2879 (Get __tmp2878 9))
(let __tmp2880 (Bop __tmp94 __tmp2879 __tmp2788))
(let __tmp2881 (Get __tmp2878 0))
(let __tmp2882 (Bop __tmp908 __tmp2880 __tmp2881))
(let __tmp2883 (Get __tmp2882 0))
(let __tmp2884 (Get __tmp2878 8))
(let __tmp2885 (Bop __tmp917 __tmp2883 __tmp2884))
(let __tmp2886 (Get __tmp2882 1))
(let __tmp2887 (Top __tmp72 __tmp2880 __tmp2885 __tmp2886))
(let __tmp2888 (Single __tmp2887))
(let __tmp2889 (Get __tmp2878 2))
(let __tmp2890 (Single __tmp2889))
(let __tmp2891 (Const __tmp31 __tmp1032 __tmp2782))
(let __tmp2892 (Bop __tmp63 __tmp2788 __tmp2891))
(let __tmp2893 (Single __tmp2892))
(let __tmp2894 (Get __tmp2878 5))
(let __tmp2895 (Single __tmp2894))
(let __tmp2896 (Get __tmp2878 7))
(let __tmp2897 (Single __tmp2896))
(let __tmp2898 (Single __tmp2884))
(let __tmp2899 (Concat __tmp2897 __tmp2898))
(let __tmp2900 (Single __tmp2879))
(let __tmp2901 (Concat __tmp2899 __tmp2900))
(let __tmp2902 (Get __tmp2878 10))
(let __tmp2903 (Single __tmp2902))
(let __tmp2904 (Concat __tmp2901 __tmp2903))
(let __tmp2905 (Concat __tmp2802 __tmp2904))
(let __tmp2906 (Concat __tmp2895 __tmp2905))
(let __tmp2907 (Concat __tmp2893 __tmp2906))
(let __tmp2908 (Concat __tmp2890 __tmp2907))
(let __tmp2909 (Concat __tmp2795 __tmp2908))
(let __tmp2910 (Concat __tmp2888 __tmp2909))
(let __tmp2911 (InIf false __tmp2780 __tmp2777))
(let __tmp2912 (Arg __tmp1032 __tmp2911))
(let __tmp2913 (If __tmp2780 __tmp2777 __tmp2910 __tmp2912))
(let __tmp2914 (Concat __tmp2781 __tmp2913))
(let __tmp2915 (DoWhile __tmp2775 __tmp2914))
(let __tmp2916 (Get __tmp2915 0))
(let __tmp2917 (Single __tmp2916))
(let __tmp2918 (Get __tmp2915 2))
(let __tmp2919 (Single __tmp2918))
(let __tmp2920 (Get __tmp2915 4))
(let __tmp2921 (Single __tmp2920))
(let __tmp2922 (Get __tmp2915 6))
(let __tmp2923 (Single __tmp2922))
(let __tmp2924 (Get __tmp2915 7))
(let __tmp2925 (Single __tmp2924))
(let __tmp2926 (Get __tmp2915 8))
(let __tmp2927 (Single __tmp2926))
(let __tmp2928 (Get __tmp2915 9))
(let __tmp2929 (Single __tmp2928))
(let __tmp2930 (Concat __tmp2927 __tmp2929))
(let __tmp2931 (Concat __tmp2925 __tmp2930))
(let __tmp2932 (Concat __tmp2923 __tmp2931))
(let __tmp2933 (Concat __tmp2758 __tmp2932))
(let __tmp2934 (Concat __tmp2921 __tmp2933))
(let __tmp2935 (Concat __tmp2754 __tmp2934))
(let __tmp2936 (Concat __tmp2919 __tmp2935))
(let __tmp2937 (Concat __tmp2750 __tmp2936))
(let __tmp2938 (Concat __tmp2917 __tmp2937))
(let __tmp2939 (Single __tmp2034))
(let __tmp2940 (Get __tmp2161 0))
(let __tmp2941 (Get __tmp2148 10))
(let __tmp2942 (Bop __tmp1207 __tmp2940 __tmp2941))
(let __tmp2943 (Get __tmp2161 1))
(let __tmp2944 (Top __tmp72 __tmp2150 __tmp2940 __tmp2943))
(let __tmp2945 (Single __tmp2944))
(let __tmp2946 (Get __tmp2148 2))
(let __tmp2947 (Single __tmp2946))
(let __tmp2948 (Get __tmp2148 5))
(let __tmp2949 (Single __tmp2948))
(let __tmp2950 (Single __tmp2149))
(let __tmp2951 (Single __tmp2154))
(let __tmp2952 (Get __tmp2148 9))
(let __tmp2953 (Single __tmp2952))
(let __tmp2954 (Single __tmp2941))
(let __tmp2955 (Concat __tmp2953 __tmp2954))
(let __tmp2956 (Concat __tmp2951 __tmp2955))
(let __tmp2957 (Concat __tmp2950 __tmp2956))
(let __tmp2958 (Concat __tmp2055 __tmp2957))
(let __tmp2959 (Concat __tmp2949 __tmp2958))
(let __tmp2960 (Concat __tmp2052 __tmp2959))
(let __tmp2961 (Concat __tmp2947 __tmp2960))
(let __tmp2962 (Concat __tmp2048 __tmp2961))
(let __tmp2963 (Concat __tmp2945 __tmp2962))
(let __tmp2964 (InIf true __tmp2942 __tmp2963))
(let __tmp2965 (Arg __tmp1032 __tmp2964))
(let __tmp2966 (Get __tmp2965 6))
(let __tmp2967 (Get __tmp2965 3))
(let __tmp2968 (Bop __tmp94 __tmp2966 __tmp2967))
(let __tmp2969 (Const __tmp930 __tmp1032 __tmp2964))
(let __tmp2970 (Get __tmp2965 0))
(let __tmp2971 (Top __tmp72 __tmp2968 __tmp2969 __tmp2970))
(let __tmp2972 (Single __tmp2971))
(let __tmp2973 (Get __tmp2965 1))
(let __tmp2974 (Single __tmp2973))
(let __tmp2975 (Get __tmp2965 2))
(let __tmp2976 (Single __tmp2975))
(let __tmp2977 (Single __tmp2967))
(let __tmp2978 (Get __tmp2965 4))
(let __tmp2979 (Single __tmp2978))
(let __tmp2980 (Get __tmp2965 5))
(let __tmp2981 (Single __tmp2980))
(let __tmp2982 (Single __tmp2966))
(let __tmp2983 (Get __tmp2965 7))
(let __tmp2984 (Single __tmp2983))
(let __tmp2985 (Get __tmp2965 8))
(let __tmp2986 (Single __tmp2985))
(let __tmp2987 (Get __tmp2965 9))
(let __tmp2988 (Single __tmp2987))
(let __tmp2989 (Concat __tmp2986 __tmp2988))
(let __tmp2990 (Concat __tmp2984 __tmp2989))
(let __tmp2991 (Concat __tmp2982 __tmp2990))
(let __tmp2992 (Concat __tmp2981 __tmp2991))
(let __tmp2993 (Concat __tmp2979 __tmp2992))
(let __tmp2994 (Concat __tmp2977 __tmp2993))
(let __tmp2995 (Concat __tmp2976 __tmp2994))
(let __tmp2996 (Concat __tmp2974 __tmp2995))
(let __tmp2997 (Concat __tmp2972 __tmp2996))
(let __tmp2998 (InIf false __tmp2942 __tmp2963))
(let __tmp2999 (Arg __tmp1032 __tmp2998))
(let __tmp3000 (If __tmp2942 __tmp2963 __tmp2997 __tmp2999))
(let __tmp3001 (Get __tmp3000 0))
(let __tmp3002 (Single __tmp3001))
(let __tmp3003 (Const __tmp31 __tmp1032 __tmp2035))
(let __tmp3004 (Bop __tmp63 __tmp2041 __tmp3003))
(let __tmp3005 (Single __tmp3004))
(let __tmp3006 (Concat __tmp2950 __tmp2951))
(let __tmp3007 (Concat __tmp3006 __tmp2955))
(let __tmp3008 (Concat __tmp2055 __tmp3007))
(let __tmp3009 (Concat __tmp2949 __tmp3008))
(let __tmp3010 (Concat __tmp3005 __tmp3009))
(let __tmp3011 (Concat __tmp2947 __tmp3010))
(let __tmp3012 (Concat __tmp2048 __tmp3011))
(let __tmp3013 (Concat __tmp3002 __tmp3012))
(let __tmp3014 (InIf false __tmp2034 __tmp2031))
(let __tmp3015 (Arg __tmp1032 __tmp3014))
(let __tmp3016 (If __tmp2034 __tmp2031 __tmp3013 __tmp3015))
(let __tmp3017 (Concat __tmp2939 __tmp3016))
(let __tmp3018 (DoWhile __tmp2938 __tmp3017))
(let __tmp3019 (Get __tmp3018 0))
(let __tmp3020 (Single __tmp3019))
(let __tmp3021 (Get __tmp3018 2))
(let __tmp3022 (Single __tmp3021))
(let __tmp3023 (Get __tmp3018 4))
(let __tmp3024 (Single __tmp3023))
(let __tmp3025 (Get __tmp3018 6))
(let __tmp3026 (Single __tmp3025))
(let __tmp3027 (Get __tmp3018 7))
(let __tmp3028 (Single __tmp3027))
(let __tmp3029 (Get __tmp3018 8))
(let __tmp3030 (Single __tmp3029))
(let __tmp3031 (Concat __tmp3028 __tmp3030))
(let __tmp3032 (Concat __tmp3026 __tmp3031))
(let __tmp3033 (Concat __tmp2758 __tmp3032))
(let __tmp3034 (Concat __tmp3024 __tmp3033))
(let __tmp3035 (Concat __tmp2754 __tmp3034))
(let __tmp3036 (Concat __tmp3022 __tmp3035))
(let __tmp3037 (Concat __tmp2750 __tmp3036))
(let __tmp3038 (Concat __tmp3020 __tmp3037))
(let __tmp3039 (InFunc " loop_ctx_17"))
(let __tmp3040 (Arg __tmp1442 __tmp3039))
(let __tmp3041 (Get __tmp3040 3))
(let __tmp3042 (Get __tmp3040 5))
(let __tmp3043 (Bop __tmp62 __tmp3041 __tmp3042))
(let __tmp3044 (Single __tmp3043))
(let __tmp3045 (InIf true __tmp3043 __tmp3040))
(let __tmp3046 (Const __tmp28 __tmp1442 __tmp3045))
(let __tmp3047 (Arg __tmp1442 __tmp3045))
(let __tmp3048 (Get __tmp3047 1))
(let __tmp3049 (Bop __tmp62 __tmp3046 __tmp3048))
(let __tmp3050 (Get __tmp3047 0))
(let __tmp3051 (Single __tmp3050))
(let __tmp3052 (Single __tmp3048))
(let __tmp3053 (Get __tmp3047 2))
(let __tmp3054 (Single __tmp3053))
(let __tmp3055 (Get __tmp3047 3))
(let __tmp3056 (Single __tmp3055))
(let __tmp3057 (Single __tmp3046))
(let __tmp3058 (Get __tmp3047 4))
(let __tmp3059 (Single __tmp3058))
(let __tmp3060 (Get __tmp3047 5))
(let __tmp3061 (Single __tmp3060))
(let __tmp3062 (Get __tmp3047 6))
(let __tmp3063 (Single __tmp3062))
(let __tmp3064 (Get __tmp3047 7))
(let __tmp3065 (Single __tmp3064))
(let __tmp3066 (Get __tmp3047 8))
(let __tmp3067 (Single __tmp3066))
(let __tmp3068 (Concat __tmp3065 __tmp3067))
(let __tmp3069 (Concat __tmp3063 __tmp3068))
(let __tmp3070 (Concat __tmp3061 __tmp3069))
(let __tmp3071 (Concat __tmp3059 __tmp3070))
(let __tmp3072 (Concat __tmp3057 __tmp3071))
(let __tmp3073 (Concat __tmp3056 __tmp3072))
(let __tmp3074 (Concat __tmp3054 __tmp3073))
(let __tmp3075 (Concat __tmp3052 __tmp3074))
(let __tmp3076 (Concat __tmp3051 __tmp3075))
(let __tmp3077 (InIf true __tmp3049 __tmp3076))
(let __tmp3078 (Arg __tmp1485 __tmp3077))
(let __tmp3079 (Const __tmp31 __tmp1485 __tmp2207))
(let __tmp3080 (Bop __tmp63 __tmp2217 __tmp3079))
(let __tmp3081 (Get __tmp2208 1))
(let __tmp3082 (Bop __tmp62 __tmp3080 __tmp3081))
(let __tmp3083 (Single __tmp3082))
(let __tmp3084 (Get __tmp2234 0))
(let __tmp3085 (Bop __tmp94 __tmp3084 __tmp2217))
(let __tmp3086 (Get __tmp2240 0))
(let __tmp3087 (Get __tmp2244 0))
(let __tmp3088 (Get __tmp2208 7))
(let __tmp3089 (Bop __tmp94 __tmp3088 __tmp2217))
(let __tmp3090 (Get __tmp2244 1))
(let __tmp3091 (Bop __tmp908 __tmp3089 __tmp3090))
(let __tmp3092 (Get __tmp3091 0))
(let __tmp3093 (Bop __tmp918 __tmp3087 __tmp3092))
(let __tmp3094 (Bop __tmp917 __tmp3086 __tmp3093))
(let __tmp3095 (Get __tmp3091 1))
(let __tmp3096 (Top __tmp72 __tmp3085 __tmp3094 __tmp3095))
(let __tmp3097 (Single __tmp3096))
(let __tmp3098 (Single __tmp3081))
(let __tmp3099 (Get __tmp2208 2))
(let __tmp3100 (Single __tmp3099))
(let __tmp3101 (Concat __tmp3098 __tmp3100))
(let __tmp3102 (Single __tmp2212))
(let __tmp3103 (Concat __tmp3101 __tmp3102))
(let __tmp3104 (Single __tmp3080))
(let __tmp3105 (Single __tmp2211))
(let __tmp3106 (Concat __tmp3104 __tmp3105))
(let __tmp3107 (Concat __tmp3103 __tmp3106))
(let __tmp3108 (Get __tmp2208 6))
(let __tmp3109 (Single __tmp3108))
(let __tmp3110 (Single __tmp3088))
(let __tmp3111 (Concat __tmp3109 __tmp3110))
(let __tmp3112 (Concat __tmp3107 __tmp3111))
(let __tmp3113 (Single __tmp2226))
(let __tmp3114 (Concat __tmp2210 __tmp3113))
(let __tmp3115 (Concat __tmp3112 __tmp3114))
(let __tmp3116 (Concat __tmp3097 __tmp3115))
(let __tmp3117 (Concat __tmp3083 __tmp3116))
(let __tmp3118 (DoWhile __tmp3078 __tmp3117))
(let __tmp3119 (InIf false __tmp3049 __tmp3076))
(let __tmp3120 (Arg __tmp1485 __tmp3119))
(let __tmp3121 (If __tmp3049 __tmp3076 __tmp3118 __tmp3120))
(let __tmp3122 (Get __tmp3121 0))
(let __tmp3123 (Single __tmp3122))
(let __tmp3124 (Get __tmp3121 2))
(let __tmp3125 (Single __tmp3124))
(let __tmp3126 (Const __tmp31 __tmp1442 __tmp3045))
(let __tmp3127 (Bop __tmp63 __tmp3126 __tmp3055))
(let __tmp3128 (Single __tmp3127))
(let __tmp3129 (Get __tmp3121 5))
(let __tmp3130 (Single __tmp3129))
(let __tmp3131 (Concat __tmp3130 __tmp3061))
(let __tmp3132 (Concat __tmp3128 __tmp3131))
(let __tmp3133 (Get __tmp3121 7))
(let __tmp3134 (Single __tmp3133))
(let __tmp3135 (Get __tmp3121 8))
(let __tmp3136 (Single __tmp3135))
(let __tmp3137 (Concat __tmp3134 __tmp3136))
(let __tmp3138 (Get __tmp3121 9))
(let __tmp3139 (Single __tmp3138))
(let __tmp3140 (Concat __tmp3137 __tmp3139))
(let __tmp3141 (Concat __tmp3132 __tmp3140))
(let __tmp3142 (Concat __tmp3125 __tmp3141))
(let __tmp3143 (Concat __tmp3052 __tmp3142))
(let __tmp3144 (Concat __tmp3123 __tmp3143))
(let __tmp3145 (InIf false __tmp3043 __tmp3040))
(let __tmp3146 (Arg __tmp1442 __tmp3145))
(let __tmp3147 (If __tmp3043 __tmp3040 __tmp3144 __tmp3146))
(let __tmp3148 (Concat __tmp3044 __tmp3147))
(let __tmp3149 (DoWhile __tmp3038 __tmp3148))
(let __tmp3150 (Get __tmp3149 0))
(let __tmp3151 (Single __tmp3150))
(let __tmp3152 (Get __tmp3149 2))
(let __tmp3153 (Single __tmp3152))
(let __tmp3154 (Get __tmp3149 4))
(let __tmp3155 (Single __tmp3154))
(let __tmp3156 (Concat __tmp3155 __tmp2758))
(let __tmp3157 (Concat __tmp2754 __tmp3156))
(let __tmp3158 (Concat __tmp3153 __tmp3157))
(let __tmp3159 (Concat __tmp2750 __tmp3158))
(let __tmp3160 (Concat __tmp3151 __tmp3159))
(let __tmp3161 (InFunc " loop_ctx_16"))
(let __tmp3162 (Arg __tmp1611 __tmp3161))
(let __tmp3163 (Get __tmp3162 3))
(let __tmp3164 (Get __tmp3162 1))
(let __tmp3165 (Const __tmp31 __tmp1611 __tmp3161))
(let __tmp3166 (Bop __tmp1615 __tmp3164 __tmp3165))
(let __tmp3167 (Bop __tmp62 __tmp3163 __tmp3166))
(let __tmp3168 (Single __tmp3167))
(let __tmp3169 (InIf true __tmp3167 __tmp3162))
(let __tmp3170 (Arg __tmp1611 __tmp3169))
(let __tmp3171 (Get __tmp3170 2))
(let __tmp3172 (Get __tmp3170 3))
(let __tmp3173 (Bop __tmp94 __tmp3171 __tmp3172))
(let __tmp3174 (Get __tmp3170 0))
(let __tmp3175 (Bop __tmp908 __tmp3173 __tmp3174))
(let __tmp3176 (Get __tmp3175 0))
(let __tmp3177 (Bop __tmp94 __tmp3176 __tmp3172))
(let __tmp3178 (Const __tmp930 __tmp1611 __tmp3169))
(let __tmp3179 (Get __tmp3175 1))
(let __tmp3180 (Top __tmp72 __tmp3177 __tmp3178 __tmp3179))
(let __tmp3181 (Single __tmp3180))
(let __tmp3182 (Get __tmp3170 1))
(let __tmp3183 (Single __tmp3182))
(let __tmp3184 (Single __tmp3171))
(let __tmp3185 (Single __tmp3172))
(let __tmp3186 (Const __tmp31 __tmp1611 __tmp3169))
(let __tmp3187 (Bop __tmp63 __tmp3172 __tmp3186))
(let __tmp3188 (Single __tmp3187))
(let __tmp3189 (Get __tmp3170 4))
(let __tmp3190 (Single __tmp3189))
(let __tmp3191 (Get __tmp3170 5))
(let __tmp3192 (Single __tmp3191))
(let __tmp3193 (Concat __tmp3190 __tmp3192))
(let __tmp3194 (Concat __tmp3188 __tmp3193))
(let __tmp3195 (Concat __tmp3185 __tmp3194))
(let __tmp3196 (Concat __tmp3184 __tmp3195))
(let __tmp3197 (Concat __tmp3183 __tmp3196))
(let __tmp3198 (Concat __tmp3181 __tmp3197))
(let __tmp3199 (InFunc " loop_ctx_23"))
(let __tmp3200 (Arg __tmp1653 __tmp3199))
(let __tmp3201 (Get __tmp3200 4))
(let __tmp3202 (Get __tmp3200 1))
(let __tmp3203 (Bop __tmp62 __tmp3201 __tmp3202))
(let __tmp3204 (Single __tmp3203))
(let __tmp3205 (InIf true __tmp3203 __tmp3200))
(let __tmp3206 (Const __tmp28 __tmp1653 __tmp3205))
(let __tmp3207 (Arg __tmp1653 __tmp3205))
(let __tmp3208 (Get __tmp3207 6))
(let __tmp3209 (Bop __tmp62 __tmp3206 __tmp3208))
(let __tmp3210 (Get __tmp3207 2))
(let __tmp3211 (Get __tmp3207 3))
(let __tmp3212 (Bop __tmp94 __tmp3210 __tmp3211))
(let __tmp3213 (Get __tmp3207 0))
(let __tmp3214 (Bop __tmp908 __tmp3212 __tmp3213))
(let __tmp3215 (Get __tmp3214 0))
(let __tmp3216 (Get __tmp3207 4))
(let __tmp3217 (Bop __tmp94 __tmp3215 __tmp3216))
(let __tmp3218 (Const __tmp34 __tmp1653 __tmp3205))
(let __tmp3219 (Get __tmp3214 1))
(let __tmp3220 (Top __tmp72 __tmp3217 __tmp3218 __tmp3219))
(let __tmp3221 (Single __tmp3220))
(let __tmp3222 (Get __tmp3207 1))
(let __tmp3223 (Single __tmp3222))
(let __tmp3224 (Single __tmp3210))
(let __tmp3225 (Single __tmp3211))
(let __tmp3226 (Single __tmp3216))
(let __tmp3227 (Single __tmp3206))
(let __tmp3228 (Get __tmp3207 5))
(let __tmp3229 (Single __tmp3228))
(let __tmp3230 (Single __tmp3208))
(let __tmp3231 (Concat __tmp3229 __tmp3230))
(let __tmp3232 (Concat __tmp3227 __tmp3231))
(let __tmp3233 (Concat __tmp3226 __tmp3232))
(let __tmp3234 (Concat __tmp3225 __tmp3233))
(let __tmp3235 (Concat __tmp3224 __tmp3234))
(let __tmp3236 (Concat __tmp3223 __tmp3235))
(let __tmp3237 (Concat __tmp3221 __tmp3236))
(let __tmp3238 (InIf true __tmp3209 __tmp3237))
(let __tmp3239 (Arg __tmp1697 __tmp3238))
(let __tmp3240 (InFunc " loop_ctx_24"))
(let __tmp3241 (Const __tmp31 __tmp1697 __tmp3240))
(let __tmp3242 (Arg __tmp1697 __tmp3240))
(let __tmp3243 (Get __tmp3242 5))
(let __tmp3244 (Bop __tmp63 __tmp3241 __tmp3243))
(let __tmp3245 (Get __tmp3242 7))
(let __tmp3246 (Bop __tmp62 __tmp3244 __tmp3245))
(let __tmp3247 (Single __tmp3246))
(let __tmp3248 (Get __tmp3242 2))
(let __tmp3249 (Get __tmp3242 3))
(let __tmp3250 (Bop __tmp94 __tmp3248 __tmp3249))
(let __tmp3251 (Get __tmp3242 0))
(let __tmp3252 (Bop __tmp908 __tmp3250 __tmp3251))
(let __tmp3253 (Get __tmp3252 0))
(let __tmp3254 (Get __tmp3242 4))
(let __tmp3255 (Bop __tmp94 __tmp3253 __tmp3254))
(let __tmp3256 (Get __tmp3252 1))
(let __tmp3257 (Bop __tmp908 __tmp3250 __tmp3256))
(let __tmp3258 (Get __tmp3257 0))
(let __tmp3259 (Bop __tmp94 __tmp3258 __tmp3254))
(let __tmp3260 (Get __tmp3257 1))
(let __tmp3261 (Bop __tmp908 __tmp3259 __tmp3260))
(let __tmp3262 (Get __tmp3261 0))
(let __tmp3263 (Get __tmp3242 6))
(let __tmp3264 (Bop __tmp94 __tmp3263 __tmp3243))
(let __tmp3265 (Get __tmp3261 1))
(let __tmp3266 (Bop __tmp908 __tmp3264 __tmp3265))
(let __tmp3267 (Get __tmp3266 0))
(let __tmp3268 (Bop __tmp94 __tmp3267 __tmp3249))
(let __tmp3269 (Get __tmp3266 1))
(let __tmp3270 (Bop __tmp908 __tmp3268 __tmp3269))
(let __tmp3271 (Get __tmp3270 0))
(let __tmp3272 (Get __tmp3270 1))
(let __tmp3273 (Bop __tmp908 __tmp3264 __tmp3272))
(let __tmp3274 (Get __tmp3273 0))
(let __tmp3275 (Bop __tmp94 __tmp3274 __tmp3254))
(let __tmp3276 (Get __tmp3273 1))
(let __tmp3277 (Bop __tmp908 __tmp3275 __tmp3276))
(let __tmp3278 (Get __tmp3277 0))
(let __tmp3279 (Bop __tmp918 __tmp3271 __tmp3278))
(let __tmp3280 (Bop __tmp916 __tmp3262 __tmp3279))
(let __tmp3281 (Get __tmp3277 1))
(let __tmp3282 (Top __tmp72 __tmp3255 __tmp3280 __tmp3281))
(let __tmp3283 (Single __tmp3282))
(let __tmp3284 (Get __tmp3242 1))
(let __tmp3285 (Single __tmp3284))
(let __tmp3286 (Single __tmp3248))
(let __tmp3287 (Concat __tmp3285 __tmp3286))
(let __tmp3288 (Single __tmp3249))
(let __tmp3289 (Concat __tmp3287 __tmp3288))
(let __tmp3290 (Single __tmp3254))
(let __tmp3291 (Single __tmp3244))
(let __tmp3292 (Concat __tmp3290 __tmp3291))
(let __tmp3293 (Concat __tmp3289 __tmp3292))
(let __tmp3294 (Single __tmp3263))
(let __tmp3295 (Single __tmp3245))
(let __tmp3296 (Concat __tmp3294 __tmp3295))
(let __tmp3297 (Concat __tmp3293 __tmp3296))
(let __tmp3298 (Concat __tmp3283 __tmp3297))
(let __tmp3299 (Concat __tmp3247 __tmp3298))
(let __tmp3300 (DoWhile __tmp3239 __tmp3299))
(let __tmp3301 (InIf false __tmp3209 __tmp3237))
(let __tmp3302 (Arg __tmp1697 __tmp3301))
(let __tmp3303 (If __tmp3209 __tmp3237 __tmp3300 __tmp3302))
(let __tmp3304 (Get __tmp3303 2))
(let __tmp3305 (Bop __tmp94 __tmp3304 __tmp3216))
(let __tmp3306 (Get __tmp3303 0))
(let __tmp3307 (Bop __tmp908 __tmp3305 __tmp3306))
(let __tmp3308 (Get __tmp3307 0))
(let __tmp3309 (Bop __tmp94 __tmp3308 __tmp3211))
(let __tmp3310 (Bop __tmp94 __tmp3304 __tmp3211))
(let __tmp3311 (Get __tmp3307 1))
(let __tmp3312 (Bop __tmp908 __tmp3310 __tmp3311))
(let __tmp3313 (Get __tmp3312 0))
(let __tmp3314 (Bop __tmp94 __tmp3313 __tmp3216))
(let __tmp3315 (Get __tmp3312 1))
(let __tmp3316 (Bop __tmp908 __tmp3314 __tmp3315))
(let __tmp3317 (Get __tmp3316 0))
(let __tmp3318 (Get __tmp3316 1))
(let __tmp3319 (Top __tmp72 __tmp3309 __tmp3317 __tmp3318))
(let __tmp3320 (Single __tmp3319))
(let __tmp3321 (Single __tmp3304))
(let __tmp3322 (Concat __tmp3321 __tmp3225))
(let __tmp3323 (Concat __tmp3223 __tmp3322))
(let __tmp3324 (Const __tmp31 __tmp1653 __tmp3205))
(let __tmp3325 (Bop __tmp63 __tmp3216 __tmp3324))
(let __tmp3326 (Single __tmp3325))
(let __tmp3327 (Get __tmp3303 6))
(let __tmp3328 (Single __tmp3327))
(let __tmp3329 (Concat __tmp3328 __tmp3230))
(let __tmp3330 (Concat __tmp3326 __tmp3329))
(let __tmp3331 (Concat __tmp3323 __tmp3330))
(let __tmp3332 (Concat __tmp3320 __tmp3331))
(let __tmp3333 (InIf false __tmp3203 __tmp3200))
(let __tmp3334 (Arg __tmp1653 __tmp3333))
(let __tmp3335 (If __tmp3203 __tmp3200 __tmp3332 __tmp3334))
(let __tmp3336 (Concat __tmp3204 __tmp3335))
(let __tmp3337 (DoWhile __tmp3198 __tmp3336))
(let __tmp3338 (Get __tmp3337 0))
(let __tmp3339 (Single __tmp3338))
(let __tmp3340 (Get __tmp3337 2))
(let __tmp3341 (Single __tmp3340))
(let __tmp3342 (Concat __tmp3183 __tmp3341))
(let __tmp3343 (Concat __tmp3339 __tmp3342))
(let __tmp3344 (Get __tmp3337 5))
(let __tmp3345 (Single __tmp3344))
(let __tmp3346 (Concat __tmp3345 __tmp3192))
(let __tmp3347 (Concat __tmp3188 __tmp3346))
(let __tmp3348 (Concat __tmp3343 __tmp3347))
(let __tmp3349 (InIf false __tmp3167 __tmp3162))
(let __tmp3350 (Arg __tmp1611 __tmp3349))
(let __tmp3351 (If __tmp3167 __tmp3162 __tmp3348 __tmp3350))
(let __tmp3352 (Concat __tmp3168 __tmp3351))
(let __tmp3353 (DoWhile __tmp3160 __tmp3352))
(let __tmp3354 (Get __tmp3353 2))
(let __tmp3355 (Const __tmp31 __tmp2744 __tmp2745))
(let __tmp3356 (Bop __tmp1615 __tmp2749 __tmp3355))
(let __tmp3357 (Bop __tmp94 __tmp3354 __tmp3356))
(let __tmp3358 (Get __tmp3353 0))
(let __tmp3359 (Bop __tmp908 __tmp3357 __tmp3358))
(let __tmp3360 (Get __tmp3359 0))
(let __tmp3361 (Bop __tmp94 __tmp3360 __tmp3356))
(let __tmp3362 (Const __tmp930 __tmp2744 __tmp2745))
(let __tmp3363 (Get __tmp3359 1))
(let __tmp3364 (Top __tmp72 __tmp3361 __tmp3362 __tmp3363))
(let __tmp3365 (Single __tmp3364))
(let __tmp3366 (Function "kernel_correlation" __tmp2744 __tmp4 __tmp3365))
(let __tmp3367 (InLoop __tmp61 __tmp103))
(let __tmp3368 (InLoop __tmp143 __tmp181))
(let __tmp3369 (InLoop __tmp215 __tmp256))
(let __tmp3370 (InLoop __tmp299 __tmp346))
(let __tmp3371 (InLoop __tmp386 __tmp436))
(let __tmp3372 (InLoop __tmp544 __tmp600))
(let __tmp3373 (InLoop __tmp466 __tmp639))
(let __tmp3374 (InLoop __tmp725 __tmp781))
(let __tmp3375 (InLoop __tmp666 __tmp820))
(let __tmp3376 (InLoop __tmp2304 __tmp2357))
(let __tmp3377 (InLoop __tmp2377 __tmp2426))
(let __tmp3378 (InLoop __tmp2459 __tmp2482))
(let __tmp3379 (InLoop __tmp2556 __tmp2600))
(let __tmp3380 (InLoop __tmp2519 __tmp2626))
(let __tmp3381 (InLoop __tmp2675 __tmp2708))
(let __tmp3382 (InLoop __tmp2647 __tmp2729))
(let __tmp3383 (InLoop __tmp2821 __tmp2874))
(let __tmp3384 (InLoop __tmp2775 __tmp2914))
(let __tmp3385 (InLoop __tmp2074 __tmp2144))
(let __tmp3386 (InLoop __tmp2938 __tmp3017))
(let __tmp3387 (InLoop __tmp3078 __tmp3117))
(let __tmp3388 (InLoop __tmp3038 __tmp3148))
(let __tmp3389 (InLoop __tmp3239 __tmp3299))
(let __tmp3390 (InLoop __tmp3198 __tmp3336))
(let __tmp3391 (InLoop __tmp3160 __tmp3352))
(let __tmp3392 (InLoop __tmp899 __tmp948))
(let __tmp3393 (InLoop __tmp851 __tmp974))
(let __tmp3394 (InLoop __tmp1083 __tmp1136))
(let __tmp3395 (InLoop __tmp1021 __tmp1176))
(let __tmp3396 (InLoop __tmp1247 __tmp1318))
(let __tmp3397 (InLoop __tmp1200 __tmp1413))
(let __tmp3398 (InLoop __tmp1487 __tmp1564))
(let __tmp3399 (InLoop __tmp1434 __tmp1595))
(let __tmp3400 (InLoop __tmp1699 __tmp1759))
(let __tmp3401 (InLoop __tmp1650 __tmp1796))
(let __tmp3402 (InLoop __tmp1607 __tmp1812))
(let __tmp3403 (InLoop __tmp1871 __tmp1904))
(let __tmp3404 (InLoop __tmp1837 __tmp1925))
(let __tmp3405 (InLoop __tmp1949 __tmp1973))
(let __tmp3406 (InLoop __tmp1997 __tmp2020))
(let __tmp3407 (InLoop __tmp2174 __tmp2197))
(let __tmp3408 (InLoop __tmp2259 __tmp2282))
(FunctionHasType "main" (TupleT (TCons (StateT) (TNil))) (TupleT (TCons (StateT) (TNil))))
(FunctionHasType "custom_sqrt" (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))) (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))))
(FunctionHasType "init_array" (TupleT (TCons (IntT) (TCons (FloatT) (TCons (IntT) (TCons (PointerT (PointerT (FloatT))) (TCons (StateT) (TNil))))))) (TupleT (TCons (StateT) (TNil))))
(FunctionHasType "sum_array" (TupleT (TCons (IntT) (TCons (PointerT (PointerT (FloatT))) (TCons (StateT) (TNil))))) (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))))
(FunctionHasType "kernel_correlation" (TupleT (TCons (IntT) (TCons (IntT) (TCons (FloatT) (TCons (PointerT (PointerT (FloatT))) (TCons (PointerT (PointerT (FloatT))) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))))))) (TupleT (TCons (StateT) (TNil))))


    ; Loop context unions
    (union __tmp64 __tmp3367)
(union __tmp144 __tmp3368)
(union __tmp216 __tmp3369)
(union __tmp300 __tmp3370)
(union __tmp387 __tmp3371)
(union __tmp545 __tmp3372)
(union __tmp479 __tmp3373)
(union __tmp726 __tmp3374)
(union __tmp667 __tmp3375)
(union __tmp2313 __tmp3376)
(union __tmp2385 __tmp3377)
(union __tmp2460 __tmp3378)
(union __tmp2557 __tmp3379)
(union __tmp2520 __tmp3380)
(union __tmp2676 __tmp3381)
(union __tmp2648 __tmp3382)
(union __tmp2822 __tmp3383)
(union __tmp2776 __tmp3384)
(union __tmp2075 __tmp3385)
(union __tmp2030 __tmp3386)
(union __tmp2207 __tmp3387)
(union __tmp3039 __tmp3388)
(union __tmp3240 __tmp3389)
(union __tmp3199 __tmp3390)
(union __tmp3161 __tmp3391)
(union __tmp900 __tmp3392)
(union __tmp859 __tmp3393)
(union __tmp1084 __tmp3394)
(union __tmp1033 __tmp3395)
(union __tmp1248 __tmp3396)
(union __tmp1201 __tmp3397)
(union __tmp1488 __tmp3398)
(union __tmp1443 __tmp3399)
(union __tmp1700 __tmp3400)
(union __tmp1654 __tmp3401)
(union __tmp1612 __tmp3402)
(union __tmp1872 __tmp3403)
(union __tmp1841 __tmp3404)
(union __tmp1950 __tmp3405)
(union __tmp1998 __tmp3406)
(union __tmp2175 __tmp3407)
(union __tmp2260 __tmp3408)

    ; Function inlining unions
     
(union __tmp835 __tmp977)
(InlinedCall "init_array" __tmp834)
(subsume (Call "init_array" __tmp834))


(union __tmp993 __tmp1824)
(InlinedCall "kernel_correlation" __tmp992)
(subsume (Call "kernel_correlation" __tmp992))


(union __tmp1827 __tmp1931)
(InlinedCall "sum_array" __tmp1826)
(subsume (Call "sum_array" __tmp1826))


(union __tmp1335 __tmp1982)
(InlinedCall "custom_sqrt" __tmp1334)
(subsume (Call "custom_sqrt" __tmp1334))


(union __tmp1533 __tmp2029)
(InlinedCall "custom_sqrt" __tmp1532)
(subsume (Call "custom_sqrt" __tmp1532))


(union __tmp2161 __tmp2206)
(InlinedCall "custom_sqrt" __tmp2160)
(subsume (Call "custom_sqrt" __tmp2160))


(union __tmp2244 __tmp2291)
(InlinedCall "custom_sqrt" __tmp2243)
(subsume (Call "custom_sqrt" __tmp2243))

) :ruleset initialization)
(run initialization 1) 

; Schedule

(run-schedule
    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    (repeat 2
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        all-optimizations
    )

    (repeat 4
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        cheap-optimizations
    )

    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    add-to-debug-expr
)

(print-size)

