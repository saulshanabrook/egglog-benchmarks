
; Prologue
; Every term is an `Expr` or a `ListExpr`.
(datatype Expr)
; Used for constructing a list of branches for `Switch`es
; or a list of functions in a `Program`.
(datatype ListExpr (Cons Expr ListExpr) (Nil))

; =================================
; Types
; =================================

(sort TypeList)

(datatype BaseType
  (IntT)
  (BoolT)
  (FloatT)
  ; a pointer to a memory region with a particular type
  (PointerT BaseType)
  (StateT))


(datatype Type
  ; a primitive type
  (Base BaseType)
  ; a typed tuple. Use an empty tuple as a unit type.
  ; state edge also has unit type
  (TupleT TypeList)
)

; use TmpType for helpers where the type doesn't matter
; these shouldn't appear in values in the program, only intermediate terms (such as in ivt.egg permutations)
(constructor TmpType () Type)

(constructor TNil () TypeList)
(constructor TCons (BaseType TypeList) TypeList) ; Head element should never be a tuple


; =================================
; Assumptions
; =================================

(datatype Assumption
  ; Assume nothing
  (InFunc String)
  ; The term is in a loop with `input` and `pred_output`.
  ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
  ;      input    pred_output
  (InLoop Expr     Expr)
  ; Branch of the switch, and what the predicate is, and what the input is
  (InSwitch i64 Expr Expr)
  ; If the predicate was true, and what the predicate is, and what the input is
  (InIf bool Expr Expr)
)



; =================================
; Leaf nodes
; Constants, argument, and empty tuple
; =================================

; Only a single argument is bound- if multiple values are needed, arg will be a tuple.
; e.g. `(Get (Arg tuple_type) 1)` gets the second value in the argument with some tuple_type.
(constructor Arg (Type Assumption) Expr)

; Constants
(datatype Constant
  (Int i64)
  (Bool bool)
  (Float f64))
; All leaf nodes need the type of the argument
; Type is the type of the bound argument in scope
(constructor Const (Constant Type Assumption) Expr)

; An empty tuple.
; Type is the type of the bound argument in scope
(constructor Empty (Type Assumption) Expr)


; =================================
; Operators
; =================================

(datatype TernaryOp
  ; given a pointer, value, and a state edge
  ; writes the value to the pointer and returns
  ; the resulting state edge
  (Write)
  (Select))
(datatype BinaryOp
  ;; Bitwise operators
  (Bitand)
  ;; integer operators
  (Add)
  (Sub)
  (Div)
  (Mul)
  (LessThan)
  (GreaterThan)
  (LessEq)
  (GreaterEq)
  (Eq)
  (Smin)
  (Smax)
  (Shl)
  (Shr)
  ;; float operators 
  (FAdd)
  (FSub)
  (FDiv)
  (FMul)
  (FLessThan)
  (FGreaterThan) 
  (FLessEq)
  (FGreaterEq)
  (FEq)
  (Fmin)
  (Fmax)
  ;; logical operators
  (And)
  (Or)
  ; given a pointer and a state edge
  ; loads the value at the pointer and returns (value, state edge)
  (Load)
  ; Takes a pointer and an integer, and offsets
  ; the pointer by the integer
  (PtrAdd)
  ; given and value and a state edge, prints the value as a side-effect
  ; the value must be a base value, not a tuple
  ; returns an empty tuple
  (Print)
  ; given a pointer and state edge, frees the whole memory region at the pointer
  (Free))
(datatype UnaryOp
  (Neg)
  (Abs)
  (Not))

; Operators
(constructor Top   (TernaryOp Expr Expr Expr) Expr)
(constructor Bop   (BinaryOp Expr Expr) Expr)
(constructor Uop   (UnaryOp Expr) Expr)
; gets from a tuple. static index
(constructor Get   (Expr i64) Expr)
; (Alloc id amount state_edge pointer_type)
; allocate an integer amount of memory for a particular type
; returns (pointer to the allocated memory, state edge)
(constructor Alloc (i64 Expr Expr BaseType)      Expr)
;               name of func   arg
(constructor Call (String         Expr) Expr)



; =================================
; Tuple operations
; =================================

; `Empty`, `Single` and `Concat` create tuples.
; 1. Use `Empty` for an empty tuple.
; 2. Use `Single` for a tuple with one element.
; 3. Use `Concat` to append the elements from two tuples together.
; Nested tuples are not allowed.


; A tuple with a single element.
; Necessary because we only use `Concat` to add to tuples.
(constructor Single (Expr) Expr)
; Concat appends the elemnts from two tuples together
; e.g. (Concat (Concat (Single a) (Single b))
;              (Concat (Single c) (Single d))) = (a, b, c, d)
;                 expr1       expr2
(constructor Concat (Expr        Expr)       Expr)



; =================================
; Control flow
; =================================

; Switch on a list of lazily-evaluated branches.
; pred must be an integer
;                 pred  inputs   branches     chosen
(constructor Switch (Expr  Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred inputs   then else
(constructor If (Expr Expr     Expr Expr) Expr)


; A do-while loop.
; Evaluates the input, then evaluates the body.
; Keeps looping while the predicate is true.
; input must have the same type as (output1, output2, ..., outputi)
; input must be a tuple 
; pred must be a boolean
; pred-and-body must be a flat tuple (pred, out1, out2, ..., outi)
; input must be the same type as (out1, out2, ..., outi)
;                  input   pred-and-body
(constructor DoWhile (Expr    Expr)                   Expr)


; =================================
; Top-level expressions
; =================================
(sort ProgramType)
; An entry function and a list of additional functions.
;                      entry function     other functions
(constructor Program     (Expr               ListExpr) ProgramType)
;                   name   input ty  output ty  output
(constructor Function (String Type      Type       Expr)      Expr)

; to get the type of a funciton, look in this table
; since we might not be optimizing the entire program
(relation FunctionHasType (String Type Type))

; Rulesets
(ruleset always-run)
(ruleset is-resolved)
(ruleset error-checking)
(ruleset memory)
(ruleset memory-helpers)
(ruleset smem)

;; Initliazation
(relation bop->string (BinaryOp String))
(relation uop->string (UnaryOp String))
(relation top->string (TernaryOp String))
(bop->string (Add) "Add")
(bop->string (Sub) "Sub")
(bop->string (Div) "Div")
(bop->string (Mul) "Mul")
(bop->string (LessThan) "LessThan")
(bop->string (GreaterThan) "GreaterThan")
(bop->string (LessEq) "LessEq")
(bop->string (GreaterEq) "GreaterEq")
(bop->string (Eq) "Eq")
(bop->string (FAdd) "FAdd")
(bop->string (FSub) "FSub")
(bop->string (FDiv) "FDiv")
(bop->string (FMul) "FMul")
(bop->string (FLessThan) "FLessThan")
(bop->string (FGreaterThan) "FGreaterThan")
(bop->string (FLessEq) "FLessEq")
(bop->string (FGreaterEq) "FGreaterEq")
(bop->string (FEq) "FEq")
(bop->string (And) "And")
(bop->string (Or) "Or")
(bop->string (Load) "Load")
(bop->string (PtrAdd) "PtrAdd")
(bop->string (Print) "Print")
(bop->string (Free) "Free")

;; If anything is put in the DebugExpr relation, we'll extract them instead of the original program.
;; These can then be visualized using the `optimized-rvsdg` run mode
(relation DebugExpr (Expr))

; TERMS
(datatype Term)
(datatype ListTerm (TermCons Term ListTerm) (TermNil))

; TODO: Will probably need ctx so that we can resubstitute?
; (datatype TermAssumption
;   ; Assume nothing
;   (InFunc String)
;   ; The term is in a loop with `input` and `pred_output`.
;   ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
;   ;      input    pred_output
;   (InLoop Term     Term)
;   ; Branch of the switch, and what the predicate is, and what the input is
;   (InSwitch i64 Term Term)
;   ; If the predicate was true, and what the predicate is, and what the input is
;   (InIf bool Term Term)
; )

(constructor TermArg () Term)

(constructor TermConst (Constant) Term)

(constructor TermEmpty () Term)

; Term Operators
(constructor TermTop (TernaryOp Term Term Term) Term)
(constructor TermBop (BinaryOp Term Term) Term)
(constructor TermUop (UnaryOp Term) Term)
(constructor TermGet (Term i64) Term)
(constructor TermAlloc (i64 Term Term BaseType) Term)
(constructor TermCall (String Term) Term)

; Tuple Operators
(constructor TermSingle (Term) Term)
(constructor TermConcat (Term Term) Term)

; Control Flow (TODO? Not sure if needed)
; (constructor TermSwitch (Term Term ListTerm) Term)
; (constructor TermIf (Term Term Term Term) Term)

; (constructor TermDoWhile (Term Term) Term)


(ruleset never)
(ruleset type-analysis)
(ruleset type-helpers)       ;; these rules need to saturate between every iter of type-analysis rules

(constructor TLConcat (TypeList TypeList) TypeList :unextractable)
(rewrite (TLConcat (TNil) r) r :ruleset type-helpers)
(rewrite (TLConcat (TCons hd tl) r)
         (TCons hd (TLConcat tl r))
         :ruleset type-helpers)

(function TypeList-length (TypeList) i64 :no-merge)
(constructor TypeList-ith (TypeList i64) BaseType :unextractable)
;; Don't match on TypeList-ith because it is now lazily instantiated!
(rule () ((set (TypeList-length (TNil)) 0)) :ruleset type-helpers)
(rule ((= lst (TCons hd tl))
       (= len (TypeList-length tl)))
      ((set (TypeList-length lst) (+ 1 len))) :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) 0) hd :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) i) (TypeList-ith tl (- i 1)) 
      :when ((> i 0)) 
      :ruleset type-helpers)

(rule ((TypeList-ith list i)
       (= (TypeList-length list) n)
       (>= i n))
      ((panic "TypeList-ith out of bounds")) :ruleset type-helpers)

(relation HasType (Expr Type))


;; Keep track of type expectations for error messages
(relation ExpectType (Expr Type String))
(rule (
        (ExpectType e expected msg)
        (HasType e actual)
        (!= expected actual) ;; not okay unless we saturate type helpers.
      )
      (
       (panic "type mismatch- check RUST_LOG=info for expressions that mismatched"))
      :ruleset error-checking)


(rule ((= (Const c1 ty1 ctx1) (Const c2 ty2 ctx2))
       (= ctx1 (InFunc name))
       (!= c1 c2))
      ((panic "Unsoundness detected: const values differ at top level"))
      :ruleset error-checking)

(relation HasArgType (Expr Type))

(rule ((HasArgType (Arg t1 ctx) t2)
       (!= t1 t2))
      ((panic "arg type mismatch"))
      :ruleset error-checking)

(rule ((= lhs (Function name in out body))
       (HasArgType body ty)
       (HasArgType body ty2)
       (!= ty ty2))
      ((panic "arg type mismatch in function"))
      :ruleset error-checking)

; Propagate arg types up
(rule ((= lhs (Uop _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Get e _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Alloc _id e state _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Call _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Single e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e1 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e2 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType pred ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType branch ty)
       (HasType inputs ty2)
       (!= ty ty2))
      ((panic "switch branches then branch has incorrect input type"))
      :ruleset error-checking)
;; demand with one fewer branches
(rule ((= lhs (Switch pred inputs (Cons branch rest))))
      ((Switch pred inputs rest))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType t ty2)
       (!= ty ty2))
      ((panic "if branches then branch has incorrect input type"))
      :ruleset error-checking)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType e ty2)
       (!= ty ty2))
      ((panic "if branches else branch has incorrect input type"))
      :ruleset error-checking)


(rule ((= lhs (DoWhile ins body))
       (HasArgType ins ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
; Don't push arg types through Program, Function, DoWhile, Let exprs because
; these create new arg contexts.

; Primitives
(rule ((= lhs (Const (Int i) ty ctx)))
      ((HasType lhs (Base (IntT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Bool b) ty ctx)))
      ((HasType lhs (Base (BoolT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Float b) ty ctx)))
      ((HasType lhs (Base (FloatT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Empty ty ctx)))
      ((HasType lhs (TupleT (TNil)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

; Unary Ops
(rule (
        (= lhs (Uop (Not) e))
        (HasType e (Base (BoolT)))
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Not) e)))
      ((ExpectType e (Base (BoolT)) "(Not)"))
      :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
      (HasType e (Base (IntT)))
) (
      (HasType lhs (Base (IntT)))
) :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
) (
      (ExpectType e (Base (IntT)) "(Neg)")
) :ruleset type-analysis)

(rule (
        (= lhs (Uop (Abs) e))
        (HasType e (Base (IntT)))
      )
      ((HasType lhs (Base (IntT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Abs) e)))
      ((ExpectType e (Base (IntT)) "(Abs)"))
      :ruleset type-analysis)


(rule (
        (= lhs (Bop (Print) e state))
        (HasType e _ty)             ; just make sure it has some type.
      )
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)

(rule (
        (= lhs (Bop (Print) e state))
        (HasType e (TupleT ty))
      )
      ((panic "Don't print a tuple"))
      :ruleset error-checking)

(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (PointerT _ty))))
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (IntT))))
      ((panic "Free expected pointer, received integer"))
      :ruleset error-checking)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (TupleT _ty)))
      ((panic "Free expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Bop (Load) e state))
        (HasType e (Base (PointerT ty)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (Base (IntT)))
      )
      ((panic "(Load) expected pointer, received int"))
      :ruleset error-checking)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (TupleT x))
      )
      ((panic "(Load) expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Top (Select) pred v1 v2))
      )
      ((ExpectType pred (Base (BoolT)) "(Select)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty)
        (HasType v2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty1)
        (HasType v2 ty2)
        (!= ty1 ty2)
      )
      ((panic "(Select) branches had different types"))
      :ruleset error-checking)


; Binary ops

;; Operators that have type Type -> Type -> Type
;; Note we only do this generic matching for binary
;; operator since there's a lot of them.
;; In the future we can also extend to other constructs.
(relation bop-of-type (BinaryOp Type))
(bop-of-type (Bitand) (Base (IntT)))
(bop-of-type (Add) (Base (IntT)))
(bop-of-type (Sub) (Base (IntT)))
(bop-of-type (Div) (Base (IntT)))
(bop-of-type (Mul) (Base (IntT)))
(bop-of-type (FAdd) (Base (FloatT)))
(bop-of-type (FSub) (Base (FloatT)))
(bop-of-type (FDiv) (Base (FloatT)))
(bop-of-type (FMul) (Base (FloatT)))

(rule (
        (= lhs (Bop op e1 e2))
        (bop-of-type op ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop op e1 e2))
       (bop-of-type op ty)
       (bop->string op op-str))
      (
        (ExpectType e1 ty op-str)
        (ExpectType e2 ty op-str)
      )
      :ruleset type-analysis)  

;; Operators that have type Float -> Float -> Bool
(relation bpred-of-type (BinaryOp Type))
(bpred-of-type (FLessThan) (Base (FloatT)))
(bpred-of-type (FLessEq) (Base (FloatT)))
(bpred-of-type (FGreaterThan) (Base (FloatT)))
(bpred-of-type (FGreaterEq) (Base (FloatT)))
(bpred-of-type (FEq) (Base (FloatT)))
(bpred-of-type (LessThan) (Base (IntT)))
(bpred-of-type (LessEq) (Base (IntT)))
(bpred-of-type (GreaterThan) (Base (IntT)))
(bpred-of-type (GreaterEq) (Base (IntT)))
(bpred-of-type (Eq) (Base (IntT)))
(bpred-of-type (And) (Base (BoolT)))
(bpred-of-type (Or) (Base (BoolT)))

(rule (
        (= lhs (Bop pred e1 e2))
        (bpred-of-type pred ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop pred e1 e2))
       (bpred-of-type pred ty)
       (bop->string pred pred-str))
      (
        (ExpectType e1 ty pred-str)
        (ExpectType e2 ty pred-str)
      )
      :ruleset type-analysis)  

(rule (
        (= lhs (Top (Write) ptr val state))
        (HasType ptr (Base (PointerT ty)))
        (HasType val (Base ty)) ; TODO need to support pointers to pointers
      )
      ((HasType lhs (Base (StateT)))) ; Write returns ()
      :ruleset type-analysis)

(rule (
       (= lhs (Top (Write) ptr val state))
       (HasType ptr (Base (PointerT ty))))
      ((ExpectType val (Base ty) "(Write)"))
      :ruleset type-analysis)
      
       

(rule (
        (= lhs (Bop (PtrAdd) ptr n))
        (HasType ptr (Base (PointerT ty)))
        (HasType n (Base (IntT)))
      )
      ((HasType lhs (Base (PointerT ty))))
      :ruleset type-analysis)

; Other ops
(rule ((= lhs (Alloc _id amt state ty))) 
      ((ExpectType amt (Base (IntT)) "(Alloc)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Alloc _id amt state ty))
        (HasType amt (Base (IntT)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)

(rule (
        (= lhs (Get e i))
        (HasType e (TupleT tylist))
      )
      ; TypeList-ith needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (Base (TypeList-ith tylist i)))) 
      :ruleset type-analysis)

(rule (
       (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
       (>= i len))
      ((panic "index out of bounds"))
      :ruleset error-checking)
(rule (
      (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
        (< i 0)
      )
      ((panic "negative index"))
      :ruleset error-checking)

; =================================
; Tuple operations
; =================================

(rule (
        (= lhs (Single e))
        (HasType e (TupleT tylist))
      )
      ((panic "don't nest tuples"))
      :ruleset error-checking)

(rule (
        (= lhs (Single e))
        (HasType e (Base basety))
      )
      ((HasType lhs (TupleT (TCons basety (TNil)))))
      :ruleset type-analysis)

(rule (
        (= lhs (Concat e1 e2))
        (HasType e1 (TupleT tylist1))
        (HasType e2 (TupleT tylist2))
      )
      ; TLConcat needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (TupleT (TLConcat tylist1 tylist2))))
      :ruleset type-analysis)

; =================================
; Control flow
; =================================
(rule ((= lhs (If pred inputs then else)))
      ((ExpectType pred (Base (BoolT)) "If predicate must be boolean"))
      :ruleset type-analysis)
(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then ty)
        (HasType else ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then tya)
        (HasType else tyb)
        (!= tya tyb)
      )
      ((panic "if branches had different types"))
      :ruleset error-checking)



(rule ((= lhs (Switch pred inputs branches)))
      ((ExpectType pred (Base (IntT)) "Switch predicate must be integer"))
      :ruleset type-analysis)

; base case: single branch switch has type of branch
(rule (
        (= lhs (Switch pred inputs (Cons branch (Nil))))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

; recursive case: peel off a layer
(rule ((Switch pred inputs (Cons branch rest)))
      ((Switch pred inputs rest))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
        (HasType (Switch pred inputs rest) ty) ; rest of the branches also have type ty
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch tya)
        (HasType (Switch pred inputs rest) tyb)
        (!= tya tyb)
      )
      ((panic "switch branches had different types"))
      :ruleset error-checking)

(rule ((Arg ty ctx))
      (
        (HasType (Arg ty ctx) ty)
        (HasArgType (Arg ty ctx) ty)
      )
      :ruleset type-analysis)


(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base ty))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base (PointerT ty)))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base ty))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base (PointerT ty)))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist))
      )
      ((HasArgType pred-body (TupleT tylist)))
      :ruleset type-analysis)

(rule ((= lhs (DoWhile inp pred-body)))
      ((ExpectType (Get pred-body 0) (Base (BoolT)) "loop pred must be bool"))
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist)) ; input is a tuple
        ; pred-body is a tuple where the first elt is a bool
        ; and the rest of the list matches the input type
        (HasType pred-body (TupleT (TCons (BoolT) tylist)))
      )
      ((HasType lhs (TupleT tylist))) ; whole thing has type of inputs/outputs
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT in-tys))
        (HasType pred-body (TupleT (TCons (BoolT) out-tys)))
        (!= in-tys out-tys)
      )
      ((panic "input types and output types don't match"))
      :ruleset error-checking)

; =================================
; Functions
; =================================

(rule ((= lhs (Function name in-ty out-ty body)))
      (
        ; Arg should have the specified type in the body
        (HasArgType body in-ty)
        ; Expect the body to have the specified output type
        (ExpectType body out-ty "Function body had wrong type")
      )
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
      )
      ; Expect the arg to have the right type for the function
      ((ExpectType arg in-ty "function called with wrong arg type"))
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
        (HasType arg in-ty)
        ; We don't need to check the type of the function body, it will
        ; be checked elsewhere. If we did require (HasType body out-ty),
        ; recursive functions would not get assigned a type.
      )
      ((HasType lhs out-ty))
      :ruleset type-analysis)

; find which types are pure
(relation PureBaseType (BaseType))
(relation PureType (Type))
(relation PureTypeList (TypeList))

(PureBaseType (IntT))
(PureBaseType (BoolT))
(rule ((Base ty)
       (PureBaseType ty))
      ((PureType (Base ty)))
      :ruleset type-analysis)
(rule ((TupleT tylist)
       (PureTypeList tylist))
      ((PureType (TupleT tylist)))
      :ruleset type-analysis)
(rule ((TNil))
      ((PureTypeList (TNil)))
      :ruleset type-analysis)
(rule ((TCons hd tl)
       (PureBaseType hd)
       (PureTypeList tl))
      ((PureTypeList (TCons hd tl)))
      :ruleset type-analysis)

(function ListExpr-length (ListExpr) i64 :no-merge)
(constructor ListExpr-ith (ListExpr i64) Expr :unextractable)
(constructor ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(constructor Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred inputs branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-length (Expr) i64 :no-merge)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)


;; Leading expressions are tuples that are used as a whole
;; during optimization and are matched in the query.
(relation leading-Expr (Expr))
(relation leading-Expr-list (ListExpr))

(rule ((= e (DoWhile inputs pred_out)))
      ((leading-Expr e)
       (leading-Expr inputs)
       (leading-Expr pred_out))
      :ruleset always-run)
(rule ((= e (If cond inputs thn els)))
       ((leading-Expr e)
        (leading-Expr inputs)
        (leading-Expr thn)
        (leading-Expr els))
       :ruleset always-run)
(rule ((= e (Switch pred inputs branch)))
      ((leading-Expr e)
       (leading-Expr-list branch)
       (leading-Expr inputs))
       :ruleset always-run)
(rule ((leading-Expr-list (Cons hd tl)))
      ((leading-Expr hd)
       (leading-Expr-list tl))
      :ruleset always-run)
(rule ((= e (Arg t a)))
      ((leading-Expr e))
      :ruleset always-run)

;; Create a Get for every index, and rewrite it to see through Concat
(rule ((Single expr)) ((union (Get (Single expr) 0) expr)) :ruleset always-run)
;; initial get
(rule ((leading-Expr tuple)
       (> (tuple-length tuple) 0))
      ((Get tuple 0))
      :ruleset always-run)
;; next get
(rule ((leading-Expr tuple)
       (= len (tuple-length tuple))
       (= ith (Get tuple i))
       (< (+ i 1) len)
       )
       ((Get tuple (+ 1 i)))
       :ruleset always-run)

(constructor List-suffix (Expr i64) Expr)
(rule ((Get x i))
      ((union (List-suffix x 0) x))
      :ruleset always-run)
(rule ((= (List-suffix x n) (Concat (Single hd) tl)))
      ((union (List-suffix x (+ n 1)) tl))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Concat (Single e) rest)))
      ((union lhs e))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Single e)))
      ((union lhs e))
      :ruleset always-run)

;; A temporary context.
;; Be sure to delete at the end of all actions or else!!!
;; This is safer than using a persistant context, since we may miss an important part of the query.
(constructor TmpCtx () Assumption)

(rule ((TmpCtx))
  ((panic "TmpCtx should not exist outside rule body"))
  :ruleset always-run)


(ruleset subsume-after-helpers)
;; After running the `saturating` ruleset, these if statements can be subsumed
(relation ToSubsumeIf (Expr Expr Expr Expr))
;; Workaround of https://github.com/egraphs-good/egglog/issues/462
;; Make sure the if we are subsuming is present
(rule ((ToSubsumeIf a b c d)
       (If a b c d))
      ((subsume (If a b c d)))
      :ruleset subsume-after-helpers)

(ruleset add-to-debug-expr)

(ruleset terms)
;; helpers keeps track of the new best extracted terms
(ruleset terms-helpers)
;; helpers-helpers runs `Smaller` rules, resolving the merge function for helpers
(ruleset terms-helpers-helpers)

(sort TermAndCost)
(constructor Smaller (TermAndCost TermAndCost) TermAndCost)

(function ExtractedExpr (Expr) TermAndCost
  :merge (Smaller old new))
;; potential extractions- use so that when the costs are equal, we don't change the term
;; this preserves egglog's timestamp of when the last time ExtractedExpr was changed, fixing a big performance problem
(relation PotentialExtractedExpr (Expr TermAndCost))

(constructor TCPair (Term i64) TermAndCost)

(constructor NoTerm () Term)

;; set extracted expr to default value
(rule ((PotentialExtractedExpr expr termandcost))
      ((set (ExtractedExpr expr) (TCPair (NoTerm) 10000000000000000)))
      :ruleset terms-helpers)

;; set extracted expr to new value as long as not equal
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (= (ExtractedExpr expr) (TCPair oldterm oldcost))
       (< cost oldcost))
      ((set (ExtractedExpr expr) (TCPair term cost)))
      :ruleset terms-helpers)

;; if the cost is negative panic, terms got too big
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (< cost 0))
      ((panic "Negative cost"))
      :ruleset terms-helpers)

;; Resolve Smaller
(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (< cost1 cost2)
      )
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)

(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (> cost1 cost2) 
      )
      ((union lhs (TCPair t2 cost2)))
      :ruleset terms-helpers-helpers)


(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (= cost1 cost2) 
      )
      ;; arbitrarily pick first one
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)


; Compute smallest Expr bottom-up
(rule ((= lhs (Const c ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermConst c) 1)))
      :ruleset terms)

(rule ((= lhs (Arg ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermArg) 1)))
      :ruleset terms)

(rule (
        (= lhs (Bop o e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermBop o t1 t2) (+ 1 (+ c1 c2)))))
      :ruleset terms)

(rule (
        (= lhs (Top o e1 e2 e3))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (= (TCPair t3 c3) (ExtractedExpr e3))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermTop o t1 t2 t3) (+ (+ 1 c1) (+ c2 c3)))))
      :ruleset terms)

(rule (
        (= lhs (Uop o e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermUop o t1) (+ 1 c1))))
      :ruleset terms)

(rule (
        (= lhs (Get tup i))
        (= (TCPair t1 c1) (ExtractedExpr tup))
      )
      ; cost of the get is the same as the  cost of the whole tuple
      ((PotentialExtractedExpr lhs (TCPair (TermGet t1 i) c1)))
      :ruleset terms)

; todo Alloc

; todo Call

(rule (
        (= lhs (Single e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ; cost of single is same as cost of the element
      ((PotentialExtractedExpr lhs (TCPair (TermSingle t1) c1)))
      :ruleset terms)

(rule (
        (= lhs (Concat e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ; cost of concat is sum of the costs
      ((PotentialExtractedExpr lhs (TCPair (TermConcat t1 t2) (+ c1 c2))))
      :ruleset terms)


; todo Control flow - not sure if needed
; (rule (
;         (= lhs (If pred inputs thn els))
;         (= (TCPair t1 c1) (ExtractedExpr pred))
;         (= (TCPair t2 c2) (ExtractedExpr inputs))
;         (= (TCPair t3 c3) (ExtractedExpr thn))
;         (= (TCPair t4 c4) (ExtractedExpr els))
;       )
;       ; cost of if is 10 + cost of pred + cost of input + max of branch costs
;       ((PotentialExtractedExpr lhs (TCPair (TermIf t1 t2 t3 t4) (+ 10 (+ (+ c1 c2) (max c3 c4))))))
;       :ruleset terms)

(sort Node)
;; store a particular if node for later
;; stored as the if eclass, pred, inputs, then, else
(constructor IfNode (Expr Expr Expr Expr Expr) Node)

(relation ExprIsValid (Expr))
(relation ListExprIsValid (ListExpr))
(rule ((ExprIsValid (Function _name _tyin _tyout _out))) ((ExprIsValid _out)) :ruleset always-run)
(rule ((ExprIsValid (Top _op _x _y _z))) ((ExprIsValid _x)
(ExprIsValid _y)
(ExprIsValid _z)) :ruleset always-run)
(rule ((ExprIsValid (Bop _op _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Uop _op _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Get _tup _i))) ((ExprIsValid _tup)) :ruleset always-run)
(rule ((ExprIsValid (Concat _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Single _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Switch _pred _inputs _branches))) ((ExprIsValid _pred)
(ExprIsValid _inputs)
(ListExprIsValid _branches)) :ruleset always-run)
(rule ((ExprIsValid (If _pred _input _then _else))) ((ExprIsValid _pred)
(ExprIsValid _input)
(ExprIsValid _then)
(ExprIsValid _else)) :ruleset always-run)
(rule ((ExprIsValid (DoWhile _in _pred-and-output))) ((ExprIsValid _in)
(ExprIsValid _pred-and-output)) :ruleset always-run)
(rule ((ExprIsValid (Call _func _arg))) ((ExprIsValid _arg)) :ruleset always-run)
(rule ((ListExprIsValid (Cons _hd _tl))) ((ExprIsValid _hd)
(ListExprIsValid _tl)) :ruleset always-run)
(rule ((ExprIsValid (Alloc _id _e _state _ty))) ((ExprIsValid _e)
(ExprIsValid _state)) :ruleset always-run)
(relation ExprIsResolved (Expr))
(relation ListExprIsResolved (ListExpr))
(rule ((= lhs (Function _name _tyin _tyout _out)) (ExprIsResolved _out)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Const _n _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Top _op _x _y _z)) (ExprIsResolved _x)
(ExprIsResolved _y)
(ExprIsResolved _z)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Bop _op _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Uop _op _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Get _tup _i)) (ExprIsResolved _tup)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Concat _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Single _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Switch _pred _inputs _branches)) (ExprIsResolved _pred)
(ExprIsResolved _inputs)
(ListExprIsResolved _branches)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (If _pred _input _then _else)) (ExprIsResolved _pred)
(ExprIsResolved _input)
(ExprIsResolved _then)
(ExprIsResolved _else)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (DoWhile _in _pred-and-output)) (ExprIsResolved _in)
(ExprIsResolved _pred-and-output)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Arg _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Call _func _arg)) (ExprIsResolved _arg)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Empty _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Cons _hd _tl)) (ExprIsResolved _hd)
(ListExprIsResolved _tl)) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Nil)) ) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Alloc _id _e _state _ty)) (ExprIsResolved _e)
(ExprIsResolved _state)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(relation BodyContainsExpr (Expr Expr))
(relation BodyContainsListExpr (Expr ListExpr))
(rule ((Function _name _tyin _tyout _out)) ((BodyContainsExpr (Function _name _tyin _tyout _out) _out)) :ruleset always-run)
(rule ((If _pred _input _then _else)) ((BodyContainsExpr (If _pred _input _then _else) _then) (BodyContainsExpr (If _pred _input _then _else) _else)) :ruleset always-run)
(rule ((DoWhile _in _pred-and-output)) ((BodyContainsExpr (DoWhile _in _pred-and-output) _pred-and-output)) :ruleset always-run)
(rule ((BodyContainsExpr body (Top _op _x _y _z))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y) (BodyContainsExpr body _z)) :ruleset always-run)
(rule ((BodyContainsExpr body (Bop _op _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Uop _op _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Get _tup _i))) ((BodyContainsExpr body _tup)) :ruleset always-run)
(rule ((BodyContainsExpr body (Concat _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Single _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Switch _pred _inputs _branches))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _inputs)) :ruleset always-run)
(rule ((BodyContainsExpr body (If _pred _input _then _else))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _input)) :ruleset always-run)
(rule ((BodyContainsExpr body (DoWhile _in _pred-and-output))) ((BodyContainsExpr body _in)) :ruleset always-run)
(rule ((BodyContainsExpr body (Call _func _arg))) ((BodyContainsExpr body _arg)) :ruleset always-run)
(rule ((BodyContainsListExpr body (Cons _hd _tl))) ((BodyContainsExpr body _hd)) :ruleset always-run)
(rule ((BodyContainsExpr body (Alloc _id _e _state _ty))) ((BodyContainsExpr body _e) (BodyContainsExpr body _state)) :ruleset always-run)
(relation ExprIsPure (Expr))
(relation ListExprIsPure (ListExpr))
(relation BinaryOpIsPure (BinaryOp))
(relation UnaryOpIsPure (UnaryOp))
(relation TernaryOpIsPure (TernaryOp))
(TernaryOpIsPure (Select))
(BinaryOpIsPure (Add))
(BinaryOpIsPure (Sub))
(BinaryOpIsPure (Mul))
(BinaryOpIsPure (Div))
(BinaryOpIsPure (Eq))
(BinaryOpIsPure (LessThan))
(BinaryOpIsPure (GreaterThan))
(BinaryOpIsPure (LessEq))
(BinaryOpIsPure (GreaterEq))
(BinaryOpIsPure (Smax))
(BinaryOpIsPure (Smin))
(BinaryOpIsPure (Shl))
(BinaryOpIsPure (Shr))
(BinaryOpIsPure (FAdd))
(BinaryOpIsPure (FSub))
(BinaryOpIsPure (FMul))
(BinaryOpIsPure (FDiv))
(BinaryOpIsPure (FEq))
(BinaryOpIsPure (FLessThan))
(BinaryOpIsPure (FGreaterThan))
(BinaryOpIsPure (FLessEq))
(BinaryOpIsPure (FGreaterEq))
(BinaryOpIsPure (Fmax))
(BinaryOpIsPure (Fmin))
(BinaryOpIsPure (And))
(BinaryOpIsPure (Or))
(BinaryOpIsPure (PtrAdd))
(BinaryOpIsPure (Bitand))
(UnaryOpIsPure (Not))
(UnaryOpIsPure (Abs))
(UnaryOpIsPure (Neg))

(rule ((Function _name _tyin _tyout _out) (ExprIsPure _out))
        ((ExprIsPure (Function _name _tyin _tyout _out)))
        :ruleset always-run)

(rule ((Const _n _ty _ctx))
        ((ExprIsPure (Const _n _ty _ctx)))
        :ruleset always-run)

(rule ((Top _op _x _y _z) (TernaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y) (ExprIsPure _z))
        ((ExprIsPure (Top _op _x _y _z)))
        :ruleset always-run)

(rule ((Bop _op _x _y) (BinaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Bop _op _x _y)))
        :ruleset always-run)

(rule ((Uop _op _x) (UnaryOpIsPure _op) (ExprIsPure _x))
        ((ExprIsPure (Uop _op _x)))
        :ruleset always-run)

(rule ((Get _tup _i) (ExprIsPure _tup))
        ((ExprIsPure (Get _tup _i)))
        :ruleset always-run)

(rule (
        (= lhs (Get (Arg (TupleT tylist) _ctx) i))
        (!= (TypeList-ith tylist i) (StateT))
      )
      ((ExprIsPure lhs))
      :ruleset always-run)

(rule ((Concat _x _y) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Concat _x _y)))
        :ruleset always-run)

(rule ((Single _x) (ExprIsPure _x))
        ((ExprIsPure (Single _x)))
        :ruleset always-run)

(rule ((Switch _pred _inputs _branches) (ExprIsPure _pred) (ExprIsPure _inputs) (ListExprIsPure _branches))
        ((ExprIsPure (Switch _pred _inputs _branches)))
        :ruleset always-run)

(rule ((If _pred _input _then _else) (ExprIsPure _pred) (ExprIsPure _input) (ExprIsPure _then) (ExprIsPure _else))
        ((ExprIsPure (If _pred _input _then _else)))
        :ruleset always-run)

(rule ((DoWhile _in _pred-and-output) (ExprIsPure _in) (ExprIsPure _pred-and-output))
        ((ExprIsPure (DoWhile _in _pred-and-output)))
        :ruleset always-run)

; state edge is not pure!
; (rule ((Arg _ty _ctx))
;         ((ExprIsPure (Arg _ty _ctx)))
;         :ruleset always-run)

(rule ((Call _f _arg) (ExprIsPure _arg) (ExprIsPure (Function _f inty outty out)))
        ((ExprIsPure (Call _f _arg)))
        :ruleset always-run)

(rule ((Empty _ty _ctx))
        ((ExprIsPure (Empty _ty _ctx)))
        :ruleset always-run)

(rule ((Cons _hd _tl) (ExprIsPure _hd) (ListExprIsPure _tl))
        ((ListExprIsPure (Cons _hd _tl)))
        :ruleset always-run)

(rule ((Nil))
        ((ListExprIsPure (Nil)))
        :ruleset always-run)
; This file provides AddContext, a helpers that copies a sub-egraph into
; a new one with a new context.
; Users of AddContext can specify how deeply to do this copy.


(ruleset context)

(constructor AddContext (Assumption Expr) Expr :unextractable)
(constructor AddContextList (Assumption ListExpr) ListExpr :unextractable)

;; ################################ saturation

;; Adding context a second time does nothing, so union
(rule
  ((= lhs (AddContext ctx inner))
   (= inner (AddContext ctx expr)))
  ((union lhs inner))
  :ruleset context)


;; ############################## Base cases- leaf nodes

;; replace existing contexts that are around leaf nodes
;; AddContext assumes the new context is more specific than the old one
(rule ((= lhs (AddContext ctx (Arg ty oldctx))))
      ((union lhs (Arg ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Const c ty oldctx))))
      ((union lhs (Const c ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Empty ty oldctx))))
      ((union lhs (Empty ty ctx)))
      :ruleset context)




;; ######################################### Operators
(rewrite (AddContext ctx (Top op c1 c2 c3))
         (Top op
           (AddContext ctx c1)
           (AddContext ctx c2)
           (AddContext ctx c3))
               :ruleset context)
(rewrite (AddContext ctx (Bop op c1 c2))
         (Bop op
           (AddContext ctx c1)
           (AddContext ctx c2))
               :ruleset context)
(rewrite (AddContext ctx (Uop op c1))
         (Uop op (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Get c1 index))
         (Get (AddContext ctx c1) index)
               :ruleset context)
(rewrite (AddContext ctx (Alloc id c1 state ty))
         (Alloc id (AddContext ctx c1) (AddContext ctx state) ty)
         :ruleset context)
(rewrite (AddContext ctx (Call name c1))
         (Call name (AddContext ctx c1))
         :ruleset context)

(rewrite (AddContext ctx (Single c1))
         (Single (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Concat c1 c2))
         (Concat
           (AddContext ctx c1)
           (AddContext ctx c2))
         :ruleset context)

;; ################################### List operators

(rewrite (AddContextList ctx (Nil))
         (Nil)
         :ruleset context)

(rewrite (AddContextList ctx (Cons c1 rest))
         (Cons (AddContext ctx c1)
               (AddContextList ctx rest))
               :ruleset context)


;; ########################################## Control flow
(rewrite (AddContext ctx (Switch pred inputs branches))
         (Switch (AddContext ctx pred)
                 (AddContext ctx inputs)
                 branches)
         :ruleset context)

;; For stop at region, still add context to inputs
(rule ((= lhs (AddContext ctx (If pred inputs c1 c2))))
      ((union lhs
         (If (AddContext ctx pred)
             (AddContext ctx inputs)
             c1
             c2)))
       :ruleset context)


;; For stop at loop, still add context to inputs
(rule ((= lhs (AddContext ctx (DoWhile inputs outputs))))
      ((union lhs
        (DoWhile
          (AddContext ctx inputs)
          outputs)))
       :ruleset context)


(ruleset term-subst)


; Instantiate the term as an Expr in the provided context
; where references to (Arg) in the term are replaced by Expr
(constructor TermSubst (Assumption Expr Term) Expr :unextractable)

; type rule to get the arg type of a substitution
(rule (
        (= lhs (TermSubst ctx e1 term))
        (HasArgType e1 ty)       
      )
      ((HasArgType lhs ty))
      :ruleset term-subst)


; leaf node
; replace the context
(rule ((= lhs (TermSubst ctx e (TermArg))))
      ((union lhs (AddContext ctx e)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConst c)))
       (HasArgType e newty))
      ((union lhs (Const c newty ctx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermEmpty)))
       (HasArgType e newty))
      ((union lhs (Empty newty ctx)))
      :ruleset term-subst)

; Operators
(rule ((= lhs (TermSubst ctx e (TermTop op t1 t2 t3))))
      ((union lhs (Top op (TermSubst ctx e t1)
                          (TermSubst ctx e t2)
                          (TermSubst ctx e t3))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermBop op t1 t2))))
      ((union lhs (Bop op (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermUop op t1))))
      ((union lhs (Uop op (TermSubst ctx e t1))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermGet t idx))))
      ((union lhs (Get (TermSubst ctx e t) idx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermAlloc id t1 t2 ty))))
      ((union lhs (Alloc id (TermSubst ctx e t1)
                            (TermSubst ctx e t2)
                            ty)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermCall name t))))
      ((union lhs (Call name (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermSingle t))))
      ((union lhs (Single (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConcat t1 t2))))
      ((union lhs (Concat (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

; Control Flow
; TODO
;; Substitution rules allow for substituting some new expression for the argument
;; in some new context.
;; It performs the substitution, copying over the equalities from the original eclass.
;; It only places context on the leaf nodes.

(ruleset subst)
(ruleset apply-subst-unions)

;; (Subst assumption to in) substitutes `to` for `(Arg ty)` in `in`.
;; It also replaces the leaf context in `to` with `assumption` using `AddContext`.
;; `assumption` *justifies* this substitution, as the context that the result is used in.
;; In other words, it must refine the equivalence relation of `in` with `to` as the argument.
(constructor Subst (Assumption Expr Expr) Expr :unextractable)

;; Used to delay unions for the subst ruleset.
;; This is necessary because substitution may not terminate if it can
;; observe its own results- it may create infinitly large terms.
;; Instead, we phase substitution by delaying resulting unions in this table.
;; After applying this table, substitutions and this table are cleared.
(constructor DelayedSubstUnion (Expr Expr) Expr :unextractable)

;; add a type rule to get the arg type of a substitution
;; this enables nested substitutions
(rule ((= lhs (Subst assum to in))
       (HasArgType to ty))
      ((HasArgType lhs ty))
      :ruleset subst)

;; Substitution typechecks only when the type of the
;; argument matches the type of the substitution.
(rule ((Subst assum to in)
       (HasArgType in ty)
       (HasType to ty2)
       (!= ty ty2)
       ;; tmptype disables typechecking
       (!= ty (TmpType))
       (!= ty2 (TmpType)))
      (
       (panic "Substitution type mismatch! Argument type must match type of substituted term"))
       :ruleset subst)


;; leaf node with context
;; replace this context- subst assumes the context is more specific
(rule ((= lhs (Subst assum to e))
       (= e (Arg _ty _oldctx))
       )
      ;; add the assumption `to`
      ((DelayedSubstUnion lhs (AddContext assum to))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Const c _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Const c newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Empty _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Empty newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)

;; Operators
(rule ((= e (Top op c1 c2 c3))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Top op (Subst assum to c1)
                 (Subst assum to c2)
                 (Subst assum to c3)))
       (subsume (Subst assum to e)))
         :ruleset subst)

(rule ((= e (Bop op c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Bop op (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Uop op c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Uop op (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)    

(rule ((= e (Get c1 index))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Get (Subst assum to c1) index))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Alloc id c1 c2 ty))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Alloc id (Subst assum to c1)
                   (Subst assum to c2)
                   ty))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Call name c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Call name (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)


;; Tuple operators
(rule ((= e (Single c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Single (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Concat c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Concat (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)

;; Control flow
(rule ((= lhs (Subst assum to inner))
       (= inner (Switch pred inputs c1))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (Switch (Subst assum to pred)
                 (Subst assum to inputs)
                 c1))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= lhs (Subst assum to inner))
       (= inner (If pred inputs c1 c2))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (If (Subst assum to pred)
             (Subst assum to inputs)
             c1
             c2))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= e (DoWhile in out))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (DoWhile (Subst assum to in)
                  out))
       (subsume (Subst assum to e)))
      :ruleset subst)

;; substitute into function (convenience for testing)
(rewrite (Subst assum to (Function name inty outty body))
         (Function name inty outty (Subst assum to body))
         :when ((ExprIsResolved body))
         :ruleset subst)



;; ########################### Apply subst unions

(rule ((DelayedSubstUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-subst-unions)

; We only have context for Exprs, not ListExprs.
(relation ContextOf (Expr Assumption))

(rule ((Arg ty ctx))
      ((ContextOf (Arg ty ctx) ctx))
      :ruleset always-run)
(rule ((Const c ty ctx))
      ((ContextOf (Const c ty ctx) ctx))
      :ruleset always-run)
(rule ((Empty ty ctx))
      ((ContextOf (Empty ty ctx) ctx))
        :ruleset always-run)

; Error checking - each expr should only have a single context
(rule ((ContextOf x ctx1)
       (ContextOf x ctx2)
       (!= ctx1 ctx2))
     (
         (panic "Equivalent expressions have nonequivalent context, breaking the single context invariant.")
     )
     :ruleset error-checking)


(rule ((Top op x y z) (ContextOf x ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf y ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf z ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf x ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf y ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Uop op x) (ContextOf x ctx))
    ((ContextOf (Uop op x) ctx)) :ruleset always-run)

(rule ((Get tup i) (ContextOf tup ctx))
    ((ContextOf (Get tup i) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf x ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf y ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Single x) (ContextOf x ctx))
    ((ContextOf (Single x) ctx)) :ruleset always-run)

(rule ((Switch pred inputs branches) (ContextOf pred ctx))
    ((ContextOf (Switch pred inputs branches) ctx)) :ruleset always-run)

(rule ((If pred inputs then else) (ContextOf pred ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((If pred inputs then else) (ContextOf inputs ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((DoWhile in pred-and-output) (ContextOf in ctx))
    ((ContextOf (DoWhile in pred-and-output) ctx)) :ruleset always-run)

(rule ((Call func arg) (ContextOf arg ctx))
    ((ContextOf (Call func arg) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf e ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf state ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(ruleset canon)

; Commutativity
(rewrite (Bop (Add) x y) (Bop (Add) y x) :ruleset canon)
(rewrite (Bop (Mul) x y) (Bop (Mul) y x) :ruleset canon)
(rewrite (Bop (Eq) x y) (Bop (Eq) y x) :ruleset canon)
(rewrite (Bop (And) x y) (Bop (And) y x) :ruleset canon)
(rewrite (Bop (Or) x y) (Bop (Or) y x) :ruleset canon)

; Canonicalize to <
; x > y ==> y < x
(rewrite (Bop (GreaterThan) x y) (Bop (LessThan) y x) :ruleset canon)

; x >= y ==> y < x + 1
; x >= y ==> y - 1 < x
(rule (
        (= lhs (Bop (GreaterEq) x y))
        (HasArgType x ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) y (Bop (Add) x (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) y (Const (Int 1) ty ctx)) x))
      )
      :ruleset canon)

; x <= y ==> x < y + 1
; x <= y ==> x - 1 < y
(rule (
        (= lhs (Bop (LessEq) x y))
        (HasArgType y ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) x (Bop (Add) y (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) x (Const (Int 1) ty ctx)) y))
      )
      :ruleset canon)


; Make Concats right-deep
(rewrite (Concat (Concat a b) c)
         (Concat a (Concat b c))
         :ruleset always-run)
; Simplify Concat's with empty
(rewrite (Concat (Empty ty ctx) x)
         x
         :ruleset always-run)
(rewrite (Concat x (Empty ty ctx))
         x
         :ruleset always-run)

; Make a tuple that is a sub-range of another tuple
;                   tuple start len
(constructor SubTuple (Expr  i64   i64) Expr :unextractable)

(rewrite (SubTuple expr x 0)
         (Empty ty ctx)
         :when ((HasArgType expr ty) (ContextOf expr ctx))
         :ruleset always-run)

(rewrite (SubTuple expr x 1)
         (Single (Get expr x))
         :ruleset always-run)

(rewrite (SubTuple expr a b)
         (Concat (Single (Get expr a)) (SubTuple expr (+ a 1) (- b 1)))
         :when ((> b 1))
         :ruleset always-run)

; Some of our rules (like ivt.egg) match on `Concat`.
; These may be missing if a tuple is used directly (i.e. (DoWhile inputs (If pred thn else))).
; So add these concats for every region in the database
(rule ((= lhs (DoWhile inputs body))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (If pred inputs thn els))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Switch pred inputs bodies))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Arg ty ctx))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)

; Also figure out what existing expressions are subtuples of other things
; this helps remove concat layers
(rule ((Get expr i))
      ((union (Single (Get expr i))
              (SubTuple expr i 1)))
      :ruleset always-run)

(rewrite (Concat (SubTuple expr a b)
                 (SubTuple expr (+ a b) c))
         (SubTuple expr a (+ b c))
         :ruleset always-run)
;; a subtuple which is the entire tuple is the tuple itself
;; this removes unecessary layers of concat
(rewrite (SubTuple expr 0 len)
         expr
         :when ((= len (tuple-length expr)))
         :ruleset always-run)

; Helper functions to remove one element from a tuple or type list
;                           tuple    idx
(constructor TupleRemoveAt    (Expr     i64) Expr     :unextractable)
(rewrite (TupleRemoveAt tuple idx)
         (Concat (SubTuple tuple 0 idx)
                 (SubTuple tuple (+ idx 1) (- len (+ idx 1))))
         :when ((= len (tuple-length tuple)))
         :ruleset always-run)
(rule ((TupleRemoveAt tuple idx)
       (= len (tuple-length tuple))
       (>= idx len))
      ((panic "Index out of bounds for TupleRemoveAt")) :ruleset always-run)

(constructor TypeListRemoveAt (TypeList i64) TypeList :unextractable)
(rule ((TypeListRemoveAt (TNil) _idx))
      ((panic "Index out of bounds for TypeListRemoveAt.")) :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) 0)
         xs
         :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) idx)
         (TCons x (TypeListRemoveAt xs (- idx 1)))
         :when ((> idx 0))
         :ruleset type-helpers)

;; Compute the tree size of program, not dag size
(function Expr-size (Expr) i64 :merge (min old new) )
(function ListExpr-size (ListExpr) i64 :merge (min old new))

(rule ((= expr (Function name tyin tyout out)) 
       (= sum (Expr-size out))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Const n ty assum))) 
      ((set (Expr-size expr) 1))  :ruleset always-run)

(rule ((= expr (Top op x y z))
       (= sum (+ (Expr-size z) (+ (Expr-size y) (Expr-size x)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Bop op x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Uop op x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Get tup i)) 
       (= sum (Expr-size tup))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Concat x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Single x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Switch pred inputs branches)) 
       (= sum  (+ (Expr-size inputs) (+ (ListExpr-size branches) (Expr-size pred)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (If pred inputs then else)) 
       (= sum (+ (Expr-size inputs) (+ (Expr-size else) (+ (Expr-size then) (Expr-size pred))))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (DoWhile in pred-and-output)) 
       (= sum (+ (Expr-size pred-and-output) (Expr-size in)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Arg ty assum))) 
      ((set (Expr-size expr) 1)) :ruleset always-run)

(rule ((= expr (Call func arg)) 
       (= sum (Expr-size arg))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((Empty ty assum)) ((set (Expr-size (Empty ty assum)) 0))  :ruleset always-run)

(rule ((= expr (Cons hd tl)) 
       (= sum (+ (ListExpr-size tl) (Expr-size hd)))) 
      ((set (ListExpr-size expr) sum)) :ruleset always-run)

(rule ((Nil)) 
      ((set (ListExpr-size (Nil)) 0))  :ruleset always-run)

(rule ((= expr (Alloc id e state ty)) ;; do state edge's expr should be counted?
        (= sum (Expr-size e))) 
        ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

;; Like Subst but for dropping inputs to a region
;; See subst.egg for more implementation documentation

(ruleset drop)
(ruleset apply-drop-unions)
(ruleset cleanup-drop)

;; (DropAt ctx idx in) removes all references to `(Get (Arg ...) idx)` in `in`.
;; It also replaces the leaf contexts with `ctx` and fixes up argument types,
;; as well as updating `(Get (Arg ...) j)` to `(Get (Arg ...) (- j 1))` for j > idx.
(constructor DropAt (Assumption i64 Expr) Expr :unextractable)
(constructor DelayedDropUnion (Expr Expr) Expr :unextractable)

;; Helper that precomputes the arg type that we need
(constructor DropAtInternal (Type Assumption i64 Expr) Expr :unextractable)
(rule ((= lhs (DropAt ctx idx in))
       (HasArgType in (TupleT oldty)))

      ((let newty (TupleT (TypeListRemoveAt oldty idx)))
       (union lhs (DropAtInternal newty ctx idx in)))
      :ruleset drop)

;; Leaves
(rule ((= lhs (DropAtInternal newty newctx idx (Const c oldty oldctx))))
      ((DelayedDropUnion lhs (Const c newty newctx)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Empty oldty oldctx))))
      ((DelayedDropUnion lhs (Empty newty newctx)))
      :ruleset drop)
; get stuck on purpose if `i = idx` or if we find a bare `Arg`
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (< i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) i)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (> i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) (- i 1))))
      :ruleset drop)

;; Operators
(rule ((= lhs (DropAtInternal newty newctx idx (Top op c1 c2 c3)))
       (ExprIsResolved (Top op c1 c2 c3)))
      ((DelayedDropUnion lhs (Top op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            (DropAtInternal newty newctx idx c3))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Bop op c1 c2)))
       (ExprIsResolved (Bop op c1 c2)))
      ((DelayedDropUnion lhs (Bop op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Uop op c1)))
       (ExprIsResolved (Uop op c1)))
      ((DelayedDropUnion lhs (Uop op
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; this is okay because we get stuck at `Arg`s
(rule ((= lhs (DropAtInternal newty newctx idx (Get c1 index)))
       (ExprIsResolved (Get c1 index)))
      ((DelayedDropUnion lhs (Get
            (DropAtInternal newty newctx idx c1)
            index)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Alloc id c1 c2 ty)))
       (ExprIsResolved (Alloc id c1 c2 ty)))
      ((DelayedDropUnion lhs (Alloc id
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            ty)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Call name c1)))
       (ExprIsResolved (Call name c1)))
      ((DelayedDropUnion lhs (Call name
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; Tuple operators
(rule ((= lhs (DropAtInternal newty newctx idx (Single c1)))
       (ExprIsResolved (Single c1)))
      ((DelayedDropUnion lhs (Single
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Concat c1 c2)))
       (ExprIsResolved (Concat c1 c2)))
      ((DelayedDropUnion lhs (Concat
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

;; Control flow
(rule ((= lhs (DropAtInternal newty newctx idx (Switch pred inputs c1)))
       (ExprIsResolved (Switch pred inputs c1)))
      ((DelayedDropUnion lhs (Switch
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (If pred inputs c1 c2)))
       (ExprIsResolved (If pred inputs c1 c2)))
      ((DelayedDropUnion lhs (If
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1
            c2)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (DoWhile in out)))
       (ExprIsResolved (DoWhile in out)))
      ((DelayedDropUnion lhs (DoWhile
            (DropAtInternal newty newctx idx in)
            out)))
      :ruleset drop)

(rewrite (DropAtInternal newty newctx idx (Function name inty outty body))
         (Function name inty outty (DropAtInternal newty newctx idx body))
         :when ((ExprIsResolved body))
         :ruleset drop)



;; ########################### Apply drop unions

(rule ((DelayedDropUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-drop-unions)

;; ########################### Cleanup Dropat, DropAtInternal and DelayedDropUnion

(rule ((ExprIsResolved (DropAt newctx idx in)))
      ((subsume (DropAt newctx idx in)))
      :ruleset cleanup-drop)

(rule ((ExprIsResolved (DropAtInternal newty newctx idx in)))
      ((subsume (DropAtInternal newty newctx idx in)))
      :ruleset cleanup-drop)

(rule ((DelayedDropUnion lhs rhs))
      ((subsume (DelayedDropUnion lhs rhs)))
      :ruleset cleanup-drop)

(ruleset interval-analysis)
(ruleset interval-rewrite)

(datatype Bound
  (IntB i64)
  (BoolB bool)
  (Dead) ;; a bound on dead code, so any value can be chosen
  (bound-max Bound Bound)
  (bound-min Bound Bound))

; bound tables
(function lo-bound (Expr) Bound :merge (bound-max old new))
(function hi-bound (Expr) Bound :merge (bound-min old new))

; if lo > hi, we have proven that this code is dead (as long as all our rules are sound)
; In this case, interval analysis might start going crazy and fail to saturate
; So we immediately set the bounds to (Dead)
(rule (
         (= (IntB lo) (lo-bound expr))
         (= (IntB hi) (hi-bound expr))
         (> lo hi)
       ) 
       ((set (lo-bound expr) (Dead))
        (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)
(rule (
      (= (BoolB true) (lo-bound expr))
      (= (BoolB false) (hi-bound expr))
      ) 
      ((set (lo-bound expr) (Dead))
       (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)

; combinators
(rewrite (bound-max (IntB x) (IntB y))
         (IntB (max x y))
         :ruleset interval-analysis)
(rewrite (bound-min (IntB x) (IntB y))
         (IntB (min x y))
         :ruleset interval-analysis)
(rewrite (bound-max (BoolB x) (BoolB y))
         (BoolB (or x y))
         :ruleset interval-analysis)
(rewrite (bound-min (BoolB x) (BoolB y))
         (BoolB (and x y))
         :ruleset interval-analysis)
(rewrite (bound-max (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-max anything (Dead))
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min anything (Dead))
         (Dead)
         :ruleset interval-analysis)

; =================================
; Constants
; =================================
(rule ((= lhs (Const (Int x) ty ctx)))
      (
        (set (lo-bound lhs) (IntB x))
        (set (hi-bound lhs) (IntB x))
      )
      :ruleset interval-analysis)

(rule ((= lhs (Const (Bool x) ty ctx)))
      (
        (set (lo-bound lhs) (BoolB x))
        (set (hi-bound lhs) (BoolB x))
      )
      :ruleset interval-analysis)

; =================================
; Constant Folding
; =================================
(rule (
       (= (IntB x) (lo-bound expr))
       (= (IntB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Int x) ty ctx)))
      :ruleset interval-analysis)

(rule (
       (= (BoolB x) (lo-bound expr))
       (= (BoolB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool x) ty ctx)))
      :ruleset interval-analysis)

; lower bound being true means the bool must be true
(rule (
       (= (BoolB true) (lo-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool true) ty ctx)))
      :ruleset interval-analysis)

; upper bound being false means the bool must be false
(rule (
       (= (BoolB false) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool false) ty ctx)))
      :ruleset interval-analysis)

; =================================
; Arithmetic
; =================================
; + a b interval is (+ la lb) (+ ha hb)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (lo-bound lhs) (IntB (+ la lb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (IntB (+ ha hb))))
      :ruleset interval-analysis)

; - a b interval is (- la hb) (- ha lb)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (lo-bound lhs) (IntB (- la hb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (hi-bound lhs) (IntB (- ha lb))))
      :ruleset interval-analysis)

; Multiplication for two constants
; TODO: Make fancier interval analysis
(rule (
       (= lhs (Bop (Mul) a b))
       (= (IntB x) (lo-bound a))
       (= (IntB x) (hi-bound a))
       (= (IntB y) (lo-bound b))
       (= (IntB y) (hi-bound b))
      )
      (
       (set (lo-bound lhs) (IntB (* x y)))
       (set (hi-bound lhs) (IntB (* x y)))
      )
      :ruleset interval-analysis)

; negative * negative is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (< hi-x 0)
        (< hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; negative * positive is negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (< hi-x 0) ; x < 0 (x is negative)
        (> lo-y 0) ; y > 0 (y is positive)
      )
      ((set (hi-bound lhs) (IntB -1)))
      :ruleset interval-analysis)

; positive * positive is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (> lo-x 0)
        (> lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; non-positive * non-positive is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (<= hi-x 0)
        (<= hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-positive * non-negative is non-positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (<= hi-x 0) ; x <= 0 (x is non-positive)
        (>= lo-y 0) ; y >= 0 (y is non-negative)
      )
      ((set (hi-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-negative * non-negative is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (>= lo-x 0)
        (>= lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; < a b interval is (< ha lb) (< la hb)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (BoolB (bool-< ha lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (BoolB (bool-< la hb))))
      :ruleset interval-analysis)

; Abs
; abs(x) = x if x >= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB lx) (lo-bound x))
        (>= lx 0)
      )
      ((union lhs x))
      :ruleset interval-rewrite)

; abs(x) = -x if x <= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB hx) (hi-bound x))
        (<= hx 0)
        (HasArgType lhs ty)
        (ContextOf lhs ctx)
      )
      ((union lhs (Bop (Sub) (Const (Int 0) ty ctx) x)))
      :ruleset interval-rewrite)

; =================================
; Conditionals
; =================================
; if the predicate is true, merge with then branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB true) (lo-bound cond))
      )
      ((union lhs (Subst if_ctx inputs thn)))
      :ruleset interval-rewrite)

; if the predicate is false, merge with else branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB false) (hi-bound cond))
      )
      ((union lhs (Subst if_ctx inputs els)))
      :ruleset interval-rewrite)

; lo-bound of If is the min of the lower bounds
; hi-bound of If is the max of the upper bounds
(rule (
        (= lhs (If cond inputs thn els))
        (= lo-thn (lo-bound thn))
        (= lo-els (lo-bound els))
      )
      ((set (lo-bound lhs) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound thn))
       (= hi-els (hi-bound els))
      )
      ((set (hi-bound lhs) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; Same rules, but for Ifs that have multiple outputs
(rule (
        (= lhs (If pred inputs thn els))
        (= lo-thn (lo-bound (Get thn i)))
        (= lo-els (lo-bound (Get els i)))
      )
      ((set (lo-bound (Get lhs i)) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound (Get thn i)))
       (= hi-els (hi-bound (Get els i)))
      )
      ((set (hi-bound (Get lhs i)) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; If the If takes a tuple
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was true, so we know expr is at most (hi-bound value) - 1
      ((set (hi-bound (Get ctx i)) (IntB (- v 1))))
      :ruleset interval-analysis)
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was false, so we know expr is at least (lo-bound value)
      ((set (lo-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was true, so we know expr is at least (lo-bound value) + 1
      ((set (lo-bound (Get ctx i)) (IntB (+ v 1)))) 
      :ruleset interval-analysis)
(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was false, so we know expr is at most (hi-bound value)
      ((set (hi-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

;; Push intervals for inputs into if region
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= lo (lo-bound (Get inputs i)))

      )
      ((set (lo-bound (Get ctx i)) lo))
      :ruleset interval-analysis)
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= hi (hi-bound (Get inputs i)))

      )
      ((set (hi-bound (Get ctx i)) hi))
      :ruleset interval-analysis)

; (if (a == b) thn els)
; in the thn branch, we know that a has the same bounds as b
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx  (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB lo) (lo-bound val))
      )
      ((set (lo-bound (Get ctx i)) (IntB lo)))
      :ruleset interval-analysis)
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB hi) (hi-bound val))
      )
      ((set (hi-bound (Get ctx i)) (IntB hi)))
      :ruleset interval-analysis)


(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       ;; note that some_ctx is not the same as (InLoop inputs outputs)
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (lo-bound (Get inputs ith)))
      )
      (
       (set (lo-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)
(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (hi-bound (Get inputs ith)))
      )
      (
       (set (hi-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)


(ruleset switch_rewrite)
(ruleset always-switch-rewrite)

; if a < b then a else b ~~> (min a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))
      )
      ((union (Get if_e k) (Bop (Smin) a b)))
      :ruleset switch_rewrite)

; if a < b then b else a ~~> (max a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then b else a
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) j))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) i))
      )
      ((union (Get if_e k) (Bop (Smax) a b)))
      :ruleset switch_rewrite) 

; if pred then a else b ~~> (select pred a b)
; where a and b are inputs to the region
(rule (
       (= if_e (If pred inputs thn els))
       (= a (Get inputs i))
       (= b (Get inputs j))

       ; if pred then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))

       ; If i = j, then the arg is just passed through the if, and we
       ; don't need a select. This will get handled by the passthrough rules.
       (!= i j)
       )
       (
       (union (Get if_e k) (Top (Select) pred a b))
       )
       :ruleset switch_rewrite)

(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)
       (= (Get thn i) (Const x _ty (InIf true pred inputs)))
       (= (Get els i) (Const y _ty (InIf false pred inputs)))
      )
      ((union (Get if_e i) (Top (Select) pred (Const x ty ctx) (Const y ty ctx))))
      :ruleset switch_rewrite)

; if pred then A else Const -> select pred A Const
; where A is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       ; input to the if
       (= a (Get inputs i))
       (= (Get thn k) (Get (Arg _ty (InIf true pred inputs)) i))

       (= els_out (Get els k))
       (= (IntB y) (lo-bound els_out))
       (= (IntB y) (hi-bound els_out))
       )
       (
       (union (Get if_e k) (Top (Select) pred a (Const (Int y) ty ctx)))
       )
       :ruleset switch_rewrite
)

; if pred then Const else B -> select pred Const B
; where B is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       (= thn_out (Get thn k))
       (= (IntB y) (lo-bound thn_out))
       (= (IntB y) (hi-bound thn_out))

       ; input to the if
       (= b (Get inputs i))
       (= (Get els k) (Get (Arg _ty (InIf false pred inputs)) i))
      )
      (
       (union (Get if_e k) (Top (Select) pred (Const (Int y) ty ctx) b))
      )
      :ruleset switch_rewrite
)

; if (a and b) X Y ~~> if a (if b X Y) Y
(rule ((= lhs (If (Bop (And) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf true  a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let inner_X (AddContext (InIf true  inner_pred sub_arg_true) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_true) Y))
       (let outer_Y (Subst      (InIf false a          outer_ins) sub_arg_false Y))

       (let inner (If inner_pred sub_arg_true inner_X inner_Y))
       (union lhs (If a          outer_ins    inner   outer_Y)))

       :ruleset switch_rewrite)

; if (a or b) X Y ~~> if a X (if b X Y)
(rule ((= lhs (If (Bop (Or) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf false a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let outer_X (Subst      (InIf true  a          outer_ins) sub_arg_true X))
       (let inner_X (AddContext (InIf true  inner_pred sub_arg_false) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_false) Y))

       (let inner (If inner_pred sub_arg_false inner_X inner_Y))
       (union lhs (If a          outer_ins     outer_X inner  )))

       :ruleset switch_rewrite)

(rewrite (If (Const (Bool true)  ty ctx) ins thn els)
         (Subst ctx ins thn)
         :ruleset always-switch-rewrite)

(rewrite (If (Const (Bool false) ty ctx) ins thn els)
         (Subst ctx ins els)
         :ruleset always-switch-rewrite)

(ruleset select_opt)


;; inlined (Get thn i) makes the query faster ):
(rule
       (
        (= if_e (If pred inputs thn els))

        (ExprIsPure (Get thn i))
        (ExprIsPure (Get els i))
        
        (> 10 (Expr-size (Get thn i))) ; TODO: Tune these size limits
        (> 10 (Expr-size (Get els i)))
        (= (TCPair t1 c1) (ExtractedExpr (Get thn i)))
        (= (TCPair t2 c2) (ExtractedExpr (Get els i)))

        (ContextOf if_e ctx)
       )
       (
        (union (Get if_e i)
               (Top (Select) pred (TermSubst ctx inputs t1) (TermSubst ctx inputs t2)))
       )
       :ruleset select_opt
)
; Simple rewrites that don't do a ton with control flow.

(ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int 0) ty ctx) e) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 0) ty ctx)) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) (Const (Int 1) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 1) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int 0) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Add) e (Const (Int 0) ty ctx) ) e :ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (* i j)) ty ctx) :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (+ i j)) ty ctx) :ruleset peepholes)

(rewrite (Bop (And) (Const (Bool true) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool true) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (And) (Const (Bool false) ty ctx) e) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool false) ty ctx)) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool false) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool false) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool true) ty ctx) e) (Const (Bool true) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool true) ty ctx)) (Const (Bool true) ty ctx) :ruleset peepholes)

(rule (
        (= expr (Bop (Sub) x x))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Const (Int 0) ty ctx)))
      :ruleset peepholes)

; (x - y) + z => x + (z - y)
(rewrite (Bop (Add) (Bop (Sub) x y) z) (Bop (Add) x (Bop (Sub) z y)) :ruleset peepholes)

; (a + b) - c => a + (b - c)
(rewrite (Bop (Sub) (Bop (Add) a b) c) (Bop (Add) a (Bop (Sub) b c)) :ruleset peepholes)

; (a * x) + a => a * (x + 1)
(rule (
        (= expr (Bop (Add) (Bop (Mul) a x) a))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Bop (Mul) a (Bop (Add) x (Const (Int 1) ty ctx)))))
      :ruleset peepholes)

(rewrite (Top (Select) pred x x) x :ruleset peepholes)

; constant fold `(x + const1) + const2` even when x is not constant
(rewrite (Bop (Add) (Bop (Add) x (Const (Int i) ty ctx)) (Const (Int j) ty ctx))
         (Bop (Add) x (Const (Int (+ i j)) ty ctx))
         :ruleset peepholes)

; ptradd(ptradd(p, x), y) => ptradd(p, x + y)
(rewrite (Bop (PtrAdd) (Bop (PtrAdd) p x) y)
         (Bop (PtrAdd) p (Bop (Add) x y))
         :ruleset peepholes)

(datatype IntOrInfinity
    (Infinity)
    (NegInfinity)
    (I i64))

(constructor MaxIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MaxIntOrInfinity (Infinity) _) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity _ (Infinity)) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity (NegInfinity) x) x :ruleset always-run)
(rewrite (MaxIntOrInfinity x (NegInfinity)) x :ruleset always-run)
(rewrite (MaxIntOrInfinity (I x) (I y)) (I (max x y)) :ruleset always-run)

(constructor MinIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MinIntOrInfinity (NegInfinity) _) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity _ (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity (Infinity) x) x :ruleset always-run)
(rewrite (MinIntOrInfinity x (Infinity)) x :ruleset always-run)
(rewrite (MinIntOrInfinity (I x) (I y)) (I (min x y)) :ruleset always-run)

(constructor AddIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (AddIntOrInfinity (Infinity) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (Infinity) (I _)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (I _)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I x) (I y)) (I (+ x y)) :ruleset always-run)

(datatype IntInterval (MkIntInterval IntOrInfinity IntOrInfinity))

(constructor UnionIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (UnionIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MinIntOrInfinity lo1 lo2) (MaxIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor IntersectIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (IntersectIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MaxIntOrInfinity lo1 lo2) (MinIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor AddIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (AddIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (AddIntOrInfinity lo1 lo2)
                        (AddIntOrInfinity hi1 hi2))
         :ruleset always-run)


(datatype List<i64+IntInterval> 
  (Nil-List<i64+IntInterval>)
  (Cons-List<i64+IntInterval> i64 IntInterval List<i64+IntInterval>))

(function Length-List<i64+IntInterval> (List<i64+IntInterval>) i64 :no-merge)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((IsEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(relation IsNonEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((IsNonEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(constructor RevConcat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (RevConcat-List<i64+IntInterval> (Nil-List<i64+IntInterval>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<i64+IntInterval> (Cons-List<i64+IntInterval> hd0 hd1 tl) l)
         (RevConcat-List<i64+IntInterval> tl (Cons-List<i64+IntInterval> hd0 hd1 l))
         :ruleset always-run)

(constructor Rev-List<i64+IntInterval> (List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Rev-List<i64+IntInterval> m)
         (RevConcat-List<i64+IntInterval> m (Nil-List<i64+IntInterval>))
         :ruleset always-run)

(constructor Concat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Concat-List<i64+IntInterval> x y)
         (RevConcat-List<i64+IntInterval> (Rev-List<i64+IntInterval> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<i64+IntInterval> (List<i64+IntInterval>))
(relation SuffixAt-List<i64+IntInterval> (List<i64+IntInterval> i64 List<i64+IntInterval>))
(relation At-List<i64+IntInterval> (List<i64+IntInterval> i64 i64 IntInterval))
(rule ((DemandAt-List<i64+IntInterval> x))
      ((SuffixAt-List<i64+IntInterval> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<i64+IntInterval> x i (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((SuffixAt-List<i64+IntInterval> x (+ i 1) tl)
       (At-List<i64+IntInterval> x i hd0 hd1))
      :ruleset always-run)

(constructor Union-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor UnionHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Union-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (UnionHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; both m1 and m2 empty
  (rewrite (UnionHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)
  ; take from m1 when m2 empty and vice versa
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      res)
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      tl
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      (Nil-List<i64+IntInterval>)
      res)
    (UnionHelper-List<i64+IntInterval>
      tl
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)

  ; when both nonempty and smallest key different, take smaller key
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 l2 (Cons-List<i64+IntInterval> k1 a1 res))))
        :ruleset always-run)
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f
           (UnionHelper-List<i64+IntInterval> l1 tl2 (Cons-List<i64+IntInterval> k2 b1 res))))
        :ruleset always-run)

  ; when shared smallest key, union interval
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 tl2
             (Cons-List<i64+IntInterval> k (UnionIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor Intersect-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor IntersectHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Intersect-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (IntersectHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; m1 or m2 empty
  (rewrite (IntersectHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) m2 res)
           res
           :ruleset always-run)
  (rewrite (IntersectHelper-List<i64+IntInterval> m1 (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)

  ; when both nonempty and smallest key different, drop smaller key
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)

(datatype MyBool (MyTrue) (MyFalse))

(constructor IntIntervalValid (IntInterval) MyBool)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyTrue)
         :when ((<= lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyFalse)
         :when ((> lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (NegInfinity) _))
         (MyTrue)
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval _ (Infinity)))
         (MyTrue)
         :ruleset always-run)

(constructor ConsIfNonEmpty (i64 IntInterval List<i64+IntInterval>)
          List<i64+IntInterval>
          :cost 100)
(rule ((ConsIfNonEmpty k v tl))
      ((IntIntervalValid v))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyTrue) (IntIntervalValid v)))
      ((union f (Cons-List<i64+IntInterval> k v tl)))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyFalse) (IntIntervalValid v)))
      ((union f tl))
      :ruleset always-run)

  ; when shared smallest key, intersect interval
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (IntersectHelper-List<i64+IntInterval> tl1 tl2
             (ConsIfNonEmpty k (IntersectIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor AddIntIntervalToAll (IntInterval List<i64+IntInterval>)
                              List<i64+IntInterval>)
(rewrite (AddIntIntervalToAll _ (Nil-List<i64+IntInterval>))
         (Nil-List<i64+IntInterval>)
         :ruleset always-run)
(rewrite (AddIntIntervalToAll x (Cons-List<i64+IntInterval> allocid offset tl))
         (Cons-List<i64+IntInterval> allocid (AddIntInterval x offset)
           (AddIntIntervalToAll x tl))
         :ruleset always-run)

(datatype PtrPointees
  (PointsTo List<i64+IntInterval>)
  (PointsAnywhere))

(constructor AddIntIntervalToPtrPointees (IntInterval PtrPointees) PtrPointees)
(rewrite (AddIntIntervalToPtrPointees interval (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (AddIntIntervalToPtrPointees interval (PointsTo l))
         (PointsTo (AddIntIntervalToAll interval l))
         :ruleset always-run)

(constructor Union-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Union-PtrPointees (PointsAnywhere) _)
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees _ (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Union-List<i64+IntInterval> x y))
         :ruleset always-run)
(constructor Intersect-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Intersect-PtrPointees (PointsAnywhere) x)
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees x (PointsAnywhere))
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Intersect-List<i64+IntInterval> x y))
         :ruleset always-run)

(relation PointsNowhere-PtrPointees (PtrPointees))
(rule ((= f (PointsTo x))
       (IsEmpty-List<i64+IntInterval> x))
      ((PointsNowhere-PtrPointees f))
      :ruleset always-run)


(datatype List<PtrPointees> 
  (Nil-List<PtrPointees>)
  (Cons-List<PtrPointees> PtrPointees List<PtrPointees>))

(function Length-List<PtrPointees> (List<PtrPointees>) i64 :no-merge)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((IsEmpty-List<PtrPointees> x))
      :ruleset always-run)

(relation IsNonEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Cons-List<PtrPointees> hd0 tl)))
      ((IsNonEmpty-List<PtrPointees> x))
      :ruleset always-run)

(constructor RevConcat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (RevConcat-List<PtrPointees> (Nil-List<PtrPointees>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<PtrPointees> (Cons-List<PtrPointees> hd0 tl) l)
         (RevConcat-List<PtrPointees> tl (Cons-List<PtrPointees> hd0 l))
         :ruleset always-run)

(constructor Rev-List<PtrPointees> (List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Rev-List<PtrPointees> m)
         (RevConcat-List<PtrPointees> m (Nil-List<PtrPointees>))
         :ruleset always-run)

(constructor Concat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Concat-List<PtrPointees> x y)
         (RevConcat-List<PtrPointees> (Rev-List<PtrPointees> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<PtrPointees> (List<PtrPointees>))
(relation SuffixAt-List<PtrPointees> (List<PtrPointees> i64 List<PtrPointees>))
(relation At-List<PtrPointees> (List<PtrPointees> i64 PtrPointees))
(rule ((DemandAt-List<PtrPointees> x))
      ((SuffixAt-List<PtrPointees> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<PtrPointees> x i (Cons-List<PtrPointees> hd0 tl)))
      ((SuffixAt-List<PtrPointees> x (+ i 1) tl)
       (At-List<PtrPointees> x i hd0))
      :ruleset always-run)

(relation All<PointsNowhere-PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (PointsNowhere-PtrPointees hd0)
       (All<PointsNowhere-PtrPointees> tl))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
        


(constructor Zip<Union-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Union-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Union-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Union-PtrPointees x0 y0)
            (Zip<Union-PtrPointees> tl1 tl2))
         :when ((= (Length-List<PtrPointees> tl1) (Length-List<PtrPointees> tl2)))
         :ruleset always-run)

(constructor Zip<Intersect-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Intersect-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Intersect-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Intersect-PtrPointees x0 y0)
            (Zip<Intersect-PtrPointees> tl1 tl2))
         :ruleset always-run)


(sort ExprSetPrim (Set Expr))

(datatype ExprSet (ES ExprSetPrim))

(constructor ExprSet-intersect (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-intersect (ES set1) (ES set2)) (ES (set-intersect set1 set2))
         :ruleset memory-helpers)
(constructor ExprSet-union (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-union (ES set1) (ES set2)) (ES (set-union set1 set2))
         :ruleset memory-helpers)
(relation ExprSet-contains (ExprSet Expr))
(constructor ExprSet-insert (ExprSet Expr) ExprSet)
(rewrite (ExprSet-insert (ES set1) x)
         (ES (set-insert set1 x))
         :ruleset memory-helpers)
(function ExprSet-length (ExprSet) i64 :no-merge)


; ============================
; Pointees
; ============================


; List<i64+IntInterval> is used as an association list; the i64 keys
; (corresponding to alloc ids) are always unique and sorted, the IntInterval
; values correspond to offset ranges.
;
; (TuplePointsTo [{0->[4,5], 1->[0,0]}, {0->[0,0]}])
; indicates a tuple with two components.
; - The first component might point to Alloc 0 at offsets 4 or 5,
;   or Alloc 1 at offset 0
; - The second component points to Alloc 0 at offset 0
(datatype Pointees
          (TuplePointsTo List<PtrPointees>)
          (PtrPointsTo PtrPointees))

(constructor UnwrapPtrPointsTo (Pointees) PtrPointees)
(rewrite (UnwrapPtrPointsTo (PtrPointsTo x))
         x
         :ruleset memory-helpers)
(constructor UnwrapTuplePointsTo (Pointees) List<PtrPointees>)
(rewrite (UnwrapTuplePointsTo (TuplePointsTo x))
         x
         :ruleset memory-helpers)

(relation PointsNowhere (Pointees))
(rule ((= f (PtrPointsTo x))
       (PointsNowhere-PtrPointees x))
      ((PointsNowhere f))
      :ruleset memory-helpers)
(rule ((= f (TuplePointsTo l))
       (All<PointsNowhere-PtrPointees> l))
      ((PointsNowhere f))
      :ruleset memory-helpers)

(constructor UnionPointees (Pointees Pointees) Pointees)
(rewrite (UnionPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Union-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (UnionPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Union-PtrPointees> x y))
         :when ((= (Length-List<PtrPointees> x) (Length-List<PtrPointees> y)))
         :ruleset memory-helpers)
(constructor IntersectPointees (Pointees Pointees) Pointees)
(rewrite (IntersectPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Intersect-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (IntersectPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Intersect-PtrPointees> x y))
         :ruleset memory-helpers)

(constructor GetPointees (Pointees i64) Pointees)
(rule ((= f (GetPointees (TuplePointsTo l) i))
       (At-List<PtrPointees> l i x))
      ((union f (PtrPointsTo x)))
      :ruleset memory-helpers)

(constructor PointeesDropFirst (Pointees) Pointees)
(rewrite (PointeesDropFirst (TuplePointsTo (Cons-List<PtrPointees> hd tl)))
         (TuplePointsTo tl)
         :ruleset memory-helpers)

; ============================
; Resolved
; ============================

; Resolved checks if an e-class contains a term containing only constructors and
; primitives; i.e. whether equality is decideable
(relation Resolved-IntOrInfinity (IntOrInfinity))
(rule ((= f (I _)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (Infinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (NegInfinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)

(relation Resolved-IntInterval (IntInterval))
(rule ((= f (MkIntInterval lo hi))
       (Resolved-IntOrInfinity lo)
       (Resolved-IntOrInfinity hi))
      ((Resolved-IntInterval f))
      :ruleset memory-helpers)

(relation Resolved-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= f (Nil-List<i64+IntInterval>)))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<i64+IntInterval> allocid offsets tl))
       (Resolved-List<i64+IntInterval> tl)
       (Resolved-IntInterval offsets))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)

(relation Resolved-PtrPointees (PtrPointees))
(rule ((= f (PointsAnywhere)))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)
(rule ((= f (PointsTo x))
       (Resolved-List<i64+IntInterval> x))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)

(relation Resolved-List<PtrPointees> (List<PtrPointees>))
(rule ((= f (Nil-List<PtrPointees>)))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<PtrPointees> hd tl))
       (Resolved-List<PtrPointees> tl)
       (Resolved-PtrPointees hd))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)

(relation Resolved-Pointees (Pointees))
(rule ((= f (TuplePointsTo x))
       (Resolved-List<PtrPointees> x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)
(rule ((= f (PtrPointsTo x))
       (Resolved-PtrPointees x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)


;;;;;

(constructor BaseTypeToPtrPointees (BaseType) PtrPointees :cost 100)
(rewrite (BaseTypeToPtrPointees (PointerT _))
         (PointsAnywhere)
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (IntT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (StateT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (BoolT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)

(constructor TypeListToList<PtrPointees> (TypeList) List<PtrPointees> :cost 1000)
(rewrite (TypeListToList<PtrPointees> (TNil))
         (Nil-List<PtrPointees>)
         :ruleset memory-helpers)
(rewrite (TypeListToList<PtrPointees> (TCons hd tl))
         (Cons-List<PtrPointees>
            (BaseTypeToPtrPointees hd)
            (TypeListToList<PtrPointees> tl))
         :ruleset memory-helpers)

(constructor TypeToPointees (Type) Pointees :cost 1000)
(rewrite (TypeToPointees (TupleT tylist))
         (TuplePointsTo (TypeListToList<PtrPointees> tylist))
         :ruleset memory-helpers)
(rewrite (TypeToPointees (Base basety))
         (PtrPointsTo (BaseTypeToPtrPointees basety))
         :ruleset memory-helpers)

; ============================
; Update PointerishType
; ============================

(relation PointerishType (Type))
(relation PointerishTypeList (TypeList))

(rule ((= f (Base (PointerT ty))))
      ((PointerishType f))
      :ruleset always-run)

(rule ((= f (TCons (PointerT ty) tl)))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TCons hd tl))
       (PointerishTypeList tl))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TupleT l))
       (PointerishTypeList l))
      ((PointerishType f))
      :ruleset always-run)

; ============================
; Update PointsToCells
; ============================

;                             arg pointees  result pointees
(constructor PointsToCells (Expr Pointees)     Pointees :unextractable) 

; Top-level demand
(rule ((Function name in-ty out-ty body))
      ((PointsToCells body (TypeToPointees in-ty)))
      :ruleset memory-helpers)

; Demand PointsToCells along state edge and pointer-typed values
(rule ((PointsToCells (Bop (Print) e state) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Load) e state) ap))
      ((PointsToCells e ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Top (Write) ptr val state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Alloc id sz state ty) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Free) ptr state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Get x i) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Concat x y) ap))
      ((PointsToCells x ap)
       (PointsToCells y ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Single x) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)

; Compute and propagate PointsToCells
(rewrite (PointsToCells concat-x-y aps)
         (TuplePointsTo (Concat-List<PtrPointees>
           (UnwrapTuplePointsTo (PointsToCells x aps))
           (UnwrapTuplePointsTo (PointsToCells y aps))))
         :when ((= concat-x-y (Concat x y))
                (HasType concat-x-y ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells get-x-i aps)
         (GetPointees (PointsToCells x aps) i)
         :when ((= get-x-i (Get x i))
                (HasType get-x-i ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells (Single x) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (UnwrapPtrPointsTo (PointsToCells x aps))
             (Nil-List<PtrPointees>)))
         :when ((HasType (Single x) ty) (PointerishType ty))
         :ruleset memory-helpers) 

(rewrite (PointsToCells (Arg ty_ ctx) aps)
         aps
         :when ((HasType (Arg ty_ ctx) ty) (PointerishType ty))
         :ruleset memory-helpers)

; Allow non-pointer types to resolve
(rule ((PointsToCells x aps)
       (HasType x ty))
      ((TypeToPointees ty))
      :ruleset memory-helpers)
(rule ((= f (PointsToCells x aps))
       (HasType x ty)
       (= pointees (TypeToPointees ty))
       (PointsNowhere pointees))
      ((union f pointees))
      :ruleset memory-helpers)

(rewrite (PointsToCells (Bop (PtrAdd) x e) aps)
         (PtrPointsTo
           (AddIntIntervalToPtrPointees
             (MkIntInterval (I lo) (I hi))
             (UnwrapPtrPointsTo (PointsToCells x aps))))
         :when ((= (IntB lo) (lo-bound e))
                (= (IntB hi) (hi-bound e)))
         :ruleset memory-helpers)

(rewrite (PointsToCells (If c inputs t e) aps)
         (UnionPointees
           (PointsToCells t (PointsToCells inputs aps))
           (PointsToCells e (PointsToCells inputs aps)))
         :when ((HasType (If c inputs t e) ty) (PointerishType ty))
         :ruleset memory)

(rewrite (PointsToCells (Alloc id sz state ty) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (PointsTo
               (Cons-List<i64+IntInterval>
                 id
                 (MkIntInterval (I 0) (I 0))
                 (Nil-List<i64+IntInterval>)))
             (Cons-List<PtrPointees>
               (PointsTo (Nil-List<i64+IntInterval>)) ; state output points to nothing
               (Nil-List<PtrPointees>))))
         :ruleset memory-helpers)

; arg pointees * loop in * loop out * i64 -> result pointees
(constructor PointsToCellsAtIter (Pointees Expr Expr i64) Pointees)

; compute first two
(rule ((= e (DoWhile inputs pred-body))
       (PointsToCells e aps))
      ((set (PointsToCellsAtIter aps inputs pred-body 0)
            (PointsToCells inputs aps))
       (set (PointsToCellsAtIter aps inputs pred-body 1)
            (UnionPointees
              (PointsToCellsAtIter aps inputs pred-body 0)
              (PointeesDropFirst
                (PointsToCells pred-body (PointsToCellsAtIter aps inputs pred-body 0))))))
      :ruleset memory-helpers)

; avoid quadratic query
(function succ (i64) i64 :no-merge)
(rule ((PointsToCellsAtIter aps inputs pred-body i))
      ((set (succ i) (+ i 1)))
      :ruleset memory-helpers)

; Note that this rule is bounded by ruleset memory
(rule ((= pointees0 (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees1 (PointsToCellsAtIter aps inputs pred-body (succ i)))
       (Resolved-Pointees pointees0)
       (Resolved-Pointees pointees1)
       (!= pointees0 pointees1))
      ((set (PointsToCellsAtIter aps inputs pred-body (+ i 2))
            (UnionPointees
              pointees1
              (PointeesDropFirst
                (PointsToCells pred-body pointees1)))))
      :ruleset memory)

(rule ((= pointees (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees (PointsToCellsAtIter aps inputs pred-body (succ i))))
      ((set (PointsToCells (DoWhile inputs pred-body) aps)
            pointees))
      :ruleset memory)

(rule ((PtrPointsTo (PointsTo l)))
      ((DemandAt-List<i64+IntInterval> l))
      :ruleset memory-helpers)
(rule ((TuplePointsTo l))
      ((DemandAt-List<PtrPointees> l))
      :ruleset memory-helpers)

; ============================
; Update DontAlias
; ============================

(relation DemandDontAlias (Expr Expr Pointees))
;                    pointer, pointer, arg pointees
(relation DontAlias (Expr Expr Pointees))


(rule ((DemandDontAlias ptr1 ptr2 arg-pointees)
       (BodyContainsExpr body ptr1)
       (BodyContainsExpr body ptr2)
       (HasType ptr1 (Base (PointerT ty)))
       (HasType ptr2 (Base (PointerT ty)))
       (= pointees1 (PointsToCells ptr1 arg-pointees))
       (= pointees2 (PointsToCells ptr2 arg-pointees)))
      ((IntersectPointees pointees1 pointees2))
      :ruleset memory-helpers)

(rule ((PointsNowhere
         (IntersectPointees
           (PointsToCells ptr1 arg-pointees)
           (PointsToCells ptr2 arg-pointees))))
      ((DontAlias ptr1 ptr2 arg-pointees))
      :ruleset memory-helpers)

; ============================
; Update PointsToExpr
; ============================

;                       program point, pointer
(constructor PointsToExpr (Expr           Expr) Expr :unextractable)

; After a load, the ptr points to the loaded value
(rule ((= f (Bop (Load) ptr state)))
      ((set (PointsToExpr (Get f 1) ptr) (Get f 0)))
      :ruleset memory-helpers)

; If we load and we already know what the pointer points to
; TODO this rule breaks the weakly linear invariant
; when a previous load may not be on the path
;(rule ((= e (Bop (Load) addr state))
;       (= v (PointsToExpr state addr)))
;      ((union (Get e 0) v)
;       (union (Get e 1) state))
;       :ruleset memory-helpers)

; Loads and prints don't affect what what pointers already point to
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Load) any-addr state)))
      ((let new-state (Get e 1))
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Print) any-val state)))
      ((let new-state e)
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)

; Writes don't affect what a pointer points to if it writes to another pointer
; guaranteed to not alias.
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr)))
      ((DemandDontAlias addr otheraddr (TypeToPointees argty)))
      :ruleset memory-helpers)
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr))
       (DontAlias addr otheraddr (TypeToPointees argty)))
      ((set (PointsToExpr e otheraddr) otherdata))
      :ruleset memory-helpers)

; For a write, mark the given expression as containing `data`.
(rule ((= e (Top (Write) addr data state)))
      ((union (PointsToExpr e addr) data))
      :ruleset memory-helpers)

; ============================
; Update CellHasValues (currently unused)
; ============================

; ;                       program point, cell
; (constructor CellHasValues (Expr i64) ExprSet :merge (ExprSet-intersect old new))

; ; At the time of an alloc, a cell doesn't contain any values
; (rule ((= f (Alloc id amt state ty)))
      ; ((set (CellHasValues (Get f 1) id) (ES (set-empty))))
      ; :ruleset memory-helpers)

; ; These two rules find (Write ptr val state) where 
; ; ptr points to cells given no assumptions about where (Arg) points.
; ; TODO: make sensitive to offsets
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty))
      ; ((TypeToPointees argty))
      ; :ruleset memory-helpers)
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty)
       ; (= (PtrPointsTo (PointsTo cells)) (PointsToCells ptr (TypeToPointees argty)))
       ; (At-List<i64+IntInterval> cells any-idx alloc-id offsets)
       ; (= vals (CellHasValues state cell)))
      ; ((set (CellHasValues e cell) (ExprSet-insert vals val)))
      ; :ruleset memory-helpers)


(ruleset mem-simple)

; ============================
; NoAlias analysis
; ============================

(relation NoAlias (Expr Expr))

; Push NoAlias into if
(rule ((= if (If pred inputs thn els))
       (= (Get inputs i) inputs-i)
       (= (Get inputs j) inputs-j)
       (NoAlias inputs-i inputs-j)
       (= arg-i (Get (Arg ty (InIf which pred inputs)) i))
       (= arg-j (Get (Arg ty (InIf which pred inputs)) j)))
      ((NoAlias arg-i arg-j))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (lo-bound i) (IntB lo))
       (> lo 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (hi-bound i) (IntB hi))
       (< hi 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((NoAlias x y))
      ((NoAlias y x))
      :ruleset mem-simple)

; ============================
; Memory optimizations
; ============================

(relation DidMemOptimization (String))

; A write then a load to different addresses can be swapped
(rule ((NoAlias write-addr load-addr)
       (= write (Top (Write) write-addr write-val state))
       (= load (Bop (Load) load-addr write)))
      ((let new-load (Bop (Load) load-addr state))
       (union
          (Get load 1)
          (Top (Write) write-addr write-val (Get new-load 1)))
       (union (Get load 0) (Get new-load 0))
       (DidMemOptimization "commute write then load")
      )
      :ruleset mem-simple)

; A load then a write to different addresses can be swapped
; Actually, does this break WeaklyLinear if the stored value depends on the
; loaded value? Commenting this out for now.
; (rule ((NoAlias load-addr write-addr)
;        (= load (Bop (Load) load-addr state))
;        (= write (Top (Write) write-addr write-val (Get load 1))))
;       ((let new-write (Top (Write) write-addr write-val state))
;        (let new-load (Bop (Load) load-addr new-write))
;        (union write (Get new-load 1))
;        (union (Get load 0) (Get new-load 0))
;        (DidMemOptimization "commute load then write")
;        )
;       :ruleset mem-simple)

; Two loads to the same address can be compressed
(rule ((= first-load (Bop (Load) addr state))
       (= second-load (Bop (Load) addr first-load)))
      ((union (Get first-load 0) (Get second-load 0))
       (union (Get first-load 1) (Get second-load 1))
       (DidMemOptimization "duplicate load")
       )
      :ruleset mem-simple)

; A write and a load to the same address can be forwarded
(rule ((= write (Top (Write) addr write-val state))
       (= load (Bop (Load) addr write)))
      ((union (Get load 0) write-val)
       (union (Get load 1) write)
       (DidMemOptimization "store forward")
       )
      :ruleset mem-simple)

; Two writes of the same value to the same address can be compressed
(rule ((= first-write (Top (Write) addr write-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union first-write second-write)
       (DidMemOptimization "duplicate write"))
      :ruleset mem-simple)

; A write shadows a previous write to the same address
(rule ((= first-write (Top (Write) addr shadowed-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union second-write (Top (Write) addr write-val state))
       (DidMemOptimization "shadowed write"))
      :ruleset mem-simple)

; A load doesn't change the state
; TODO: why does this break weaklylinear?
; (rule ((= load (Bop (Load) addr state)))
;       ((union (Get load 1) state))
;       :ruleset mem-simple)

; (rule ((DidMemOptimization _))
;       ((panic "DidMemOptimization"))
;       :ruleset mem-simple)

;; Loop Invariant

;; bool: whether the term in the Expr is an invariant.
(function is-inv-Expr (Expr Expr) bool :merge (or old new))
(function is-inv-ListExpr (Expr ListExpr) bool :merge (or old new))

;; in default, when there is a find, set is-inv to false
(rule ((BodyContainsExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-Expr loop term) false)) :ruleset always-run)
(rule ((BodyContainsListExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-ListExpr loop term) false)) :ruleset always-run)

(relation is-inv-ListExpr-helper (Expr ListExpr i64))
(rule ((BodyContainsListExpr loop list) 
       (= loop (DoWhile inputs pred_out))) 
      ((is-inv-ListExpr-helper loop list 0)) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= true (is-inv-Expr loop expr))
       (= expr (ListExpr-ith list i)))
    ((is-inv-ListExpr-helper loop list (+ i 1))) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= i (ListExpr-length list)))
    ((set (is-inv-ListExpr loop list) true)) :ruleset always-run)


(ruleset boundary-analysis)
;; An Expr is on boundary when it is invariant and its parent is not
;                       loop invariant-expr
(relation boundary-Expr (Expr Expr))

;; boundary for ListExpr's children
(rule ((= true (is-inv-Expr loop expr))
       (= false (is-inv-ListExpr loop list))
       (= expr (ListExpr-ith list i)))
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)

;; if a output branch/pred is invariant, it's also boundary-Expr
(rule ((= true (is-inv-Expr loop expr))
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out i))) 
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)


(function hoisted-loop (Expr Expr) bool :merge (or old new) )
(rule ((= loop (DoWhile in pred_out)))
      ((set (hoisted-loop in pred_out) false)) :ruleset always-run)

(constructor InExtendedLoop (Expr Expr Expr) Assumption)

;; mock function
(ruleset loop-inv-motion)

(rule ((boundary-Expr loop inv)
       (> (Expr-size inv) 1)
       ;; TODO: replace Expr-size when cost model is ready
       (= loop (DoWhile in pred_out))
       ;; the outter assumption of the loop 
       (ContextOf loop loop_ctx)
       (HasType in in_type)
       (HasType inv inv_type)
       (= inv_type (Base base_inv_ty))
       (= in_type (TupleT tylist))
       (= false (hoisted-loop in pred_out))
       (= len (tuple-length in)))
      ((let new_input (Concat in (Single (Subst loop_ctx in inv))))
       (let new_input_type (TupleT (TLConcat tylist (TCons base_inv_ty (TNil)))))

       ;; create an virtual assume node, union it with actuall InLoop later
       (let assum (InExtendedLoop in pred_out new_input))
       (let new_out_branch (Get (Arg new_input_type assum) len))

       ;; this two subst only change arg to arg with new type
       (let substed_pred_out
         (Subst assum
               (SubTuple (Arg new_input_type assum) 0 len) pred_out))
       (let inv_in_new_loop
            (Subst assum (SubTuple (Arg new_input_type assum) 0 len) inv))
       (let new_pred_out (Concat substed_pred_out (Single new_out_branch)))
       
       (let new_loop (DoWhile new_input new_pred_out))
       (union assum (InLoop new_input new_pred_out))
       (union inv_in_new_loop new_out_branch)
       (let wrapper (SubTuple new_loop 0 len))
       (union loop wrapper)
       (subsume (DoWhile in pred_out)) 
       ;; don't hoist same loop again
       (set (hoisted-loop in pred_out) true)
      )
       :ruleset loop-inv-motion)


(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Const _n _ty _ctx)))
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get (Arg ty ctx) i)) 
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out (+ i 1)))) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Function _name _tyin _tyout _out))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Top _op _x _y _z))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) (= true (is-inv-Expr loop _z)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Bop _op _x _y)) (BinaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Uop _op _x)) (UnaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get _tup _i))  
       (= true (is-inv-Expr loop _tup)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Concat _x _y))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Single _x))  
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Switch _pred _inputs _branches))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _inputs)) (= true (is-inv-ListExpr loop _branches)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (If _pred _input _then _else))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _input)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (DoWhile _in _pred-and-output))  
       (= true (is-inv-Expr loop _in)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Call _func _arg))  
       (= true (is-inv-Expr loop _arg)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Empty _ty _ctx))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _z)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Uop _op _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Single _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _inputs)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _input)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (DoWhile _in _pred-and-output)) 
       (= expr1 _in)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Call _func _arg)) 
       (= expr1 _arg)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _e)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _state)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)
;; Some simple simplifications of loops
(ruleset loop-simplify)

(rewrite
 (DoWhile (Arg ty ctx)
  (Concat (Single (Const (Bool false) ty ctx2))
    (Single (Const constant ty ctx2))))
 (Single (Const constant ty ctx))
 :ruleset loop-simplify)
;; Some simple simplifications of loops
(ruleset loop-unroll)
(ruleset loop-peel)
(ruleset loop-iters-analysis)

;;                      inputs, outputs -> number of iterations
;; The minimum possible guess is 1 because of do-while loops
;; TODO: dead loop deletion can turn loops with a false condition to a body
(function LoopNumItersGuess (Expr Expr) i64 :merge (max 1 (min old new)))

;; by default, guess that all loops run 1000 times
(rule ((DoWhile inputs outputs))
      ((set (LoopNumItersGuess inputs outputs) 1000))
      :ruleset loop-iters-analysis)

;; For a loop that is false, its num iters is 1
(rule 
  ((= loop (DoWhile inputs outputs))
   (= (Const (Bool false) ty ctx) (Get outputs 0)))
  ((set (LoopNumItersGuess inputs outputs) 1))
:ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated before checking pred
;; TODO: we could make it work for decrementing loops
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by some constant each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while next_counter less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (/ (- end_constant start_const) increment))
  )
  :ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated after checking pred
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   (= body-arg (Get (Arg _ty _ctx) counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by a constant each loop
   (= next_counter (Bop (Add) body-arg
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while this counter less than end_constant
   (= pred (Bop (LessThan) body-arg
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (+ (/ (- end_constant start_const) increment) 1))
  )
  :ruleset loop-iters-analysis)

;; loop peeling rule
;; Only peel loops that we know iterate < 3 times
(constructor LoopPeeledPlaceholder (Expr) Assumption :unextractable)
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs))
  (= old_cost (LoopNumItersGuess inputs outputs))
  (< old_cost 3)
  )
 (
  (let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (let else-ctx
    (InIf false (Get executed-once 0) executed-once-body))

  (let new-loop-arg
    (Arg inputs-ty then-ctx))
  (let new-loop-body
    (Subst (LoopPeeledPlaceholder lhs) new-loop-arg outputs))
  (union (InLoop new-loop-arg new-loop-body) (LoopPeeledPlaceholder lhs))

  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
      executed-once-body ;; inputs are the body executed once
      (DoWhile new-loop-arg new-loop-body)
      (Arg inputs-ty else-ctx)))

  (set (LoopNumItersGuess new-loop-arg new-loop-body) (- old_cost 1))
  )
 :ruleset loop-peel)

(constructor TmpCtxUnroll (Expr Expr) Assumption)

;; unroll a loop with constant bounds and initial value
(rule
  ((= lhs (DoWhile inputs outputs))
   (= num-inputs (tuple-length inputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by one each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int 1) _ty2 _ctx2)))
   ;; while less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; start and end constant is a multiple of 4 and greater than start_const
   (> end_constant start_const)
   (= (% start_const 4) 0)
   (= (% end_constant 4) 0)
   (= old_cost (LoopNumItersGuess inputs outputs))
  )
  (
    (let tmp-ctx (TmpCtxUnroll inputs outputs))
    (let one-iter (SubTuple outputs 1 num-inputs))
    (let unrolled
        (Subst tmp-ctx one-iter
          (Subst tmp-ctx one-iter
            (Subst tmp-ctx one-iter
               outputs))))
    (union lhs
      (DoWhile inputs
        unrolled))
    (let actual-ctx (InLoop inputs unrolled))
    (union tmp-ctx actual-ctx)

    (set (LoopNumItersGuess inputs unrolled) (/ old_cost 4))
  )
  :ruleset loop-unroll)



(ruleset swap-if)

;; swaps the order of the then and else branches
;; in an if using Not

(rule
  ((= lhs (If pred inputs then else)))
  (
    (union lhs (If (Uop (Not) pred) inputs else then))
  )
  :ruleset swap-if)


;; for if statements with two outputs, swaps the order
;; of the outputs
(rule
  ((= lhs (If pred inputs then else))
   (= (tuple-length then) 2)
   (= (tuple-length else) 2))
  (
    (union
      (Concat (Single (Get lhs 1)) (Single (Get lhs 0)))
      (If pred inputs
          (Concat (Single (Get then 1)) (Single (Get then 0)))
          (Concat (Single (Get else 1)) (Single (Get else 0)))))
  )
  :ruleset swap-if)
;; this ruleset depends on swap_if running twice
;; swap_if un-permutes the outputs of the function and the if so this rule can match
(ruleset rec-to-loop)



;; this rule finds a recursive functions
;; with a base case and a tail-recursive call
;; transforms them into a loop
;; transforming functions that look like this:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start));
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;      } while (start[0]);
;;    }
;;    ret base_case(start);
;; }
;; for example, printBinary sums the results of recursive calls

(constructor TmpCtxRecToLoop (String Type Type Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs (Call name rec_case) base-case))
   (HasType always-runs start-ty)
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop name in out body))
   (let loop-inputs (Arg start-ty (InIf true pred always-runs)))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx rec_case pred))
         (Subst tmp-ctx rec_case always-runs)))
   (union tmp-ctx (InLoop loop-inputs loop-outputs))

   (let loop
     (DoWhile loop-inputs loop-outputs))
    
    
  ;; initial start value
   (let outer-if
     (If pred always-runs
         loop
         (Arg start-ty (InIf false pred always-runs))))
   (union body (Subst (InFunc name) outer-if base-case)))
  :ruleset rec-to-loop)


;; Stores information about how to use a binary
;; operator to accumulate values
;; (bop start-val base-case-op)
(relation Accum-Bop (BinaryOp i64 BinaryOp))

;; addition is easy, it starts at 0 and adds the result of the recursive call
(Accum-Bop (Add) 0 (Add))

;; subtraction starts at zero, but adds the base case at the end
(Accum-Bop (Sub) 0 (Add))

;; multiplication starts at 1, and multiplies the result of the recursive call
(Accum-Bop (Mul) 1 (Mul))

;; It seems like integers have these properties based on: https://stackoverflow.com/questions/69480173/which-arithmetic-properties-do-twos-complement-integers-have


;; same as above rule, but with an accumulator
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start)) + f(start);
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    let acc = 0;
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;         acc = acc + extra(start);
;;      } while (start[0]);
;;    }
;;    ret base_case(start) + acc;
;; }
(constructor TmpCtxRecToLoop2 (String Expr Expr Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs then-case base-case))
   (= call (Call name rec-case))
   (= then-case
      (Concat (Single (Bop acc-op (Get call 0) extra))
              (Single (Get call 1))))
   (Accum-Bop acc-op initial-int base-case-op)
   (HasType always-runs start-ty)
   (= always-runs-len (tuple-length always-runs))
   (= start-ty (TupleT start-ty-list))
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop2 name pred then-case base-case))
   (let loop-ty
     (TupleT (TLConcat start-ty-list (TCons (IntT) (TNil)))))
   ;; recursive case in the loop
   (let new-rec-case
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) rec-case))
   ;; extra computation in the loop
   (let new-extra
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) extra))
   ;; acc starts at 0
   (let loop-inputs
     (Concat (Arg start-ty (InIf true pred always-runs)) (Single (Const (Int initial-int) start-ty (InIf true pred always-runs)))))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx new-rec-case pred))
         (Concat
           (Subst tmp-ctx new-rec-case always-runs)
           ;; add extra to acc
           (Single (Bop acc-op (Get (Arg loop-ty tmp-ctx) always-runs-len) new-extra)))))
   ;; loop starts at zero, adds extra each iteration
   (let loop
     (DoWhile loop-inputs loop-outputs))
   ;; union tmpctx
   (union tmp-ctx (InLoop loop-inputs loop-outputs))
  
   (let outer-if
     (If pred always-runs
         loop
         (Concat
           (Arg start-ty (InIf false pred always-runs))
           ;; otherwise acc is 0
           (Single (Const (Int 0) start-ty (InIf false pred always-runs))))))
   ;; base case over latest start value
   (let new-base-case
     (Subst (InFunc name) (SubTuple outer-if 0 always-runs-len) base-case))
   ;; add base case to acc
   (let res
     (Concat
      (Single (Bop base-case-op (Get new-base-case 0) (Get outer-if always-runs-len)))
      (Single (Get new-base-case 1))))
   (union body res))
  :ruleset rec-to-loop)

(ruleset passthrough)


;; Pass through thetas
(rule ((= lhs (Get loop i))
        (= loop (DoWhile inputs pred-outputs))
        (= (Get pred-outputs (+ i 1)) (Get (Arg _ty _ctx) i))
        ;; only pass through pure types, since some loops don't terminate
        ;; so the state edge must pass through them
        (HasType lhs lhs_ty)
        (PureType lhs_ty)
        )
       ((union lhs (Get inputs i)))
       :ruleset passthrough)

;; Pass through switch arguments
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Get (Arg _ _ctx0) j))
       (= (Get branch1 i) (Get (Arg _ _ctx1) j))
       (= passed-through (Get inputs j))
       (HasType lhs lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union lhs passed-through))
      :ruleset passthrough)

;; Pass through switch predicate
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Const (Bool false) _ _ctx0))
       (= (Get branch1 i) (Const (Bool true) _ _ctx1)))
      ((union lhs pred))
      :ruleset passthrough)

;; Pass through if arguments
(rule ((= if (If pred inputs then_ else_))
       (= then-branch (Get then_ i))
       (= else-branch (Get else_ i))
       (= then-branch (Get (Arg arg_ty _then_ctx) j))
       (= else-branch (Get (Arg arg_ty _else_ctx) j))
       (HasType then-branch lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union (Get if i) (Get inputs j)))
      :ruleset passthrough)

; Pass through if state edge arguments
; To maintain the invariant, we have to union the other outputs with a pure if statement
(ruleset state-edge-passthrough)

(rule ((= outputs (If pred inputs then_ else_))

       (= (Get then_ i) (Get (Arg arg_ty then_ctx) j))
       (= (Get else_ i) (Get (Arg arg_ty else_ctx) j))

       (HasType (Get then_ i) (Base (StateT))))

      ((let lhs (Get outputs i))
       (let new_inputs (TupleRemoveAt inputs j))

       (let new_then_ctx (InIf true  pred new_inputs))
       (let new_else_ctx (InIf false pred new_inputs))

       (let old_then (TupleRemoveAt then_ i))
       (let old_else (TupleRemoveAt else_ i))

       (let new_then (DropAt new_then_ctx j old_then))
       (let new_else (DropAt new_else_ctx j old_else))

       (let old_outputs (TupleRemoveAt outputs i))
       (let new_if (If pred new_inputs new_then new_else))
       (union new_if old_outputs)

       (union lhs (Get inputs j))
       ;; Be careful not to subsume the original if statement immediately,
       ;;  since TupleRemoveAt still needs to match on it
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset state-edge-passthrough)

;; Pass through if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool true) _ _thenctx))
       (= (Get else_ i) (Const (Bool false) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) pred)
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; Pass through inverted if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool false) _ _thenctx))
       (= (Get else_ i) (Const (Bool true) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) (Uop (Not) pred))
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; ORIGINAL
;; a = 0
;; c = 3
;; for  i = 0 to n:
;;     a = i * c
;;
;; OPTIMIZED
;; a = 0
;; c = 3
;; d = 0
;; for i = 0 to n:
;;     a += d
;;     d += c
(ruleset loop-strength-reduction)

; Finds invariants/constants within a body.
; Columns: body; value of invariant in inputs; value of invariant in outputs
;; Get the input and output value of an invariant, or constant int, within the loop
;;             loop in   out
(relation lsr-inv (Expr Expr Expr))

; TODO: there may be a bug with finding the invariant, or it just may not be extracted.
; Can make this work on loop_with_mul_by_inv and a rust test later.
; (rule (
;     (= loop (DoWhile inputs pred-and-body))
;     (= (Get outputs (+ i 1)) (Get (Arg arg-type assm) i)))
;     ((inv loop (Get inputs i) (Get (Arg arg-type assm) i))) :ruleset always-run)
(rule (
    (= loop (DoWhile inputs pred-and-body))
    (ContextOf inputs loop-input-ctx)
    (ContextOf pred-and-body loop-output-ctx)
    (= constant (Const c out-type loop-output-ctx))
    (HasArgType inputs in-type)
    )
    ((lsr-inv loop (Const c in-type loop-input-ctx) constant)) :ruleset always-run)
(constructor TmpCtxLSR (Expr Expr) Assumption)
(rule 
    (
        ;; Find loop
        (= old-loop (DoWhile inputs pred-and-outputs))
        (ContextOf pred-and-outputs loop-ctx)

        ; Find loop variable (argument that gets incremented with an invariant)
        (lsr-inv old-loop loop-incr-in loop-incr-out)
        ; Since the first el of pred-and-outputs is the pred, we need to offset i
        (= (Get pred-and-outputs (+ i 1)) (Bop (Add) (Get (Arg arg-type assm) i) loop-incr-out))

        ; Find invariant where input is same as output, or constant
        (lsr-inv old-loop c-in c-out)

        ; Find multiplication of loop variable and invariant
        (= old-mul (Bop (Mul) c-out (Get (Arg arg-type assm) i)))
        (ContextOf old-mul loop-ctx)

        (= arg-type (TupleT ty-list))
        ; n is index of our new, temporary variable d
        (= n (tuple-length inputs))
    )
    (
        (let tmp-ctx (TmpCtxLSR inputs pred-and-outputs))
        ; Each time we need to update d by the product of the multiplied constant and the loop increment
        (let addend (Bop (Mul) c-out loop-incr-out))

        ; Initial value of d is i * c
        (let d-init (Bop (Mul) c-in (Get inputs i)))

        ; Construct optimized theta
        ; new-inputs already has the correct context
        (let new-inputs (Concat inputs (Single d-init)))

        ; We need to create a new type, with one more input
        (let new-arg-ty (TupleT (TLConcat ty-list (TCons (IntT) (TNil)))))
        (let replace-arg (SubTuple (Arg new-arg-ty tmp-ctx) 0 n))

        ; Value of d in loop. Add context to addend
        (let d-out (Bop (Add) (Get (Arg new-arg-ty tmp-ctx) n)
                   (Subst tmp-ctx replace-arg addend)))

        ; build the old body, making sure to set the correct arg type and context
        (let new-body
          (Concat
            (Subst tmp-ctx replace-arg pred-and-outputs)
            (Single d-out)))

        (let new-loop (DoWhile new-inputs new-body))

        (let new-c (Subst tmp-ctx replace-arg c-out))

        ; Now that we have the new loop, union the temporary context with the actual ctx
        (union tmp-ctx (InLoop new-inputs new-body))

        ; Substitute d for the *i expression
        (let new-mul
            (Bop (Mul) new-c (Get replace-arg i)))
        (union (Get (Arg new-arg-ty tmp-ctx) n) new-mul)

        ; Subsume the multiplication in the new loop to prevent
        ; from firing loop strength reduction again on the new loop
        ; Workaround of egglog issue: https://github.com/egraphs-good/egglog/issues/462
        ; add the expression we are about to subsume
        (let before
          (Bop (Mul) new-c (Get replace-arg i)))
        ; now subsume it
        (subsume
          (Bop (Mul) new-c (Get replace-arg i)))

        ; Project all but last
        (union old-loop (SubTuple new-loop 0 n))
    )
    :ruleset loop-strength-reduction
)
(relation IVTNewInputsAnalysisDemand (Expr))

(ruleset ivt-analysis)

(sort IVTRes)
;;                              perm passthrough-perm passthrough-type passthrough-type-len
(constructor IVTAnalysisRes (Expr Expr             TypeList         i64) IVTRes)
(constructor IVTMin (IVTRes IVTRes) IVTRes)

(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (<= len1 len2))
      ((union lhs (IVTAnalysisRes _a _b _c len1)))
        :ruleset ivt-analysis)
(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (> len1 len2))
      ((union lhs (IVTAnalysisRes _d _e _f len2)))
        :ruleset ivt-analysis)


;; use an analysis to avoid exploring all combinations of passthrough vs not passed through values. Always prefer not passed through
;;                                  expr1 curr  if  result
(function IVTNewInputsAnalysisImpl (Expr  Expr  Node) IVTRes :merge (IVTMin old new))

;; IVTNewInputsAnalysis computes a permutation perm which corresponds to accessing elements of an if region.
;; It also makes accesses of passthrough arguments access new indices after the length of the if region.
;; For example, if expr1 is: [get(if, 1), get(arg, 1), get(if, 0), get(arg, 3)]
;; It produces a new permutation: [get(arg, 1), get(arg, 2), get(arg, 0), get(arg, 3)]
;; The accesses of the if statement remain unchanged, and the accesses of the passthrough arguments are moved to the end.
;; This new permutation is intended to be used with a substitution argument (Concat if-statement passthrough-args)
;; Also produced is a passthrough-perm, which selects all of the passthrough arguments and puts them in a single tuple
;;                              expr1 if result
(function IVTNewInputsAnalysis (Expr  Node) IVTRes :merge (IVTMin old new))


(rule (
    (DoWhile inpW outW)
) (
    (IVTNewInputsAnalysisDemand outW)
) :ruleset ivt-analysis)

(rule (
    (IVTNewInputsAnalysisDemand loop-body)
    ;; first input is a predicate
    (= loop-body (Concat (Single pred) rest))
    ;; another input is an if statement with shared predicate
    (= if-eclass (If pred inputs thn else))
    (= (Get loop-body i) (Get if-eclass j))
    (!= i 0)
) (
    (let perm (Empty (TmpType) (InFunc "no-ctx")))
    (set
     (IVTNewInputsAnalysisImpl loop-body rest (IfNode if-eclass pred inputs thn else))
     (IVTAnalysisRes perm perm (TNil) 0))
) :ruleset ivt-analysis)

;; recursive case for accessing the if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get if-eclass ith)) rest))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm  pperm passthrough-tys len))
) :ruleset ivt-analysis)

;; recursive case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get (Arg ty ctx) ith)) rest))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)

; base case for accessing if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body (Single last) ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= last (Get if-eclass ith))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm pperm passthrough-tys len))
) :ruleset ivt-analysis)

; base case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Single (Get (Arg ty ctx) ith)))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)


(ruleset loop-inversion)

(constructor TmpCtxLoopInversion (Expr Expr) Assumption)
(rule (
    (= loop (DoWhile inpW outW))
    (= (IVTNewInputsAnalysis outW ifnode) (IVTAnalysisRes perm pperm passthrough-tys _len))
    (= ifnode (IfNode if if-cond if-inputs then else))
    (= if-inputs-len (tuple-length if-inputs))
    (= passthrough-len (TypeList-length passthrough-tys))

    (ContextOf inpW outer-ctx)
    (ContextOf if-inputs if-ctx)
    (HasType if-inputs inputs-ty)
    (= inputs-ty (TupleT inputs-ty-list))
) (
    (let tmp-ctx (TmpCtxLoopInversion inpW outW))
    ;; new peeled condition, checks the if's condition before the first iteration
    (let new-if-cond (Subst outer-ctx inpW if-cond))

    ;; new inputs to the if are 1) the inputs run once unconditionally concatted with
    ;; 2) the passthrough values
    (let new-if-inp
        (Concat (Subst outer-ctx inpW if-inputs)
                (Subst outer-ctx inpW pperm)))
    ;; if contexts
    (let new-if-true-ctx (InIf true new-if-cond new-if-inp))
    (let new-if-false-ctx (InIf false new-if-cond new-if-inp))

    (let new-loop-arg-ty (TupleT (TLConcat inputs-ty-list passthrough-tys)))
    (let new-loop-arg (Arg new-loop-arg-ty tmp-ctx))
    (let new-loop-context tmp-ctx)

    ;; body
    ;; loop begins by running the then branch of the if statement, which uses the first if-inputs-length elements of arg
    (let then-arg (SubTuple new-loop-arg 0 if-inputs-len))
    (let new-then-branch
        (Subst new-loop-context then-arg then))
    ;; the inputs are then run on the combination of
    ;; the then branch and the passthrough values
    (let then-branch-and-passthrough
      (Concat new-then-branch (SubTuple new-loop-arg if-inputs-len passthrough-len)))
    ;; permute them to move passthrough and if outputs back
    ;; to where if-inputs and if-cond expect them to be
    (let permuted-then-branch-and-passthrough
      (Subst new-loop-context then-branch-and-passthrough perm))
    ;; substitute into inputs and condi
    (let new-inputs-after-then-branch 
        (Subst new-loop-context permuted-then-branch-and-passthrough
            (Concat (Single if-cond) if-inputs)))
    (let new-loop-outputs
        (Concat new-inputs-after-then-branch
           (SubTuple new-loop-arg if-inputs-len passthrough-len)))

    (let new-loop (DoWhile (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))
    (let new-if
        (If new-if-cond new-if-inp
            new-loop
            (Arg new-loop-arg-ty new-if-false-ctx)))

    ;; Apply the body of the false branch as an afterprocessing wrapper
    (let final-if-inputs
       (SubTuple new-if 0 if-inputs-len))
    (let else-branch-end
        (Subst outer-ctx final-if-inputs else))
    (let else-branch-end-and-passthrough
        (Concat else-branch-end
               (SubTuple new-if if-inputs-len passthrough-len)))
    (let final-permuted
        (Subst outer-ctx else-branch-end-and-passthrough perm))

    (union final-permuted loop)
    (union new-loop-context (InLoop (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))

    (subsume (DoWhile inpW outW))
) :ruleset loop-inversion)

(ruleset cicm)
(ruleset cicm-index)

(relation InvCodeMotionCandidate (Expr Expr))

(rule (
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t1 c2) (ExtractedExpr e2))
        (ContextOf e1 (InIf true pred1 orig_ins3))
        (ContextOf e2 (InIf false pred2 orig_ins4))
        (!= e1 e2)
     )
     ((InvCodeMotionCandidate e1 e2))
     :ruleset cicm-index)


(rule (
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (= e1 (Uop o x))
        (HasType e1 (Base ty))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (ContextOf e1 (InIf true pred orig_ins))

        (= e2 (Uop o y))
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)
        (ContextOf e2 (InIf false pred orig_ins))

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Uop o (Subst if_tr st_tr x))
        (Uop o (Subst if_fa st_fa y))
        ; Now subsume:
        (subsume (Uop o (Subst if_tr st_tr x)))
        (subsume (Uop o (Subst if_fa st_fa y)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)

       

(rule (
        (InvCodeMotionCandidate e1 e2)
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (ContextOf e1 (InIf true pred orig_ins))
        (ContextOf e2 (InIf false pred orig_ins))
        (= e1 (Bop o x1 y1))
        
        (= e2 (Bop o x2 y2))
        
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (HasType e1 (Base ty))
        

        
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1))
        (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2))
        ; Now subsume:
        (subsume (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1)))
        (subsume (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)


(ruleset push-in)

; new version of the rule where one side of bop is constant
(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o (Const c ty outer_ctx) x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(c, x) in the new regions
        (union (Get arg_tr i) (Bop o (Const c new_ins_ty if_tr) (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Bop o (Const c new_ins_ty if_fa) (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o x (Const c ty outer_ctx)) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(x, c) in the new regions
        (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Const c new_ins_ty if_tr)))
        (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Const c new_ins_ty if_fa)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Uop o x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Uop(x) in the new regions
        (union (Get arg_tr i) (Uop o (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Uop o (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

; OLD VERSION - Too slow for now
; ; push bop input into region
; (rule (
;         (= if_e (If pred orig_inputs thn els))
;         (ContextOf if_e outer_ctx)
;         (= (Bop o x y) (Get orig_inputs i))
;         (HasArgType thn (TupleT tylist))
;         (HasArgType els (TupleT tylist))
;         (HasType x (Base x_ty))
;         (HasType y (Base y_ty))
;       )
;       (
;         ; New inputs
;         (let new_ins (Concat orig_inputs (Concat (Single x) (Single y))))
;         (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TCons y_ty (TNil))))))

;         ; New contexts
;         (let if_tr (InIf true  pred new_ins))
;         (let if_fa (InIf false pred new_ins))
        
;         ; New args
;         (let arg_tr (Arg new_ins_ty if_tr))
;         (let arg_fa (Arg new_ins_ty if_fa))

;         ; SubTuple
;         (let orig_ins_len (TypeList-length tylist))
;         (let st_tr (SubTuple arg_tr 0 orig_ins_len))
;         (let st_fa (SubTuple arg_fa 0 orig_ins_len))

;         ; New regions
;         (let new_thn (Subst if_tr st_tr thn))
;         (let new_els (Subst if_fa st_fa els))

;         ; Union the original input with Bop(x, y) in the new regions
;         (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Get arg_tr (+ orig_ins_len 1))))
;         (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Get arg_fa (+ orig_ins_len 1))))

;         ; Union the ifs
;         (union if_e (If pred new_ins new_thn new_els))
;       )
;       :ruleset push-in)
;; use these rules to clean up the database, removing helpers
;; this makes the visualization easier to read

(ruleset debug-deletes)

(rule ((HasType a b))
      ((delete (HasType a b)))
      :ruleset debug-deletes)

(rule ((BodyContainsExpr a b))
      ((delete (BodyContainsExpr a b)))
      :ruleset debug-deletes)

(rule ((ExprIsPure e))
      ((delete (ExprIsPure e)))
      :ruleset debug-deletes)

(rule ((HasArgType e ty))
      ((delete (HasArgType e ty)))
      :ruleset debug-deletes)

(rule ((is-inv-Expr e ty))
      ((delete (is-inv-Expr e ty)))
      :ruleset debug-deletes)

(rule ((tuple-length e))
      ((delete (tuple-length e)))
      :ruleset debug-deletes)

(rule ((BinaryOpIsPure e))
      ((delete (BinaryOpIsPure e)))
      :ruleset debug-deletes)

(rule ((ContextOf e a))
      ((delete (ContextOf e a)))
      :ruleset debug-deletes)

(rule ((ExprIsResolved e))
      ((delete (ExprIsResolved e)))
      :ruleset debug-deletes)

(rule ((bop->string a b))
      ((delete (bop->string a b)))
      :ruleset debug-deletes)

(rule ((bpred-of-type a b))
      ((delete (bpred-of-type a b)))
      :ruleset debug-deletes)

(rule ((PureType e))
      ((delete (PureType e)))
      :ruleset debug-deletes)

(rule ((PointsToCells a b))
      ((delete (PointsToCells a b)))
      :ruleset debug-deletes)

(rule ((TuplePointsTo e))
      ((delete (TuplePointsTo e)))
      :ruleset debug-deletes)

(rule ((Resolved-List<PtrPointees> e))
      ((delete (Resolved-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((TypeListToList<PtrPointees> e))
      ((delete (TypeListToList<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<PtrPointees> a b))
      ((delete (Cons-List<PtrPointees> a b)))
      :ruleset debug-deletes)

(rule ((Nil-List<PtrPointees>))
      ((delete (Nil-List<PtrPointees>)))
      :ruleset debug-deletes)

(rule ((Length-List<PtrPointees> e))
      ((delete (Length-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((At-List<PtrPointees> a b c))
      ((delete (At-List<PtrPointees> a b c)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<PtrPointees> a))
      ((delete (IsNonEmpty-List<PtrPointees> a)))
      :ruleset debug-deletes)

(rule ((Resolved-List<i64+IntInterval> e))
      ((delete (Resolved-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<i64+IntInterval> a b c))
      ((delete (Cons-List<i64+IntInterval> a b c)))
      :ruleset debug-deletes)

(rule ((Nil-List<i64+IntInterval>))
      ((delete (Nil-List<i64+IntInterval>)))
      :ruleset debug-deletes)

(rule ((Length-List<i64+IntInterval> e))
      ((delete (Length-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((At-List<i64+IntInterval> a b c d))
      ((delete (At-List<i64+IntInterval> a b c d)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<i64+IntInterval> a))
      ((delete (IsNonEmpty-List<i64+IntInterval> a)))
      :ruleset debug-deletes)

(rule ((TypeList-ith a b))
      ((delete (TypeList-ith a b)))
      :ruleset debug-deletes)

(rule ((InIf a b c))
      ((delete (InIf a b c)))
      :ruleset debug-deletes)
(rule ((InLoop a b))
      ((delete (InLoop a b)))
      :ruleset debug-deletes)
(rule ((InFunc a))
      ((delete (InFunc a)))
      :ruleset debug-deletes)

(rule ((TupleT a))
      ((delete (TupleT a)))
      :ruleset debug-deletes)
(rule ((TCons a b))
      ((delete (TCons a b)))
      :ruleset debug-deletes)
(rule ((TNil))
      ((delete (TNil)))
      :ruleset debug-deletes)
(rule ((Base a))
      ((delete (Base a)))
      :ruleset debug-deletes)
(rule ((IntT))
      ((delete (IntT)))
      :ruleset debug-deletes)

;; Hacker's delight optimizations

(ruleset hacker)

;; A simple analysis to identify loops that run exactly #popcount times

;; IsIsEven e x => e is a boolean expression that checks whether x is an even number
(relation IsIsEven (Expr Expr))

(rule (
    (= two (Const (Int 2) ty ctx))
    (= e (Bop (Eq) x (Bop (Mul) (Bop (Div) x two) two)))
) (
    (IsIsEven e x)
) :ruleset hacker)

;; NTZIterations lp n pos => loop lp runs exactly number_of_trailing_zeros(n) times at index pos
(relation NTZIterations (Expr Expr i64))

(rule (
    ;; Grab the outer if
    (= outerif (If cond inputs evenbr oddbr))
    ;; There exists an argument n
    (= n (Get inputs i))
    ;; The condition is on the parity of n
    (IsIsEven cond n)
    ;; In the even/true branch, there is a loop
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    ;; n is passed into to the loop
    (= (Get lp_inputs j) (Get (Arg _ty1 _ctx1) i))
    ;; the loop continues as long as n / 2 is even
    (= two (Const (Int 2) _ty2 _ctx2))
    (= nd2 (Bop (Div) (Get (Arg _ty3 _ctx3) j) two))
    (IsIsEven (Get lp_pred_outputs 0) nd2)
    ;; n is divided by 2 every loop
    (= nd2 (Get lp_pred_outputs (+ j 1)))
    ;; In the odd/false branch, we look for an n
    (= (Get (Arg _ty4 _ctx4) i) (Get oddbr j))
) (
    (NTZIterations outerif n j)
) :ruleset hacker)

;; Identify and optimize lowbit

(rule (
    (NTZIterations outerif n i)
    (= outerif (If cond inputs evenbr oddbr))
    ;; In the even branch, it returns a value that doubles every iter
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    (= (Const (Int 1) _ty1 _ctx1) (Get lp_inputs j))
    (= two (Const (Int 2) _ty2 _ctx2))
    (= (Bop (Mul) (Get (Arg _ty3 _ctx3) j) two) (Get lp_pred_outputs (+ j 1)))    
    ;; In the odd branch, it returns an 1
    (= (Const (Int 1) _ty0 _ctx0) (Get oddbr j))
) (
    (let lowbitn (Bop (Bitand) n (Uop (Neg) n)))
    (union (Get outerif j) lowbitn)
    (union (Get outerif i) (Bop (Div) n lowbitn))
) :ruleset hacker)

;; Try to do a state-edge-passthrough for loops
;; NLZIterations guarantees termination for non-zero values
;; lowbit(0) is undefined behavior

(constructor DummyLoopContext (Expr Expr Expr) Assumption)

(rule (
    (NTZIterations anyif n i)
    (= anyif (If cond inputs thenbr elsebr))
    (= thenbr (DoWhile lpinputs pred_outputs))
    (= (Get pred_outputs (+ j 1)) (Get (Arg arg_ty then_ctx) j))
    (HasType (Get pred_outputs (+ j 1)) (Base (StateT)))
) (
    (let newlpinputs (TupleRemoveAt lpinputs j))
    (let newpred_outputs (TupleRemoveAt pred_outputs (+ j 1)))
    
    (let newlpctx (DummyLoopContext newlpinputs newpred_outputs pred_outputs))

    (let newbody (DropAt newlpctx j newpred_outputs))

    (union newlpctx (InLoop newlpinputs newbody))

    (let newlp (DoWhile newlpinputs newbody))
    (let oldlp (TupleRemoveAt thenbr j))

    (union newlp oldlp)

    (union (Get thenbr j) (Get lpinputs j))

) :ruleset hacker)

(unstable-combined-ruleset cheap-optimizations
    hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)

(unstable-combined-ruleset all-optimizations
    select_opt
loop-unroll
switch_rewrite
loop-inv-motion
loop-strength-reduction
cicm
push-in
hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)
    

; required by function_inlining_unoins
; Function inlining unions
(relation InlinedCall (String Expr))

(ruleset initialization)
(rule () (
    ; Program nodes
    (let __tmp0 (Int 60))
(let __tmp1 (StateT ))
(let __tmp2 (TNil ))
(let __tmp3 (TCons __tmp1 __tmp2))
(let __tmp4 (TupleT __tmp3))
(let __tmp5 (InFunc "main"))
(let __tmp6 (Const __tmp0 __tmp4 __tmp5))
(let __tmp7 (Single __tmp6))
(let __tmp8 (Bool true))
(let __tmp9 (Const __tmp8 __tmp4 __tmp5))
(let __tmp10 (Arg __tmp4 __tmp5))
(let __tmp11 (Get __tmp10 0))
(let __tmp12 (FloatT ))
(let __tmp13 (PointerT __tmp12))
(let __tmp14 (Alloc 0 __tmp6 __tmp11 __tmp13))
(let __tmp15 (Get __tmp14 1))
(let __tmp16 (Single __tmp15))
(let __tmp17 (Int 40))
(let __tmp18 (Const __tmp17 __tmp4 __tmp5))
(let __tmp19 (Single __tmp18))
(let __tmp20 (Float 40.0))
(let __tmp21 (Const __tmp20 __tmp4 __tmp5))
(let __tmp22 (Single __tmp21))
(let __tmp23 (Float 60.0))
(let __tmp24 (Const __tmp23 __tmp4 __tmp5))
(let __tmp25 (Single __tmp24))
(let __tmp26 (Get __tmp14 0))
(let __tmp27 (Single __tmp26))
(let __tmp28 (Int 0))
(let __tmp29 (Const __tmp28 __tmp4 __tmp5))
(let __tmp30 (Single __tmp29))
(let __tmp31 (Int 1))
(let __tmp32 (Const __tmp31 __tmp4 __tmp5))
(let __tmp33 (Single __tmp32))
(let __tmp34 (Float 0.0))
(let __tmp35 (Const __tmp34 __tmp4 __tmp5))
(let __tmp36 (Single __tmp35))
(let __tmp37 (Concat __tmp36 __tmp7))
(let __tmp38 (Concat __tmp27 __tmp37))
(let __tmp39 (Concat __tmp33 __tmp38))
(let __tmp40 (Concat __tmp30 __tmp39))
(let __tmp41 (Concat __tmp27 __tmp40))
(let __tmp42 (Concat __tmp25 __tmp41))
(let __tmp43 (Concat __tmp22 __tmp42))
(let __tmp44 (Concat __tmp19 __tmp43))
(let __tmp45 (Concat __tmp7 __tmp44))
(let __tmp46 (Concat __tmp16 __tmp45))
(let __tmp47 (IntT ))
(let __tmp48 (TCons __tmp47 __tmp2))
(let __tmp49 (TCons __tmp12 __tmp48))
(let __tmp50 (TCons __tmp13 __tmp49))
(let __tmp51 (TCons __tmp47 __tmp50))
(let __tmp52 (TCons __tmp47 __tmp51))
(let __tmp53 (TCons __tmp13 __tmp52))
(let __tmp54 (TCons __tmp12 __tmp53))
(let __tmp55 (TCons __tmp12 __tmp54))
(let __tmp56 (TCons __tmp47 __tmp55))
(let __tmp57 (TCons __tmp47 __tmp56))
(let __tmp58 (TCons __tmp1 __tmp57))
(let __tmp59 (TupleT __tmp58))
(let __tmp60 (InIf true __tmp9 __tmp46))
(let __tmp61 (Arg __tmp59 __tmp60))
(let __tmp62 (LessThan ))
(let __tmp63 (Add ))
(let __tmp64 (InFunc " loop_ctx_2"))
(let __tmp65 (Arg __tmp59 __tmp64))
(let __tmp66 (Get __tmp65 6))
(let __tmp67 (Get __tmp65 7))
(let __tmp68 (Bop __tmp63 __tmp66 __tmp67))
(let __tmp69 (Get __tmp65 1))
(let __tmp70 (Bop __tmp62 __tmp68 __tmp69))
(let __tmp71 (Single __tmp70))
(let __tmp72 (Write ))
(let __tmp73 (Get __tmp65 8))
(let __tmp74 (Get __tmp65 9))
(let __tmp75 (Get __tmp65 0))
(let __tmp76 (Top __tmp72 __tmp73 __tmp74 __tmp75))
(let __tmp77 (Single __tmp76))
(let __tmp78 (Single __tmp69))
(let __tmp79 (Get __tmp65 2))
(let __tmp80 (Single __tmp79))
(let __tmp81 (Get __tmp65 3))
(let __tmp82 (Single __tmp81))
(let __tmp83 (Concat __tmp80 __tmp82))
(let __tmp84 (Get __tmp65 4))
(let __tmp85 (Single __tmp84))
(let __tmp86 (Concat __tmp83 __tmp85))
(let __tmp87 (Get __tmp65 5))
(let __tmp88 (Single __tmp87))
(let __tmp89 (Concat __tmp86 __tmp88))
(let __tmp90 (Concat __tmp78 __tmp89))
(let __tmp91 (Concat __tmp77 __tmp90))
(let __tmp92 (Single __tmp68))
(let __tmp93 (Concat __tmp91 __tmp92))
(let __tmp94 (Single __tmp67))
(let __tmp95 (PtrAdd ))
(let __tmp96 (Bop __tmp95 __tmp73 __tmp67))
(let __tmp97 (Single __tmp96))
(let __tmp98 (Concat __tmp94 __tmp97))
(let __tmp99 (Concat __tmp93 __tmp98))
(let __tmp100 (Single __tmp74))
(let __tmp101 (Concat __tmp100 __tmp78))
(let __tmp102 (Concat __tmp99 __tmp101))
(let __tmp103 (Concat __tmp71 __tmp102))
(let __tmp104 (DoWhile __tmp61 __tmp103))
(let __tmp105 (InIf false __tmp9 __tmp46))
(let __tmp106 (Arg __tmp59 __tmp105))
(let __tmp107 (If __tmp9 __tmp46 __tmp104 __tmp106))
(let __tmp108 (Get __tmp107 0))
(let __tmp109 (PointerT __tmp13))
(let __tmp110 (Alloc 1 __tmp6 __tmp108 __tmp109))
(let __tmp111 (Get __tmp110 1))
(let __tmp112 (Single __tmp111))
(let __tmp113 (Get __tmp107 5))
(let __tmp114 (Single __tmp113))
(let __tmp115 (Get __tmp107 3))
(let __tmp116 (Single __tmp115))
(let __tmp117 (Get __tmp107 4))
(let __tmp118 (Single __tmp117))
(let __tmp119 (Get __tmp110 0))
(let __tmp120 (Single __tmp119))
(let __tmp121 (Concat __tmp120 __tmp7))
(let __tmp122 (Concat __tmp33 __tmp121))
(let __tmp123 (Concat __tmp30 __tmp122))
(let __tmp124 (Concat __tmp120 __tmp123))
(let __tmp125 (Concat __tmp118 __tmp124))
(let __tmp126 (Concat __tmp116 __tmp125))
(let __tmp127 (Concat __tmp19 __tmp126))
(let __tmp128 (Concat __tmp114 __tmp127))
(let __tmp129 (Concat __tmp7 __tmp128))
(let __tmp130 (Concat __tmp112 __tmp129))
(let __tmp131 (TCons __tmp109 __tmp48))
(let __tmp132 (TCons __tmp47 __tmp131))
(let __tmp133 (TCons __tmp47 __tmp132))
(let __tmp134 (TCons __tmp109 __tmp133))
(let __tmp135 (TCons __tmp12 __tmp134))
(let __tmp136 (TCons __tmp12 __tmp135))
(let __tmp137 (TCons __tmp47 __tmp136))
(let __tmp138 (TCons __tmp13 __tmp137))
(let __tmp139 (TCons __tmp47 __tmp138))
(let __tmp140 (TCons __tmp1 __tmp139))
(let __tmp141 (TupleT __tmp140))
(let __tmp142 (InIf true __tmp9 __tmp130))
(let __tmp143 (Arg __tmp141 __tmp142))
(let __tmp144 (InFunc " loop_ctx_3"))
(let __tmp145 (Arg __tmp141 __tmp144))
(let __tmp146 (Get __tmp145 8))
(let __tmp147 (Get __tmp145 7))
(let __tmp148 (Bop __tmp63 __tmp146 __tmp147))
(let __tmp149 (Get __tmp145 1))
(let __tmp150 (Bop __tmp62 __tmp148 __tmp149))
(let __tmp151 (Single __tmp150))
(let __tmp152 (Get __tmp145 9))
(let __tmp153 (Get __tmp145 2))
(let __tmp154 (Get __tmp145 0))
(let __tmp155 (Top __tmp72 __tmp152 __tmp153 __tmp154))
(let __tmp156 (Single __tmp155))
(let __tmp157 (Single __tmp149))
(let __tmp158 (Concat __tmp156 __tmp157))
(let __tmp159 (Single __tmp153))
(let __tmp160 (Get __tmp145 3))
(let __tmp161 (Single __tmp160))
(let __tmp162 (Concat __tmp159 __tmp161))
(let __tmp163 (Get __tmp145 4))
(let __tmp164 (Single __tmp163))
(let __tmp165 (Concat __tmp162 __tmp164))
(let __tmp166 (Get __tmp145 5))
(let __tmp167 (Single __tmp166))
(let __tmp168 (Concat __tmp165 __tmp167))
(let __tmp169 (Get __tmp145 6))
(let __tmp170 (Single __tmp169))
(let __tmp171 (Concat __tmp168 __tmp170))
(let __tmp172 (Single __tmp148))
(let __tmp173 (Single __tmp146))
(let __tmp174 (Bop __tmp95 __tmp152 __tmp146))
(let __tmp175 (Single __tmp174))
(let __tmp176 (Concat __tmp173 __tmp175))
(let __tmp177 (Concat __tmp176 __tmp157))
(let __tmp178 (Concat __tmp172 __tmp177))
(let __tmp179 (Concat __tmp171 __tmp178))
(let __tmp180 (Concat __tmp158 __tmp179))
(let __tmp181 (Concat __tmp151 __tmp180))
(let __tmp182 (DoWhile __tmp143 __tmp181))
(let __tmp183 (InIf false __tmp9 __tmp130))
(let __tmp184 (Arg __tmp141 __tmp183))
(let __tmp185 (If __tmp9 __tmp130 __tmp182 __tmp184))
(let __tmp186 (Get __tmp185 0))
(let __tmp187 (Alloc 2 __tmp6 __tmp186 __tmp109))
(let __tmp188 (Get __tmp187 1))
(let __tmp189 (Single __tmp188))
(let __tmp190 (Get __tmp185 6))
(let __tmp191 (Single __tmp190))
(let __tmp192 (Get __tmp185 2))
(let __tmp193 (Single __tmp192))
(let __tmp194 (Get __tmp185 4))
(let __tmp195 (Single __tmp194))
(let __tmp196 (Get __tmp185 5))
(let __tmp197 (Single __tmp196))
(let __tmp198 (Get __tmp187 0))
(let __tmp199 (Single __tmp198))
(let __tmp200 (Concat __tmp199 __tmp7))
(let __tmp201 (Concat __tmp33 __tmp200))
(let __tmp202 (Concat __tmp30 __tmp201))
(let __tmp203 (Concat __tmp199 __tmp202))
(let __tmp204 (Concat __tmp197 __tmp203))
(let __tmp205 (Concat __tmp195 __tmp204))
(let __tmp206 (Concat __tmp19 __tmp205))
(let __tmp207 (Concat __tmp193 __tmp206))
(let __tmp208 (Concat __tmp7 __tmp207))
(let __tmp209 (Concat __tmp191 __tmp208))
(let __tmp210 (Concat __tmp189 __tmp209))
(let __tmp211 (TCons __tmp109 __tmp139))
(let __tmp212 (TCons __tmp1 __tmp211))
(let __tmp213 (TupleT __tmp212))
(let __tmp214 (InIf true __tmp9 __tmp210))
(let __tmp215 (Arg __tmp213 __tmp214))
(let __tmp216 (InFunc " loop_ctx_4"))
(let __tmp217 (Arg __tmp213 __tmp216))
(let __tmp218 (Get __tmp217 9))
(let __tmp219 (Get __tmp217 8))
(let __tmp220 (Bop __tmp63 __tmp218 __tmp219))
(let __tmp221 (Get __tmp217 2))
(let __tmp222 (Bop __tmp62 __tmp220 __tmp221))
(let __tmp223 (Single __tmp222))
(let __tmp224 (Get __tmp217 10))
(let __tmp225 (Get __tmp217 3))
(let __tmp226 (Get __tmp217 0))
(let __tmp227 (Top __tmp72 __tmp224 __tmp225 __tmp226))
(let __tmp228 (Single __tmp227))
(let __tmp229 (Get __tmp217 1))
(let __tmp230 (Single __tmp229))
(let __tmp231 (Concat __tmp228 __tmp230))
(let __tmp232 (Single __tmp221))
(let __tmp233 (Concat __tmp231 __tmp232))
(let __tmp234 (Single __tmp225))
(let __tmp235 (Get __tmp217 4))
(let __tmp236 (Single __tmp235))
(let __tmp237 (Concat __tmp234 __tmp236))
(let __tmp238 (Get __tmp217 5))
(let __tmp239 (Single __tmp238))
(let __tmp240 (Concat __tmp237 __tmp239))
(let __tmp241 (Get __tmp217 6))
(let __tmp242 (Single __tmp241))
(let __tmp243 (Concat __tmp240 __tmp242))
(let __tmp244 (Get __tmp217 7))
(let __tmp245 (Single __tmp244))
(let __tmp246 (Concat __tmp243 __tmp245))
(let __tmp247 (Single __tmp220))
(let __tmp248 (Single __tmp218))
(let __tmp249 (Bop __tmp95 __tmp224 __tmp218))
(let __tmp250 (Single __tmp249))
(let __tmp251 (Concat __tmp248 __tmp250))
(let __tmp252 (Concat __tmp251 __tmp232))
(let __tmp253 (Concat __tmp247 __tmp252))
(let __tmp254 (Concat __tmp246 __tmp253))
(let __tmp255 (Concat __tmp233 __tmp254))
(let __tmp256 (Concat __tmp223 __tmp255))
(let __tmp257 (DoWhile __tmp215 __tmp256))
(let __tmp258 (InIf false __tmp9 __tmp210))
(let __tmp259 (Arg __tmp213 __tmp258))
(let __tmp260 (If __tmp9 __tmp210 __tmp257 __tmp259))
(let __tmp261 (Get __tmp260 0))
(let __tmp262 (Alloc 3 __tmp6 __tmp261 __tmp109))
(let __tmp263 (Get __tmp262 1))
(let __tmp264 (Single __tmp263))
(let __tmp265 (Get __tmp260 7))
(let __tmp266 (Single __tmp265))
(let __tmp267 (Get __tmp260 1))
(let __tmp268 (Single __tmp267))
(let __tmp269 (Get __tmp260 3))
(let __tmp270 (Single __tmp269))
(let __tmp271 (Get __tmp260 5))
(let __tmp272 (Single __tmp271))
(let __tmp273 (Get __tmp260 6))
(let __tmp274 (Single __tmp273))
(let __tmp275 (Get __tmp262 0))
(let __tmp276 (Single __tmp275))
(let __tmp277 (Concat __tmp276 __tmp7))
(let __tmp278 (Concat __tmp33 __tmp277))
(let __tmp279 (Concat __tmp30 __tmp278))
(let __tmp280 (Concat __tmp276 __tmp279))
(let __tmp281 (Concat __tmp274 __tmp280))
(let __tmp282 (Concat __tmp272 __tmp281))
(let __tmp283 (Concat __tmp19 __tmp282))
(let __tmp284 (Concat __tmp270 __tmp283))
(let __tmp285 (Concat __tmp7 __tmp284))
(let __tmp286 (Concat __tmp268 __tmp285))
(let __tmp287 (Concat __tmp266 __tmp286))
(let __tmp288 (Concat __tmp264 __tmp287))
(let __tmp289 (TCons __tmp109 __tmp211))
(let __tmp290 (TCons __tmp1 __tmp289))
(let __tmp291 (TupleT __tmp290))
(let __tmp292 (InIf true __tmp9 __tmp288))
(let __tmp293 (Arg __tmp291 __tmp292))
(let __tmp294 (InFunc " loop_ctx_5"))
(let __tmp295 (Arg __tmp291 __tmp294))
(let __tmp296 (Get __tmp295 10))
(let __tmp297 (Get __tmp295 9))
(let __tmp298 (Bop __tmp63 __tmp296 __tmp297))
(let __tmp299 (Get __tmp295 3))
(let __tmp300 (Bop __tmp62 __tmp298 __tmp299))
(let __tmp301 (Single __tmp300))
(let __tmp302 (Get __tmp295 11))
(let __tmp303 (Get __tmp295 4))
(let __tmp304 (Get __tmp295 0))
(let __tmp305 (Top __tmp72 __tmp302 __tmp303 __tmp304))
(let __tmp306 (Single __tmp305))
(let __tmp307 (Get __tmp295 1))
(let __tmp308 (Single __tmp307))
(let __tmp309 (Concat __tmp306 __tmp308))
(let __tmp310 (Get __tmp295 2))
(let __tmp311 (Single __tmp310))
(let __tmp312 (Concat __tmp309 __tmp311))
(let __tmp313 (Single __tmp299))
(let __tmp314 (Concat __tmp312 __tmp313))
(let __tmp315 (Single __tmp303))
(let __tmp316 (Get __tmp295 5))
(let __tmp317 (Single __tmp316))
(let __tmp318 (Concat __tmp315 __tmp317))
(let __tmp319 (Get __tmp295 6))
(let __tmp320 (Single __tmp319))
(let __tmp321 (Concat __tmp318 __tmp320))
(let __tmp322 (Get __tmp295 7))
(let __tmp323 (Single __tmp322))
(let __tmp324 (Concat __tmp321 __tmp323))
(let __tmp325 (Get __tmp295 8))
(let __tmp326 (Single __tmp325))
(let __tmp327 (Concat __tmp324 __tmp326))
(let __tmp328 (Single __tmp298))
(let __tmp329 (Single __tmp296))
(let __tmp330 (Bop __tmp95 __tmp302 __tmp296))
(let __tmp331 (Single __tmp330))
(let __tmp332 (Concat __tmp329 __tmp331))
(let __tmp333 (Concat __tmp332 __tmp313))
(let __tmp334 (Concat __tmp328 __tmp333))
(let __tmp335 (Concat __tmp327 __tmp334))
(let __tmp336 (Concat __tmp314 __tmp335))
(let __tmp337 (Concat __tmp301 __tmp336))
(let __tmp338 (DoWhile __tmp293 __tmp337))
(let __tmp339 (InIf false __tmp9 __tmp288))
(let __tmp340 (Arg __tmp291 __tmp339))
(let __tmp341 (If __tmp9 __tmp288 __tmp338 __tmp340))
(let __tmp342 (Get __tmp341 0))
(let __tmp343 (Alloc 4 __tmp6 __tmp342 __tmp109))
(let __tmp344 (Get __tmp343 1))
(let __tmp345 (Single __tmp344))
(let __tmp346 (Get __tmp341 8))
(let __tmp347 (Single __tmp346))
(let __tmp348 (Get __tmp341 1))
(let __tmp349 (Single __tmp348))
(let __tmp350 (Get __tmp341 2))
(let __tmp351 (Single __tmp350))
(let __tmp352 (Get __tmp341 4))
(let __tmp353 (Single __tmp352))
(let __tmp354 (Get __tmp341 6))
(let __tmp355 (Single __tmp354))
(let __tmp356 (Get __tmp341 7))
(let __tmp357 (Single __tmp356))
(let __tmp358 (Get __tmp343 0))
(let __tmp359 (Single __tmp358))
(let __tmp360 (Concat __tmp359 __tmp7))
(let __tmp361 (Concat __tmp33 __tmp360))
(let __tmp362 (Concat __tmp30 __tmp361))
(let __tmp363 (Concat __tmp359 __tmp362))
(let __tmp364 (Concat __tmp357 __tmp363))
(let __tmp365 (Concat __tmp355 __tmp364))
(let __tmp366 (Concat __tmp19 __tmp365))
(let __tmp367 (Concat __tmp353 __tmp366))
(let __tmp368 (Concat __tmp7 __tmp367))
(let __tmp369 (Concat __tmp351 __tmp368))
(let __tmp370 (Concat __tmp349 __tmp369))
(let __tmp371 (Concat __tmp347 __tmp370))
(let __tmp372 (Concat __tmp345 __tmp371))
(let __tmp373 (TCons __tmp109 __tmp289))
(let __tmp374 (TCons __tmp1 __tmp373))
(let __tmp375 (TupleT __tmp374))
(let __tmp376 (InIf true __tmp9 __tmp372))
(let __tmp377 (Arg __tmp375 __tmp376))
(let __tmp378 (InFunc " loop_ctx_6"))
(let __tmp379 (Arg __tmp375 __tmp378))
(let __tmp380 (Get __tmp379 11))
(let __tmp381 (Get __tmp379 10))
(let __tmp382 (Bop __tmp63 __tmp380 __tmp381))
(let __tmp383 (Get __tmp379 4))
(let __tmp384 (Bop __tmp62 __tmp382 __tmp383))
(let __tmp385 (Single __tmp384))
(let __tmp386 (Get __tmp379 12))
(let __tmp387 (Get __tmp379 5))
(let __tmp388 (Get __tmp379 0))
(let __tmp389 (Top __tmp72 __tmp386 __tmp387 __tmp388))
(let __tmp390 (Single __tmp389))
(let __tmp391 (Get __tmp379 1))
(let __tmp392 (Single __tmp391))
(let __tmp393 (Concat __tmp390 __tmp392))
(let __tmp394 (Get __tmp379 2))
(let __tmp395 (Single __tmp394))
(let __tmp396 (Concat __tmp393 __tmp395))
(let __tmp397 (Get __tmp379 3))
(let __tmp398 (Single __tmp397))
(let __tmp399 (Concat __tmp396 __tmp398))
(let __tmp400 (Single __tmp383))
(let __tmp401 (Single __tmp387))
(let __tmp402 (Concat __tmp400 __tmp401))
(let __tmp403 (Concat __tmp399 __tmp402))
(let __tmp404 (Get __tmp379 6))
(let __tmp405 (Single __tmp404))
(let __tmp406 (Get __tmp379 7))
(let __tmp407 (Single __tmp406))
(let __tmp408 (Concat __tmp405 __tmp407))
(let __tmp409 (Get __tmp379 8))
(let __tmp410 (Single __tmp409))
(let __tmp411 (Concat __tmp408 __tmp410))
(let __tmp412 (Get __tmp379 9))
(let __tmp413 (Single __tmp412))
(let __tmp414 (Concat __tmp411 __tmp413))
(let __tmp415 (Single __tmp382))
(let __tmp416 (Single __tmp380))
(let __tmp417 (Concat __tmp415 __tmp416))
(let __tmp418 (Bop __tmp95 __tmp386 __tmp380))
(let __tmp419 (Single __tmp418))
(let __tmp420 (Concat __tmp419 __tmp400))
(let __tmp421 (Concat __tmp417 __tmp420))
(let __tmp422 (Concat __tmp414 __tmp421))
(let __tmp423 (Concat __tmp403 __tmp422))
(let __tmp424 (Concat __tmp385 __tmp423))
(let __tmp425 (DoWhile __tmp377 __tmp424))
(let __tmp426 (InIf false __tmp9 __tmp372))
(let __tmp427 (Arg __tmp375 __tmp426))
(let __tmp428 (If __tmp9 __tmp372 __tmp425 __tmp427))
(let __tmp429 (Get __tmp428 0))
(let __tmp430 (Single __tmp429))
(let __tmp431 (Get __tmp428 9))
(let __tmp432 (Single __tmp431))
(let __tmp433 (Get __tmp428 1))
(let __tmp434 (Single __tmp433))
(let __tmp435 (Get __tmp428 2))
(let __tmp436 (Single __tmp435))
(let __tmp437 (Get __tmp428 3))
(let __tmp438 (Single __tmp437))
(let __tmp439 (Get __tmp428 5))
(let __tmp440 (Single __tmp439))
(let __tmp441 (Get __tmp428 7))
(let __tmp442 (Single __tmp441))
(let __tmp443 (Get __tmp428 8))
(let __tmp444 (Single __tmp443))
(let __tmp445 (Concat __tmp442 __tmp444))
(let __tmp446 (Concat __tmp19 __tmp445))
(let __tmp447 (Concat __tmp440 __tmp446))
(let __tmp448 (Concat __tmp7 __tmp447))
(let __tmp449 (Concat __tmp30 __tmp448))
(let __tmp450 (Concat __tmp438 __tmp449))
(let __tmp451 (Concat __tmp436 __tmp450))
(let __tmp452 (Concat __tmp434 __tmp451))
(let __tmp453 (Concat __tmp432 __tmp452))
(let __tmp454 (Concat __tmp430 __tmp453))
(let __tmp455 (TCons __tmp12 __tmp2))
(let __tmp456 (TCons __tmp12 __tmp455))
(let __tmp457 (TCons __tmp47 __tmp456))
(let __tmp458 (TCons __tmp13 __tmp457))
(let __tmp459 (TCons __tmp47 __tmp458))
(let __tmp460 (TCons __tmp47 __tmp459))
(let __tmp461 (TCons __tmp109 __tmp460))
(let __tmp462 (TCons __tmp109 __tmp461))
(let __tmp463 (TCons __tmp109 __tmp462))
(let __tmp464 (TCons __tmp109 __tmp463))
(let __tmp465 (TCons __tmp1 __tmp464))
(let __tmp466 (TupleT __tmp465))
(let __tmp467 (InFunc " loop_ctx_1"))
(let __tmp468 (Arg __tmp466 __tmp467))
(let __tmp469 (Get __tmp468 5))
(let __tmp470 (Get __tmp468 6))
(let __tmp471 (Bop __tmp62 __tmp469 __tmp470))
(let __tmp472 (Single __tmp471))
(let __tmp473 (InIf true __tmp471 __tmp468))
(let __tmp474 (Const __tmp28 __tmp466 __tmp473))
(let __tmp475 (Arg __tmp466 __tmp473))
(let __tmp476 (Get __tmp475 6))
(let __tmp477 (Bop __tmp62 __tmp474 __tmp476))
(let __tmp478 (Get __tmp475 0))
(let __tmp479 (Alloc 5 __tmp476 __tmp478 __tmp13))
(let __tmp480 (Get __tmp479 1))
(let __tmp481 (Single __tmp480))
(let __tmp482 (Get __tmp475 1))
(let __tmp483 (Single __tmp482))
(let __tmp484 (Get __tmp475 2))
(let __tmp485 (Single __tmp484))
(let __tmp486 (Get __tmp475 3))
(let __tmp487 (Single __tmp486))
(let __tmp488 (Get __tmp475 4))
(let __tmp489 (Single __tmp488))
(let __tmp490 (Get __tmp475 5))
(let __tmp491 (Single __tmp490))
(let __tmp492 (Single __tmp476))
(let __tmp493 (Get __tmp475 7))
(let __tmp494 (Single __tmp493))
(let __tmp495 (Get __tmp475 8))
(let __tmp496 (Single __tmp495))
(let __tmp497 (Get __tmp475 9))
(let __tmp498 (Single __tmp497))
(let __tmp499 (Get __tmp475 10))
(let __tmp500 (Single __tmp499))
(let __tmp501 (Get __tmp479 0))
(let __tmp502 (Single __tmp501))
(let __tmp503 (Single __tmp474))
(let __tmp504 (Const __tmp31 __tmp466 __tmp473))
(let __tmp505 (Single __tmp504))
(let __tmp506 (Const __tmp34 __tmp466 __tmp473))
(let __tmp507 (Single __tmp506))
(let __tmp508 (Concat __tmp507 __tmp492))
(let __tmp509 (Concat __tmp502 __tmp508))
(let __tmp510 (Concat __tmp505 __tmp509))
(let __tmp511 (Concat __tmp503 __tmp510))
(let __tmp512 (Concat __tmp502 __tmp511))
(let __tmp513 (Concat __tmp500 __tmp512))
(let __tmp514 (Concat __tmp498 __tmp513))
(let __tmp515 (Concat __tmp496 __tmp514))
(let __tmp516 (Concat __tmp494 __tmp515))
(let __tmp517 (Concat __tmp492 __tmp516))
(let __tmp518 (Concat __tmp491 __tmp517))
(let __tmp519 (Concat __tmp489 __tmp518))
(let __tmp520 (Concat __tmp487 __tmp519))
(let __tmp521 (Concat __tmp485 __tmp520))
(let __tmp522 (Concat __tmp483 __tmp521))
(let __tmp523 (Concat __tmp481 __tmp522))
(let __tmp524 (TCons __tmp13 __tmp56))
(let __tmp525 (TCons __tmp47 __tmp524))
(let __tmp526 (TCons __tmp47 __tmp525))
(let __tmp527 (TCons __tmp109 __tmp526))
(let __tmp528 (TCons __tmp109 __tmp527))
(let __tmp529 (TCons __tmp109 __tmp528))
(let __tmp530 (TCons __tmp109 __tmp529))
(let __tmp531 (TCons __tmp1 __tmp530))
(let __tmp532 (TupleT __tmp531))
(let __tmp533 (InIf true __tmp477 __tmp523))
(let __tmp534 (Arg __tmp532 __tmp533))
(let __tmp535 (InFunc " loop_ctx_7"))
(let __tmp536 (Arg __tmp532 __tmp535))
(let __tmp537 (Get __tmp536 13))
(let __tmp538 (Get __tmp536 12))
(let __tmp539 (Bop __tmp63 __tmp537 __tmp538))
(let __tmp540 (Get __tmp536 6))
(let __tmp541 (Bop __tmp62 __tmp539 __tmp540))
(let __tmp542 (Single __tmp541))
(let __tmp543 (Get __tmp536 14))
(let __tmp544 (Get __tmp536 15))
(let __tmp545 (Get __tmp536 0))
(let __tmp546 (Top __tmp72 __tmp543 __tmp544 __tmp545))
(let __tmp547 (Single __tmp546))
(let __tmp548 (Get __tmp536 1))
(let __tmp549 (Single __tmp548))
(let __tmp550 (Concat __tmp547 __tmp549))
(let __tmp551 (Get __tmp536 2))
(let __tmp552 (Single __tmp551))
(let __tmp553 (Concat __tmp550 __tmp552))
(let __tmp554 (Get __tmp536 3))
(let __tmp555 (Single __tmp554))
(let __tmp556 (Concat __tmp553 __tmp555))
(let __tmp557 (Get __tmp536 4))
(let __tmp558 (Single __tmp557))
(let __tmp559 (Concat __tmp556 __tmp558))
(let __tmp560 (Get __tmp536 5))
(let __tmp561 (Single __tmp560))
(let __tmp562 (Concat __tmp559 __tmp561))
(let __tmp563 (Single __tmp540))
(let __tmp564 (Concat __tmp562 __tmp563))
(let __tmp565 (Get __tmp536 7))
(let __tmp566 (Single __tmp565))
(let __tmp567 (Get __tmp536 8))
(let __tmp568 (Single __tmp567))
(let __tmp569 (Concat __tmp566 __tmp568))
(let __tmp570 (Get __tmp536 9))
(let __tmp571 (Single __tmp570))
(let __tmp572 (Concat __tmp569 __tmp571))
(let __tmp573 (Get __tmp536 10))
(let __tmp574 (Single __tmp573))
(let __tmp575 (Concat __tmp572 __tmp574))
(let __tmp576 (Get __tmp536 11))
(let __tmp577 (Single __tmp576))
(let __tmp578 (Concat __tmp575 __tmp577))
(let __tmp579 (Single __tmp539))
(let __tmp580 (Single __tmp537))
(let __tmp581 (Concat __tmp579 __tmp580))
(let __tmp582 (Bop __tmp95 __tmp543 __tmp537))
(let __tmp583 (Single __tmp582))
(let __tmp584 (Concat __tmp581 __tmp583))
(let __tmp585 (Concat __tmp578 __tmp584))
(let __tmp586 (Single __tmp544))
(let __tmp587 (Concat __tmp586 __tmp563))
(let __tmp588 (Concat __tmp585 __tmp587))
(let __tmp589 (Concat __tmp564 __tmp588))
(let __tmp590 (Concat __tmp542 __tmp589))
(let __tmp591 (DoWhile __tmp534 __tmp590))
(let __tmp592 (InIf false __tmp477 __tmp523))
(let __tmp593 (Arg __tmp532 __tmp592))
(let __tmp594 (If __tmp477 __tmp523 __tmp591 __tmp593))
(let __tmp595 (Get __tmp594 4))
(let __tmp596 (Bop __tmp95 __tmp595 __tmp490))
(let __tmp597 (Get __tmp594 11))
(let __tmp598 (Get __tmp594 0))
(let __tmp599 (Top __tmp72 __tmp596 __tmp597 __tmp598))
(let __tmp600 (Alloc 6 __tmp476 __tmp599 __tmp13))
(let __tmp601 (Get __tmp600 1))
(let __tmp602 (Single __tmp601))
(let __tmp603 (Get __tmp594 1))
(let __tmp604 (Single __tmp603))
(let __tmp605 (Get __tmp594 2))
(let __tmp606 (Single __tmp605))
(let __tmp607 (Get __tmp594 3))
(let __tmp608 (Single __tmp607))
(let __tmp609 (Single __tmp595))
(let __tmp610 (Get __tmp594 7))
(let __tmp611 (Single __tmp610))
(let __tmp612 (Get __tmp594 9))
(let __tmp613 (Single __tmp612))
(let __tmp614 (Get __tmp594 10))
(let __tmp615 (Single __tmp614))
(let __tmp616 (Get __tmp600 0))
(let __tmp617 (Single __tmp616))
(let __tmp618 (Concat __tmp617 __tmp508))
(let __tmp619 (Concat __tmp505 __tmp618))
(let __tmp620 (Concat __tmp503 __tmp619))
(let __tmp621 (Concat __tmp617 __tmp620))
(let __tmp622 (Concat __tmp615 __tmp621))
(let __tmp623 (Concat __tmp613 __tmp622))
(let __tmp624 (Concat __tmp496 __tmp623))
(let __tmp625 (Concat __tmp611 __tmp624))
(let __tmp626 (Concat __tmp492 __tmp625))
(let __tmp627 (Concat __tmp491 __tmp626))
(let __tmp628 (Concat __tmp609 __tmp627))
(let __tmp629 (Concat __tmp608 __tmp628))
(let __tmp630 (Concat __tmp606 __tmp629))
(let __tmp631 (Concat __tmp604 __tmp630))
(let __tmp632 (Concat __tmp602 __tmp631))
(let __tmp633 (InIf true __tmp477 __tmp632))
(let __tmp634 (Arg __tmp532 __tmp633))
(let __tmp635 (InFunc " loop_ctx_8"))
(let __tmp636 (Arg __tmp532 __tmp635))
(let __tmp637 (Get __tmp636 13))
(let __tmp638 (Get __tmp636 12))
(let __tmp639 (Bop __tmp63 __tmp637 __tmp638))
(let __tmp640 (Get __tmp636 6))
(let __tmp641 (Bop __tmp62 __tmp639 __tmp640))
(let __tmp642 (Single __tmp641))
(let __tmp643 (Get __tmp636 14))
(let __tmp644 (Get __tmp636 15))
(let __tmp645 (Get __tmp636 0))
(let __tmp646 (Top __tmp72 __tmp643 __tmp644 __tmp645))
(let __tmp647 (Single __tmp646))
(let __tmp648 (Get __tmp636 1))
(let __tmp649 (Single __tmp648))
(let __tmp650 (Concat __tmp647 __tmp649))
(let __tmp651 (Get __tmp636 2))
(let __tmp652 (Single __tmp651))
(let __tmp653 (Concat __tmp650 __tmp652))
(let __tmp654 (Get __tmp636 3))
(let __tmp655 (Single __tmp654))
(let __tmp656 (Concat __tmp653 __tmp655))
(let __tmp657 (Get __tmp636 4))
(let __tmp658 (Single __tmp657))
(let __tmp659 (Concat __tmp656 __tmp658))
(let __tmp660 (Get __tmp636 5))
(let __tmp661 (Single __tmp660))
(let __tmp662 (Concat __tmp659 __tmp661))
(let __tmp663 (Single __tmp640))
(let __tmp664 (Concat __tmp662 __tmp663))
(let __tmp665 (Get __tmp636 7))
(let __tmp666 (Single __tmp665))
(let __tmp667 (Get __tmp636 8))
(let __tmp668 (Single __tmp667))
(let __tmp669 (Concat __tmp666 __tmp668))
(let __tmp670 (Get __tmp636 9))
(let __tmp671 (Single __tmp670))
(let __tmp672 (Concat __tmp669 __tmp671))
(let __tmp673 (Get __tmp636 10))
(let __tmp674 (Single __tmp673))
(let __tmp675 (Concat __tmp672 __tmp674))
(let __tmp676 (Get __tmp636 11))
(let __tmp677 (Single __tmp676))
(let __tmp678 (Concat __tmp675 __tmp677))
(let __tmp679 (Single __tmp639))
(let __tmp680 (Single __tmp637))
(let __tmp681 (Concat __tmp679 __tmp680))
(let __tmp682 (Bop __tmp95 __tmp643 __tmp637))
(let __tmp683 (Single __tmp682))
(let __tmp684 (Concat __tmp681 __tmp683))
(let __tmp685 (Concat __tmp678 __tmp684))
(let __tmp686 (Single __tmp644))
(let __tmp687 (Concat __tmp686 __tmp663))
(let __tmp688 (Concat __tmp685 __tmp687))
(let __tmp689 (Concat __tmp664 __tmp688))
(let __tmp690 (Concat __tmp642 __tmp689))
(let __tmp691 (DoWhile __tmp634 __tmp690))
(let __tmp692 (InIf false __tmp477 __tmp632))
(let __tmp693 (Arg __tmp532 __tmp692))
(let __tmp694 (If __tmp477 __tmp632 __tmp691 __tmp693))
(let __tmp695 (Get __tmp694 3))
(let __tmp696 (Bop __tmp95 __tmp695 __tmp490))
(let __tmp697 (Get __tmp694 11))
(let __tmp698 (Get __tmp694 0))
(let __tmp699 (Top __tmp72 __tmp696 __tmp697 __tmp698))
(let __tmp700 (Alloc 7 __tmp476 __tmp699 __tmp13))
(let __tmp701 (Get __tmp700 1))
(let __tmp702 (Single __tmp701))
(let __tmp703 (Get __tmp694 1))
(let __tmp704 (Single __tmp703))
(let __tmp705 (Get __tmp694 2))
(let __tmp706 (Single __tmp705))
(let __tmp707 (Single __tmp695))
(let __tmp708 (Get __tmp694 4))
(let __tmp709 (Single __tmp708))
(let __tmp710 (Get __tmp694 7))
(let __tmp711 (Single __tmp710))
(let __tmp712 (Get __tmp694 9))
(let __tmp713 (Single __tmp712))
(let __tmp714 (Get __tmp694 10))
(let __tmp715 (Single __tmp714))
(let __tmp716 (Get __tmp700 0))
(let __tmp717 (Single __tmp716))
(let __tmp718 (Concat __tmp717 __tmp508))
(let __tmp719 (Concat __tmp505 __tmp718))
(let __tmp720 (Concat __tmp503 __tmp719))
(let __tmp721 (Concat __tmp717 __tmp720))
(let __tmp722 (Concat __tmp715 __tmp721))
(let __tmp723 (Concat __tmp713 __tmp722))
(let __tmp724 (Concat __tmp496 __tmp723))
(let __tmp725 (Concat __tmp711 __tmp724))
(let __tmp726 (Concat __tmp492 __tmp725))
(let __tmp727 (Concat __tmp491 __tmp726))
(let __tmp728 (Concat __tmp709 __tmp727))
(let __tmp729 (Concat __tmp707 __tmp728))
(let __tmp730 (Concat __tmp706 __tmp729))
(let __tmp731 (Concat __tmp704 __tmp730))
(let __tmp732 (Concat __tmp702 __tmp731))
(let __tmp733 (InIf true __tmp477 __tmp732))
(let __tmp734 (Arg __tmp532 __tmp733))
(let __tmp735 (InFunc " loop_ctx_9"))
(let __tmp736 (Arg __tmp532 __tmp735))
(let __tmp737 (Get __tmp736 13))
(let __tmp738 (Get __tmp736 12))
(let __tmp739 (Bop __tmp63 __tmp737 __tmp738))
(let __tmp740 (Get __tmp736 6))
(let __tmp741 (Bop __tmp62 __tmp739 __tmp740))
(let __tmp742 (Single __tmp741))
(let __tmp743 (Get __tmp736 14))
(let __tmp744 (Get __tmp736 15))
(let __tmp745 (Get __tmp736 0))
(let __tmp746 (Top __tmp72 __tmp743 __tmp744 __tmp745))
(let __tmp747 (Single __tmp746))
(let __tmp748 (Get __tmp736 1))
(let __tmp749 (Single __tmp748))
(let __tmp750 (Concat __tmp747 __tmp749))
(let __tmp751 (Get __tmp736 2))
(let __tmp752 (Single __tmp751))
(let __tmp753 (Concat __tmp750 __tmp752))
(let __tmp754 (Get __tmp736 3))
(let __tmp755 (Single __tmp754))
(let __tmp756 (Concat __tmp753 __tmp755))
(let __tmp757 (Get __tmp736 4))
(let __tmp758 (Single __tmp757))
(let __tmp759 (Concat __tmp756 __tmp758))
(let __tmp760 (Get __tmp736 5))
(let __tmp761 (Single __tmp760))
(let __tmp762 (Concat __tmp759 __tmp761))
(let __tmp763 (Single __tmp740))
(let __tmp764 (Concat __tmp762 __tmp763))
(let __tmp765 (Get __tmp736 7))
(let __tmp766 (Single __tmp765))
(let __tmp767 (Get __tmp736 8))
(let __tmp768 (Single __tmp767))
(let __tmp769 (Concat __tmp766 __tmp768))
(let __tmp770 (Get __tmp736 9))
(let __tmp771 (Single __tmp770))
(let __tmp772 (Concat __tmp769 __tmp771))
(let __tmp773 (Get __tmp736 10))
(let __tmp774 (Single __tmp773))
(let __tmp775 (Concat __tmp772 __tmp774))
(let __tmp776 (Get __tmp736 11))
(let __tmp777 (Single __tmp776))
(let __tmp778 (Concat __tmp775 __tmp777))
(let __tmp779 (Single __tmp739))
(let __tmp780 (Single __tmp737))
(let __tmp781 (Concat __tmp779 __tmp780))
(let __tmp782 (Bop __tmp95 __tmp743 __tmp737))
(let __tmp783 (Single __tmp782))
(let __tmp784 (Concat __tmp781 __tmp783))
(let __tmp785 (Concat __tmp778 __tmp784))
(let __tmp786 (Single __tmp744))
(let __tmp787 (Concat __tmp786 __tmp763))
(let __tmp788 (Concat __tmp785 __tmp787))
(let __tmp789 (Concat __tmp764 __tmp788))
(let __tmp790 (Concat __tmp742 __tmp789))
(let __tmp791 (DoWhile __tmp734 __tmp790))
(let __tmp792 (InIf false __tmp477 __tmp732))
(let __tmp793 (Arg __tmp532 __tmp792))
(let __tmp794 (If __tmp477 __tmp732 __tmp791 __tmp793))
(let __tmp795 (Get __tmp794 2))
(let __tmp796 (Bop __tmp95 __tmp795 __tmp490))
(let __tmp797 (Get __tmp794 11))
(let __tmp798 (Get __tmp794 0))
(let __tmp799 (Top __tmp72 __tmp796 __tmp797 __tmp798))
(let __tmp800 (Alloc 8 __tmp476 __tmp799 __tmp13))
(let __tmp801 (Get __tmp800 1))
(let __tmp802 (Single __tmp801))
(let __tmp803 (Get __tmp794 1))
(let __tmp804 (Single __tmp803))
(let __tmp805 (Single __tmp795))
(let __tmp806 (Get __tmp794 3))
(let __tmp807 (Single __tmp806))
(let __tmp808 (Get __tmp794 4))
(let __tmp809 (Single __tmp808))
(let __tmp810 (Get __tmp794 7))
(let __tmp811 (Single __tmp810))
(let __tmp812 (Get __tmp794 9))
(let __tmp813 (Single __tmp812))
(let __tmp814 (Get __tmp794 10))
(let __tmp815 (Single __tmp814))
(let __tmp816 (Get __tmp800 0))
(let __tmp817 (Single __tmp816))
(let __tmp818 (Concat __tmp817 __tmp508))
(let __tmp819 (Concat __tmp505 __tmp818))
(let __tmp820 (Concat __tmp503 __tmp819))
(let __tmp821 (Concat __tmp817 __tmp820))
(let __tmp822 (Concat __tmp815 __tmp821))
(let __tmp823 (Concat __tmp813 __tmp822))
(let __tmp824 (Concat __tmp496 __tmp823))
(let __tmp825 (Concat __tmp811 __tmp824))
(let __tmp826 (Concat __tmp492 __tmp825))
(let __tmp827 (Concat __tmp491 __tmp826))
(let __tmp828 (Concat __tmp809 __tmp827))
(let __tmp829 (Concat __tmp807 __tmp828))
(let __tmp830 (Concat __tmp805 __tmp829))
(let __tmp831 (Concat __tmp804 __tmp830))
(let __tmp832 (Concat __tmp802 __tmp831))
(let __tmp833 (InIf true __tmp477 __tmp832))
(let __tmp834 (Arg __tmp532 __tmp833))
(let __tmp835 (InFunc " loop_ctx_10"))
(let __tmp836 (Arg __tmp532 __tmp835))
(let __tmp837 (Get __tmp836 13))
(let __tmp838 (Get __tmp836 12))
(let __tmp839 (Bop __tmp63 __tmp837 __tmp838))
(let __tmp840 (Get __tmp836 6))
(let __tmp841 (Bop __tmp62 __tmp839 __tmp840))
(let __tmp842 (Single __tmp841))
(let __tmp843 (Get __tmp836 14))
(let __tmp844 (Get __tmp836 15))
(let __tmp845 (Get __tmp836 0))
(let __tmp846 (Top __tmp72 __tmp843 __tmp844 __tmp845))
(let __tmp847 (Single __tmp846))
(let __tmp848 (Get __tmp836 1))
(let __tmp849 (Single __tmp848))
(let __tmp850 (Concat __tmp847 __tmp849))
(let __tmp851 (Get __tmp836 2))
(let __tmp852 (Single __tmp851))
(let __tmp853 (Concat __tmp850 __tmp852))
(let __tmp854 (Get __tmp836 3))
(let __tmp855 (Single __tmp854))
(let __tmp856 (Concat __tmp853 __tmp855))
(let __tmp857 (Get __tmp836 4))
(let __tmp858 (Single __tmp857))
(let __tmp859 (Concat __tmp856 __tmp858))
(let __tmp860 (Get __tmp836 5))
(let __tmp861 (Single __tmp860))
(let __tmp862 (Concat __tmp859 __tmp861))
(let __tmp863 (Single __tmp840))
(let __tmp864 (Concat __tmp862 __tmp863))
(let __tmp865 (Get __tmp836 7))
(let __tmp866 (Single __tmp865))
(let __tmp867 (Get __tmp836 8))
(let __tmp868 (Single __tmp867))
(let __tmp869 (Concat __tmp866 __tmp868))
(let __tmp870 (Get __tmp836 9))
(let __tmp871 (Single __tmp870))
(let __tmp872 (Concat __tmp869 __tmp871))
(let __tmp873 (Get __tmp836 10))
(let __tmp874 (Single __tmp873))
(let __tmp875 (Concat __tmp872 __tmp874))
(let __tmp876 (Get __tmp836 11))
(let __tmp877 (Single __tmp876))
(let __tmp878 (Concat __tmp875 __tmp877))
(let __tmp879 (Single __tmp839))
(let __tmp880 (Single __tmp837))
(let __tmp881 (Concat __tmp879 __tmp880))
(let __tmp882 (Bop __tmp95 __tmp843 __tmp837))
(let __tmp883 (Single __tmp882))
(let __tmp884 (Concat __tmp881 __tmp883))
(let __tmp885 (Concat __tmp878 __tmp884))
(let __tmp886 (Single __tmp844))
(let __tmp887 (Concat __tmp886 __tmp863))
(let __tmp888 (Concat __tmp885 __tmp887))
(let __tmp889 (Concat __tmp864 __tmp888))
(let __tmp890 (Concat __tmp842 __tmp889))
(let __tmp891 (DoWhile __tmp834 __tmp890))
(let __tmp892 (InIf false __tmp477 __tmp832))
(let __tmp893 (Arg __tmp532 __tmp892))
(let __tmp894 (If __tmp477 __tmp832 __tmp891 __tmp893))
(let __tmp895 (Get __tmp894 1))
(let __tmp896 (Bop __tmp95 __tmp895 __tmp490))
(let __tmp897 (Get __tmp894 11))
(let __tmp898 (Get __tmp894 0))
(let __tmp899 (Top __tmp72 __tmp896 __tmp897 __tmp898))
(let __tmp900 (Single __tmp899))
(let __tmp901 (Single __tmp895))
(let __tmp902 (Get __tmp894 2))
(let __tmp903 (Single __tmp902))
(let __tmp904 (Get __tmp894 3))
(let __tmp905 (Single __tmp904))
(let __tmp906 (Get __tmp894 4))
(let __tmp907 (Single __tmp906))
(let __tmp908 (Bop __tmp63 __tmp504 __tmp490))
(let __tmp909 (Single __tmp908))
(let __tmp910 (Get __tmp894 7))
(let __tmp911 (Single __tmp910))
(let __tmp912 (Get __tmp894 9))
(let __tmp913 (Single __tmp912))
(let __tmp914 (Get __tmp894 10))
(let __tmp915 (Single __tmp914))
(let __tmp916 (Concat __tmp913 __tmp915))
(let __tmp917 (Concat __tmp496 __tmp916))
(let __tmp918 (Concat __tmp911 __tmp917))
(let __tmp919 (Concat __tmp492 __tmp918))
(let __tmp920 (Concat __tmp909 __tmp919))
(let __tmp921 (Concat __tmp907 __tmp920))
(let __tmp922 (Concat __tmp905 __tmp921))
(let __tmp923 (Concat __tmp903 __tmp922))
(let __tmp924 (Concat __tmp901 __tmp923))
(let __tmp925 (Concat __tmp900 __tmp924))
(let __tmp926 (InIf false __tmp471 __tmp468))
(let __tmp927 (Arg __tmp466 __tmp926))
(let __tmp928 (If __tmp471 __tmp468 __tmp925 __tmp927))
(let __tmp929 (Concat __tmp472 __tmp928))
(let __tmp930 (DoWhile __tmp454 __tmp929))
(let __tmp931 (Get __tmp930 10))
(let __tmp932 (Single __tmp931))
(let __tmp933 (Get __tmp930 4))
(let __tmp934 (Single __tmp933))
(let __tmp935 (Get __tmp930 0))
(let __tmp936 (Single __tmp935))
(let __tmp937 (Concat __tmp934 __tmp936))
(let __tmp938 (Concat __tmp932 __tmp937))
(let __tmp939 (Concat __tmp7 __tmp938))
(let __tmp940 (Call "init_array" __tmp939))
(let __tmp941 (Get __tmp939 3))
(let __tmp942 (Single __tmp941))
(let __tmp943 (Get __tmp939 1))
(let __tmp944 (Single __tmp943))
(let __tmp945 (Get __tmp939 2))
(let __tmp946 (Single __tmp945))
(let __tmp947 (Get __tmp939 0))
(let __tmp948 (Single __tmp947))
(let __tmp949 (Concat __tmp946 __tmp948))
(let __tmp950 (Concat __tmp944 __tmp949))
(let __tmp951 (Concat __tmp30 __tmp950))
(let __tmp952 (Concat __tmp36 __tmp951))
(let __tmp953 (Concat __tmp942 __tmp952))
(let __tmp954 (TCons __tmp12 __tmp131))
(let __tmp955 (TCons __tmp47 __tmp954))
(let __tmp956 (TCons __tmp12 __tmp955))
(let __tmp957 (TCons __tmp1 __tmp956))
(let __tmp958 (TupleT __tmp957))
(let __tmp959 (InFunc " loop_ctx_18"))
(let __tmp960 (Arg __tmp958 __tmp959))
(let __tmp961 (Get __tmp960 2))
(let __tmp962 (Get __tmp960 5))
(let __tmp963 (Bop __tmp62 __tmp961 __tmp962))
(let __tmp964 (Single __tmp963))
(let __tmp965 (InIf true __tmp963 __tmp960))
(let __tmp966 (Const __tmp28 __tmp958 __tmp965))
(let __tmp967 (Arg __tmp958 __tmp965))
(let __tmp968 (Get __tmp967 5))
(let __tmp969 (Bop __tmp62 __tmp966 __tmp968))
(let __tmp970 (Get __tmp967 0))
(let __tmp971 (Single __tmp970))
(let __tmp972 (Get __tmp967 1))
(let __tmp973 (Single __tmp972))
(let __tmp974 (Get __tmp967 2))
(let __tmp975 (Single __tmp974))
(let __tmp976 (Const __tmp34 __tmp958 __tmp965))
(let __tmp977 (Single __tmp976))
(let __tmp978 (Single __tmp966))
(let __tmp979 (Get __tmp967 3))
(let __tmp980 (Single __tmp979))
(let __tmp981 (Get __tmp967 4))
(let __tmp982 (Single __tmp981))
(let __tmp983 (Single __tmp968))
(let __tmp984 (Concat __tmp982 __tmp983))
(let __tmp985 (Concat __tmp980 __tmp984))
(let __tmp986 (Concat __tmp978 __tmp985))
(let __tmp987 (Concat __tmp977 __tmp986))
(let __tmp988 (Concat __tmp975 __tmp987))
(let __tmp989 (Concat __tmp973 __tmp988))
(let __tmp990 (Concat __tmp971 __tmp989))
(let __tmp991 (TCons __tmp47 __tmp956))
(let __tmp992 (TCons __tmp12 __tmp991))
(let __tmp993 (TCons __tmp1 __tmp992))
(let __tmp994 (TupleT __tmp993))
(let __tmp995 (InIf true __tmp969 __tmp990))
(let __tmp996 (Arg __tmp994 __tmp995))
(let __tmp997 (InFunc " loop_ctx_19"))
(let __tmp998 (Arg __tmp994 __tmp997))
(let __tmp999 (Get __tmp998 4))
(let __tmp1000 (Const __tmp31 __tmp994 __tmp997))
(let __tmp1001 (Bop __tmp63 __tmp999 __tmp1000))
(let __tmp1002 (Get __tmp998 7))
(let __tmp1003 (Bop __tmp62 __tmp1001 __tmp1002))
(let __tmp1004 (Single __tmp1003))
(let __tmp1005 (Load ))
(let __tmp1006 (Get __tmp998 6))
(let __tmp1007 (Get __tmp998 2))
(let __tmp1008 (Bop __tmp95 __tmp1006 __tmp1007))
(let __tmp1009 (Get __tmp998 0))
(let __tmp1010 (Bop __tmp1005 __tmp1008 __tmp1009))
(let __tmp1011 (Get __tmp1010 0))
(let __tmp1012 (Bop __tmp95 __tmp1011 __tmp999))
(let __tmp1013 (FDiv ))
(let __tmp1014 (FAdd ))
(let __tmp1015 (Get __tmp998 1))
(let __tmp1016 (FSub ))
(let __tmp1017 (Get __tmp998 5))
(let __tmp1018 (Get __tmp998 3))
(let __tmp1019 (Bop __tmp1016 __tmp1017 __tmp1018))
(let __tmp1020 (Bop __tmp1014 __tmp1015 __tmp1019))
(let __tmp1021 (Bop __tmp1013 __tmp1020 __tmp1017))
(let __tmp1022 (Get __tmp1010 1))
(let __tmp1023 (Top __tmp72 __tmp1012 __tmp1021 __tmp1022))
(let __tmp1024 (Single __tmp1023))
(let __tmp1025 (Single __tmp1015))
(let __tmp1026 (Single __tmp1007))
(let __tmp1027 (Float 1.0))
(let __tmp1028 (Const __tmp1027 __tmp994 __tmp997))
(let __tmp1029 (Bop __tmp1014 __tmp1018 __tmp1028))
(let __tmp1030 (Single __tmp1029))
(let __tmp1031 (Concat __tmp1026 __tmp1030))
(let __tmp1032 (Concat __tmp1025 __tmp1031))
(let __tmp1033 (Concat __tmp1024 __tmp1032))
(let __tmp1034 (Single __tmp1001))
(let __tmp1035 (Single __tmp1017))
(let __tmp1036 (Concat __tmp1034 __tmp1035))
(let __tmp1037 (Single __tmp1006))
(let __tmp1038 (Concat __tmp1036 __tmp1037))
(let __tmp1039 (Single __tmp1002))
(let __tmp1040 (Concat __tmp1038 __tmp1039))
(let __tmp1041 (Concat __tmp1033 __tmp1040))
(let __tmp1042 (Concat __tmp1004 __tmp1041))
(let __tmp1043 (DoWhile __tmp996 __tmp1042))
(let __tmp1044 (InIf false __tmp969 __tmp990))
(let __tmp1045 (Arg __tmp994 __tmp1044))
(let __tmp1046 (If __tmp969 __tmp990 __tmp1043 __tmp1045))
(let __tmp1047 (Get __tmp1046 0))
(let __tmp1048 (Single __tmp1047))
(let __tmp1049 (Get __tmp1046 1))
(let __tmp1050 (Const __tmp1027 __tmp958 __tmp965))
(let __tmp1051 (Bop __tmp1014 __tmp1049 __tmp1050))
(let __tmp1052 (Single __tmp1051))
(let __tmp1053 (Const __tmp31 __tmp958 __tmp965))
(let __tmp1054 (Bop __tmp63 __tmp1053 __tmp974))
(let __tmp1055 (Single __tmp1054))
(let __tmp1056 (Get __tmp1046 5))
(let __tmp1057 (Single __tmp1056))
(let __tmp1058 (Get __tmp1046 6))
(let __tmp1059 (Single __tmp1058))
(let __tmp1060 (Concat __tmp1059 __tmp983))
(let __tmp1061 (Concat __tmp1057 __tmp1060))
(let __tmp1062 (Concat __tmp1055 __tmp1061))
(let __tmp1063 (Concat __tmp1052 __tmp1062))
(let __tmp1064 (Concat __tmp1048 __tmp1063))
(let __tmp1065 (InIf false __tmp963 __tmp960))
(let __tmp1066 (Arg __tmp958 __tmp1065))
(let __tmp1067 (If __tmp963 __tmp960 __tmp1064 __tmp1066))
(let __tmp1068 (Concat __tmp964 __tmp1067))
(let __tmp1069 (DoWhile __tmp953 __tmp1068))
(let __tmp1070 (Get __tmp1069 0))
(let __tmp1071 (Single __tmp1070))
(let __tmp1072 (Get __tmp930 9))
(let __tmp1073 (Single __tmp1072))
(let __tmp1074 (Get __tmp930 3))
(let __tmp1075 (Single __tmp1074))
(let __tmp1076 (Get __tmp930 2))
(let __tmp1077 (Single __tmp1076))
(let __tmp1078 (Get __tmp930 1))
(let __tmp1079 (Single __tmp1078))
(let __tmp1080 (Concat __tmp1079 __tmp940))
(let __tmp1081 (Concat __tmp1077 __tmp1080))
(let __tmp1082 (Concat __tmp1075 __tmp1081))
(let __tmp1083 (Concat __tmp934 __tmp1082))
(let __tmp1084 (Concat __tmp932 __tmp1083))
(let __tmp1085 (Concat __tmp7 __tmp1084))
(let __tmp1086 (Concat __tmp1073 __tmp1085))
(let __tmp1087 (Concat __tmp19 __tmp1086))
(let __tmp1088 (Call "kernel_adi" __tmp1087))
(let __tmp1089 (Get __tmp1087 8))
(let __tmp1090 (Single __tmp1089))
(let __tmp1091 (Const __tmp1027 __tmp4 __tmp5))
(let __tmp1092 (FMul ))
(let __tmp1093 (Float 2.0))
(let __tmp1094 (Const __tmp1093 __tmp4 __tmp5))
(let __tmp1095 (Get __tmp1087 1))
(let __tmp1096 (Bop __tmp1013 __tmp1091 __tmp1095))
(let __tmp1097 (Bop __tmp1092 __tmp1094 __tmp1096))
(let __tmp1098 (Get __tmp1087 3))
(let __tmp1099 (Bop __tmp1013 __tmp1091 __tmp1098))
(let __tmp1100 (Bop __tmp1092 __tmp1099 __tmp1099))
(let __tmp1101 (Bop __tmp1013 __tmp1097 __tmp1100))
(let __tmp1102 (Bop __tmp1014 __tmp1091 __tmp1101))
(let __tmp1103 (Single __tmp1102))
(let __tmp1104 (Float -1.0))
(let __tmp1105 (Const __tmp1104 __tmp4 __tmp5))
(let __tmp1106 (Bop __tmp1092 __tmp1101 __tmp1105))
(let __tmp1107 (Bop __tmp1013 __tmp1106 __tmp1094))
(let __tmp1108 (Single __tmp1107))
(let __tmp1109 (Get __tmp1087 6))
(let __tmp1110 (Single __tmp1109))
(let __tmp1111 (Get __tmp1087 7))
(let __tmp1112 (Single __tmp1111))
(let __tmp1113 (Bop __tmp1092 __tmp1091 __tmp1096))
(let __tmp1114 (Bop __tmp1013 __tmp1113 __tmp1100))
(let __tmp1115 (Bop __tmp1092 __tmp1114 __tmp1105))
(let __tmp1116 (Bop __tmp1013 __tmp1115 __tmp1094))
(let __tmp1117 (Single __tmp1116))
(let __tmp1118 (Get __tmp1087 4))
(let __tmp1119 (Single __tmp1118))
(let __tmp1120 (Get __tmp1087 2))
(let __tmp1121 (Single __tmp1120))
(let __tmp1122 (Get __tmp1087 5))
(let __tmp1123 (Single __tmp1122))
(let __tmp1124 (Get __tmp1087 0))
(let __tmp1125 (Single __tmp1124))
(let __tmp1126 (Concat __tmp1123 __tmp1125))
(let __tmp1127 (Concat __tmp1121 __tmp1126))
(let __tmp1128 (Concat __tmp1108 __tmp1127))
(let __tmp1129 (Concat __tmp1117 __tmp1128))
(let __tmp1130 (Concat __tmp1119 __tmp1129))
(let __tmp1131 (Concat __tmp1117 __tmp1130))
(let __tmp1132 (Concat __tmp1112 __tmp1131))
(let __tmp1133 (Concat __tmp1110 __tmp1132))
(let __tmp1134 (Concat __tmp1108 __tmp1133))
(let __tmp1135 (Concat __tmp1103 __tmp1134))
(let __tmp1136 (Concat __tmp33 __tmp1135))
(let __tmp1137 (Concat __tmp1090 __tmp1136))
(let __tmp1138 (LessEq ))
(let __tmp1139 (TCons __tmp12 __tmp132))
(let __tmp1140 (TCons __tmp12 __tmp1139))
(let __tmp1141 (TCons __tmp109 __tmp1140))
(let __tmp1142 (TCons __tmp12 __tmp1141))
(let __tmp1143 (TCons __tmp109 __tmp1142))
(let __tmp1144 (TCons __tmp109 __tmp1143))
(let __tmp1145 (TCons __tmp12 __tmp1144))
(let __tmp1146 (TCons __tmp12 __tmp1145))
(let __tmp1147 (TCons __tmp47 __tmp1146))
(let __tmp1148 (TCons __tmp1 __tmp1147))
(let __tmp1149 (TupleT __tmp1148))
(let __tmp1150 (InFunc " loop_ctx_20"))
(let __tmp1151 (Arg __tmp1149 __tmp1150))
(let __tmp1152 (Get __tmp1151 1))
(let __tmp1153 (Get __tmp1151 12))
(let __tmp1154 (Bop __tmp1138 __tmp1152 __tmp1153))
(let __tmp1155 (Single __tmp1154))
(let __tmp1156 (InIf true __tmp1154 __tmp1151))
(let __tmp1157 (Arg __tmp1149 __tmp1156))
(let __tmp1158 (Get __tmp1157 0))
(let __tmp1159 (Single __tmp1158))
(let __tmp1160 (Get __tmp1157 1))
(let __tmp1161 (Single __tmp1160))
(let __tmp1162 (Const __tmp31 __tmp1149 __tmp1156))
(let __tmp1163 (Single __tmp1162))
(let __tmp1164 (Get __tmp1157 2))
(let __tmp1165 (Single __tmp1164))
(let __tmp1166 (Get __tmp1157 3))
(let __tmp1167 (Single __tmp1166))
(let __tmp1168 (Get __tmp1157 4))
(let __tmp1169 (Single __tmp1168))
(let __tmp1170 (Get __tmp1157 5))
(let __tmp1171 (Single __tmp1170))
(let __tmp1172 (Get __tmp1157 6))
(let __tmp1173 (Single __tmp1172))
(let __tmp1174 (Get __tmp1157 7))
(let __tmp1175 (Single __tmp1174))
(let __tmp1176 (Get __tmp1157 8))
(let __tmp1177 (Single __tmp1176))
(let __tmp1178 (Get __tmp1157 9))
(let __tmp1179 (Single __tmp1178))
(let __tmp1180 (Get __tmp1157 10))
(let __tmp1181 (Single __tmp1180))
(let __tmp1182 (Get __tmp1157 11))
(let __tmp1183 (Single __tmp1182))
(let __tmp1184 (Get __tmp1157 12))
(let __tmp1185 (Single __tmp1184))
(let __tmp1186 (Concat __tmp1183 __tmp1185))
(let __tmp1187 (Concat __tmp1181 __tmp1186))
(let __tmp1188 (Concat __tmp1179 __tmp1187))
(let __tmp1189 (Concat __tmp1177 __tmp1188))
(let __tmp1190 (Concat __tmp1175 __tmp1189))
(let __tmp1191 (Concat __tmp1173 __tmp1190))
(let __tmp1192 (Concat __tmp1171 __tmp1191))
(let __tmp1193 (Concat __tmp1169 __tmp1192))
(let __tmp1194 (Concat __tmp1167 __tmp1193))
(let __tmp1195 (Concat __tmp1165 __tmp1194))
(let __tmp1196 (Concat __tmp1163 __tmp1195))
(let __tmp1197 (Concat __tmp1161 __tmp1196))
(let __tmp1198 (Concat __tmp1159 __tmp1197))
(let __tmp1199 (TCons __tmp47 __tmp1147))
(let __tmp1200 (TCons __tmp1 __tmp1199))
(let __tmp1201 (TupleT __tmp1200))
(let __tmp1202 (InFunc " loop_ctx_21"))
(let __tmp1203 (Arg __tmp1201 __tmp1202))
(let __tmp1204 (Get __tmp1203 2))
(let __tmp1205 (Sub ))
(let __tmp1206 (Get __tmp1203 11))
(let __tmp1207 (Const __tmp31 __tmp1201 __tmp1202))
(let __tmp1208 (Bop __tmp1205 __tmp1206 __tmp1207))
(let __tmp1209 (Bop __tmp62 __tmp1204 __tmp1208))
(let __tmp1210 (Single __tmp1209))
(let __tmp1211 (InIf true __tmp1209 __tmp1203))
(let __tmp1212 (Const __tmp31 __tmp1201 __tmp1211))
(let __tmp1213 (Arg __tmp1201 __tmp1211))
(let __tmp1214 (Get __tmp1213 11))
(let __tmp1215 (Bop __tmp1205 __tmp1214 __tmp1212))
(let __tmp1216 (Bop __tmp62 __tmp1212 __tmp1215))
(let __tmp1217 (Get __tmp1213 6))
(let __tmp1218 (Get __tmp1213 2))
(let __tmp1219 (Bop __tmp95 __tmp1217 __tmp1218))
(let __tmp1220 (Get __tmp1213 5))
(let __tmp1221 (Bop __tmp95 __tmp1220 __tmp1218))
(let __tmp1222 (Get __tmp1213 12))
(let __tmp1223 (Const __tmp28 __tmp1201 __tmp1211))
(let __tmp1224 (Bop __tmp95 __tmp1222 __tmp1223))
(let __tmp1225 (Get __tmp1213 0))
(let __tmp1226 (Bop __tmp1005 __tmp1224 __tmp1225))
(let __tmp1227 (Get __tmp1226 0))
(let __tmp1228 (Bop __tmp95 __tmp1227 __tmp1218))
(let __tmp1229 (Const __tmp1027 __tmp1201 __tmp1211))
(let __tmp1230 (Get __tmp1226 1))
(let __tmp1231 (Top __tmp72 __tmp1228 __tmp1229 __tmp1230))
(let __tmp1232 (Bop __tmp1005 __tmp1221 __tmp1231))
(let __tmp1233 (Get __tmp1232 0))
(let __tmp1234 (Bop __tmp95 __tmp1233 __tmp1223))
(let __tmp1235 (Const __tmp34 __tmp1201 __tmp1211))
(let __tmp1236 (Get __tmp1232 1))
(let __tmp1237 (Top __tmp72 __tmp1234 __tmp1235 __tmp1236))
(let __tmp1238 (Bop __tmp1005 __tmp1219 __tmp1237))
(let __tmp1239 (Get __tmp1238 0))
(let __tmp1240 (Bop __tmp95 __tmp1239 __tmp1223))
(let __tmp1241 (Get __tmp1238 1))
(let __tmp1242 (Bop __tmp1005 __tmp1224 __tmp1241))
(let __tmp1243 (Get __tmp1242 0))
(let __tmp1244 (Bop __tmp95 __tmp1243 __tmp1218))
(let __tmp1245 (Get __tmp1242 1))
(let __tmp1246 (Bop __tmp1005 __tmp1244 __tmp1245))
(let __tmp1247 (Get __tmp1246 0))
(let __tmp1248 (Get __tmp1246 1))
(let __tmp1249 (Top __tmp72 __tmp1240 __tmp1247 __tmp1248))
(let __tmp1250 (Single __tmp1249))
(let __tmp1251 (Get __tmp1213 1))
(let __tmp1252 (Single __tmp1251))
(let __tmp1253 (Single __tmp1218))
(let __tmp1254 (Single __tmp1212))
(let __tmp1255 (Get __tmp1213 3))
(let __tmp1256 (Single __tmp1255))
(let __tmp1257 (Get __tmp1213 4))
(let __tmp1258 (Single __tmp1257))
(let __tmp1259 (Single __tmp1220))
(let __tmp1260 (Single __tmp1217))
(let __tmp1261 (Get __tmp1213 7))
(let __tmp1262 (Single __tmp1261))
(let __tmp1263 (Get __tmp1213 8))
(let __tmp1264 (Single __tmp1263))
(let __tmp1265 (Get __tmp1213 9))
(let __tmp1266 (Single __tmp1265))
(let __tmp1267 (Get __tmp1213 10))
(let __tmp1268 (Single __tmp1267))
(let __tmp1269 (Single __tmp1214))
(let __tmp1270 (Single __tmp1222))
(let __tmp1271 (Get __tmp1213 13))
(let __tmp1272 (Single __tmp1271))
(let __tmp1273 (Concat __tmp1270 __tmp1272))
(let __tmp1274 (Concat __tmp1269 __tmp1273))
(let __tmp1275 (Concat __tmp1268 __tmp1274))
(let __tmp1276 (Concat __tmp1266 __tmp1275))
(let __tmp1277 (Concat __tmp1264 __tmp1276))
(let __tmp1278 (Concat __tmp1262 __tmp1277))
(let __tmp1279 (Concat __tmp1260 __tmp1278))
(let __tmp1280 (Concat __tmp1259 __tmp1279))
(let __tmp1281 (Concat __tmp1258 __tmp1280))
(let __tmp1282 (Concat __tmp1256 __tmp1281))
(let __tmp1283 (Concat __tmp1254 __tmp1282))
(let __tmp1284 (Concat __tmp1253 __tmp1283))
(let __tmp1285 (Concat __tmp1252 __tmp1284))
(let __tmp1286 (Concat __tmp1250 __tmp1285))
(let __tmp1287 (TCons __tmp47 __tmp1199))
(let __tmp1288 (TCons __tmp1 __tmp1287))
(let __tmp1289 (TupleT __tmp1288))
(let __tmp1290 (InIf true __tmp1216 __tmp1286))
(let __tmp1291 (Arg __tmp1289 __tmp1290))
(let __tmp1292 (InFunc " loop_ctx_22"))
(let __tmp1293 (Arg __tmp1289 __tmp1292))
(let __tmp1294 (Get __tmp1293 3))
(let __tmp1295 (Const __tmp31 __tmp1289 __tmp1292))
(let __tmp1296 (Bop __tmp63 __tmp1294 __tmp1295))
(let __tmp1297 (Get __tmp1293 12))
(let __tmp1298 (Bop __tmp1205 __tmp1297 __tmp1295))
(let __tmp1299 (Bop __tmp62 __tmp1296 __tmp1298))
(let __tmp1300 (Single __tmp1299))
(let __tmp1301 (Get __tmp1293 7))
(let __tmp1302 (Get __tmp1293 2))
(let __tmp1303 (Bop __tmp95 __tmp1301 __tmp1302))
(let __tmp1304 (Get __tmp1293 6))
(let __tmp1305 (Bop __tmp95 __tmp1304 __tmp1302))
(let __tmp1306 (Get __tmp1293 0))
(let __tmp1307 (Bop __tmp1005 __tmp1305 __tmp1306))
(let __tmp1308 (Get __tmp1307 0))
(let __tmp1309 (Bop __tmp95 __tmp1308 __tmp1294))
(let __tmp1310 (Get __tmp1293 11))
(let __tmp1311 (Const __tmp1104 __tmp1289 __tmp1292))
(let __tmp1312 (Bop __tmp1092 __tmp1310 __tmp1311))
(let __tmp1313 (Get __tmp1293 5))
(let __tmp1314 (Get __tmp1307 1))
(let __tmp1315 (Bop __tmp1005 __tmp1305 __tmp1314))
(let __tmp1316 (Get __tmp1315 0))
(let __tmp1317 (Bop __tmp1205 __tmp1294 __tmp1295))
(let __tmp1318 (Bop __tmp95 __tmp1316 __tmp1317))
(let __tmp1319 (Get __tmp1315 1))
(let __tmp1320 (Bop __tmp1005 __tmp1318 __tmp1319))
(let __tmp1321 (Get __tmp1320 0))
(let __tmp1322 (Bop __tmp1092 __tmp1313 __tmp1321))
(let __tmp1323 (Get __tmp1293 4))
(let __tmp1324 (Bop __tmp1014 __tmp1322 __tmp1323))
(let __tmp1325 (Bop __tmp1013 __tmp1312 __tmp1324))
(let __tmp1326 (Get __tmp1320 1))
(let __tmp1327 (Top __tmp72 __tmp1309 __tmp1325 __tmp1326))
(let __tmp1328 (Bop __tmp1005 __tmp1303 __tmp1327))
(let __tmp1329 (Get __tmp1328 0))
(let __tmp1330 (Bop __tmp95 __tmp1329 __tmp1294))
(let __tmp1331 (Get __tmp1293 10))
(let __tmp1332 (Bop __tmp1092 __tmp1331 __tmp1311))
(let __tmp1333 (Get __tmp1293 9))
(let __tmp1334 (Bop __tmp95 __tmp1333 __tmp1294))
(let __tmp1335 (Get __tmp1328 1))
(let __tmp1336 (Bop __tmp1005 __tmp1334 __tmp1335))
(let __tmp1337 (Get __tmp1336 0))
(let __tmp1338 (Bop __tmp1205 __tmp1302 __tmp1295))
(let __tmp1339 (Bop __tmp95 __tmp1337 __tmp1338))
(let __tmp1340 (Get __tmp1336 1))
(let __tmp1341 (Bop __tmp1005 __tmp1339 __tmp1340))
(let __tmp1342 (Get __tmp1341 0))
(let __tmp1343 (Bop __tmp1092 __tmp1332 __tmp1342))
(let __tmp1344 (Const __tmp1027 __tmp1289 __tmp1292))
(let __tmp1345 (Const __tmp1093 __tmp1289 __tmp1292))
(let __tmp1346 (Bop __tmp1092 __tmp1345 __tmp1331))
(let __tmp1347 (Bop __tmp1014 __tmp1344 __tmp1346))
(let __tmp1348 (Get __tmp1341 1))
(let __tmp1349 (Bop __tmp1005 __tmp1334 __tmp1348))
(let __tmp1350 (Get __tmp1349 0))
(let __tmp1351 (Bop __tmp95 __tmp1350 __tmp1302))
(let __tmp1352 (Get __tmp1349 1))
(let __tmp1353 (Bop __tmp1005 __tmp1351 __tmp1352))
(let __tmp1354 (Get __tmp1353 0))
(let __tmp1355 (Bop __tmp1092 __tmp1347 __tmp1354))
(let __tmp1356 (Bop __tmp1014 __tmp1343 __tmp1355))
(let __tmp1357 (Get __tmp1293 8))
(let __tmp1358 (Get __tmp1353 1))
(let __tmp1359 (Bop __tmp1005 __tmp1334 __tmp1358))
(let __tmp1360 (Get __tmp1359 0))
(let __tmp1361 (Bop __tmp63 __tmp1302 __tmp1295))
(let __tmp1362 (Bop __tmp95 __tmp1360 __tmp1361))
(let __tmp1363 (Get __tmp1359 1))
(let __tmp1364 (Bop __tmp1005 __tmp1362 __tmp1363))
(let __tmp1365 (Get __tmp1364 0))
(let __tmp1366 (Bop __tmp1092 __tmp1357 __tmp1365))
(let __tmp1367 (Bop __tmp1016 __tmp1356 __tmp1366))
(let __tmp1368 (Get __tmp1364 1))
(let __tmp1369 (Bop __tmp1005 __tmp1303 __tmp1368))
(let __tmp1370 (Get __tmp1369 0))
(let __tmp1371 (Bop __tmp95 __tmp1370 __tmp1317))
(let __tmp1372 (Get __tmp1369 1))
(let __tmp1373 (Bop __tmp1005 __tmp1371 __tmp1372))
(let __tmp1374 (Get __tmp1373 0))
(let __tmp1375 (Bop __tmp1092 __tmp1313 __tmp1374))
(let __tmp1376 (Bop __tmp1016 __tmp1367 __tmp1375))
(let __tmp1377 (Get __tmp1373 1))
(let __tmp1378 (Bop __tmp1005 __tmp1305 __tmp1377))
(let __tmp1379 (Get __tmp1378 0))
(let __tmp1380 (Bop __tmp95 __tmp1379 __tmp1317))
(let __tmp1381 (Get __tmp1378 1))
(let __tmp1382 (Bop __tmp1005 __tmp1380 __tmp1381))
(let __tmp1383 (Get __tmp1382 0))
(let __tmp1384 (Bop __tmp1092 __tmp1313 __tmp1383))
(let __tmp1385 (Bop __tmp1014 __tmp1384 __tmp1323))
(let __tmp1386 (Bop __tmp1013 __tmp1376 __tmp1385))
(let __tmp1387 (Get __tmp1382 1))
(let __tmp1388 (Top __tmp72 __tmp1330 __tmp1386 __tmp1387))
(let __tmp1389 (Single __tmp1388))
(let __tmp1390 (Get __tmp1293 1))
(let __tmp1391 (Single __tmp1390))
(let __tmp1392 (Single __tmp1302))
(let __tmp1393 (Concat __tmp1391 __tmp1392))
(let __tmp1394 (Single __tmp1296))
(let __tmp1395 (Single __tmp1323))
(let __tmp1396 (Concat __tmp1394 __tmp1395))
(let __tmp1397 (Single __tmp1313))
(let __tmp1398 (Concat __tmp1396 __tmp1397))
(let __tmp1399 (Single __tmp1304))
(let __tmp1400 (Concat __tmp1398 __tmp1399))
(let __tmp1401 (Single __tmp1301))
(let __tmp1402 (Concat __tmp1400 __tmp1401))
(let __tmp1403 (Single __tmp1357))
(let __tmp1404 (Concat __tmp1402 __tmp1403))
(let __tmp1405 (Single __tmp1333))
(let __tmp1406 (Concat __tmp1404 __tmp1405))
(let __tmp1407 (Single __tmp1331))
(let __tmp1408 (Concat __tmp1406 __tmp1407))
(let __tmp1409 (Single __tmp1310))
(let __tmp1410 (Concat __tmp1408 __tmp1409))
(let __tmp1411 (Single __tmp1297))
(let __tmp1412 (Concat __tmp1410 __tmp1411))
(let __tmp1413 (Get __tmp1293 13))
(let __tmp1414 (Single __tmp1413))
(let __tmp1415 (Concat __tmp1412 __tmp1414))
(let __tmp1416 (Get __tmp1293 14))
(let __tmp1417 (Single __tmp1416))
(let __tmp1418 (Concat __tmp1415 __tmp1417))
(let __tmp1419 (Concat __tmp1393 __tmp1418))
(let __tmp1420 (Concat __tmp1389 __tmp1419))
(let __tmp1421 (Concat __tmp1300 __tmp1420))
(let __tmp1422 (DoWhile __tmp1291 __tmp1421))
(let __tmp1423 (InIf false __tmp1216 __tmp1286))
(let __tmp1424 (Arg __tmp1289 __tmp1423))
(let __tmp1425 (If __tmp1216 __tmp1286 __tmp1422 __tmp1424))
(let __tmp1426 (Get __tmp1425 0))
(let __tmp1427 (Single __tmp1426))
(let __tmp1428 (Concat __tmp1427 __tmp1252))
(let __tmp1429 (Bop __tmp63 __tmp1212 __tmp1218))
(let __tmp1430 (Single __tmp1429))
(let __tmp1431 (Get __tmp1425 4))
(let __tmp1432 (Single __tmp1431))
(let __tmp1433 (Get __tmp1425 5))
(let __tmp1434 (Single __tmp1433))
(let __tmp1435 (Get __tmp1425 6))
(let __tmp1436 (Single __tmp1435))
(let __tmp1437 (Get __tmp1425 7))
(let __tmp1438 (Single __tmp1437))
(let __tmp1439 (Get __tmp1425 8))
(let __tmp1440 (Single __tmp1439))
(let __tmp1441 (Get __tmp1425 9))
(let __tmp1442 (Single __tmp1441))
(let __tmp1443 (Get __tmp1425 10))
(let __tmp1444 (Single __tmp1443))
(let __tmp1445 (Get __tmp1425 11))
(let __tmp1446 (Single __tmp1445))
(let __tmp1447 (Get __tmp1425 13))
(let __tmp1448 (Single __tmp1447))
(let __tmp1449 (Concat __tmp1448 __tmp1272))
(let __tmp1450 (Concat __tmp1269 __tmp1449))
(let __tmp1451 (Concat __tmp1446 __tmp1450))
(let __tmp1452 (Concat __tmp1444 __tmp1451))
(let __tmp1453 (Concat __tmp1442 __tmp1452))
(let __tmp1454 (Concat __tmp1440 __tmp1453))
(let __tmp1455 (Concat __tmp1438 __tmp1454))
(let __tmp1456 (Concat __tmp1436 __tmp1455))
(let __tmp1457 (Concat __tmp1434 __tmp1456))
(let __tmp1458 (Concat __tmp1432 __tmp1457))
(let __tmp1459 (Concat __tmp1430 __tmp1458))
(let __tmp1460 (Concat __tmp1428 __tmp1459))
(let __tmp1461 (InIf false __tmp1209 __tmp1203))
(let __tmp1462 (Arg __tmp1201 __tmp1461))
(let __tmp1463 (If __tmp1209 __tmp1203 __tmp1460 __tmp1462))
(let __tmp1464 (Concat __tmp1210 __tmp1463))
(let __tmp1465 (DoWhile __tmp1198 __tmp1464))
(let __tmp1466 (Get __tmp1465 0))
(let __tmp1467 (Single __tmp1466))
(let __tmp1468 (Bop __tmp63 __tmp1160 __tmp1162))
(let __tmp1469 (Single __tmp1468))
(let __tmp1470 (Get __tmp1465 3))
(let __tmp1471 (Single __tmp1470))
(let __tmp1472 (Get __tmp1465 4))
(let __tmp1473 (Single __tmp1472))
(let __tmp1474 (Get __tmp1465 5))
(let __tmp1475 (Single __tmp1474))
(let __tmp1476 (Get __tmp1465 6))
(let __tmp1477 (Single __tmp1476))
(let __tmp1478 (Get __tmp1465 7))
(let __tmp1479 (Single __tmp1478))
(let __tmp1480 (Get __tmp1465 8))
(let __tmp1481 (Single __tmp1480))
(let __tmp1482 (Get __tmp1465 9))
(let __tmp1483 (Single __tmp1482))
(let __tmp1484 (Get __tmp1465 10))
(let __tmp1485 (Single __tmp1484))
(let __tmp1486 (Get __tmp1465 12))
(let __tmp1487 (Single __tmp1486))
(let __tmp1488 (Concat __tmp1487 __tmp1185))
(let __tmp1489 (Concat __tmp1181 __tmp1488))
(let __tmp1490 (Concat __tmp1485 __tmp1489))
(let __tmp1491 (Concat __tmp1483 __tmp1490))
(let __tmp1492 (Concat __tmp1481 __tmp1491))
(let __tmp1493 (Concat __tmp1479 __tmp1492))
(let __tmp1494 (Concat __tmp1477 __tmp1493))
(let __tmp1495 (Concat __tmp1475 __tmp1494))
(let __tmp1496 (Concat __tmp1473 __tmp1495))
(let __tmp1497 (Concat __tmp1471 __tmp1496))
(let __tmp1498 (Concat __tmp1469 __tmp1497))
(let __tmp1499 (Concat __tmp1467 __tmp1498))
(let __tmp1500 (InIf false __tmp1154 __tmp1151))
(let __tmp1501 (Arg __tmp1149 __tmp1500))
(let __tmp1502 (If __tmp1154 __tmp1151 __tmp1499 __tmp1501))
(let __tmp1503 (Concat __tmp1155 __tmp1502))
(let __tmp1504 (DoWhile __tmp1137 __tmp1503))
(let __tmp1505 (Get __tmp1504 0))
(let __tmp1506 (Single __tmp1505))
(let __tmp1507 (Concat __tmp934 __tmp1088))
(let __tmp1508 (Concat __tmp7 __tmp1507))
(let __tmp1509 (Call "sum_array" __tmp1508))
(let __tmp1510 (Get __tmp1508 2))
(let __tmp1511 (Single __tmp1510))
(let __tmp1512 (Get __tmp1508 1))
(let __tmp1513 (Single __tmp1512))
(let __tmp1514 (Get __tmp1508 0))
(let __tmp1515 (Single __tmp1514))
(let __tmp1516 (Concat __tmp1513 __tmp1515))
(let __tmp1517 (Concat __tmp30 __tmp1516))
(let __tmp1518 (Concat __tmp36 __tmp1517))
(let __tmp1519 (Concat __tmp1511 __tmp1518))
(let __tmp1520 (TCons __tmp1 __tmp1139))
(let __tmp1521 (TupleT __tmp1520))
(let __tmp1522 (InFunc " loop_ctx_23"))
(let __tmp1523 (Arg __tmp1521 __tmp1522))
(let __tmp1524 (Get __tmp1523 2))
(let __tmp1525 (Get __tmp1523 4))
(let __tmp1526 (Bop __tmp62 __tmp1524 __tmp1525))
(let __tmp1527 (Single __tmp1526))
(let __tmp1528 (InIf true __tmp1526 __tmp1523))
(let __tmp1529 (Const __tmp28 __tmp1521 __tmp1528))
(let __tmp1530 (Arg __tmp1521 __tmp1528))
(let __tmp1531 (Get __tmp1530 4))
(let __tmp1532 (Bop __tmp62 __tmp1529 __tmp1531))
(let __tmp1533 (Get __tmp1530 0))
(let __tmp1534 (Single __tmp1533))
(let __tmp1535 (Get __tmp1530 1))
(let __tmp1536 (Single __tmp1535))
(let __tmp1537 (Get __tmp1530 2))
(let __tmp1538 (Single __tmp1537))
(let __tmp1539 (Single __tmp1529))
(let __tmp1540 (Get __tmp1530 3))
(let __tmp1541 (Single __tmp1540))
(let __tmp1542 (Single __tmp1531))
(let __tmp1543 (Concat __tmp1541 __tmp1542))
(let __tmp1544 (Concat __tmp1539 __tmp1543))
(let __tmp1545 (Concat __tmp1538 __tmp1544))
(let __tmp1546 (Concat __tmp1536 __tmp1545))
(let __tmp1547 (Concat __tmp1534 __tmp1546))
(let __tmp1548 (TCons __tmp12 __tmp133))
(let __tmp1549 (TCons __tmp1 __tmp1548))
(let __tmp1550 (TupleT __tmp1549))
(let __tmp1551 (InIf true __tmp1532 __tmp1547))
(let __tmp1552 (Arg __tmp1550 __tmp1551))
(let __tmp1553 (InFunc " loop_ctx_24"))
(let __tmp1554 (Const __tmp31 __tmp1550 __tmp1553))
(let __tmp1555 (Arg __tmp1550 __tmp1553))
(let __tmp1556 (Get __tmp1555 3))
(let __tmp1557 (Bop __tmp63 __tmp1554 __tmp1556))
(let __tmp1558 (Get __tmp1555 5))
(let __tmp1559 (Bop __tmp62 __tmp1557 __tmp1558))
(let __tmp1560 (Single __tmp1559))
(let __tmp1561 (Get __tmp1555 4))
(let __tmp1562 (Get __tmp1555 2))
(let __tmp1563 (Bop __tmp95 __tmp1561 __tmp1562))
(let __tmp1564 (Get __tmp1555 0))
(let __tmp1565 (Bop __tmp1005 __tmp1563 __tmp1564))
(let __tmp1566 (Get __tmp1565 0))
(let __tmp1567 (Bop __tmp95 __tmp1566 __tmp1556))
(let __tmp1568 (Get __tmp1565 1))
(let __tmp1569 (Bop __tmp1005 __tmp1567 __tmp1568))
(let __tmp1570 (Get __tmp1569 1))
(let __tmp1571 (Single __tmp1570))
(let __tmp1572 (Get __tmp1555 1))
(let __tmp1573 (Get __tmp1569 0))
(let __tmp1574 (Bop __tmp1014 __tmp1572 __tmp1573))
(let __tmp1575 (Single __tmp1574))
(let __tmp1576 (Concat __tmp1571 __tmp1575))
(let __tmp1577 (Single __tmp1562))
(let __tmp1578 (Single __tmp1557))
(let __tmp1579 (Concat __tmp1577 __tmp1578))
(let __tmp1580 (Single __tmp1561))
(let __tmp1581 (Concat __tmp1579 __tmp1580))
(let __tmp1582 (Single __tmp1558))
(let __tmp1583 (Concat __tmp1581 __tmp1582))
(let __tmp1584 (Concat __tmp1576 __tmp1583))
(let __tmp1585 (Concat __tmp1560 __tmp1584))
(let __tmp1586 (DoWhile __tmp1552 __tmp1585))
(let __tmp1587 (InIf false __tmp1532 __tmp1547))
(let __tmp1588 (Arg __tmp1550 __tmp1587))
(let __tmp1589 (If __tmp1532 __tmp1547 __tmp1586 __tmp1588))
(let __tmp1590 (Get __tmp1589 0))
(let __tmp1591 (Single __tmp1590))
(let __tmp1592 (Get __tmp1589 1))
(let __tmp1593 (Single __tmp1592))
(let __tmp1594 (Const __tmp31 __tmp1521 __tmp1528))
(let __tmp1595 (Bop __tmp63 __tmp1537 __tmp1594))
(let __tmp1596 (Single __tmp1595))
(let __tmp1597 (Get __tmp1589 4))
(let __tmp1598 (Single __tmp1597))
(let __tmp1599 (Concat __tmp1598 __tmp1542))
(let __tmp1600 (Concat __tmp1596 __tmp1599))
(let __tmp1601 (Concat __tmp1593 __tmp1600))
(let __tmp1602 (Concat __tmp1591 __tmp1601))
(let __tmp1603 (InIf false __tmp1526 __tmp1523))
(let __tmp1604 (Arg __tmp1521 __tmp1603))
(let __tmp1605 (If __tmp1526 __tmp1523 __tmp1602 __tmp1604))
(let __tmp1606 (Concat __tmp1527 __tmp1605))
(let __tmp1607 (DoWhile __tmp1519 __tmp1606))
(let __tmp1608 (Get __tmp1607 1))
(let __tmp1609 (Single __tmp1608))
(let __tmp1610 (Get __tmp1607 0))
(let __tmp1611 (Single __tmp1610))
(let __tmp1612 (Concat __tmp1609 __tmp1611))
(let __tmp1613 (Print ))
(let __tmp1614 (Free ))
(let __tmp1615 (Get __tmp930 7))
(let __tmp1616 (Get __tmp1509 1))
(let __tmp1617 (Bop __tmp1614 __tmp1615 __tmp1616))
(let __tmp1618 (Single __tmp1617))
(let __tmp1619 (Get __tmp1509 0))
(let __tmp1620 (Single __tmp1619))
(let __tmp1621 (Concat __tmp30 __tmp7))
(let __tmp1622 (Concat __tmp934 __tmp1621))
(let __tmp1623 (Concat __tmp1075 __tmp1622))
(let __tmp1624 (Concat __tmp1077 __tmp1623))
(let __tmp1625 (Concat __tmp1079 __tmp1624))
(let __tmp1626 (Concat __tmp1620 __tmp1625))
(let __tmp1627 (Concat __tmp1618 __tmp1626))
(let __tmp1628 (TCons __tmp47 __tmp48))
(let __tmp1629 (TCons __tmp109 __tmp1628))
(let __tmp1630 (TCons __tmp109 __tmp1629))
(let __tmp1631 (TCons __tmp109 __tmp1630))
(let __tmp1632 (TCons __tmp109 __tmp1631))
(let __tmp1633 (TCons __tmp12 __tmp1632))
(let __tmp1634 (TCons __tmp1 __tmp1633))
(let __tmp1635 (TupleT __tmp1634))
(let __tmp1636 (InFunc " loop_ctx_0"))
(let __tmp1637 (Arg __tmp1635 __tmp1636))
(let __tmp1638 (Get __tmp1637 6))
(let __tmp1639 (Get __tmp1637 7))
(let __tmp1640 (Bop __tmp62 __tmp1638 __tmp1639))
(let __tmp1641 (Single __tmp1640))
(let __tmp1642 (InIf true __tmp1640 __tmp1637))
(let __tmp1643 (Arg __tmp1635 __tmp1642))
(let __tmp1644 (Get __tmp1643 2))
(let __tmp1645 (Get __tmp1643 6))
(let __tmp1646 (Bop __tmp95 __tmp1644 __tmp1645))
(let __tmp1647 (Get __tmp1643 3))
(let __tmp1648 (Bop __tmp95 __tmp1647 __tmp1645))
(let __tmp1649 (Get __tmp1643 4))
(let __tmp1650 (Bop __tmp95 __tmp1649 __tmp1645))
(let __tmp1651 (Get __tmp1643 5))
(let __tmp1652 (Bop __tmp95 __tmp1651 __tmp1645))
(let __tmp1653 (Get __tmp1643 0))
(let __tmp1654 (Bop __tmp1005 __tmp1652 __tmp1653))
(let __tmp1655 (Get __tmp1654 0))
(let __tmp1656 (Get __tmp1654 1))
(let __tmp1657 (Bop __tmp1614 __tmp1655 __tmp1656))
(let __tmp1658 (Bop __tmp1005 __tmp1650 __tmp1657))
(let __tmp1659 (Get __tmp1658 0))
(let __tmp1660 (Get __tmp1658 1))
(let __tmp1661 (Bop __tmp1614 __tmp1659 __tmp1660))
(let __tmp1662 (Bop __tmp1005 __tmp1648 __tmp1661))
(let __tmp1663 (Get __tmp1662 0))
(let __tmp1664 (Get __tmp1662 1))
(let __tmp1665 (Bop __tmp1614 __tmp1663 __tmp1664))
(let __tmp1666 (Bop __tmp1005 __tmp1646 __tmp1665))
(let __tmp1667 (Get __tmp1666 0))
(let __tmp1668 (Get __tmp1666 1))
(let __tmp1669 (Bop __tmp1614 __tmp1667 __tmp1668))
(let __tmp1670 (Single __tmp1669))
(let __tmp1671 (Get __tmp1643 1))
(let __tmp1672 (Single __tmp1671))
(let __tmp1673 (Single __tmp1644))
(let __tmp1674 (Single __tmp1647))
(let __tmp1675 (Single __tmp1649))
(let __tmp1676 (Single __tmp1651))
(let __tmp1677 (Concat __tmp1675 __tmp1676))
(let __tmp1678 (Concat __tmp1674 __tmp1677))
(let __tmp1679 (Const __tmp31 __tmp1635 __tmp1642))
(let __tmp1680 (Bop __tmp63 __tmp1679 __tmp1645))
(let __tmp1681 (Single __tmp1680))
(let __tmp1682 (Get __tmp1643 7))
(let __tmp1683 (Single __tmp1682))
(let __tmp1684 (Concat __tmp1681 __tmp1683))
(let __tmp1685 (Concat __tmp1678 __tmp1684))
(let __tmp1686 (Concat __tmp1673 __tmp1685))
(let __tmp1687 (Concat __tmp1672 __tmp1686))
(let __tmp1688 (Concat __tmp1670 __tmp1687))
(let __tmp1689 (InIf false __tmp1640 __tmp1637))
(let __tmp1690 (Arg __tmp1635 __tmp1689))
(let __tmp1691 (If __tmp1640 __tmp1637 __tmp1688 __tmp1690))
(let __tmp1692 (Concat __tmp1641 __tmp1691))
(let __tmp1693 (DoWhile __tmp1627 __tmp1692))
(let __tmp1694 (Get __tmp1693 1))
(let __tmp1695 (Get __tmp1693 2))
(let __tmp1696 (Get __tmp1693 3))
(let __tmp1697 (Get __tmp1693 4))
(let __tmp1698 (Get __tmp1693 5))
(let __tmp1699 (Get __tmp1693 0))
(let __tmp1700 (Bop __tmp1614 __tmp1698 __tmp1699))
(let __tmp1701 (Bop __tmp1614 __tmp1697 __tmp1700))
(let __tmp1702 (Bop __tmp1614 __tmp1696 __tmp1701))
(let __tmp1703 (Bop __tmp1614 __tmp1695 __tmp1702))
(let __tmp1704 (Bop __tmp1613 __tmp1694 __tmp1703))
(let __tmp1705 (Single __tmp1704))
(let __tmp1706 (Function "main" __tmp4 __tmp4 __tmp1705))
(let __tmp1707 (TCons __tmp109 __tmp3))
(let __tmp1708 (TCons __tmp12 __tmp1707))
(let __tmp1709 (TCons __tmp47 __tmp1708))
(let __tmp1710 (TupleT __tmp1709))
(let __tmp1711 (InFunc "init_array"))
(let __tmp1712 (Arg __tmp1710 __tmp1711))
(let __tmp1713 (Get __tmp1712 3))
(let __tmp1714 (Single __tmp1713))
(let __tmp1715 (Const __tmp34 __tmp1710 __tmp1711))
(let __tmp1716 (Single __tmp1715))
(let __tmp1717 (Const __tmp28 __tmp1710 __tmp1711))
(let __tmp1718 (Single __tmp1717))
(let __tmp1719 (Get __tmp1712 1))
(let __tmp1720 (Single __tmp1719))
(let __tmp1721 (Get __tmp1712 2))
(let __tmp1722 (Single __tmp1721))
(let __tmp1723 (Get __tmp1712 0))
(let __tmp1724 (Single __tmp1723))
(let __tmp1725 (Concat __tmp1722 __tmp1724))
(let __tmp1726 (Concat __tmp1720 __tmp1725))
(let __tmp1727 (Concat __tmp1718 __tmp1726))
(let __tmp1728 (Concat __tmp1716 __tmp1727))
(let __tmp1729 (Concat __tmp1714 __tmp1728))
(let __tmp1730 (InFunc " loop_ctx_11"))
(let __tmp1731 (Arg __tmp958 __tmp1730))
(let __tmp1732 (Get __tmp1731 2))
(let __tmp1733 (Get __tmp1731 5))
(let __tmp1734 (Bop __tmp62 __tmp1732 __tmp1733))
(let __tmp1735 (Single __tmp1734))
(let __tmp1736 (InIf true __tmp1734 __tmp1731))
(let __tmp1737 (Const __tmp28 __tmp958 __tmp1736))
(let __tmp1738 (Arg __tmp958 __tmp1736))
(let __tmp1739 (Get __tmp1738 5))
(let __tmp1740 (Bop __tmp62 __tmp1737 __tmp1739))
(let __tmp1741 (Get __tmp1738 0))
(let __tmp1742 (Single __tmp1741))
(let __tmp1743 (Get __tmp1738 1))
(let __tmp1744 (Single __tmp1743))
(let __tmp1745 (Get __tmp1738 2))
(let __tmp1746 (Single __tmp1745))
(let __tmp1747 (Const __tmp34 __tmp958 __tmp1736))
(let __tmp1748 (Single __tmp1747))
(let __tmp1749 (Single __tmp1737))
(let __tmp1750 (Get __tmp1738 3))
(let __tmp1751 (Single __tmp1750))
(let __tmp1752 (Get __tmp1738 4))
(let __tmp1753 (Single __tmp1752))
(let __tmp1754 (Single __tmp1739))
(let __tmp1755 (Concat __tmp1753 __tmp1754))
(let __tmp1756 (Concat __tmp1751 __tmp1755))
(let __tmp1757 (Concat __tmp1749 __tmp1756))
(let __tmp1758 (Concat __tmp1748 __tmp1757))
(let __tmp1759 (Concat __tmp1746 __tmp1758))
(let __tmp1760 (Concat __tmp1744 __tmp1759))
(let __tmp1761 (Concat __tmp1742 __tmp1760))
(let __tmp1762 (InIf true __tmp1740 __tmp1761))
(let __tmp1763 (Arg __tmp994 __tmp1762))
(let __tmp1764 (InFunc " loop_ctx_12"))
(let __tmp1765 (Arg __tmp994 __tmp1764))
(let __tmp1766 (Get __tmp1765 4))
(let __tmp1767 (Const __tmp31 __tmp994 __tmp1764))
(let __tmp1768 (Bop __tmp63 __tmp1766 __tmp1767))
(let __tmp1769 (Get __tmp1765 7))
(let __tmp1770 (Bop __tmp62 __tmp1768 __tmp1769))
(let __tmp1771 (Single __tmp1770))
(let __tmp1772 (Get __tmp1765 6))
(let __tmp1773 (Get __tmp1765 2))
(let __tmp1774 (Bop __tmp95 __tmp1772 __tmp1773))
(let __tmp1775 (Get __tmp1765 0))
(let __tmp1776 (Bop __tmp1005 __tmp1774 __tmp1775))
(let __tmp1777 (Get __tmp1776 0))
(let __tmp1778 (Bop __tmp95 __tmp1777 __tmp1766))
(let __tmp1779 (Get __tmp1765 1))
(let __tmp1780 (Get __tmp1765 5))
(let __tmp1781 (Get __tmp1765 3))
(let __tmp1782 (Bop __tmp1016 __tmp1780 __tmp1781))
(let __tmp1783 (Bop __tmp1014 __tmp1779 __tmp1782))
(let __tmp1784 (Bop __tmp1013 __tmp1783 __tmp1780))
(let __tmp1785 (Get __tmp1776 1))
(let __tmp1786 (Top __tmp72 __tmp1778 __tmp1784 __tmp1785))
(let __tmp1787 (Single __tmp1786))
(let __tmp1788 (Single __tmp1779))
(let __tmp1789 (Single __tmp1773))
(let __tmp1790 (Const __tmp1027 __tmp994 __tmp1764))
(let __tmp1791 (Bop __tmp1014 __tmp1781 __tmp1790))
(let __tmp1792 (Single __tmp1791))
(let __tmp1793 (Concat __tmp1789 __tmp1792))
(let __tmp1794 (Concat __tmp1788 __tmp1793))
(let __tmp1795 (Concat __tmp1787 __tmp1794))
(let __tmp1796 (Single __tmp1768))
(let __tmp1797 (Single __tmp1780))
(let __tmp1798 (Concat __tmp1796 __tmp1797))
(let __tmp1799 (Single __tmp1772))
(let __tmp1800 (Concat __tmp1798 __tmp1799))
(let __tmp1801 (Single __tmp1769))
(let __tmp1802 (Concat __tmp1800 __tmp1801))
(let __tmp1803 (Concat __tmp1795 __tmp1802))
(let __tmp1804 (Concat __tmp1771 __tmp1803))
(let __tmp1805 (DoWhile __tmp1763 __tmp1804))
(let __tmp1806 (InIf false __tmp1740 __tmp1761))
(let __tmp1807 (Arg __tmp994 __tmp1806))
(let __tmp1808 (If __tmp1740 __tmp1761 __tmp1805 __tmp1807))
(let __tmp1809 (Get __tmp1808 0))
(let __tmp1810 (Single __tmp1809))
(let __tmp1811 (Get __tmp1808 1))
(let __tmp1812 (Const __tmp1027 __tmp958 __tmp1736))
(let __tmp1813 (Bop __tmp1014 __tmp1811 __tmp1812))
(let __tmp1814 (Single __tmp1813))
(let __tmp1815 (Const __tmp31 __tmp958 __tmp1736))
(let __tmp1816 (Bop __tmp63 __tmp1815 __tmp1745))
(let __tmp1817 (Single __tmp1816))
(let __tmp1818 (Get __tmp1808 5))
(let __tmp1819 (Single __tmp1818))
(let __tmp1820 (Get __tmp1808 6))
(let __tmp1821 (Single __tmp1820))
(let __tmp1822 (Concat __tmp1821 __tmp1754))
(let __tmp1823 (Concat __tmp1819 __tmp1822))
(let __tmp1824 (Concat __tmp1817 __tmp1823))
(let __tmp1825 (Concat __tmp1814 __tmp1824))
(let __tmp1826 (Concat __tmp1810 __tmp1825))
(let __tmp1827 (InIf false __tmp1734 __tmp1731))
(let __tmp1828 (Arg __tmp958 __tmp1827))
(let __tmp1829 (If __tmp1734 __tmp1731 __tmp1826 __tmp1828))
(let __tmp1830 (Concat __tmp1735 __tmp1829))
(let __tmp1831 (DoWhile __tmp1729 __tmp1830))
(let __tmp1832 (Get __tmp1831 0))
(let __tmp1833 (Single __tmp1832))
(let __tmp1834 (Function "init_array" __tmp1710 __tmp4 __tmp1833))
(let __tmp1835 (TCons __tmp47 __tmp1707))
(let __tmp1836 (TupleT __tmp1835))
(let __tmp1837 (TCons __tmp12 __tmp3))
(let __tmp1838 (TupleT __tmp1837))
(let __tmp1839 (InFunc "sum_array"))
(let __tmp1840 (Arg __tmp1836 __tmp1839))
(let __tmp1841 (Get __tmp1840 2))
(let __tmp1842 (Single __tmp1841))
(let __tmp1843 (Const __tmp34 __tmp1836 __tmp1839))
(let __tmp1844 (Single __tmp1843))
(let __tmp1845 (Const __tmp28 __tmp1836 __tmp1839))
(let __tmp1846 (Single __tmp1845))
(let __tmp1847 (Get __tmp1840 1))
(let __tmp1848 (Single __tmp1847))
(let __tmp1849 (Get __tmp1840 0))
(let __tmp1850 (Single __tmp1849))
(let __tmp1851 (Concat __tmp1848 __tmp1850))
(let __tmp1852 (Concat __tmp1846 __tmp1851))
(let __tmp1853 (Concat __tmp1844 __tmp1852))
(let __tmp1854 (Concat __tmp1842 __tmp1853))
(let __tmp1855 (InFunc " loop_ctx_13"))
(let __tmp1856 (Arg __tmp1521 __tmp1855))
(let __tmp1857 (Get __tmp1856 2))
(let __tmp1858 (Get __tmp1856 4))
(let __tmp1859 (Bop __tmp62 __tmp1857 __tmp1858))
(let __tmp1860 (Single __tmp1859))
(let __tmp1861 (InIf true __tmp1859 __tmp1856))
(let __tmp1862 (Const __tmp28 __tmp1521 __tmp1861))
(let __tmp1863 (Arg __tmp1521 __tmp1861))
(let __tmp1864 (Get __tmp1863 4))
(let __tmp1865 (Bop __tmp62 __tmp1862 __tmp1864))
(let __tmp1866 (Get __tmp1863 0))
(let __tmp1867 (Single __tmp1866))
(let __tmp1868 (Get __tmp1863 1))
(let __tmp1869 (Single __tmp1868))
(let __tmp1870 (Get __tmp1863 2))
(let __tmp1871 (Single __tmp1870))
(let __tmp1872 (Single __tmp1862))
(let __tmp1873 (Get __tmp1863 3))
(let __tmp1874 (Single __tmp1873))
(let __tmp1875 (Single __tmp1864))
(let __tmp1876 (Concat __tmp1874 __tmp1875))
(let __tmp1877 (Concat __tmp1872 __tmp1876))
(let __tmp1878 (Concat __tmp1871 __tmp1877))
(let __tmp1879 (Concat __tmp1869 __tmp1878))
(let __tmp1880 (Concat __tmp1867 __tmp1879))
(let __tmp1881 (InIf true __tmp1865 __tmp1880))
(let __tmp1882 (Arg __tmp1550 __tmp1881))
(let __tmp1883 (InFunc " loop_ctx_14"))
(let __tmp1884 (Const __tmp31 __tmp1550 __tmp1883))
(let __tmp1885 (Arg __tmp1550 __tmp1883))
(let __tmp1886 (Get __tmp1885 3))
(let __tmp1887 (Bop __tmp63 __tmp1884 __tmp1886))
(let __tmp1888 (Get __tmp1885 5))
(let __tmp1889 (Bop __tmp62 __tmp1887 __tmp1888))
(let __tmp1890 (Single __tmp1889))
(let __tmp1891 (Get __tmp1885 4))
(let __tmp1892 (Get __tmp1885 2))
(let __tmp1893 (Bop __tmp95 __tmp1891 __tmp1892))
(let __tmp1894 (Get __tmp1885 0))
(let __tmp1895 (Bop __tmp1005 __tmp1893 __tmp1894))
(let __tmp1896 (Get __tmp1895 0))
(let __tmp1897 (Bop __tmp95 __tmp1896 __tmp1886))
(let __tmp1898 (Get __tmp1895 1))
(let __tmp1899 (Bop __tmp1005 __tmp1897 __tmp1898))
(let __tmp1900 (Get __tmp1899 1))
(let __tmp1901 (Single __tmp1900))
(let __tmp1902 (Get __tmp1885 1))
(let __tmp1903 (Get __tmp1899 0))
(let __tmp1904 (Bop __tmp1014 __tmp1902 __tmp1903))
(let __tmp1905 (Single __tmp1904))
(let __tmp1906 (Concat __tmp1901 __tmp1905))
(let __tmp1907 (Single __tmp1892))
(let __tmp1908 (Single __tmp1887))
(let __tmp1909 (Concat __tmp1907 __tmp1908))
(let __tmp1910 (Single __tmp1891))
(let __tmp1911 (Concat __tmp1909 __tmp1910))
(let __tmp1912 (Single __tmp1888))
(let __tmp1913 (Concat __tmp1911 __tmp1912))
(let __tmp1914 (Concat __tmp1906 __tmp1913))
(let __tmp1915 (Concat __tmp1890 __tmp1914))
(let __tmp1916 (DoWhile __tmp1882 __tmp1915))
(let __tmp1917 (InIf false __tmp1865 __tmp1880))
(let __tmp1918 (Arg __tmp1550 __tmp1917))
(let __tmp1919 (If __tmp1865 __tmp1880 __tmp1916 __tmp1918))
(let __tmp1920 (Get __tmp1919 0))
(let __tmp1921 (Single __tmp1920))
(let __tmp1922 (Get __tmp1919 1))
(let __tmp1923 (Single __tmp1922))
(let __tmp1924 (Const __tmp31 __tmp1521 __tmp1861))
(let __tmp1925 (Bop __tmp63 __tmp1870 __tmp1924))
(let __tmp1926 (Single __tmp1925))
(let __tmp1927 (Get __tmp1919 4))
(let __tmp1928 (Single __tmp1927))
(let __tmp1929 (Concat __tmp1928 __tmp1875))
(let __tmp1930 (Concat __tmp1926 __tmp1929))
(let __tmp1931 (Concat __tmp1923 __tmp1930))
(let __tmp1932 (Concat __tmp1921 __tmp1931))
(let __tmp1933 (InIf false __tmp1859 __tmp1856))
(let __tmp1934 (Arg __tmp1521 __tmp1933))
(let __tmp1935 (If __tmp1859 __tmp1856 __tmp1932 __tmp1934))
(let __tmp1936 (Concat __tmp1860 __tmp1935))
(let __tmp1937 (DoWhile __tmp1854 __tmp1936))
(let __tmp1938 (Get __tmp1937 1))
(let __tmp1939 (Single __tmp1938))
(let __tmp1940 (Get __tmp1937 0))
(let __tmp1941 (Single __tmp1940))
(let __tmp1942 (Concat __tmp1939 __tmp1941))
(let __tmp1943 (Function "sum_array" __tmp1836 __tmp1838 __tmp1942))
(let __tmp1944 (TCons __tmp109 __tmp1707))
(let __tmp1945 (TCons __tmp109 __tmp1944))
(let __tmp1946 (TCons __tmp109 __tmp1945))
(let __tmp1947 (TCons __tmp12 __tmp1946))
(let __tmp1948 (TCons __tmp47 __tmp1947))
(let __tmp1949 (TCons __tmp12 __tmp1948))
(let __tmp1950 (TCons __tmp47 __tmp1949))
(let __tmp1951 (TupleT __tmp1950))
(let __tmp1952 (InFunc "kernel_adi"))
(let __tmp1953 (Arg __tmp1951 __tmp1952))
(let __tmp1954 (Get __tmp1953 8))
(let __tmp1955 (Single __tmp1954))
(let __tmp1956 (Const __tmp31 __tmp1951 __tmp1952))
(let __tmp1957 (Single __tmp1956))
(let __tmp1958 (Const __tmp1027 __tmp1951 __tmp1952))
(let __tmp1959 (Const __tmp1093 __tmp1951 __tmp1952))
(let __tmp1960 (Get __tmp1953 1))
(let __tmp1961 (Bop __tmp1013 __tmp1958 __tmp1960))
(let __tmp1962 (Bop __tmp1092 __tmp1959 __tmp1961))
(let __tmp1963 (Get __tmp1953 3))
(let __tmp1964 (Bop __tmp1013 __tmp1958 __tmp1963))
(let __tmp1965 (Bop __tmp1092 __tmp1964 __tmp1964))
(let __tmp1966 (Bop __tmp1013 __tmp1962 __tmp1965))
(let __tmp1967 (Bop __tmp1014 __tmp1958 __tmp1966))
(let __tmp1968 (Single __tmp1967))
(let __tmp1969 (Const __tmp1104 __tmp1951 __tmp1952))
(let __tmp1970 (Bop __tmp1092 __tmp1966 __tmp1969))
(let __tmp1971 (Bop __tmp1013 __tmp1970 __tmp1959))
(let __tmp1972 (Single __tmp1971))
(let __tmp1973 (Get __tmp1953 6))
(let __tmp1974 (Single __tmp1973))
(let __tmp1975 (Get __tmp1953 7))
(let __tmp1976 (Single __tmp1975))
(let __tmp1977 (Bop __tmp1092 __tmp1958 __tmp1961))
(let __tmp1978 (Bop __tmp1013 __tmp1977 __tmp1965))
(let __tmp1979 (Bop __tmp1092 __tmp1978 __tmp1969))
(let __tmp1980 (Bop __tmp1013 __tmp1979 __tmp1959))
(let __tmp1981 (Single __tmp1980))
(let __tmp1982 (Get __tmp1953 4))
(let __tmp1983 (Single __tmp1982))
(let __tmp1984 (Get __tmp1953 2))
(let __tmp1985 (Single __tmp1984))
(let __tmp1986 (Get __tmp1953 5))
(let __tmp1987 (Single __tmp1986))
(let __tmp1988 (Get __tmp1953 0))
(let __tmp1989 (Single __tmp1988))
(let __tmp1990 (Concat __tmp1987 __tmp1989))
(let __tmp1991 (Concat __tmp1985 __tmp1990))
(let __tmp1992 (Concat __tmp1972 __tmp1991))
(let __tmp1993 (Concat __tmp1981 __tmp1992))
(let __tmp1994 (Concat __tmp1983 __tmp1993))
(let __tmp1995 (Concat __tmp1981 __tmp1994))
(let __tmp1996 (Concat __tmp1976 __tmp1995))
(let __tmp1997 (Concat __tmp1974 __tmp1996))
(let __tmp1998 (Concat __tmp1972 __tmp1997))
(let __tmp1999 (Concat __tmp1968 __tmp1998))
(let __tmp2000 (Concat __tmp1957 __tmp1999))
(let __tmp2001 (Concat __tmp1955 __tmp2000))
(let __tmp2002 (InFunc " loop_ctx_15"))
(let __tmp2003 (Arg __tmp1149 __tmp2002))
(let __tmp2004 (Get __tmp2003 1))
(let __tmp2005 (Get __tmp2003 12))
(let __tmp2006 (Bop __tmp1138 __tmp2004 __tmp2005))
(let __tmp2007 (Single __tmp2006))
(let __tmp2008 (InIf true __tmp2006 __tmp2003))
(let __tmp2009 (Arg __tmp1149 __tmp2008))
(let __tmp2010 (Get __tmp2009 0))
(let __tmp2011 (Single __tmp2010))
(let __tmp2012 (Get __tmp2009 1))
(let __tmp2013 (Single __tmp2012))
(let __tmp2014 (Const __tmp31 __tmp1149 __tmp2008))
(let __tmp2015 (Single __tmp2014))
(let __tmp2016 (Get __tmp2009 2))
(let __tmp2017 (Single __tmp2016))
(let __tmp2018 (Get __tmp2009 3))
(let __tmp2019 (Single __tmp2018))
(let __tmp2020 (Get __tmp2009 4))
(let __tmp2021 (Single __tmp2020))
(let __tmp2022 (Get __tmp2009 5))
(let __tmp2023 (Single __tmp2022))
(let __tmp2024 (Get __tmp2009 6))
(let __tmp2025 (Single __tmp2024))
(let __tmp2026 (Get __tmp2009 7))
(let __tmp2027 (Single __tmp2026))
(let __tmp2028 (Get __tmp2009 8))
(let __tmp2029 (Single __tmp2028))
(let __tmp2030 (Get __tmp2009 9))
(let __tmp2031 (Single __tmp2030))
(let __tmp2032 (Get __tmp2009 10))
(let __tmp2033 (Single __tmp2032))
(let __tmp2034 (Get __tmp2009 11))
(let __tmp2035 (Single __tmp2034))
(let __tmp2036 (Get __tmp2009 12))
(let __tmp2037 (Single __tmp2036))
(let __tmp2038 (Concat __tmp2035 __tmp2037))
(let __tmp2039 (Concat __tmp2033 __tmp2038))
(let __tmp2040 (Concat __tmp2031 __tmp2039))
(let __tmp2041 (Concat __tmp2029 __tmp2040))
(let __tmp2042 (Concat __tmp2027 __tmp2041))
(let __tmp2043 (Concat __tmp2025 __tmp2042))
(let __tmp2044 (Concat __tmp2023 __tmp2043))
(let __tmp2045 (Concat __tmp2021 __tmp2044))
(let __tmp2046 (Concat __tmp2019 __tmp2045))
(let __tmp2047 (Concat __tmp2017 __tmp2046))
(let __tmp2048 (Concat __tmp2015 __tmp2047))
(let __tmp2049 (Concat __tmp2013 __tmp2048))
(let __tmp2050 (Concat __tmp2011 __tmp2049))
(let __tmp2051 (InFunc " loop_ctx_16"))
(let __tmp2052 (Arg __tmp1201 __tmp2051))
(let __tmp2053 (Get __tmp2052 2))
(let __tmp2054 (Get __tmp2052 11))
(let __tmp2055 (Const __tmp31 __tmp1201 __tmp2051))
(let __tmp2056 (Bop __tmp1205 __tmp2054 __tmp2055))
(let __tmp2057 (Bop __tmp62 __tmp2053 __tmp2056))
(let __tmp2058 (Single __tmp2057))
(let __tmp2059 (InIf true __tmp2057 __tmp2052))
(let __tmp2060 (Const __tmp31 __tmp1201 __tmp2059))
(let __tmp2061 (Arg __tmp1201 __tmp2059))
(let __tmp2062 (Get __tmp2061 11))
(let __tmp2063 (Bop __tmp1205 __tmp2062 __tmp2060))
(let __tmp2064 (Bop __tmp62 __tmp2060 __tmp2063))
(let __tmp2065 (Get __tmp2061 6))
(let __tmp2066 (Get __tmp2061 2))
(let __tmp2067 (Bop __tmp95 __tmp2065 __tmp2066))
(let __tmp2068 (Get __tmp2061 5))
(let __tmp2069 (Bop __tmp95 __tmp2068 __tmp2066))
(let __tmp2070 (Get __tmp2061 12))
(let __tmp2071 (Const __tmp28 __tmp1201 __tmp2059))
(let __tmp2072 (Bop __tmp95 __tmp2070 __tmp2071))
(let __tmp2073 (Get __tmp2061 0))
(let __tmp2074 (Bop __tmp1005 __tmp2072 __tmp2073))
(let __tmp2075 (Get __tmp2074 0))
(let __tmp2076 (Bop __tmp95 __tmp2075 __tmp2066))
(let __tmp2077 (Const __tmp1027 __tmp1201 __tmp2059))
(let __tmp2078 (Get __tmp2074 1))
(let __tmp2079 (Top __tmp72 __tmp2076 __tmp2077 __tmp2078))
(let __tmp2080 (Bop __tmp1005 __tmp2069 __tmp2079))
(let __tmp2081 (Get __tmp2080 0))
(let __tmp2082 (Bop __tmp95 __tmp2081 __tmp2071))
(let __tmp2083 (Const __tmp34 __tmp1201 __tmp2059))
(let __tmp2084 (Get __tmp2080 1))
(let __tmp2085 (Top __tmp72 __tmp2082 __tmp2083 __tmp2084))
(let __tmp2086 (Bop __tmp1005 __tmp2067 __tmp2085))
(let __tmp2087 (Get __tmp2086 0))
(let __tmp2088 (Bop __tmp95 __tmp2087 __tmp2071))
(let __tmp2089 (Get __tmp2086 1))
(let __tmp2090 (Bop __tmp1005 __tmp2072 __tmp2089))
(let __tmp2091 (Get __tmp2090 0))
(let __tmp2092 (Bop __tmp95 __tmp2091 __tmp2066))
(let __tmp2093 (Get __tmp2090 1))
(let __tmp2094 (Bop __tmp1005 __tmp2092 __tmp2093))
(let __tmp2095 (Get __tmp2094 0))
(let __tmp2096 (Get __tmp2094 1))
(let __tmp2097 (Top __tmp72 __tmp2088 __tmp2095 __tmp2096))
(let __tmp2098 (Single __tmp2097))
(let __tmp2099 (Get __tmp2061 1))
(let __tmp2100 (Single __tmp2099))
(let __tmp2101 (Single __tmp2066))
(let __tmp2102 (Single __tmp2060))
(let __tmp2103 (Get __tmp2061 3))
(let __tmp2104 (Single __tmp2103))
(let __tmp2105 (Get __tmp2061 4))
(let __tmp2106 (Single __tmp2105))
(let __tmp2107 (Single __tmp2068))
(let __tmp2108 (Single __tmp2065))
(let __tmp2109 (Get __tmp2061 7))
(let __tmp2110 (Single __tmp2109))
(let __tmp2111 (Get __tmp2061 8))
(let __tmp2112 (Single __tmp2111))
(let __tmp2113 (Get __tmp2061 9))
(let __tmp2114 (Single __tmp2113))
(let __tmp2115 (Get __tmp2061 10))
(let __tmp2116 (Single __tmp2115))
(let __tmp2117 (Single __tmp2062))
(let __tmp2118 (Single __tmp2070))
(let __tmp2119 (Get __tmp2061 13))
(let __tmp2120 (Single __tmp2119))
(let __tmp2121 (Concat __tmp2118 __tmp2120))
(let __tmp2122 (Concat __tmp2117 __tmp2121))
(let __tmp2123 (Concat __tmp2116 __tmp2122))
(let __tmp2124 (Concat __tmp2114 __tmp2123))
(let __tmp2125 (Concat __tmp2112 __tmp2124))
(let __tmp2126 (Concat __tmp2110 __tmp2125))
(let __tmp2127 (Concat __tmp2108 __tmp2126))
(let __tmp2128 (Concat __tmp2107 __tmp2127))
(let __tmp2129 (Concat __tmp2106 __tmp2128))
(let __tmp2130 (Concat __tmp2104 __tmp2129))
(let __tmp2131 (Concat __tmp2102 __tmp2130))
(let __tmp2132 (Concat __tmp2101 __tmp2131))
(let __tmp2133 (Concat __tmp2100 __tmp2132))
(let __tmp2134 (Concat __tmp2098 __tmp2133))
(let __tmp2135 (InIf true __tmp2064 __tmp2134))
(let __tmp2136 (Arg __tmp1289 __tmp2135))
(let __tmp2137 (InFunc " loop_ctx_17"))
(let __tmp2138 (Arg __tmp1289 __tmp2137))
(let __tmp2139 (Get __tmp2138 3))
(let __tmp2140 (Const __tmp31 __tmp1289 __tmp2137))
(let __tmp2141 (Bop __tmp63 __tmp2139 __tmp2140))
(let __tmp2142 (Get __tmp2138 12))
(let __tmp2143 (Bop __tmp1205 __tmp2142 __tmp2140))
(let __tmp2144 (Bop __tmp62 __tmp2141 __tmp2143))
(let __tmp2145 (Single __tmp2144))
(let __tmp2146 (Get __tmp2138 7))
(let __tmp2147 (Get __tmp2138 2))
(let __tmp2148 (Bop __tmp95 __tmp2146 __tmp2147))
(let __tmp2149 (Get __tmp2138 6))
(let __tmp2150 (Bop __tmp95 __tmp2149 __tmp2147))
(let __tmp2151 (Get __tmp2138 0))
(let __tmp2152 (Bop __tmp1005 __tmp2150 __tmp2151))
(let __tmp2153 (Get __tmp2152 0))
(let __tmp2154 (Bop __tmp95 __tmp2153 __tmp2139))
(let __tmp2155 (Get __tmp2138 11))
(let __tmp2156 (Const __tmp1104 __tmp1289 __tmp2137))
(let __tmp2157 (Bop __tmp1092 __tmp2155 __tmp2156))
(let __tmp2158 (Get __tmp2138 5))
(let __tmp2159 (Get __tmp2152 1))
(let __tmp2160 (Bop __tmp1005 __tmp2150 __tmp2159))
(let __tmp2161 (Get __tmp2160 0))
(let __tmp2162 (Bop __tmp1205 __tmp2139 __tmp2140))
(let __tmp2163 (Bop __tmp95 __tmp2161 __tmp2162))
(let __tmp2164 (Get __tmp2160 1))
(let __tmp2165 (Bop __tmp1005 __tmp2163 __tmp2164))
(let __tmp2166 (Get __tmp2165 0))
(let __tmp2167 (Bop __tmp1092 __tmp2158 __tmp2166))
(let __tmp2168 (Get __tmp2138 4))
(let __tmp2169 (Bop __tmp1014 __tmp2167 __tmp2168))
(let __tmp2170 (Bop __tmp1013 __tmp2157 __tmp2169))
(let __tmp2171 (Get __tmp2165 1))
(let __tmp2172 (Top __tmp72 __tmp2154 __tmp2170 __tmp2171))
(let __tmp2173 (Bop __tmp1005 __tmp2148 __tmp2172))
(let __tmp2174 (Get __tmp2173 0))
(let __tmp2175 (Bop __tmp95 __tmp2174 __tmp2139))
(let __tmp2176 (Get __tmp2138 10))
(let __tmp2177 (Bop __tmp1092 __tmp2176 __tmp2156))
(let __tmp2178 (Get __tmp2138 9))
(let __tmp2179 (Bop __tmp95 __tmp2178 __tmp2139))
(let __tmp2180 (Get __tmp2173 1))
(let __tmp2181 (Bop __tmp1005 __tmp2179 __tmp2180))
(let __tmp2182 (Get __tmp2181 0))
(let __tmp2183 (Bop __tmp1205 __tmp2147 __tmp2140))
(let __tmp2184 (Bop __tmp95 __tmp2182 __tmp2183))
(let __tmp2185 (Get __tmp2181 1))
(let __tmp2186 (Bop __tmp1005 __tmp2184 __tmp2185))
(let __tmp2187 (Get __tmp2186 0))
(let __tmp2188 (Bop __tmp1092 __tmp2177 __tmp2187))
(let __tmp2189 (Const __tmp1027 __tmp1289 __tmp2137))
(let __tmp2190 (Const __tmp1093 __tmp1289 __tmp2137))
(let __tmp2191 (Bop __tmp1092 __tmp2190 __tmp2176))
(let __tmp2192 (Bop __tmp1014 __tmp2189 __tmp2191))
(let __tmp2193 (Get __tmp2186 1))
(let __tmp2194 (Bop __tmp1005 __tmp2179 __tmp2193))
(let __tmp2195 (Get __tmp2194 0))
(let __tmp2196 (Bop __tmp95 __tmp2195 __tmp2147))
(let __tmp2197 (Get __tmp2194 1))
(let __tmp2198 (Bop __tmp1005 __tmp2196 __tmp2197))
(let __tmp2199 (Get __tmp2198 0))
(let __tmp2200 (Bop __tmp1092 __tmp2192 __tmp2199))
(let __tmp2201 (Bop __tmp1014 __tmp2188 __tmp2200))
(let __tmp2202 (Get __tmp2138 8))
(let __tmp2203 (Get __tmp2198 1))
(let __tmp2204 (Bop __tmp1005 __tmp2179 __tmp2203))
(let __tmp2205 (Get __tmp2204 0))
(let __tmp2206 (Bop __tmp63 __tmp2147 __tmp2140))
(let __tmp2207 (Bop __tmp95 __tmp2205 __tmp2206))
(let __tmp2208 (Get __tmp2204 1))
(let __tmp2209 (Bop __tmp1005 __tmp2207 __tmp2208))
(let __tmp2210 (Get __tmp2209 0))
(let __tmp2211 (Bop __tmp1092 __tmp2202 __tmp2210))
(let __tmp2212 (Bop __tmp1016 __tmp2201 __tmp2211))
(let __tmp2213 (Get __tmp2209 1))
(let __tmp2214 (Bop __tmp1005 __tmp2148 __tmp2213))
(let __tmp2215 (Get __tmp2214 0))
(let __tmp2216 (Bop __tmp95 __tmp2215 __tmp2162))
(let __tmp2217 (Get __tmp2214 1))
(let __tmp2218 (Bop __tmp1005 __tmp2216 __tmp2217))
(let __tmp2219 (Get __tmp2218 0))
(let __tmp2220 (Bop __tmp1092 __tmp2158 __tmp2219))
(let __tmp2221 (Bop __tmp1016 __tmp2212 __tmp2220))
(let __tmp2222 (Get __tmp2218 1))
(let __tmp2223 (Bop __tmp1005 __tmp2150 __tmp2222))
(let __tmp2224 (Get __tmp2223 0))
(let __tmp2225 (Bop __tmp95 __tmp2224 __tmp2162))
(let __tmp2226 (Get __tmp2223 1))
(let __tmp2227 (Bop __tmp1005 __tmp2225 __tmp2226))
(let __tmp2228 (Get __tmp2227 0))
(let __tmp2229 (Bop __tmp1092 __tmp2158 __tmp2228))
(let __tmp2230 (Bop __tmp1014 __tmp2229 __tmp2168))
(let __tmp2231 (Bop __tmp1013 __tmp2221 __tmp2230))
(let __tmp2232 (Get __tmp2227 1))
(let __tmp2233 (Top __tmp72 __tmp2175 __tmp2231 __tmp2232))
(let __tmp2234 (Single __tmp2233))
(let __tmp2235 (Get __tmp2138 1))
(let __tmp2236 (Single __tmp2235))
(let __tmp2237 (Single __tmp2147))
(let __tmp2238 (Concat __tmp2236 __tmp2237))
(let __tmp2239 (Single __tmp2141))
(let __tmp2240 (Single __tmp2168))
(let __tmp2241 (Concat __tmp2239 __tmp2240))
(let __tmp2242 (Single __tmp2158))
(let __tmp2243 (Concat __tmp2241 __tmp2242))
(let __tmp2244 (Single __tmp2149))
(let __tmp2245 (Concat __tmp2243 __tmp2244))
(let __tmp2246 (Single __tmp2146))
(let __tmp2247 (Concat __tmp2245 __tmp2246))
(let __tmp2248 (Single __tmp2202))
(let __tmp2249 (Concat __tmp2247 __tmp2248))
(let __tmp2250 (Single __tmp2178))
(let __tmp2251 (Concat __tmp2249 __tmp2250))
(let __tmp2252 (Single __tmp2176))
(let __tmp2253 (Concat __tmp2251 __tmp2252))
(let __tmp2254 (Single __tmp2155))
(let __tmp2255 (Concat __tmp2253 __tmp2254))
(let __tmp2256 (Single __tmp2142))
(let __tmp2257 (Concat __tmp2255 __tmp2256))
(let __tmp2258 (Get __tmp2138 13))
(let __tmp2259 (Single __tmp2258))
(let __tmp2260 (Concat __tmp2257 __tmp2259))
(let __tmp2261 (Get __tmp2138 14))
(let __tmp2262 (Single __tmp2261))
(let __tmp2263 (Concat __tmp2260 __tmp2262))
(let __tmp2264 (Concat __tmp2238 __tmp2263))
(let __tmp2265 (Concat __tmp2234 __tmp2264))
(let __tmp2266 (Concat __tmp2145 __tmp2265))
(let __tmp2267 (DoWhile __tmp2136 __tmp2266))
(let __tmp2268 (InIf false __tmp2064 __tmp2134))
(let __tmp2269 (Arg __tmp1289 __tmp2268))
(let __tmp2270 (If __tmp2064 __tmp2134 __tmp2267 __tmp2269))
(let __tmp2271 (Get __tmp2270 0))
(let __tmp2272 (Single __tmp2271))
(let __tmp2273 (Concat __tmp2272 __tmp2100))
(let __tmp2274 (Bop __tmp63 __tmp2060 __tmp2066))
(let __tmp2275 (Single __tmp2274))
(let __tmp2276 (Get __tmp2270 4))
(let __tmp2277 (Single __tmp2276))
(let __tmp2278 (Get __tmp2270 5))
(let __tmp2279 (Single __tmp2278))
(let __tmp2280 (Get __tmp2270 6))
(let __tmp2281 (Single __tmp2280))
(let __tmp2282 (Get __tmp2270 7))
(let __tmp2283 (Single __tmp2282))
(let __tmp2284 (Get __tmp2270 8))
(let __tmp2285 (Single __tmp2284))
(let __tmp2286 (Get __tmp2270 9))
(let __tmp2287 (Single __tmp2286))
(let __tmp2288 (Get __tmp2270 10))
(let __tmp2289 (Single __tmp2288))
(let __tmp2290 (Get __tmp2270 11))
(let __tmp2291 (Single __tmp2290))
(let __tmp2292 (Get __tmp2270 13))
(let __tmp2293 (Single __tmp2292))
(let __tmp2294 (Concat __tmp2293 __tmp2120))
(let __tmp2295 (Concat __tmp2117 __tmp2294))
(let __tmp2296 (Concat __tmp2291 __tmp2295))
(let __tmp2297 (Concat __tmp2289 __tmp2296))
(let __tmp2298 (Concat __tmp2287 __tmp2297))
(let __tmp2299 (Concat __tmp2285 __tmp2298))
(let __tmp2300 (Concat __tmp2283 __tmp2299))
(let __tmp2301 (Concat __tmp2281 __tmp2300))
(let __tmp2302 (Concat __tmp2279 __tmp2301))
(let __tmp2303 (Concat __tmp2277 __tmp2302))
(let __tmp2304 (Concat __tmp2275 __tmp2303))
(let __tmp2305 (Concat __tmp2273 __tmp2304))
(let __tmp2306 (InIf false __tmp2057 __tmp2052))
(let __tmp2307 (Arg __tmp1201 __tmp2306))
(let __tmp2308 (If __tmp2057 __tmp2052 __tmp2305 __tmp2307))
(let __tmp2309 (Concat __tmp2058 __tmp2308))
(let __tmp2310 (DoWhile __tmp2050 __tmp2309))
(let __tmp2311 (Get __tmp2310 0))
(let __tmp2312 (Single __tmp2311))
(let __tmp2313 (Bop __tmp63 __tmp2012 __tmp2014))
(let __tmp2314 (Single __tmp2313))
(let __tmp2315 (Get __tmp2310 3))
(let __tmp2316 (Single __tmp2315))
(let __tmp2317 (Get __tmp2310 4))
(let __tmp2318 (Single __tmp2317))
(let __tmp2319 (Get __tmp2310 5))
(let __tmp2320 (Single __tmp2319))
(let __tmp2321 (Get __tmp2310 6))
(let __tmp2322 (Single __tmp2321))
(let __tmp2323 (Get __tmp2310 7))
(let __tmp2324 (Single __tmp2323))
(let __tmp2325 (Get __tmp2310 8))
(let __tmp2326 (Single __tmp2325))
(let __tmp2327 (Get __tmp2310 9))
(let __tmp2328 (Single __tmp2327))
(let __tmp2329 (Get __tmp2310 10))
(let __tmp2330 (Single __tmp2329))
(let __tmp2331 (Get __tmp2310 12))
(let __tmp2332 (Single __tmp2331))
(let __tmp2333 (Concat __tmp2332 __tmp2037))
(let __tmp2334 (Concat __tmp2033 __tmp2333))
(let __tmp2335 (Concat __tmp2330 __tmp2334))
(let __tmp2336 (Concat __tmp2328 __tmp2335))
(let __tmp2337 (Concat __tmp2326 __tmp2336))
(let __tmp2338 (Concat __tmp2324 __tmp2337))
(let __tmp2339 (Concat __tmp2322 __tmp2338))
(let __tmp2340 (Concat __tmp2320 __tmp2339))
(let __tmp2341 (Concat __tmp2318 __tmp2340))
(let __tmp2342 (Concat __tmp2316 __tmp2341))
(let __tmp2343 (Concat __tmp2314 __tmp2342))
(let __tmp2344 (Concat __tmp2312 __tmp2343))
(let __tmp2345 (InIf false __tmp2006 __tmp2003))
(let __tmp2346 (Arg __tmp1149 __tmp2345))
(let __tmp2347 (If __tmp2006 __tmp2003 __tmp2344 __tmp2346))
(let __tmp2348 (Concat __tmp2007 __tmp2347))
(let __tmp2349 (DoWhile __tmp2001 __tmp2348))
(let __tmp2350 (Get __tmp2349 0))
(let __tmp2351 (Single __tmp2350))
(let __tmp2352 (Function "kernel_adi" __tmp1951 __tmp4 __tmp2351))
(let __tmp2353 (InLoop __tmp61 __tmp103))
(let __tmp2354 (InLoop __tmp143 __tmp181))
(let __tmp2355 (InLoop __tmp215 __tmp256))
(let __tmp2356 (InLoop __tmp293 __tmp337))
(let __tmp2357 (InLoop __tmp377 __tmp424))
(let __tmp2358 (InLoop __tmp534 __tmp590))
(let __tmp2359 (InLoop __tmp634 __tmp690))
(let __tmp2360 (InLoop __tmp734 __tmp790))
(let __tmp2361 (InLoop __tmp834 __tmp890))
(let __tmp2362 (InLoop __tmp454 __tmp929))
(let __tmp2363 (InLoop __tmp1627 __tmp1692))
(let __tmp2364 (InLoop __tmp1763 __tmp1804))
(let __tmp2365 (InLoop __tmp1729 __tmp1830))
(let __tmp2366 (InLoop __tmp1882 __tmp1915))
(let __tmp2367 (InLoop __tmp1854 __tmp1936))
(let __tmp2368 (InLoop __tmp2136 __tmp2266))
(let __tmp2369 (InLoop __tmp2050 __tmp2309))
(let __tmp2370 (InLoop __tmp2001 __tmp2348))
(let __tmp2371 (InLoop __tmp996 __tmp1042))
(let __tmp2372 (InLoop __tmp953 __tmp1068))
(let __tmp2373 (InLoop __tmp1291 __tmp1421))
(let __tmp2374 (InLoop __tmp1198 __tmp1464))
(let __tmp2375 (InLoop __tmp1137 __tmp1503))
(let __tmp2376 (InLoop __tmp1552 __tmp1585))
(let __tmp2377 (InLoop __tmp1519 __tmp1606))
(FunctionHasType "main" (TupleT (TCons (StateT) (TNil))) (TupleT (TCons (StateT) (TNil))))
(FunctionHasType "init_array" (TupleT (TCons (IntT) (TCons (FloatT) (TCons (PointerT (PointerT (FloatT))) (TCons (StateT) (TNil)))))) (TupleT (TCons (StateT) (TNil))))
(FunctionHasType "sum_array" (TupleT (TCons (IntT) (TCons (PointerT (PointerT (FloatT))) (TCons (StateT) (TNil))))) (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))))
(FunctionHasType "kernel_adi" (TupleT (TCons (IntT) (TCons (FloatT) (TCons (IntT) (TCons (FloatT) (TCons (PointerT (PointerT (FloatT))) (TCons (PointerT (PointerT (FloatT))) (TCons (PointerT (PointerT (FloatT))) (TCons (PointerT (PointerT (FloatT))) (TCons (StateT) (TNil))))))))))) (TupleT (TCons (StateT) (TNil))))


    ; Loop context unions
    (union __tmp64 __tmp2353)
(union __tmp144 __tmp2354)
(union __tmp216 __tmp2355)
(union __tmp294 __tmp2356)
(union __tmp378 __tmp2357)
(union __tmp535 __tmp2358)
(union __tmp635 __tmp2359)
(union __tmp735 __tmp2360)
(union __tmp835 __tmp2361)
(union __tmp467 __tmp2362)
(union __tmp1636 __tmp2363)
(union __tmp1764 __tmp2364)
(union __tmp1730 __tmp2365)
(union __tmp1883 __tmp2366)
(union __tmp1855 __tmp2367)
(union __tmp2137 __tmp2368)
(union __tmp2051 __tmp2369)
(union __tmp2002 __tmp2370)
(union __tmp997 __tmp2371)
(union __tmp959 __tmp2372)
(union __tmp1292 __tmp2373)
(union __tmp1202 __tmp2374)
(union __tmp1150 __tmp2375)
(union __tmp1553 __tmp2376)
(union __tmp1522 __tmp2377)

    ; Function inlining unions
     
(union __tmp940 __tmp1071)
(InlinedCall "init_array" __tmp939)
(subsume (Call "init_array" __tmp939))


(union __tmp1088 __tmp1506)
(InlinedCall "kernel_adi" __tmp1087)
(subsume (Call "kernel_adi" __tmp1087))


(union __tmp1509 __tmp1612)
(InlinedCall "sum_array" __tmp1508)
(subsume (Call "sum_array" __tmp1508))

) :ruleset initialization)
(run initialization 1) 

; Schedule

(run-schedule
    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    (repeat 2
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        all-optimizations
    )

    (repeat 4
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        cheap-optimizations
    )

    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    add-to-debug-expr
)

(print-size)

