
; Prologue
; Every term is an `Expr` or a `ListExpr`.
(datatype Expr)
; Used for constructing a list of branches for `Switch`es
; or a list of functions in a `Program`.
(datatype ListExpr (Cons Expr ListExpr) (Nil))

; =================================
; Types
; =================================

(sort TypeList)

(datatype BaseType
  (IntT)
  (BoolT)
  (FloatT)
  ; a pointer to a memory region with a particular type
  (PointerT BaseType)
  (StateT))


(datatype Type
  ; a primitive type
  (Base BaseType)
  ; a typed tuple. Use an empty tuple as a unit type.
  ; state edge also has unit type
  (TupleT TypeList)
)

; use TmpType for helpers where the type doesn't matter
; these shouldn't appear in values in the program, only intermediate terms (such as in ivt.egg permutations)
(constructor TmpType () Type)

(constructor TNil () TypeList)
(constructor TCons (BaseType TypeList) TypeList) ; Head element should never be a tuple


; =================================
; Assumptions
; =================================

(datatype Assumption
  ; Assume nothing
  (InFunc String)
  ; The term is in a loop with `input` and `pred_output`.
  ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
  ;      input    pred_output
  (InLoop Expr     Expr)
  ; Branch of the switch, and what the predicate is, and what the input is
  (InSwitch i64 Expr Expr)
  ; If the predicate was true, and what the predicate is, and what the input is
  (InIf bool Expr Expr)
)



; =================================
; Leaf nodes
; Constants, argument, and empty tuple
; =================================

; Only a single argument is bound- if multiple values are needed, arg will be a tuple.
; e.g. `(Get (Arg tuple_type) 1)` gets the second value in the argument with some tuple_type.
(constructor Arg (Type Assumption) Expr)

; Constants
(datatype Constant
  (Int i64)
  (Bool bool)
  (Float f64))
; All leaf nodes need the type of the argument
; Type is the type of the bound argument in scope
(constructor Const (Constant Type Assumption) Expr)

; An empty tuple.
; Type is the type of the bound argument in scope
(constructor Empty (Type Assumption) Expr)


; =================================
; Operators
; =================================

(datatype TernaryOp
  ; given a pointer, value, and a state edge
  ; writes the value to the pointer and returns
  ; the resulting state edge
  (Write)
  (Select))
(datatype BinaryOp
  ;; Bitwise operators
  (Bitand)
  ;; integer operators
  (Add)
  (Sub)
  (Div)
  (Mul)
  (LessThan)
  (GreaterThan)
  (LessEq)
  (GreaterEq)
  (Eq)
  (Smin)
  (Smax)
  (Shl)
  (Shr)
  ;; float operators 
  (FAdd)
  (FSub)
  (FDiv)
  (FMul)
  (FLessThan)
  (FGreaterThan) 
  (FLessEq)
  (FGreaterEq)
  (FEq)
  (Fmin)
  (Fmax)
  ;; logical operators
  (And)
  (Or)
  ; given a pointer and a state edge
  ; loads the value at the pointer and returns (value, state edge)
  (Load)
  ; Takes a pointer and an integer, and offsets
  ; the pointer by the integer
  (PtrAdd)
  ; given and value and a state edge, prints the value as a side-effect
  ; the value must be a base value, not a tuple
  ; returns an empty tuple
  (Print)
  ; given a pointer and state edge, frees the whole memory region at the pointer
  (Free))
(datatype UnaryOp
  (Neg)
  (Abs)
  (Not))

; Operators
(constructor Top   (TernaryOp Expr Expr Expr) Expr)
(constructor Bop   (BinaryOp Expr Expr) Expr)
(constructor Uop   (UnaryOp Expr) Expr)
; gets from a tuple. static index
(constructor Get   (Expr i64) Expr)
; (Alloc id amount state_edge pointer_type)
; allocate an integer amount of memory for a particular type
; returns (pointer to the allocated memory, state edge)
(constructor Alloc (i64 Expr Expr BaseType)      Expr)
;               name of func   arg
(constructor Call (String         Expr) Expr)



; =================================
; Tuple operations
; =================================

; `Empty`, `Single` and `Concat` create tuples.
; 1. Use `Empty` for an empty tuple.
; 2. Use `Single` for a tuple with one element.
; 3. Use `Concat` to append the elements from two tuples together.
; Nested tuples are not allowed.


; A tuple with a single element.
; Necessary because we only use `Concat` to add to tuples.
(constructor Single (Expr) Expr)
; Concat appends the elemnts from two tuples together
; e.g. (Concat (Concat (Single a) (Single b))
;              (Concat (Single c) (Single d))) = (a, b, c, d)
;                 expr1       expr2
(constructor Concat (Expr        Expr)       Expr)



; =================================
; Control flow
; =================================

; Switch on a list of lazily-evaluated branches.
; pred must be an integer
;                 pred  inputs   branches     chosen
(constructor Switch (Expr  Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred inputs   then else
(constructor If (Expr Expr     Expr Expr) Expr)


; A do-while loop.
; Evaluates the input, then evaluates the body.
; Keeps looping while the predicate is true.
; input must have the same type as (output1, output2, ..., outputi)
; input must be a tuple 
; pred must be a boolean
; pred-and-body must be a flat tuple (pred, out1, out2, ..., outi)
; input must be the same type as (out1, out2, ..., outi)
;                  input   pred-and-body
(constructor DoWhile (Expr    Expr)                   Expr)


; =================================
; Top-level expressions
; =================================
(sort ProgramType)
; An entry function and a list of additional functions.
;                      entry function     other functions
(constructor Program     (Expr               ListExpr) ProgramType)
;                   name   input ty  output ty  output
(constructor Function (String Type      Type       Expr)      Expr)

; to get the type of a funciton, look in this table
; since we might not be optimizing the entire program
(relation FunctionHasType (String Type Type))

; Rulesets
(ruleset always-run)
(ruleset is-resolved)
(ruleset error-checking)
(ruleset memory)
(ruleset memory-helpers)
(ruleset smem)

;; Initliazation
(relation bop->string (BinaryOp String))
(relation uop->string (UnaryOp String))
(relation top->string (TernaryOp String))
(bop->string (Add) "Add")
(bop->string (Sub) "Sub")
(bop->string (Div) "Div")
(bop->string (Mul) "Mul")
(bop->string (LessThan) "LessThan")
(bop->string (GreaterThan) "GreaterThan")
(bop->string (LessEq) "LessEq")
(bop->string (GreaterEq) "GreaterEq")
(bop->string (Eq) "Eq")
(bop->string (FAdd) "FAdd")
(bop->string (FSub) "FSub")
(bop->string (FDiv) "FDiv")
(bop->string (FMul) "FMul")
(bop->string (FLessThan) "FLessThan")
(bop->string (FGreaterThan) "FGreaterThan")
(bop->string (FLessEq) "FLessEq")
(bop->string (FGreaterEq) "FGreaterEq")
(bop->string (FEq) "FEq")
(bop->string (And) "And")
(bop->string (Or) "Or")
(bop->string (Load) "Load")
(bop->string (PtrAdd) "PtrAdd")
(bop->string (Print) "Print")
(bop->string (Free) "Free")

;; If anything is put in the DebugExpr relation, we'll extract them instead of the original program.
;; These can then be visualized using the `optimized-rvsdg` run mode
(relation DebugExpr (Expr))

; TERMS
(datatype Term)
(datatype ListTerm (TermCons Term ListTerm) (TermNil))

; TODO: Will probably need ctx so that we can resubstitute?
; (datatype TermAssumption
;   ; Assume nothing
;   (InFunc String)
;   ; The term is in a loop with `input` and `pred_output`.
;   ; InLoop is a special context because it describes the argument of the loop. It is a *scope context*.
;   ;      input    pred_output
;   (InLoop Term     Term)
;   ; Branch of the switch, and what the predicate is, and what the input is
;   (InSwitch i64 Term Term)
;   ; If the predicate was true, and what the predicate is, and what the input is
;   (InIf bool Term Term)
; )

(constructor TermArg () Term)

(constructor TermConst (Constant) Term)

(constructor TermEmpty () Term)

; Term Operators
(constructor TermTop (TernaryOp Term Term Term) Term)
(constructor TermBop (BinaryOp Term Term) Term)
(constructor TermUop (UnaryOp Term) Term)
(constructor TermGet (Term i64) Term)
(constructor TermAlloc (i64 Term Term BaseType) Term)
(constructor TermCall (String Term) Term)

; Tuple Operators
(constructor TermSingle (Term) Term)
(constructor TermConcat (Term Term) Term)

; Control Flow (TODO? Not sure if needed)
; (constructor TermSwitch (Term Term ListTerm) Term)
; (constructor TermIf (Term Term Term Term) Term)

; (constructor TermDoWhile (Term Term) Term)


(ruleset never)
(ruleset type-analysis)
(ruleset type-helpers)       ;; these rules need to saturate between every iter of type-analysis rules

(constructor TLConcat (TypeList TypeList) TypeList :unextractable)
(rewrite (TLConcat (TNil) r) r :ruleset type-helpers)
(rewrite (TLConcat (TCons hd tl) r)
         (TCons hd (TLConcat tl r))
         :ruleset type-helpers)

(function TypeList-length (TypeList) i64 :no-merge)
(constructor TypeList-ith (TypeList i64) BaseType :unextractable)
;; Don't match on TypeList-ith because it is now lazily instantiated!
(rule () ((set (TypeList-length (TNil)) 0)) :ruleset type-helpers)
(rule ((= lst (TCons hd tl))
       (= len (TypeList-length tl)))
      ((set (TypeList-length lst) (+ 1 len))) :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) 0) hd :ruleset type-helpers)
(rewrite (TypeList-ith (TCons hd tl) i) (TypeList-ith tl (- i 1)) 
      :when ((> i 0)) 
      :ruleset type-helpers)

(rule ((TypeList-ith list i)
       (= (TypeList-length list) n)
       (>= i n))
      ((panic "TypeList-ith out of bounds")) :ruleset type-helpers)

(relation HasType (Expr Type))


;; Keep track of type expectations for error messages
(relation ExpectType (Expr Type String))
(rule (
        (ExpectType e expected msg)
        (HasType e actual)
        (!= expected actual) ;; not okay unless we saturate type helpers.
      )
      (
       (panic "type mismatch- check RUST_LOG=info for expressions that mismatched"))
      :ruleset error-checking)


(rule ((= (Const c1 ty1 ctx1) (Const c2 ty2 ctx2))
       (= ctx1 (InFunc name))
       (!= c1 c2))
      ((panic "Unsoundness detected: const values differ at top level"))
      :ruleset error-checking)

(relation HasArgType (Expr Type))

(rule ((HasArgType (Arg t1 ctx) t2)
       (!= t1 t2))
      ((panic "arg type mismatch"))
      :ruleset error-checking)

(rule ((= lhs (Function name in out body))
       (HasArgType body ty)
       (HasArgType body ty2)
       (!= ty ty2))
      ((panic "arg type mismatch in function"))
      :ruleset error-checking)

; Propagate arg types up
(rule ((= lhs (Uop _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop _ a b))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType a ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType b ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Top _ a b c))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Get e _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Alloc _id e state _))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Call _ e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Single e))
       (HasArgType e ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e1 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Concat e1 e2))
       (HasArgType e2 ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType pred ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Switch pred inputs (Cons branch rest)))
       (HasArgType branch ty)
       (HasType inputs ty2)
       (!= ty ty2))
      ((panic "switch branches then branch has incorrect input type"))
      :ruleset error-checking)
;; demand with one fewer branches
(rule ((= lhs (Switch pred inputs (Cons branch rest))))
      ((Switch pred inputs rest))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasArgType c ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType t ty2)
       (!= ty ty2))
      ((panic "if branches then branch has incorrect input type"))
      :ruleset error-checking)
(rule ((= lhs (If c i t e))
       (HasType i ty)
       (HasArgType e ty2)
       (!= ty ty2))
      ((panic "if branches else branch has incorrect input type"))
      :ruleset error-checking)


(rule ((= lhs (DoWhile ins body))
       (HasArgType ins ty))
      ((HasArgType lhs ty))
      :ruleset type-analysis)
; Don't push arg types through Program, Function, DoWhile, Let exprs because
; these create new arg contexts.

; Primitives
(rule ((= lhs (Const (Int i) ty ctx)))
      ((HasType lhs (Base (IntT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Bool b) ty ctx)))
      ((HasType lhs (Base (BoolT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Const (Float b) ty ctx)))
      ((HasType lhs (Base (FloatT)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

(rule ((= lhs (Empty ty ctx)))
      ((HasType lhs (TupleT (TNil)))
       (HasArgType lhs ty))
      :ruleset type-analysis)

; Unary Ops
(rule (
        (= lhs (Uop (Not) e))
        (HasType e (Base (BoolT)))
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Not) e)))
      ((ExpectType e (Base (BoolT)) "(Not)"))
      :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
      (HasType e (Base (IntT)))
) (
      (HasType lhs (Base (IntT)))
) :ruleset type-analysis)

(rule (
      (= lhs (Uop (Neg) e))
) (
      (ExpectType e (Base (IntT)) "(Neg)")
) :ruleset type-analysis)

(rule (
        (= lhs (Uop (Abs) e))
        (HasType e (Base (IntT)))
      )
      ((HasType lhs (Base (IntT))))
      :ruleset type-analysis)
(rule ((= lhs (Uop (Abs) e)))
      ((ExpectType e (Base (IntT)) "(Abs)"))
      :ruleset type-analysis)


(rule (
        (= lhs (Bop (Print) e state))
        (HasType e _ty)             ; just make sure it has some type.
      )
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)

(rule (
        (= lhs (Bop (Print) e state))
        (HasType e (TupleT ty))
      )
      ((panic "Don't print a tuple"))
      :ruleset error-checking)

(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (PointerT _ty))))
      ((HasType lhs (Base (StateT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (Base (IntT))))
      ((panic "Free expected pointer, received integer"))
      :ruleset error-checking)
(rule ((= lhs (Bop (Free) e s))
       (HasType e (TupleT _ty)))
      ((panic "Free expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Bop (Load) e state))
        (HasType e (Base (PointerT ty)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (Base (IntT)))
      )
      ((panic "(Load) expected pointer, received int"))
      :ruleset error-checking)
(rule (
        (= lhs (Bop (Load) e state))
        (HasType e ty)
        (= ty (TupleT x))
      )
      ((panic "(Load) expected pointer, received tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (Top (Select) pred v1 v2))
      )
      ((ExpectType pred (Base (BoolT)) "(Select)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty)
        (HasType v2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Top (Select) pred v1 v2))
        (HasType v1 ty1)
        (HasType v2 ty2)
        (!= ty1 ty2)
      )
      ((panic "(Select) branches had different types"))
      :ruleset error-checking)


; Binary ops

;; Operators that have type Type -> Type -> Type
;; Note we only do this generic matching for binary
;; operator since there's a lot of them.
;; In the future we can also extend to other constructs.
(relation bop-of-type (BinaryOp Type))
(bop-of-type (Bitand) (Base (IntT)))
(bop-of-type (Add) (Base (IntT)))
(bop-of-type (Sub) (Base (IntT)))
(bop-of-type (Div) (Base (IntT)))
(bop-of-type (Mul) (Base (IntT)))
(bop-of-type (FAdd) (Base (FloatT)))
(bop-of-type (FSub) (Base (FloatT)))
(bop-of-type (FDiv) (Base (FloatT)))
(bop-of-type (FMul) (Base (FloatT)))

(rule (
        (= lhs (Bop op e1 e2))
        (bop-of-type op ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)
(rule ((= lhs (Bop op e1 e2))
       (bop-of-type op ty)
       (bop->string op op-str))
      (
        (ExpectType e1 ty op-str)
        (ExpectType e2 ty op-str)
      )
      :ruleset type-analysis)  

;; Operators that have type Float -> Float -> Bool
(relation bpred-of-type (BinaryOp Type))
(bpred-of-type (FLessThan) (Base (FloatT)))
(bpred-of-type (FLessEq) (Base (FloatT)))
(bpred-of-type (FGreaterThan) (Base (FloatT)))
(bpred-of-type (FGreaterEq) (Base (FloatT)))
(bpred-of-type (FEq) (Base (FloatT)))
(bpred-of-type (LessThan) (Base (IntT)))
(bpred-of-type (LessEq) (Base (IntT)))
(bpred-of-type (GreaterThan) (Base (IntT)))
(bpred-of-type (GreaterEq) (Base (IntT)))
(bpred-of-type (Eq) (Base (IntT)))
(bpred-of-type (And) (Base (BoolT)))
(bpred-of-type (Or) (Base (BoolT)))

(rule (
        (= lhs (Bop pred e1 e2))
        (bpred-of-type pred ty)
        (HasType e1 ty)
        (HasType e2 ty)
      )
      ((HasType lhs (Base (BoolT))))
      :ruleset type-analysis)
(rule ((= lhs (Bop pred e1 e2))
       (bpred-of-type pred ty)
       (bop->string pred pred-str))
      (
        (ExpectType e1 ty pred-str)
        (ExpectType e2 ty pred-str)
      )
      :ruleset type-analysis)  

(rule (
        (= lhs (Top (Write) ptr val state))
        (HasType ptr (Base (PointerT ty)))
        (HasType val (Base ty)) ; TODO need to support pointers to pointers
      )
      ((HasType lhs (Base (StateT)))) ; Write returns ()
      :ruleset type-analysis)

(rule (
       (= lhs (Top (Write) ptr val state))
       (HasType ptr (Base (PointerT ty))))
      ((ExpectType val (Base ty) "(Write)"))
      :ruleset type-analysis)
      
       

(rule (
        (= lhs (Bop (PtrAdd) ptr n))
        (HasType ptr (Base (PointerT ty)))
        (HasType n (Base (IntT)))
      )
      ((HasType lhs (Base (PointerT ty))))
      :ruleset type-analysis)

; Other ops
(rule ((= lhs (Alloc _id amt state ty))) 
      ((ExpectType amt (Base (IntT)) "(Alloc)"))
      :ruleset type-analysis)

(rule (
        (= lhs (Alloc _id amt state ty))
        (HasType amt (Base (IntT)))
      )
      ((HasType lhs (TupleT (TCons ty (TCons (StateT) (TNil))))))
      :ruleset type-analysis)

(rule (
        (= lhs (Get e i))
        (HasType e (TupleT tylist))
      )
      ; TypeList-ith needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (Base (TypeList-ith tylist i)))) 
      :ruleset type-analysis)

(rule (
       (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
       (>= i len))
      ((panic "index out of bounds"))
      :ruleset error-checking)
(rule (
      (HasType (Get expr i) (TupleT tl))
       (= (TypeList-length tl) len)
        (< i 0)
      )
      ((panic "negative index"))
      :ruleset error-checking)

; =================================
; Tuple operations
; =================================

(rule (
        (= lhs (Single e))
        (HasType e (TupleT tylist))
      )
      ((panic "don't nest tuples"))
      :ruleset error-checking)

(rule (
        (= lhs (Single e))
        (HasType e (Base basety))
      )
      ((HasType lhs (TupleT (TCons basety (TNil)))))
      :ruleset type-analysis)

(rule (
        (= lhs (Concat e1 e2))
        (HasType e1 (TupleT tylist1))
        (HasType e2 (TupleT tylist2))
      )
      ; TLConcat needs to compute immediately, so we need to saturate type-helpers
      ; rules between every iter of type-analysis rules.
      ((HasType lhs (TupleT (TLConcat tylist1 tylist2))))
      :ruleset type-analysis)

; =================================
; Control flow
; =================================
(rule ((= lhs (If pred inputs then else)))
      ((ExpectType pred (Base (BoolT)) "If predicate must be boolean"))
      :ruleset type-analysis)
(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then ty)
        (HasType else ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (If pred inputs then else))
        (HasType pred (Base (BoolT)))
        (HasType then tya)
        (HasType else tyb)
        (!= tya tyb)
      )
      ((panic "if branches had different types"))
      :ruleset error-checking)



(rule ((= lhs (Switch pred inputs branches)))
      ((ExpectType pred (Base (IntT)) "Switch predicate must be integer"))
      :ruleset type-analysis)

; base case: single branch switch has type of branch
(rule (
        (= lhs (Switch pred inputs (Cons branch (Nil))))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

; recursive case: peel off a layer
(rule ((Switch pred inputs (Cons branch rest)))
      ((Switch pred inputs rest))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch ty)
        (HasType (Switch pred inputs rest) ty) ; rest of the branches also have type ty
      )
      ((HasType lhs ty))
      :ruleset type-analysis)

(rule (
        (= lhs (Switch pred inputs (Cons branch rest)))
        (HasType pred (Base (IntT)))
        (HasType branch tya)
        (HasType (Switch pred inputs rest) tyb)
        (!= tya tyb)
      )
      ((panic "switch branches had different types"))
      :ruleset error-checking)

(rule ((Arg ty ctx))
      (
        (HasType (Arg ty ctx) ty)
        (HasArgType (Arg ty ctx) ty)
      )
      :ruleset type-analysis)


(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base ty))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (Base (PointerT ty)))
      )
      ((panic "loop input must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base ty))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)
(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType pred-body (Base (PointerT ty)))
      )
      ((panic "loop pred-body must be tuple"))
      :ruleset error-checking)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist))
      )
      ((HasArgType pred-body (TupleT tylist)))
      :ruleset type-analysis)

(rule ((= lhs (DoWhile inp pred-body)))
      ((ExpectType (Get pred-body 0) (Base (BoolT)) "loop pred must be bool"))
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT tylist)) ; input is a tuple
        ; pred-body is a tuple where the first elt is a bool
        ; and the rest of the list matches the input type
        (HasType pred-body (TupleT (TCons (BoolT) tylist)))
      )
      ((HasType lhs (TupleT tylist))) ; whole thing has type of inputs/outputs
      :ruleset type-analysis)

(rule (
        (= lhs (DoWhile inp pred-body))
        (HasType inp (TupleT in-tys))
        (HasType pred-body (TupleT (TCons (BoolT) out-tys)))
        (!= in-tys out-tys)
      )
      ((panic "input types and output types don't match"))
      :ruleset error-checking)

; =================================
; Functions
; =================================

(rule ((= lhs (Function name in-ty out-ty body)))
      (
        ; Arg should have the specified type in the body
        (HasArgType body in-ty)
        ; Expect the body to have the specified output type
        (ExpectType body out-ty "Function body had wrong type")
      )
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
      )
      ; Expect the arg to have the right type for the function
      ((ExpectType arg in-ty "function called with wrong arg type"))
      :ruleset type-analysis)

(rule (
        (= lhs (Call name arg))
        (FunctionHasType name in-ty out-ty)
        (HasType arg in-ty)
        ; We don't need to check the type of the function body, it will
        ; be checked elsewhere. If we did require (HasType body out-ty),
        ; recursive functions would not get assigned a type.
      )
      ((HasType lhs out-ty))
      :ruleset type-analysis)

; find which types are pure
(relation PureBaseType (BaseType))
(relation PureType (Type))
(relation PureTypeList (TypeList))

(PureBaseType (IntT))
(PureBaseType (BoolT))
(rule ((Base ty)
       (PureBaseType ty))
      ((PureType (Base ty)))
      :ruleset type-analysis)
(rule ((TupleT tylist)
       (PureTypeList tylist))
      ((PureType (TupleT tylist)))
      :ruleset type-analysis)
(rule ((TNil))
      ((PureTypeList (TNil)))
      :ruleset type-analysis)
(rule ((TCons hd tl)
       (PureBaseType hd)
       (PureTypeList tl))
      ((PureTypeList (TCons hd tl)))
      :ruleset type-analysis)

(function ListExpr-length (ListExpr) i64 :no-merge)
(constructor ListExpr-ith (ListExpr i64) Expr :unextractable)
(constructor ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(constructor Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred inputs branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-length (Expr) i64 :no-merge)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)


;; Leading expressions are tuples that are used as a whole
;; during optimization and are matched in the query.
(relation leading-Expr (Expr))
(relation leading-Expr-list (ListExpr))

(rule ((= e (DoWhile inputs pred_out)))
      ((leading-Expr e)
       (leading-Expr inputs)
       (leading-Expr pred_out))
      :ruleset always-run)
(rule ((= e (If cond inputs thn els)))
       ((leading-Expr e)
        (leading-Expr inputs)
        (leading-Expr thn)
        (leading-Expr els))
       :ruleset always-run)
(rule ((= e (Switch pred inputs branch)))
      ((leading-Expr e)
       (leading-Expr-list branch)
       (leading-Expr inputs))
       :ruleset always-run)
(rule ((leading-Expr-list (Cons hd tl)))
      ((leading-Expr hd)
       (leading-Expr-list tl))
      :ruleset always-run)
(rule ((= e (Arg t a)))
      ((leading-Expr e))
      :ruleset always-run)

;; Create a Get for every index, and rewrite it to see through Concat
(rule ((Single expr)) ((union (Get (Single expr) 0) expr)) :ruleset always-run)
;; initial get
(rule ((leading-Expr tuple)
       (> (tuple-length tuple) 0))
      ((Get tuple 0))
      :ruleset always-run)
;; next get
(rule ((leading-Expr tuple)
       (= len (tuple-length tuple))
       (= ith (Get tuple i))
       (< (+ i 1) len)
       )
       ((Get tuple (+ 1 i)))
       :ruleset always-run)

(constructor List-suffix (Expr i64) Expr)
(rule ((Get x i))
      ((union (List-suffix x 0) x))
      :ruleset always-run)
(rule ((= (List-suffix x n) (Concat (Single hd) tl)))
      ((union (List-suffix x (+ n 1)) tl))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Concat (Single e) rest)))
      ((union lhs e))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Single e)))
      ((union lhs e))
      :ruleset always-run)

;; A temporary context.
;; Be sure to delete at the end of all actions or else!!!
;; This is safer than using a persistant context, since we may miss an important part of the query.
(constructor TmpCtx () Assumption)

(rule ((TmpCtx))
  ((panic "TmpCtx should not exist outside rule body"))
  :ruleset always-run)


(ruleset subsume-after-helpers)
;; After running the `saturating` ruleset, these if statements can be subsumed
(relation ToSubsumeIf (Expr Expr Expr Expr))
;; Workaround of https://github.com/egraphs-good/egglog/issues/462
;; Make sure the if we are subsuming is present
(rule ((ToSubsumeIf a b c d)
       (If a b c d))
      ((subsume (If a b c d)))
      :ruleset subsume-after-helpers)

(ruleset add-to-debug-expr)

(ruleset terms)
;; helpers keeps track of the new best extracted terms
(ruleset terms-helpers)
;; helpers-helpers runs `Smaller` rules, resolving the merge function for helpers
(ruleset terms-helpers-helpers)

(sort TermAndCost)
(constructor Smaller (TermAndCost TermAndCost) TermAndCost)

(function ExtractedExpr (Expr) TermAndCost
  :merge (Smaller old new))
;; potential extractions- use so that when the costs are equal, we don't change the term
;; this preserves egglog's timestamp of when the last time ExtractedExpr was changed, fixing a big performance problem
(relation PotentialExtractedExpr (Expr TermAndCost))

(constructor TCPair (Term i64) TermAndCost)

(constructor NoTerm () Term)

;; set extracted expr to default value
(rule ((PotentialExtractedExpr expr termandcost))
      ((set (ExtractedExpr expr) (TCPair (NoTerm) 10000000000000000)))
      :ruleset terms-helpers)

;; set extracted expr to new value as long as not equal
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (= (ExtractedExpr expr) (TCPair oldterm oldcost))
       (< cost oldcost))
      ((set (ExtractedExpr expr) (TCPair term cost)))
      :ruleset terms-helpers)

;; if the cost is negative panic, terms got too big
(rule ((PotentialExtractedExpr expr (TCPair term cost))
       (< cost 0))
      ((panic "Negative cost"))
      :ruleset terms-helpers)

;; Resolve Smaller
(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (< cost1 cost2)
      )
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)

(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (> cost1 cost2) 
      )
      ((union lhs (TCPair t2 cost2)))
      :ruleset terms-helpers-helpers)


(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (= cost1 cost2) 
      )
      ;; arbitrarily pick first one
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms-helpers-helpers)


; Compute smallest Expr bottom-up
(rule ((= lhs (Const c ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermConst c) 1)))
      :ruleset terms)

(rule ((= lhs (Arg ty ass)))
      ((PotentialExtractedExpr lhs (TCPair (TermArg) 1)))
      :ruleset terms)

(rule (
        (= lhs (Bop o e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermBop o t1 t2) (+ 1 (+ c1 c2)))))
      :ruleset terms)

(rule (
        (= lhs (Top o e1 e2 e3))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (= (TCPair t3 c3) (ExtractedExpr e3))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermTop o t1 t2 t3) (+ (+ 1 c1) (+ c2 c3)))))
      :ruleset terms)

(rule (
        (= lhs (Uop o e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ((PotentialExtractedExpr lhs (TCPair (TermUop o t1) (+ 1 c1))))
      :ruleset terms)

(rule (
        (= lhs (Get tup i))
        (= (TCPair t1 c1) (ExtractedExpr tup))
      )
      ; cost of the get is the same as the  cost of the whole tuple
      ((PotentialExtractedExpr lhs (TCPair (TermGet t1 i) c1)))
      :ruleset terms)

; todo Alloc

; todo Call

(rule (
        (= lhs (Single e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ; cost of single is same as cost of the element
      ((PotentialExtractedExpr lhs (TCPair (TermSingle t1) c1)))
      :ruleset terms)

(rule (
        (= lhs (Concat e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ; cost of concat is sum of the costs
      ((PotentialExtractedExpr lhs (TCPair (TermConcat t1 t2) (+ c1 c2))))
      :ruleset terms)


; todo Control flow - not sure if needed
; (rule (
;         (= lhs (If pred inputs thn els))
;         (= (TCPair t1 c1) (ExtractedExpr pred))
;         (= (TCPair t2 c2) (ExtractedExpr inputs))
;         (= (TCPair t3 c3) (ExtractedExpr thn))
;         (= (TCPair t4 c4) (ExtractedExpr els))
;       )
;       ; cost of if is 10 + cost of pred + cost of input + max of branch costs
;       ((PotentialExtractedExpr lhs (TCPair (TermIf t1 t2 t3 t4) (+ 10 (+ (+ c1 c2) (max c3 c4))))))
;       :ruleset terms)

(sort Node)
;; store a particular if node for later
;; stored as the if eclass, pred, inputs, then, else
(constructor IfNode (Expr Expr Expr Expr Expr) Node)

(relation ExprIsValid (Expr))
(relation ListExprIsValid (ListExpr))
(rule ((ExprIsValid (Function _name _tyin _tyout _out))) ((ExprIsValid _out)) :ruleset always-run)
(rule ((ExprIsValid (Top _op _x _y _z))) ((ExprIsValid _x)
(ExprIsValid _y)
(ExprIsValid _z)) :ruleset always-run)
(rule ((ExprIsValid (Bop _op _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Uop _op _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Get _tup _i))) ((ExprIsValid _tup)) :ruleset always-run)
(rule ((ExprIsValid (Concat _x _y))) ((ExprIsValid _x)
(ExprIsValid _y)) :ruleset always-run)
(rule ((ExprIsValid (Single _x))) ((ExprIsValid _x)) :ruleset always-run)
(rule ((ExprIsValid (Switch _pred _inputs _branches))) ((ExprIsValid _pred)
(ExprIsValid _inputs)
(ListExprIsValid _branches)) :ruleset always-run)
(rule ((ExprIsValid (If _pred _input _then _else))) ((ExprIsValid _pred)
(ExprIsValid _input)
(ExprIsValid _then)
(ExprIsValid _else)) :ruleset always-run)
(rule ((ExprIsValid (DoWhile _in _pred-and-output))) ((ExprIsValid _in)
(ExprIsValid _pred-and-output)) :ruleset always-run)
(rule ((ExprIsValid (Call _func _arg))) ((ExprIsValid _arg)) :ruleset always-run)
(rule ((ListExprIsValid (Cons _hd _tl))) ((ExprIsValid _hd)
(ListExprIsValid _tl)) :ruleset always-run)
(rule ((ExprIsValid (Alloc _id _e _state _ty))) ((ExprIsValid _e)
(ExprIsValid _state)) :ruleset always-run)
(relation ExprIsResolved (Expr))
(relation ListExprIsResolved (ListExpr))
(rule ((= lhs (Function _name _tyin _tyout _out)) (ExprIsResolved _out)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Const _n _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Top _op _x _y _z)) (ExprIsResolved _x)
(ExprIsResolved _y)
(ExprIsResolved _z)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Bop _op _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Uop _op _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Get _tup _i)) (ExprIsResolved _tup)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Concat _x _y)) (ExprIsResolved _x)
(ExprIsResolved _y)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Single _x)) (ExprIsResolved _x)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Switch _pred _inputs _branches)) (ExprIsResolved _pred)
(ExprIsResolved _inputs)
(ListExprIsResolved _branches)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (If _pred _input _then _else)) (ExprIsResolved _pred)
(ExprIsResolved _input)
(ExprIsResolved _then)
(ExprIsResolved _else)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (DoWhile _in _pred-and-output)) (ExprIsResolved _in)
(ExprIsResolved _pred-and-output)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Arg _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Call _func _arg)) (ExprIsResolved _arg)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Empty _ty _ctx)) ) ((ExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Cons _hd _tl)) (ExprIsResolved _hd)
(ListExprIsResolved _tl)) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Nil)) ) ((ListExprIsResolved lhs)) :ruleset is-resolved)
(rule ((= lhs (Alloc _id _e _state _ty)) (ExprIsResolved _e)
(ExprIsResolved _state)) ((ExprIsResolved lhs)) :ruleset is-resolved)
(relation BodyContainsExpr (Expr Expr))
(relation BodyContainsListExpr (Expr ListExpr))
(rule ((Function _name _tyin _tyout _out)) ((BodyContainsExpr (Function _name _tyin _tyout _out) _out)) :ruleset always-run)
(rule ((If _pred _input _then _else)) ((BodyContainsExpr (If _pred _input _then _else) _then) (BodyContainsExpr (If _pred _input _then _else) _else)) :ruleset always-run)
(rule ((DoWhile _in _pred-and-output)) ((BodyContainsExpr (DoWhile _in _pred-and-output) _pred-and-output)) :ruleset always-run)
(rule ((BodyContainsExpr body (Top _op _x _y _z))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y) (BodyContainsExpr body _z)) :ruleset always-run)
(rule ((BodyContainsExpr body (Bop _op _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Uop _op _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Get _tup _i))) ((BodyContainsExpr body _tup)) :ruleset always-run)
(rule ((BodyContainsExpr body (Concat _x _y))) ((BodyContainsExpr body _x) (BodyContainsExpr body _y)) :ruleset always-run)
(rule ((BodyContainsExpr body (Single _x))) ((BodyContainsExpr body _x)) :ruleset always-run)
(rule ((BodyContainsExpr body (Switch _pred _inputs _branches))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _inputs)) :ruleset always-run)
(rule ((BodyContainsExpr body (If _pred _input _then _else))) ((BodyContainsExpr body _pred) (BodyContainsExpr body _input)) :ruleset always-run)
(rule ((BodyContainsExpr body (DoWhile _in _pred-and-output))) ((BodyContainsExpr body _in)) :ruleset always-run)
(rule ((BodyContainsExpr body (Call _func _arg))) ((BodyContainsExpr body _arg)) :ruleset always-run)
(rule ((BodyContainsListExpr body (Cons _hd _tl))) ((BodyContainsExpr body _hd)) :ruleset always-run)
(rule ((BodyContainsExpr body (Alloc _id _e _state _ty))) ((BodyContainsExpr body _e) (BodyContainsExpr body _state)) :ruleset always-run)
(relation ExprIsPure (Expr))
(relation ListExprIsPure (ListExpr))
(relation BinaryOpIsPure (BinaryOp))
(relation UnaryOpIsPure (UnaryOp))
(relation TernaryOpIsPure (TernaryOp))
(TernaryOpIsPure (Select))
(BinaryOpIsPure (Add))
(BinaryOpIsPure (Sub))
(BinaryOpIsPure (Mul))
(BinaryOpIsPure (Div))
(BinaryOpIsPure (Eq))
(BinaryOpIsPure (LessThan))
(BinaryOpIsPure (GreaterThan))
(BinaryOpIsPure (LessEq))
(BinaryOpIsPure (GreaterEq))
(BinaryOpIsPure (Smax))
(BinaryOpIsPure (Smin))
(BinaryOpIsPure (Shl))
(BinaryOpIsPure (Shr))
(BinaryOpIsPure (FAdd))
(BinaryOpIsPure (FSub))
(BinaryOpIsPure (FMul))
(BinaryOpIsPure (FDiv))
(BinaryOpIsPure (FEq))
(BinaryOpIsPure (FLessThan))
(BinaryOpIsPure (FGreaterThan))
(BinaryOpIsPure (FLessEq))
(BinaryOpIsPure (FGreaterEq))
(BinaryOpIsPure (Fmax))
(BinaryOpIsPure (Fmin))
(BinaryOpIsPure (And))
(BinaryOpIsPure (Or))
(BinaryOpIsPure (PtrAdd))
(BinaryOpIsPure (Bitand))
(UnaryOpIsPure (Not))
(UnaryOpIsPure (Abs))
(UnaryOpIsPure (Neg))

(rule ((Function _name _tyin _tyout _out) (ExprIsPure _out))
        ((ExprIsPure (Function _name _tyin _tyout _out)))
        :ruleset always-run)

(rule ((Const _n _ty _ctx))
        ((ExprIsPure (Const _n _ty _ctx)))
        :ruleset always-run)

(rule ((Top _op _x _y _z) (TernaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y) (ExprIsPure _z))
        ((ExprIsPure (Top _op _x _y _z)))
        :ruleset always-run)

(rule ((Bop _op _x _y) (BinaryOpIsPure _op) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Bop _op _x _y)))
        :ruleset always-run)

(rule ((Uop _op _x) (UnaryOpIsPure _op) (ExprIsPure _x))
        ((ExprIsPure (Uop _op _x)))
        :ruleset always-run)

(rule ((Get _tup _i) (ExprIsPure _tup))
        ((ExprIsPure (Get _tup _i)))
        :ruleset always-run)

(rule (
        (= lhs (Get (Arg (TupleT tylist) _ctx) i))
        (!= (TypeList-ith tylist i) (StateT))
      )
      ((ExprIsPure lhs))
      :ruleset always-run)

(rule ((Concat _x _y) (ExprIsPure _x) (ExprIsPure _y))
        ((ExprIsPure (Concat _x _y)))
        :ruleset always-run)

(rule ((Single _x) (ExprIsPure _x))
        ((ExprIsPure (Single _x)))
        :ruleset always-run)

(rule ((Switch _pred _inputs _branches) (ExprIsPure _pred) (ExprIsPure _inputs) (ListExprIsPure _branches))
        ((ExprIsPure (Switch _pred _inputs _branches)))
        :ruleset always-run)

(rule ((If _pred _input _then _else) (ExprIsPure _pred) (ExprIsPure _input) (ExprIsPure _then) (ExprIsPure _else))
        ((ExprIsPure (If _pred _input _then _else)))
        :ruleset always-run)

(rule ((DoWhile _in _pred-and-output) (ExprIsPure _in) (ExprIsPure _pred-and-output))
        ((ExprIsPure (DoWhile _in _pred-and-output)))
        :ruleset always-run)

; state edge is not pure!
; (rule ((Arg _ty _ctx))
;         ((ExprIsPure (Arg _ty _ctx)))
;         :ruleset always-run)

(rule ((Call _f _arg) (ExprIsPure _arg) (ExprIsPure (Function _f inty outty out)))
        ((ExprIsPure (Call _f _arg)))
        :ruleset always-run)

(rule ((Empty _ty _ctx))
        ((ExprIsPure (Empty _ty _ctx)))
        :ruleset always-run)

(rule ((Cons _hd _tl) (ExprIsPure _hd) (ListExprIsPure _tl))
        ((ListExprIsPure (Cons _hd _tl)))
        :ruleset always-run)

(rule ((Nil))
        ((ListExprIsPure (Nil)))
        :ruleset always-run)
; This file provides AddContext, a helpers that copies a sub-egraph into
; a new one with a new context.
; Users of AddContext can specify how deeply to do this copy.


(ruleset context)

(constructor AddContext (Assumption Expr) Expr :unextractable)
(constructor AddContextList (Assumption ListExpr) ListExpr :unextractable)

;; ################################ saturation

;; Adding context a second time does nothing, so union
(rule
  ((= lhs (AddContext ctx inner))
   (= inner (AddContext ctx expr)))
  ((union lhs inner))
  :ruleset context)


;; ############################## Base cases- leaf nodes

;; replace existing contexts that are around leaf nodes
;; AddContext assumes the new context is more specific than the old one
(rule ((= lhs (AddContext ctx (Arg ty oldctx))))
      ((union lhs (Arg ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Const c ty oldctx))))
      ((union lhs (Const c ty ctx)))
      :ruleset context)
(rule ((= lhs (AddContext ctx (Empty ty oldctx))))
      ((union lhs (Empty ty ctx)))
      :ruleset context)




;; ######################################### Operators
(rewrite (AddContext ctx (Top op c1 c2 c3))
         (Top op
           (AddContext ctx c1)
           (AddContext ctx c2)
           (AddContext ctx c3))
               :ruleset context)
(rewrite (AddContext ctx (Bop op c1 c2))
         (Bop op
           (AddContext ctx c1)
           (AddContext ctx c2))
               :ruleset context)
(rewrite (AddContext ctx (Uop op c1))
         (Uop op (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Get c1 index))
         (Get (AddContext ctx c1) index)
               :ruleset context)
(rewrite (AddContext ctx (Alloc id c1 state ty))
         (Alloc id (AddContext ctx c1) (AddContext ctx state) ty)
         :ruleset context)
(rewrite (AddContext ctx (Call name c1))
         (Call name (AddContext ctx c1))
         :ruleset context)

(rewrite (AddContext ctx (Single c1))
         (Single (AddContext ctx c1))
         :ruleset context)
(rewrite (AddContext ctx (Concat c1 c2))
         (Concat
           (AddContext ctx c1)
           (AddContext ctx c2))
         :ruleset context)

;; ################################### List operators

(rewrite (AddContextList ctx (Nil))
         (Nil)
         :ruleset context)

(rewrite (AddContextList ctx (Cons c1 rest))
         (Cons (AddContext ctx c1)
               (AddContextList ctx rest))
               :ruleset context)


;; ########################################## Control flow
(rewrite (AddContext ctx (Switch pred inputs branches))
         (Switch (AddContext ctx pred)
                 (AddContext ctx inputs)
                 branches)
         :ruleset context)

;; For stop at region, still add context to inputs
(rule ((= lhs (AddContext ctx (If pred inputs c1 c2))))
      ((union lhs
         (If (AddContext ctx pred)
             (AddContext ctx inputs)
             c1
             c2)))
       :ruleset context)


;; For stop at loop, still add context to inputs
(rule ((= lhs (AddContext ctx (DoWhile inputs outputs))))
      ((union lhs
        (DoWhile
          (AddContext ctx inputs)
          outputs)))
       :ruleset context)


(ruleset term-subst)


; Instantiate the term as an Expr in the provided context
; where references to (Arg) in the term are replaced by Expr
(constructor TermSubst (Assumption Expr Term) Expr :unextractable)

; type rule to get the arg type of a substitution
(rule (
        (= lhs (TermSubst ctx e1 term))
        (HasArgType e1 ty)       
      )
      ((HasArgType lhs ty))
      :ruleset term-subst)


; leaf node
; replace the context
(rule ((= lhs (TermSubst ctx e (TermArg))))
      ((union lhs (AddContext ctx e)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConst c)))
       (HasArgType e newty))
      ((union lhs (Const c newty ctx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermEmpty)))
       (HasArgType e newty))
      ((union lhs (Empty newty ctx)))
      :ruleset term-subst)

; Operators
(rule ((= lhs (TermSubst ctx e (TermTop op t1 t2 t3))))
      ((union lhs (Top op (TermSubst ctx e t1)
                          (TermSubst ctx e t2)
                          (TermSubst ctx e t3))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermBop op t1 t2))))
      ((union lhs (Bop op (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermUop op t1))))
      ((union lhs (Uop op (TermSubst ctx e t1))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermGet t idx))))
      ((union lhs (Get (TermSubst ctx e t) idx)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermAlloc id t1 t2 ty))))
      ((union lhs (Alloc id (TermSubst ctx e t1)
                            (TermSubst ctx e t2)
                            ty)))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermCall name t))))
      ((union lhs (Call name (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermSingle t))))
      ((union lhs (Single (TermSubst ctx e t))))
      :ruleset term-subst)

(rule ((= lhs (TermSubst ctx e (TermConcat t1 t2))))
      ((union lhs (Concat (TermSubst ctx e t1)
                          (TermSubst ctx e t2))))
      :ruleset term-subst)

; Control Flow
; TODO
;; Substitution rules allow for substituting some new expression for the argument
;; in some new context.
;; It performs the substitution, copying over the equalities from the original eclass.
;; It only places context on the leaf nodes.

(ruleset subst)
(ruleset apply-subst-unions)

;; (Subst assumption to in) substitutes `to` for `(Arg ty)` in `in`.
;; It also replaces the leaf context in `to` with `assumption` using `AddContext`.
;; `assumption` *justifies* this substitution, as the context that the result is used in.
;; In other words, it must refine the equivalence relation of `in` with `to` as the argument.
(constructor Subst (Assumption Expr Expr) Expr :unextractable)

;; Used to delay unions for the subst ruleset.
;; This is necessary because substitution may not terminate if it can
;; observe its own results- it may create infinitly large terms.
;; Instead, we phase substitution by delaying resulting unions in this table.
;; After applying this table, substitutions and this table are cleared.
(constructor DelayedSubstUnion (Expr Expr) Expr :unextractable)

;; add a type rule to get the arg type of a substitution
;; this enables nested substitutions
(rule ((= lhs (Subst assum to in))
       (HasArgType to ty))
      ((HasArgType lhs ty))
      :ruleset subst)

;; Substitution typechecks only when the type of the
;; argument matches the type of the substitution.
(rule ((Subst assum to in)
       (HasArgType in ty)
       (HasType to ty2)
       (!= ty ty2)
       ;; tmptype disables typechecking
       (!= ty (TmpType))
       (!= ty2 (TmpType)))
      (
       (panic "Substitution type mismatch! Argument type must match type of substituted term"))
       :ruleset subst)


;; leaf node with context
;; replace this context- subst assumes the context is more specific
(rule ((= lhs (Subst assum to e))
       (= e (Arg _ty _oldctx))
       )
      ;; add the assumption `to`
      ((DelayedSubstUnion lhs (AddContext assum to))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Const c _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Const c newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)
(rule ((= lhs (Subst assum to e))
       (= e (Empty _ty _oldctx))
       (HasArgType to newty))
      ((DelayedSubstUnion lhs (Empty newty assum))
      (subsume (Subst assum to e)))
      :ruleset subst)

;; Operators
(rule ((= e (Top op c1 c2 c3))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Top op (Subst assum to c1)
                 (Subst assum to c2)
                 (Subst assum to c3)))
       (subsume (Subst assum to e)))
         :ruleset subst)

(rule ((= e (Bop op c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Bop op (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Uop op c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Uop op (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)    

(rule ((= e (Get c1 index))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Get (Subst assum to c1) index))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Alloc id c1 c2 ty))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Alloc id (Subst assum to c1)
                   (Subst assum to c2)
                   ty))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Call name c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Call name (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)


;; Tuple operators
(rule ((= e (Single c1))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Single (Subst assum to c1)))
       (subsume (Subst assum to e)))
         :ruleset subst)
(rule ((= e (Concat c1 c2))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (Concat (Subst assum to c1)
                 (Subst assum to c2)))
       (subsume (Subst assum to e)))
         :ruleset subst)

;; Control flow
(rule ((= lhs (Subst assum to inner))
       (= inner (Switch pred inputs c1))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (Switch (Subst assum to pred)
                 (Subst assum to inputs)
                 c1))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= lhs (Subst assum to inner))
       (= inner (If pred inputs c1 c2))
       (ExprIsResolved inner))
      ((DelayedSubstUnion lhs
         (If (Subst assum to pred)
             (Subst assum to inputs)
             c1
             c2))
       (subsume (Subst assum to inner)))
         :ruleset subst)
(rule ((= e (DoWhile in out))
       (= lhs (Subst assum to e))
       (ExprIsResolved e)
       (ExprIsResolved to))
      ((DelayedSubstUnion lhs
         (DoWhile (Subst assum to in)
                  out))
       (subsume (Subst assum to e)))
      :ruleset subst)

;; substitute into function (convenience for testing)
(rewrite (Subst assum to (Function name inty outty body))
         (Function name inty outty (Subst assum to body))
         :when ((ExprIsResolved body))
         :ruleset subst)



;; ########################### Apply subst unions

(rule ((DelayedSubstUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-subst-unions)

; We only have context for Exprs, not ListExprs.
(relation ContextOf (Expr Assumption))

(rule ((Arg ty ctx))
      ((ContextOf (Arg ty ctx) ctx))
      :ruleset always-run)
(rule ((Const c ty ctx))
      ((ContextOf (Const c ty ctx) ctx))
      :ruleset always-run)
(rule ((Empty ty ctx))
      ((ContextOf (Empty ty ctx) ctx))
        :ruleset always-run)

; Error checking - each expr should only have a single context
(rule ((ContextOf x ctx1)
       (ContextOf x ctx2)
       (!= ctx1 ctx2))
     (
         (panic "Equivalent expressions have nonequivalent context, breaking the single context invariant.")
     )
     :ruleset error-checking)


(rule ((Top op x y z) (ContextOf x ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf y ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Top op x y z) (ContextOf z ctx))
    ((ContextOf (Top op x y z) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf x ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Bop op x y) (ContextOf y ctx))
    ((ContextOf (Bop op x y) ctx)) :ruleset always-run)

(rule ((Uop op x) (ContextOf x ctx))
    ((ContextOf (Uop op x) ctx)) :ruleset always-run)

(rule ((Get tup i) (ContextOf tup ctx))
    ((ContextOf (Get tup i) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf x ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Concat x y) (ContextOf y ctx))
    ((ContextOf (Concat x y) ctx)) :ruleset always-run)

(rule ((Single x) (ContextOf x ctx))
    ((ContextOf (Single x) ctx)) :ruleset always-run)

(rule ((Switch pred inputs branches) (ContextOf pred ctx))
    ((ContextOf (Switch pred inputs branches) ctx)) :ruleset always-run)

(rule ((If pred inputs then else) (ContextOf pred ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((If pred inputs then else) (ContextOf inputs ctx))
    ((ContextOf (If pred inputs then else) ctx)) :ruleset always-run) 

(rule ((DoWhile in pred-and-output) (ContextOf in ctx))
    ((ContextOf (DoWhile in pred-and-output) ctx)) :ruleset always-run)

(rule ((Call func arg) (ContextOf arg ctx))
    ((ContextOf (Call func arg) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf e ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(rule ((Alloc amt e state ty) (ContextOf state ctx))
    ((ContextOf (Alloc amt e state ty) ctx)) :ruleset always-run)

(ruleset canon)

; Commutativity
(rewrite (Bop (Add) x y) (Bop (Add) y x) :ruleset canon)
(rewrite (Bop (Mul) x y) (Bop (Mul) y x) :ruleset canon)
(rewrite (Bop (Eq) x y) (Bop (Eq) y x) :ruleset canon)
(rewrite (Bop (And) x y) (Bop (And) y x) :ruleset canon)
(rewrite (Bop (Or) x y) (Bop (Or) y x) :ruleset canon)

; Canonicalize to <
; x > y ==> y < x
(rewrite (Bop (GreaterThan) x y) (Bop (LessThan) y x) :ruleset canon)

; x >= y ==> y < x + 1
; x >= y ==> y - 1 < x
(rule (
        (= lhs (Bop (GreaterEq) x y))
        (HasArgType x ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) y (Bop (Add) x (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) y (Const (Int 1) ty ctx)) x))
      )
      :ruleset canon)

; x <= y ==> x < y + 1
; x <= y ==> x - 1 < y
(rule (
        (= lhs (Bop (LessEq) x y))
        (HasArgType y ty)
        (ContextOf lhs ctx)
      )
      (
        (union lhs (Bop (LessThan) x (Bop (Add) y (Const (Int 1) ty ctx))))
        (union lhs (Bop (LessThan) (Bop (Sub) x (Const (Int 1) ty ctx)) y))
      )
      :ruleset canon)


; Make Concats right-deep
(rewrite (Concat (Concat a b) c)
         (Concat a (Concat b c))
         :ruleset always-run)
; Simplify Concat's with empty
(rewrite (Concat (Empty ty ctx) x)
         x
         :ruleset always-run)
(rewrite (Concat x (Empty ty ctx))
         x
         :ruleset always-run)

; Make a tuple that is a sub-range of another tuple
;                   tuple start len
(constructor SubTuple (Expr  i64   i64) Expr :unextractable)

(rewrite (SubTuple expr x 0)
         (Empty ty ctx)
         :when ((HasArgType expr ty) (ContextOf expr ctx))
         :ruleset always-run)

(rewrite (SubTuple expr x 1)
         (Single (Get expr x))
         :ruleset always-run)

(rewrite (SubTuple expr a b)
         (Concat (Single (Get expr a)) (SubTuple expr (+ a 1) (- b 1)))
         :when ((> b 1))
         :ruleset always-run)

; Some of our rules (like ivt.egg) match on `Concat`.
; These may be missing if a tuple is used directly (i.e. (DoWhile inputs (If pred thn else))).
; So add these concats for every region in the database
(rule ((= lhs (DoWhile inputs body))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (If pred inputs thn els))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Switch pred inputs bodies))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)
(rule ((= lhs (Arg ty ctx))
       (= size (tuple-length lhs)))
      ((union lhs (SubTuple lhs 0 size)))
      :ruleset always-run)

; Also figure out what existing expressions are subtuples of other things
; this helps remove concat layers
(rule ((Get expr i))
      ((union (Single (Get expr i))
              (SubTuple expr i 1)))
      :ruleset always-run)

(rewrite (Concat (SubTuple expr a b)
                 (SubTuple expr (+ a b) c))
         (SubTuple expr a (+ b c))
         :ruleset always-run)
;; a subtuple which is the entire tuple is the tuple itself
;; this removes unecessary layers of concat
(rewrite (SubTuple expr 0 len)
         expr
         :when ((= len (tuple-length expr)))
         :ruleset always-run)

; Helper functions to remove one element from a tuple or type list
;                           tuple    idx
(constructor TupleRemoveAt    (Expr     i64) Expr     :unextractable)
(rewrite (TupleRemoveAt tuple idx)
         (Concat (SubTuple tuple 0 idx)
                 (SubTuple tuple (+ idx 1) (- len (+ idx 1))))
         :when ((= len (tuple-length tuple)))
         :ruleset always-run)
(rule ((TupleRemoveAt tuple idx)
       (= len (tuple-length tuple))
       (>= idx len))
      ((panic "Index out of bounds for TupleRemoveAt")) :ruleset always-run)

(constructor TypeListRemoveAt (TypeList i64) TypeList :unextractable)
(rule ((TypeListRemoveAt (TNil) _idx))
      ((panic "Index out of bounds for TypeListRemoveAt.")) :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) 0)
         xs
         :ruleset type-helpers)
(rewrite (TypeListRemoveAt (TCons x xs) idx)
         (TCons x (TypeListRemoveAt xs (- idx 1)))
         :when ((> idx 0))
         :ruleset type-helpers)

;; Compute the tree size of program, not dag size
(function Expr-size (Expr) i64 :merge (min old new) )
(function ListExpr-size (ListExpr) i64 :merge (min old new))

(rule ((= expr (Function name tyin tyout out)) 
       (= sum (Expr-size out))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Const n ty assum))) 
      ((set (Expr-size expr) 1))  :ruleset always-run)

(rule ((= expr (Top op x y z))
       (= sum (+ (Expr-size z) (+ (Expr-size y) (Expr-size x)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Bop op x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Uop op x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Get tup i)) 
       (= sum (Expr-size tup))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Concat x y)) 
       (= sum (+ (Expr-size y) (Expr-size x)))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Single x)) 
       (= sum (Expr-size x))) 
      ((set (Expr-size expr) sum)) :ruleset always-run)

(rule ((= expr (Switch pred inputs branches)) 
       (= sum  (+ (Expr-size inputs) (+ (ListExpr-size branches) (Expr-size pred)))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (If pred inputs then else)) 
       (= sum (+ (Expr-size inputs) (+ (Expr-size else) (+ (Expr-size then) (Expr-size pred))))))
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (DoWhile in pred-and-output)) 
       (= sum (+ (Expr-size pred-and-output) (Expr-size in)))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((= expr (Arg ty assum))) 
      ((set (Expr-size expr) 1)) :ruleset always-run)

(rule ((= expr (Call func arg)) 
       (= sum (Expr-size arg))) 
      ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

(rule ((Empty ty assum)) ((set (Expr-size (Empty ty assum)) 0))  :ruleset always-run)

(rule ((= expr (Cons hd tl)) 
       (= sum (+ (ListExpr-size tl) (Expr-size hd)))) 
      ((set (ListExpr-size expr) sum)) :ruleset always-run)

(rule ((Nil)) 
      ((set (ListExpr-size (Nil)) 0))  :ruleset always-run)

(rule ((= expr (Alloc id e state ty)) ;; do state edge's expr should be counted?
        (= sum (Expr-size e))) 
        ((set (Expr-size expr) (+ sum 1))) :ruleset always-run)

;; Like Subst but for dropping inputs to a region
;; See subst.egg for more implementation documentation

(ruleset drop)
(ruleset apply-drop-unions)
(ruleset cleanup-drop)

;; (DropAt ctx idx in) removes all references to `(Get (Arg ...) idx)` in `in`.
;; It also replaces the leaf contexts with `ctx` and fixes up argument types,
;; as well as updating `(Get (Arg ...) j)` to `(Get (Arg ...) (- j 1))` for j > idx.
(constructor DropAt (Assumption i64 Expr) Expr :unextractable)
(constructor DelayedDropUnion (Expr Expr) Expr :unextractable)

;; Helper that precomputes the arg type that we need
(constructor DropAtInternal (Type Assumption i64 Expr) Expr :unextractable)
(rule ((= lhs (DropAt ctx idx in))
       (HasArgType in (TupleT oldty)))

      ((let newty (TupleT (TypeListRemoveAt oldty idx)))
       (union lhs (DropAtInternal newty ctx idx in)))
      :ruleset drop)

;; Leaves
(rule ((= lhs (DropAtInternal newty newctx idx (Const c oldty oldctx))))
      ((DelayedDropUnion lhs (Const c newty newctx)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Empty oldty oldctx))))
      ((DelayedDropUnion lhs (Empty newty newctx)))
      :ruleset drop)
; get stuck on purpose if `i = idx` or if we find a bare `Arg`
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (< i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) i)))
      :ruleset drop)
(rule ((= lhs (DropAtInternal newty newctx idx (Get (Arg oldty oldctx) i)))
       (> i idx))
      ((DelayedDropUnion lhs (Get (Arg newty newctx) (- i 1))))
      :ruleset drop)

;; Operators
(rule ((= lhs (DropAtInternal newty newctx idx (Top op c1 c2 c3)))
       (ExprIsResolved (Top op c1 c2 c3)))
      ((DelayedDropUnion lhs (Top op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            (DropAtInternal newty newctx idx c3))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Bop op c1 c2)))
       (ExprIsResolved (Bop op c1 c2)))
      ((DelayedDropUnion lhs (Bop op
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Uop op c1)))
       (ExprIsResolved (Uop op c1)))
      ((DelayedDropUnion lhs (Uop op
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; this is okay because we get stuck at `Arg`s
(rule ((= lhs (DropAtInternal newty newctx idx (Get c1 index)))
       (ExprIsResolved (Get c1 index)))
      ((DelayedDropUnion lhs (Get
            (DropAtInternal newty newctx idx c1)
            index)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Alloc id c1 c2 ty)))
       (ExprIsResolved (Alloc id c1 c2 ty)))
      ((DelayedDropUnion lhs (Alloc id
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2)
            ty)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Call name c1)))
       (ExprIsResolved (Call name c1)))
      ((DelayedDropUnion lhs (Call name
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

;; Tuple operators
(rule ((= lhs (DropAtInternal newty newctx idx (Single c1)))
       (ExprIsResolved (Single c1)))
      ((DelayedDropUnion lhs (Single
            (DropAtInternal newty newctx idx c1))))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (Concat c1 c2)))
       (ExprIsResolved (Concat c1 c2)))
      ((DelayedDropUnion lhs (Concat
            (DropAtInternal newty newctx idx c1)
            (DropAtInternal newty newctx idx c2))))
      :ruleset drop)

;; Control flow
(rule ((= lhs (DropAtInternal newty newctx idx (Switch pred inputs c1)))
       (ExprIsResolved (Switch pred inputs c1)))
      ((DelayedDropUnion lhs (Switch
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (If pred inputs c1 c2)))
       (ExprIsResolved (If pred inputs c1 c2)))
      ((DelayedDropUnion lhs (If
            (DropAtInternal newty newctx idx pred)
            (DropAtInternal newty newctx idx inputs)
            c1
            c2)))
      :ruleset drop)

(rule ((= lhs (DropAtInternal newty newctx idx (DoWhile in out)))
       (ExprIsResolved (DoWhile in out)))
      ((DelayedDropUnion lhs (DoWhile
            (DropAtInternal newty newctx idx in)
            out)))
      :ruleset drop)

(rewrite (DropAtInternal newty newctx idx (Function name inty outty body))
         (Function name inty outty (DropAtInternal newty newctx idx body))
         :when ((ExprIsResolved body))
         :ruleset drop)



;; ########################### Apply drop unions

(rule ((DelayedDropUnion lhs rhs))
      ((union lhs rhs))
      :ruleset apply-drop-unions)

;; ########################### Cleanup Dropat, DropAtInternal and DelayedDropUnion

(rule ((ExprIsResolved (DropAt newctx idx in)))
      ((subsume (DropAt newctx idx in)))
      :ruleset cleanup-drop)

(rule ((ExprIsResolved (DropAtInternal newty newctx idx in)))
      ((subsume (DropAtInternal newty newctx idx in)))
      :ruleset cleanup-drop)

(rule ((DelayedDropUnion lhs rhs))
      ((subsume (DelayedDropUnion lhs rhs)))
      :ruleset cleanup-drop)

(ruleset interval-analysis)
(ruleset interval-rewrite)

(datatype Bound
  (IntB i64)
  (BoolB bool)
  (Dead) ;; a bound on dead code, so any value can be chosen
  (bound-max Bound Bound)
  (bound-min Bound Bound))

; bound tables
(function lo-bound (Expr) Bound :merge (bound-max old new))
(function hi-bound (Expr) Bound :merge (bound-min old new))

; if lo > hi, we have proven that this code is dead (as long as all our rules are sound)
; In this case, interval analysis might start going crazy and fail to saturate
; So we immediately set the bounds to (Dead)
(rule (
         (= (IntB lo) (lo-bound expr))
         (= (IntB hi) (hi-bound expr))
         (> lo hi)
       ) 
       ((set (lo-bound expr) (Dead))
        (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)
(rule (
      (= (BoolB true) (lo-bound expr))
      (= (BoolB false) (hi-bound expr))
      ) 
      ((set (lo-bound expr) (Dead))
       (set (hi-bound expr) (Dead)))
       :ruleset interval-analysis)

; combinators
(rewrite (bound-max (IntB x) (IntB y))
         (IntB (max x y))
         :ruleset interval-analysis)
(rewrite (bound-min (IntB x) (IntB y))
         (IntB (min x y))
         :ruleset interval-analysis)
(rewrite (bound-max (BoolB x) (BoolB y))
         (BoolB (or x y))
         :ruleset interval-analysis)
(rewrite (bound-min (BoolB x) (BoolB y))
         (BoolB (and x y))
         :ruleset interval-analysis)
(rewrite (bound-max (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-max anything (Dead))
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min (Dead) anything)
         (Dead)
         :ruleset interval-analysis)
(rewrite (bound-min anything (Dead))
         (Dead)
         :ruleset interval-analysis)

; =================================
; Constants
; =================================
(rule ((= lhs (Const (Int x) ty ctx)))
      (
        (set (lo-bound lhs) (IntB x))
        (set (hi-bound lhs) (IntB x))
      )
      :ruleset interval-analysis)

(rule ((= lhs (Const (Bool x) ty ctx)))
      (
        (set (lo-bound lhs) (BoolB x))
        (set (hi-bound lhs) (BoolB x))
      )
      :ruleset interval-analysis)

; =================================
; Constant Folding
; =================================
(rule (
       (= (IntB x) (lo-bound expr))
       (= (IntB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Int x) ty ctx)))
      :ruleset interval-analysis)

(rule (
       (= (BoolB x) (lo-bound expr))
       (= (BoolB x) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool x) ty ctx)))
      :ruleset interval-analysis)

; lower bound being true means the bool must be true
(rule (
       (= (BoolB true) (lo-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool true) ty ctx)))
      :ruleset interval-analysis)

; upper bound being false means the bool must be false
(rule (
       (= (BoolB false) (hi-bound expr))
       (HasArgType expr ty)
       (ContextOf expr ctx)
      )
      ((union expr (Const (Bool false) ty ctx)))
      :ruleset interval-analysis)

; =================================
; Arithmetic
; =================================
; + a b interval is (+ la lb) (+ ha hb)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (lo-bound lhs) (IntB (+ la lb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Add) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (IntB (+ ha hb))))
      :ruleset interval-analysis)

; - a b interval is (- la hb) (- ha lb)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (lo-bound lhs) (IntB (- la hb))))
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (Sub) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      ((set (hi-bound lhs) (IntB (- ha lb))))
      :ruleset interval-analysis)

; Multiplication for two constants
; TODO: Make fancier interval analysis
(rule (
       (= lhs (Bop (Mul) a b))
       (= (IntB x) (lo-bound a))
       (= (IntB x) (hi-bound a))
       (= (IntB y) (lo-bound b))
       (= (IntB y) (hi-bound b))
      )
      (
       (set (lo-bound lhs) (IntB (* x y)))
       (set (hi-bound lhs) (IntB (* x y)))
      )
      :ruleset interval-analysis)

; negative * negative is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (< hi-x 0)
        (< hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; negative * positive is negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (< hi-x 0) ; x < 0 (x is negative)
        (> lo-y 0) ; y > 0 (y is positive)
      )
      ((set (hi-bound lhs) (IntB -1)))
      :ruleset interval-analysis)

; positive * positive is positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (> lo-x 0)
        (> lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 1)))
      :ruleset interval-analysis)

; non-positive * non-positive is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB hi-y) (hi-bound y))
        (<= hi-x 0)
        (<= hi-y 0) 
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-positive * non-negative is non-positive
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB hi-x) (hi-bound x))
        (= (IntB lo-y) (lo-bound y))
        (<= hi-x 0) ; x <= 0 (x is non-positive)
        (>= lo-y 0) ; y >= 0 (y is non-negative)
      )
      ((set (hi-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; non-negative * non-negative is non-negative
(rule (
        (= lhs (Bop (Mul) x y))
        (= (IntB lo-x) (lo-bound x))
        (= (IntB lo-y) (lo-bound y))
        (>= lo-x 0)
        (>= lo-y 0)
      )
      ((set (lo-bound lhs) (IntB 0)))
      :ruleset interval-analysis)

; < a b interval is (< ha lb) (< la hb)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB ha) (hi-bound a))
       (= (IntB lb) (lo-bound b))
      )
      (
       (set (lo-bound lhs) (BoolB (bool-< ha lb)))
      )
      :ruleset interval-analysis)
(rule (
       (= lhs (Bop (LessThan) a b))
       (= (IntB la) (lo-bound a))
       (= (IntB hb) (hi-bound b))
      )
      ((set (hi-bound lhs) (BoolB (bool-< la hb))))
      :ruleset interval-analysis)

; Abs
; abs(x) = x if x >= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB lx) (lo-bound x))
        (>= lx 0)
      )
      ((union lhs x))
      :ruleset interval-rewrite)

; abs(x) = -x if x <= 0
(rule (
        (= lhs (Uop (Abs) x))
        (= (IntB hx) (hi-bound x))
        (<= hx 0)
        (HasArgType lhs ty)
        (ContextOf lhs ctx)
      )
      ((union lhs (Bop (Sub) (Const (Int 0) ty ctx) x)))
      :ruleset interval-rewrite)

; =================================
; Conditionals
; =================================
; if the predicate is true, merge with then branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB true) (lo-bound cond))
      )
      ((union lhs (Subst if_ctx inputs thn)))
      :ruleset interval-rewrite)

; if the predicate is false, merge with else branch
(rule (
       (= lhs (If cond inputs thn els))
       (ContextOf lhs if_ctx)
       (= (BoolB false) (hi-bound cond))
      )
      ((union lhs (Subst if_ctx inputs els)))
      :ruleset interval-rewrite)

; lo-bound of If is the min of the lower bounds
; hi-bound of If is the max of the upper bounds
(rule (
        (= lhs (If cond inputs thn els))
        (= lo-thn (lo-bound thn))
        (= lo-els (lo-bound els))
      )
      ((set (lo-bound lhs) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound thn))
       (= hi-els (hi-bound els))
      )
      ((set (hi-bound lhs) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; Same rules, but for Ifs that have multiple outputs
(rule (
        (= lhs (If pred inputs thn els))
        (= lo-thn (lo-bound (Get thn i)))
        (= lo-els (lo-bound (Get els i)))
      )
      ((set (lo-bound (Get lhs i)) (bound-min lo-thn lo-els)))
      :ruleset interval-analysis)
(rule (
       (= lhs (If cond inputs thn els))
       (= hi-thn (hi-bound (Get thn i)))
       (= hi-els (hi-bound (Get els i)))
      )
      ((set (hi-bound (Get lhs i)) (bound-max hi-thn hi-els)))
      :ruleset interval-analysis)

; If the If takes a tuple
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was true, so we know expr is at most (hi-bound value) - 1
      ((set (hi-bound (Get ctx i)) (IntB (- v 1))))
      :ruleset interval-analysis)
(rule (
        ; expr < value
        (= pred (Bop (LessThan) expr value))
        (= if_e (If pred inputs then else))
        ; the left operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the right operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; expr < value was false, so we know expr is at least (lo-bound value)
      ((set (lo-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has a lower bound
        (= (IntB v) (lo-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf true pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was true, so we know expr is at least (lo-bound value) + 1
      ((set (lo-bound (Get ctx i)) (IntB (+ v 1)))) 
      :ruleset interval-analysis)
(rule (
        ; value < expr
        (= pred (Bop (LessThan) value expr))
        (= if_e (If pred inputs then else))
        ; the right operand of the < is an input to the if region
        (= expr (Get inputs i))
        ; the left operand of the < has an upper bound
        (= (IntB v) (hi-bound value))
        ; context node inside the if region
        (= ctx (Arg ty (InIf false pred inputs)))
        (HasType inputs ty)
      )
      ; value < expr was false, so we know expr is at most (hi-bound value)
      ((set (hi-bound (Get ctx i)) (IntB v))) 
      :ruleset interval-analysis)

;; Push intervals for inputs into if region
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= lo (lo-bound (Get inputs i)))

      )
      ((set (lo-bound (Get ctx i)) lo))
      :ruleset interval-analysis)
(rule (
       (= if (If pred inputs then_ else_))
       (= ctx (Arg ty (InIf b pred inputs)))
       (HasType inputs ty)
       (= hi (hi-bound (Get inputs i)))

      )
      ((set (hi-bound (Get ctx i)) hi))
      :ruleset interval-analysis)

; (if (a == b) thn els)
; in the thn branch, we know that a has the same bounds as b
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx  (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB lo) (lo-bound val))
      )
      ((set (lo-bound (Get ctx i)) (IntB lo)))
      :ruleset interval-analysis)
(rule (
       (= pred (Bop (Eq) expr val))
       (= if_e (If pred inputs thn els))
       ; the left operand of the == is an input to the if region
       (= expr (Get inputs i))
       (= ctx (Arg ty (InIf true pred inputs)))
       (HasType inputs ty)
       (= (IntB hi) (hi-bound val))
      )
      ((set (hi-bound (Get ctx i)) (IntB hi)))
      :ruleset interval-analysis)


(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       ;; note that some_ctx is not the same as (InLoop inputs outputs)
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (lo-bound (Get inputs ith)))
      )
      (
       (set (lo-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)
(rule (
       ;; argument has loop context
       (Arg ty (InLoop inputs outputs))
       ;; in the loop, the argument is passed through
       (= (Get (Arg ty some_ctx) ith) (Get outputs (+ 1 ith)))
       ;; input has some bound
       (= bound (hi-bound (Get inputs ith)))
      )
      (
       (set (hi-bound (Get (Arg ty (InLoop inputs outputs)) ith)) bound)
      )
      :ruleset interval-analysis)


(ruleset switch_rewrite)
(ruleset always-switch-rewrite)

; if a < b then a else b ~~> (min a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))
      )
      ((union (Get if_e k) (Bop (Smin) a b)))
      :ruleset switch_rewrite)

; if a < b then b else a ~~> (max a b)
(rule (
       (= pred (Bop (LessThan) a b))
       (= if_e (If pred inputs thn els))
       ; a is an input to the if region
       (= a (Get inputs i))
       ; b is an input to the if region
       (= b (Get inputs j))
       ; if a < b then b else a
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) j))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) i))
      )
      ((union (Get if_e k) (Bop (Smax) a b)))
      :ruleset switch_rewrite) 

; if pred then a else b ~~> (select pred a b)
; where a and b are inputs to the region
(rule (
       (= if_e (If pred inputs thn els))
       (= a (Get inputs i))
       (= b (Get inputs j))

       ; if pred then a else b
       (= (Get thn k) (Get (Arg ty (InIf true pred inputs)) i))
       (= (Get els k) (Get (Arg ty (InIf false pred inputs)) j))

       ; If i = j, then the arg is just passed through the if, and we
       ; don't need a select. This will get handled by the passthrough rules.
       (!= i j)
       )
       (
       (union (Get if_e k) (Top (Select) pred a b))
       )
       :ruleset switch_rewrite)

(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)
       (= (Get thn i) (Const x _ty (InIf true pred inputs)))
       (= (Get els i) (Const y _ty (InIf false pred inputs)))
      )
      ((union (Get if_e i) (Top (Select) pred (Const x ty ctx) (Const y ty ctx))))
      :ruleset switch_rewrite)

; if pred then A else Const -> select pred A Const
; where A is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       ; input to the if
       (= a (Get inputs i))
       (= (Get thn k) (Get (Arg _ty (InIf true pred inputs)) i))

       (= els_out (Get els k))
       (= (IntB y) (lo-bound els_out))
       (= (IntB y) (hi-bound els_out))
       )
       (
       (union (Get if_e k) (Top (Select) pred a (Const (Int y) ty ctx)))
       )
       :ruleset switch_rewrite
)

; if pred then Const else B -> select pred Const B
; where B is an input to the region
(rule (
       (= if_e (If pred inputs thn els))
       (ContextOf if_e ctx)
       (HasArgType if_e ty)

       (= thn_out (Get thn k))
       (= (IntB y) (lo-bound thn_out))
       (= (IntB y) (hi-bound thn_out))

       ; input to the if
       (= b (Get inputs i))
       (= (Get els k) (Get (Arg _ty (InIf false pred inputs)) i))
      )
      (
       (union (Get if_e k) (Top (Select) pred (Const (Int y) ty ctx) b))
      )
      :ruleset switch_rewrite
)

; if (a and b) X Y ~~> if a (if b X Y) Y
(rule ((= lhs (If (Bop (And) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf true  a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let inner_X (AddContext (InIf true  inner_pred sub_arg_true) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_true) Y))
       (let outer_Y (Subst      (InIf false a          outer_ins) sub_arg_false Y))

       (let inner (If inner_pred sub_arg_true inner_X inner_Y))
       (union lhs (If a          outer_ins    inner   outer_Y)))

       :ruleset switch_rewrite)

; if (a or b) X Y ~~> if a X (if b X Y)
(rule ((= lhs (If (Bop (Or) a b) ins X Y))
       (HasType ins (TupleT ins_ty))
       (= len (tuple-length ins)))

      ((let outer_ins (Concat (Single b) ins))
       (let outer_ins_ty (TupleT (TCons (BoolT) ins_ty)))

       (let inner_pred    (Get      (Arg outer_ins_ty (InIf false a outer_ins)) 0))
       (let sub_arg_true  (SubTuple (Arg outer_ins_ty (InIf true  a outer_ins)) 1 len))
       (let sub_arg_false (SubTuple (Arg outer_ins_ty (InIf false a outer_ins)) 1 len))

       (let outer_X (Subst      (InIf true  a          outer_ins) sub_arg_true X))
       (let inner_X (AddContext (InIf true  inner_pred sub_arg_false) X))
       (let inner_Y (AddContext (InIf false inner_pred sub_arg_false) Y))

       (let inner (If inner_pred sub_arg_false inner_X inner_Y))
       (union lhs (If a          outer_ins     outer_X inner  )))

       :ruleset switch_rewrite)

(rewrite (If (Const (Bool true)  ty ctx) ins thn els)
         (Subst ctx ins thn)
         :ruleset always-switch-rewrite)

(rewrite (If (Const (Bool false) ty ctx) ins thn els)
         (Subst ctx ins els)
         :ruleset always-switch-rewrite)

(ruleset select_opt)


;; inlined (Get thn i) makes the query faster ):
(rule
       (
        (= if_e (If pred inputs thn els))

        (ExprIsPure (Get thn i))
        (ExprIsPure (Get els i))
        
        (> 10 (Expr-size (Get thn i))) ; TODO: Tune these size limits
        (> 10 (Expr-size (Get els i)))
        (= (TCPair t1 c1) (ExtractedExpr (Get thn i)))
        (= (TCPair t2 c2) (ExtractedExpr (Get els i)))

        (ContextOf if_e ctx)
       )
       (
        (union (Get if_e i)
               (Top (Select) pred (TermSubst ctx inputs t1) (TermSubst ctx inputs t2)))
       )
       :ruleset select_opt
)
; Simple rewrites that don't do a ton with control flow.

(ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int 0) ty ctx) e) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 0) ty ctx)) (Const (Int 0) ty ctx) :ruleset peepholes)
(rewrite (Bop (Mul) (Const (Int 1) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Mul) e (Const (Int 1) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int 0) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Add) e (Const (Int 0) ty ctx) ) e :ruleset peepholes)

(rewrite (Bop (Mul) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (* i j)) ty ctx) :ruleset peepholes)
(rewrite (Bop (Add) (Const (Int j) ty ctx) (Const (Int i) ty ctx)) (Const (Int (+ i j)) ty ctx) :ruleset peepholes)

(rewrite (Bop (And) (Const (Bool true) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool true) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (And) (Const (Bool false) ty ctx) e) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (And) e (Const (Bool false) ty ctx)) (Const (Bool false) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool false) ty ctx) e) e :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool false) ty ctx)) e :ruleset peepholes)
(rewrite (Bop (Or) (Const (Bool true) ty ctx) e) (Const (Bool true) ty ctx) :ruleset peepholes)
(rewrite (Bop (Or) e (Const (Bool true) ty ctx)) (Const (Bool true) ty ctx) :ruleset peepholes)

(rule (
        (= expr (Bop (Sub) x x))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Const (Int 0) ty ctx)))
      :ruleset peepholes)

; (x - y) + z => x + (z - y)
(rewrite (Bop (Add) (Bop (Sub) x y) z) (Bop (Add) x (Bop (Sub) z y)) :ruleset peepholes)

; (a + b) - c => a + (b - c)
(rewrite (Bop (Sub) (Bop (Add) a b) c) (Bop (Add) a (Bop (Sub) b c)) :ruleset peepholes)

; (a * x) + a => a * (x + 1)
(rule (
        (= expr (Bop (Add) (Bop (Mul) a x) a))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Bop (Mul) a (Bop (Add) x (Const (Int 1) ty ctx)))))
      :ruleset peepholes)

(rewrite (Top (Select) pred x x) x :ruleset peepholes)

; constant fold `(x + const1) + const2` even when x is not constant
(rewrite (Bop (Add) (Bop (Add) x (Const (Int i) ty ctx)) (Const (Int j) ty ctx))
         (Bop (Add) x (Const (Int (+ i j)) ty ctx))
         :ruleset peepholes)

; ptradd(ptradd(p, x), y) => ptradd(p, x + y)
(rewrite (Bop (PtrAdd) (Bop (PtrAdd) p x) y)
         (Bop (PtrAdd) p (Bop (Add) x y))
         :ruleset peepholes)

(datatype IntOrInfinity
    (Infinity)
    (NegInfinity)
    (I i64))

(constructor MaxIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MaxIntOrInfinity (Infinity) _) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity _ (Infinity)) (Infinity) :ruleset always-run)
(rewrite (MaxIntOrInfinity (NegInfinity) x) x :ruleset always-run)
(rewrite (MaxIntOrInfinity x (NegInfinity)) x :ruleset always-run)
(rewrite (MaxIntOrInfinity (I x) (I y)) (I (max x y)) :ruleset always-run)

(constructor MinIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (MinIntOrInfinity (NegInfinity) _) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity _ (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (MinIntOrInfinity (Infinity) x) x :ruleset always-run)
(rewrite (MinIntOrInfinity x (Infinity)) x :ruleset always-run)
(rewrite (MinIntOrInfinity (I x) (I y)) (I (min x y)) :ruleset always-run)

(constructor AddIntOrInfinity (IntOrInfinity IntOrInfinity) IntOrInfinity)
(rewrite (AddIntOrInfinity (Infinity) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (Infinity) (I _)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (Infinity)) (Infinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (NegInfinity) (I _)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I _) (NegInfinity)) (NegInfinity) :ruleset always-run)
(rewrite (AddIntOrInfinity (I x) (I y)) (I (+ x y)) :ruleset always-run)

(datatype IntInterval (MkIntInterval IntOrInfinity IntOrInfinity))

(constructor UnionIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (UnionIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MinIntOrInfinity lo1 lo2) (MaxIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor IntersectIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (IntersectIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (MaxIntOrInfinity lo1 lo2) (MinIntOrInfinity hi1 hi2))
         :ruleset always-run)

(constructor AddIntInterval (IntInterval IntInterval) IntInterval)
(rewrite (AddIntInterval (MkIntInterval lo1 hi1) (MkIntInterval lo2 hi2))
         (MkIntInterval (AddIntOrInfinity lo1 lo2)
                        (AddIntOrInfinity hi1 hi2))
         :ruleset always-run)


(datatype List<i64+IntInterval> 
  (Nil-List<i64+IntInterval>)
  (Cons-List<i64+IntInterval> i64 IntInterval List<i64+IntInterval>))

(function Length-List<i64+IntInterval> (List<i64+IntInterval>) i64 :no-merge)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((set (Length-List<i64+IntInterval> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl))
       (= l (Length-List<i64+IntInterval> tl)))
      ((set (Length-List<i64+IntInterval> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Nil-List<i64+IntInterval>)))
      ((IsEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(relation IsNonEmpty-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= x (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((IsNonEmpty-List<i64+IntInterval> x))
      :ruleset always-run)

(constructor RevConcat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (RevConcat-List<i64+IntInterval> (Nil-List<i64+IntInterval>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<i64+IntInterval> (Cons-List<i64+IntInterval> hd0 hd1 tl) l)
         (RevConcat-List<i64+IntInterval> tl (Cons-List<i64+IntInterval> hd0 hd1 l))
         :ruleset always-run)

(constructor Rev-List<i64+IntInterval> (List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Rev-List<i64+IntInterval> m)
         (RevConcat-List<i64+IntInterval> m (Nil-List<i64+IntInterval>))
         :ruleset always-run)

(constructor Concat-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval> :cost 1000)
(rewrite (Concat-List<i64+IntInterval> x y)
         (RevConcat-List<i64+IntInterval> (Rev-List<i64+IntInterval> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<i64+IntInterval> (List<i64+IntInterval>))
(relation SuffixAt-List<i64+IntInterval> (List<i64+IntInterval> i64 List<i64+IntInterval>))
(relation At-List<i64+IntInterval> (List<i64+IntInterval> i64 i64 IntInterval))
(rule ((DemandAt-List<i64+IntInterval> x))
      ((SuffixAt-List<i64+IntInterval> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<i64+IntInterval> x i (Cons-List<i64+IntInterval> hd0 hd1 tl)))
      ((SuffixAt-List<i64+IntInterval> x (+ i 1) tl)
       (At-List<i64+IntInterval> x i hd0 hd1))
      :ruleset always-run)

(constructor Union-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor UnionHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Union-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (UnionHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; both m1 and m2 empty
  (rewrite (UnionHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)
  ; take from m1 when m2 empty and vice versa
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      res)
    (UnionHelper-List<i64+IntInterval>
      (Nil-List<i64+IntInterval>)
      tl
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)
  (rewrite
    (UnionHelper-List<i64+IntInterval>
      (Cons-List<i64+IntInterval> hd0 hd1 tl)
      (Nil-List<i64+IntInterval>)
      res)
    (UnionHelper-List<i64+IntInterval>
      tl
      (Nil-List<i64+IntInterval>)
      (Cons-List<i64+IntInterval> hd0 hd1 res))
    :ruleset always-run)

  ; when both nonempty and smallest key different, take smaller key
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 l2 (Cons-List<i64+IntInterval> k1 a1 res))))
        :ruleset always-run)
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f
           (UnionHelper-List<i64+IntInterval> l1 tl2 (Cons-List<i64+IntInterval> k2 b1 res))))
        :ruleset always-run)

  ; when shared smallest key, union interval
  (rule ((= f (UnionHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (UnionHelper-List<i64+IntInterval> tl1 tl2
             (Cons-List<i64+IntInterval> k (UnionIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor Intersect-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  ; The third argument of the helper is a WIP result map.
  ; Invariant: keys of the result map are not present in the first two and are in descending order
  (constructor IntersectHelper-List<i64+IntInterval> (List<i64+IntInterval> List<i64+IntInterval> List<i64+IntInterval>) List<i64+IntInterval>)
  (rewrite (Intersect-List<i64+IntInterval> m1 m2)
           (Rev-List<i64+IntInterval> (IntersectHelper-List<i64+IntInterval> m1 m2 (Nil-List<i64+IntInterval>)))
           :ruleset always-run)

  ; m1 or m2 empty
  (rewrite (IntersectHelper-List<i64+IntInterval> (Nil-List<i64+IntInterval>) m2 res)
           res
           :ruleset always-run)
  (rewrite (IntersectHelper-List<i64+IntInterval> m1 (Nil-List<i64+IntInterval>) res)
           res
           :ruleset always-run)

  ; when both nonempty and smallest key different, drop smaller key
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k1 k2))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k1 a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k2 b1 tl2))
         (< k2 k1))
        ((union f (IntersectHelper-List<i64+IntInterval> tl1 l2 res)))
        :ruleset always-run)

(datatype MyBool (MyTrue) (MyFalse))

(constructor IntIntervalValid (IntInterval) MyBool)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyTrue)
         :when ((<= lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (I lo) (I hi)))
         (MyFalse)
         :when ((> lo hi))
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval (NegInfinity) _))
         (MyTrue)
         :ruleset always-run)
(rewrite (IntIntervalValid (MkIntInterval _ (Infinity)))
         (MyTrue)
         :ruleset always-run)

(constructor ConsIfNonEmpty (i64 IntInterval List<i64+IntInterval>)
          List<i64+IntInterval>
          :cost 100)
(rule ((ConsIfNonEmpty k v tl))
      ((IntIntervalValid v))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyTrue) (IntIntervalValid v)))
      ((union f (Cons-List<i64+IntInterval> k v tl)))
      :ruleset always-run)
(rule ((= f (ConsIfNonEmpty k v tl))
       (= (MyFalse) (IntIntervalValid v)))
      ((union f tl))
      :ruleset always-run)

  ; when shared smallest key, intersect interval
  (rule ((= f (IntersectHelper-List<i64+IntInterval> l1 l2 res))
         (= l1 (Cons-List<i64+IntInterval> k a1 tl1))
         (= l2 (Cons-List<i64+IntInterval> k b1 tl2)))
        ((union f
           (IntersectHelper-List<i64+IntInterval> tl1 tl2
             (ConsIfNonEmpty k (IntersectIntInterval a1 b1) res))))
        :ruleset always-run)

(constructor AddIntIntervalToAll (IntInterval List<i64+IntInterval>)
                              List<i64+IntInterval>)
(rewrite (AddIntIntervalToAll _ (Nil-List<i64+IntInterval>))
         (Nil-List<i64+IntInterval>)
         :ruleset always-run)
(rewrite (AddIntIntervalToAll x (Cons-List<i64+IntInterval> allocid offset tl))
         (Cons-List<i64+IntInterval> allocid (AddIntInterval x offset)
           (AddIntIntervalToAll x tl))
         :ruleset always-run)

(datatype PtrPointees
  (PointsTo List<i64+IntInterval>)
  (PointsAnywhere))

(constructor AddIntIntervalToPtrPointees (IntInterval PtrPointees) PtrPointees)
(rewrite (AddIntIntervalToPtrPointees interval (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (AddIntIntervalToPtrPointees interval (PointsTo l))
         (PointsTo (AddIntIntervalToAll interval l))
         :ruleset always-run)

(constructor Union-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Union-PtrPointees (PointsAnywhere) _)
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees _ (PointsAnywhere))
         (PointsAnywhere)
         :ruleset always-run)
(rewrite (Union-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Union-List<i64+IntInterval> x y))
         :ruleset always-run)
(constructor Intersect-PtrPointees (PtrPointees PtrPointees) PtrPointees)
(rewrite (Intersect-PtrPointees (PointsAnywhere) x)
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees x (PointsAnywhere))
         x
         :ruleset always-run)
(rewrite (Intersect-PtrPointees (PointsTo x) (PointsTo y))
         (PointsTo (Intersect-List<i64+IntInterval> x y))
         :ruleset always-run)

(relation PointsNowhere-PtrPointees (PtrPointees))
(rule ((= f (PointsTo x))
       (IsEmpty-List<i64+IntInterval> x))
      ((PointsNowhere-PtrPointees f))
      :ruleset always-run)


(datatype List<PtrPointees> 
  (Nil-List<PtrPointees>)
  (Cons-List<PtrPointees> PtrPointees List<PtrPointees>))

(function Length-List<PtrPointees> (List<PtrPointees>) i64 :no-merge)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset always-run)
(rule ((= x (Nil-List<PtrPointees>)))
      ((set (Length-List<PtrPointees> x) 0))
      :ruleset memory-helpers)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (= l (Length-List<PtrPointees> tl)))
      ((set (Length-List<PtrPointees> x) (+ l 1)))
      :ruleset memory-helpers)

(relation IsEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((IsEmpty-List<PtrPointees> x))
      :ruleset always-run)

(relation IsNonEmpty-List<PtrPointees> (List<PtrPointees>))
(rule ((= x (Cons-List<PtrPointees> hd0 tl)))
      ((IsNonEmpty-List<PtrPointees> x))
      :ruleset always-run)

(constructor RevConcat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (RevConcat-List<PtrPointees> (Nil-List<PtrPointees>) l)
         l
         :ruleset always-run)
(rewrite (RevConcat-List<PtrPointees> (Cons-List<PtrPointees> hd0 tl) l)
         (RevConcat-List<PtrPointees> tl (Cons-List<PtrPointees> hd0 l))
         :ruleset always-run)

(constructor Rev-List<PtrPointees> (List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Rev-List<PtrPointees> m)
         (RevConcat-List<PtrPointees> m (Nil-List<PtrPointees>))
         :ruleset always-run)

(constructor Concat-List<PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Concat-List<PtrPointees> x y)
         (RevConcat-List<PtrPointees> (Rev-List<PtrPointees> x) y)
         :ruleset always-run)

; SuffixAt and At must be demanded, otherwise these are O(N^2)
(relation DemandAt-List<PtrPointees> (List<PtrPointees>))
(relation SuffixAt-List<PtrPointees> (List<PtrPointees> i64 List<PtrPointees>))
(relation At-List<PtrPointees> (List<PtrPointees> i64 PtrPointees))
(rule ((DemandAt-List<PtrPointees> x))
      ((SuffixAt-List<PtrPointees> x 0 x))
      :ruleset always-run)
(rule ((SuffixAt-List<PtrPointees> x i (Cons-List<PtrPointees> hd0 tl)))
      ((SuffixAt-List<PtrPointees> x (+ i 1) tl)
       (At-List<PtrPointees> x i hd0))
      :ruleset always-run)

(relation All<PointsNowhere-PtrPointees> (List<PtrPointees>))
(rule ((= x (Nil-List<PtrPointees>)))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
(rule ((= x (Cons-List<PtrPointees> hd0 tl))
       (PointsNowhere-PtrPointees hd0)
       (All<PointsNowhere-PtrPointees> tl))
      ((All<PointsNowhere-PtrPointees> x))
      :ruleset always-run)
        


(constructor Zip<Union-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Union-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Union-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Union-PtrPointees x0 y0)
            (Zip<Union-PtrPointees> tl1 tl2))
         :when ((= (Length-List<PtrPointees> tl1) (Length-List<PtrPointees> tl2)))
         :ruleset always-run)

(constructor Zip<Intersect-PtrPointees> (List<PtrPointees> List<PtrPointees>) List<PtrPointees> :cost 1000)
(rewrite (Zip<Intersect-PtrPointees> (Nil-List<PtrPointees>) (Nil-List<PtrPointees>))
         (Nil-List<PtrPointees>)
         :ruleset always-run)
(rewrite (Zip<Intersect-PtrPointees>
           (Cons-List<PtrPointees> x0 tl1)
           (Cons-List<PtrPointees> y0 tl2))
         (Cons-List<PtrPointees>
            (Intersect-PtrPointees x0 y0)
            (Zip<Intersect-PtrPointees> tl1 tl2))
         :ruleset always-run)


(sort ExprSetPrim (Set Expr))

(datatype ExprSet (ES ExprSetPrim))

(constructor ExprSet-intersect (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-intersect (ES set1) (ES set2)) (ES (set-intersect set1 set2))
         :ruleset memory-helpers)
(constructor ExprSet-union (ExprSet ExprSet) ExprSet)
(rewrite (ExprSet-union (ES set1) (ES set2)) (ES (set-union set1 set2))
         :ruleset memory-helpers)
(relation ExprSet-contains (ExprSet Expr))
(constructor ExprSet-insert (ExprSet Expr) ExprSet)
(rewrite (ExprSet-insert (ES set1) x)
         (ES (set-insert set1 x))
         :ruleset memory-helpers)
(function ExprSet-length (ExprSet) i64 :no-merge)


; ============================
; Pointees
; ============================


; List<i64+IntInterval> is used as an association list; the i64 keys
; (corresponding to alloc ids) are always unique and sorted, the IntInterval
; values correspond to offset ranges.
;
; (TuplePointsTo [{0->[4,5], 1->[0,0]}, {0->[0,0]}])
; indicates a tuple with two components.
; - The first component might point to Alloc 0 at offsets 4 or 5,
;   or Alloc 1 at offset 0
; - The second component points to Alloc 0 at offset 0
(datatype Pointees
          (TuplePointsTo List<PtrPointees>)
          (PtrPointsTo PtrPointees))

(constructor UnwrapPtrPointsTo (Pointees) PtrPointees)
(rewrite (UnwrapPtrPointsTo (PtrPointsTo x))
         x
         :ruleset memory-helpers)
(constructor UnwrapTuplePointsTo (Pointees) List<PtrPointees>)
(rewrite (UnwrapTuplePointsTo (TuplePointsTo x))
         x
         :ruleset memory-helpers)

(relation PointsNowhere (Pointees))
(rule ((= f (PtrPointsTo x))
       (PointsNowhere-PtrPointees x))
      ((PointsNowhere f))
      :ruleset memory-helpers)
(rule ((= f (TuplePointsTo l))
       (All<PointsNowhere-PtrPointees> l))
      ((PointsNowhere f))
      :ruleset memory-helpers)

(constructor UnionPointees (Pointees Pointees) Pointees)
(rewrite (UnionPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Union-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (UnionPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Union-PtrPointees> x y))
         :when ((= (Length-List<PtrPointees> x) (Length-List<PtrPointees> y)))
         :ruleset memory-helpers)
(constructor IntersectPointees (Pointees Pointees) Pointees)
(rewrite (IntersectPointees (PtrPointsTo x) (PtrPointsTo y))
         (PtrPointsTo (Intersect-PtrPointees x y))
         :ruleset memory-helpers)
(rewrite (IntersectPointees (TuplePointsTo x) (TuplePointsTo y))
         (TuplePointsTo (Zip<Intersect-PtrPointees> x y))
         :ruleset memory-helpers)

(constructor GetPointees (Pointees i64) Pointees)
(rule ((= f (GetPointees (TuplePointsTo l) i))
       (At-List<PtrPointees> l i x))
      ((union f (PtrPointsTo x)))
      :ruleset memory-helpers)

(constructor PointeesDropFirst (Pointees) Pointees)
(rewrite (PointeesDropFirst (TuplePointsTo (Cons-List<PtrPointees> hd tl)))
         (TuplePointsTo tl)
         :ruleset memory-helpers)

; ============================
; Resolved
; ============================

; Resolved checks if an e-class contains a term containing only constructors and
; primitives; i.e. whether equality is decideable
(relation Resolved-IntOrInfinity (IntOrInfinity))
(rule ((= f (I _)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (Infinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)
(rule ((= f (NegInfinity)))
      ((Resolved-IntOrInfinity f))
      :ruleset memory-helpers)

(relation Resolved-IntInterval (IntInterval))
(rule ((= f (MkIntInterval lo hi))
       (Resolved-IntOrInfinity lo)
       (Resolved-IntOrInfinity hi))
      ((Resolved-IntInterval f))
      :ruleset memory-helpers)

(relation Resolved-List<i64+IntInterval> (List<i64+IntInterval>))
(rule ((= f (Nil-List<i64+IntInterval>)))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<i64+IntInterval> allocid offsets tl))
       (Resolved-List<i64+IntInterval> tl)
       (Resolved-IntInterval offsets))
      ((Resolved-List<i64+IntInterval> f))
      :ruleset memory-helpers)

(relation Resolved-PtrPointees (PtrPointees))
(rule ((= f (PointsAnywhere)))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)
(rule ((= f (PointsTo x))
       (Resolved-List<i64+IntInterval> x))
      ((Resolved-PtrPointees f))
      :ruleset memory-helpers)

(relation Resolved-List<PtrPointees> (List<PtrPointees>))
(rule ((= f (Nil-List<PtrPointees>)))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)
(rule ((= f (Cons-List<PtrPointees> hd tl))
       (Resolved-List<PtrPointees> tl)
       (Resolved-PtrPointees hd))
      ((Resolved-List<PtrPointees> f))
      :ruleset memory-helpers)

(relation Resolved-Pointees (Pointees))
(rule ((= f (TuplePointsTo x))
       (Resolved-List<PtrPointees> x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)
(rule ((= f (PtrPointsTo x))
       (Resolved-PtrPointees x))
      ((Resolved-Pointees f))
      :ruleset memory-helpers)


;;;;;

(constructor BaseTypeToPtrPointees (BaseType) PtrPointees :cost 100)
(rewrite (BaseTypeToPtrPointees (PointerT _))
         (PointsAnywhere)
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (IntT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (StateT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)
(rewrite (BaseTypeToPtrPointees (BoolT))
         (PointsTo (Nil-List<i64+IntInterval>))
         :ruleset memory-helpers)

(constructor TypeListToList<PtrPointees> (TypeList) List<PtrPointees> :cost 1000)
(rewrite (TypeListToList<PtrPointees> (TNil))
         (Nil-List<PtrPointees>)
         :ruleset memory-helpers)
(rewrite (TypeListToList<PtrPointees> (TCons hd tl))
         (Cons-List<PtrPointees>
            (BaseTypeToPtrPointees hd)
            (TypeListToList<PtrPointees> tl))
         :ruleset memory-helpers)

(constructor TypeToPointees (Type) Pointees :cost 1000)
(rewrite (TypeToPointees (TupleT tylist))
         (TuplePointsTo (TypeListToList<PtrPointees> tylist))
         :ruleset memory-helpers)
(rewrite (TypeToPointees (Base basety))
         (PtrPointsTo (BaseTypeToPtrPointees basety))
         :ruleset memory-helpers)

; ============================
; Update PointerishType
; ============================

(relation PointerishType (Type))
(relation PointerishTypeList (TypeList))

(rule ((= f (Base (PointerT ty))))
      ((PointerishType f))
      :ruleset always-run)

(rule ((= f (TCons (PointerT ty) tl)))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TCons hd tl))
       (PointerishTypeList tl))
      ((PointerishTypeList f))
      :ruleset always-run)

(rule ((= f (TupleT l))
       (PointerishTypeList l))
      ((PointerishType f))
      :ruleset always-run)

; ============================
; Update PointsToCells
; ============================

;                             arg pointees  result pointees
(constructor PointsToCells (Expr Pointees)     Pointees :unextractable) 

; Top-level demand
(rule ((Function name in-ty out-ty body))
      ((PointsToCells body (TypeToPointees in-ty)))
      :ruleset memory-helpers)

; Demand PointsToCells along state edge and pointer-typed values
(rule ((PointsToCells (Bop (Print) e state) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Load) e state) ap))
      ((PointsToCells e ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Top (Write) ptr val state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Alloc id sz state ty) ap))
      ((PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Bop (Free) ptr state) ap))
      ((PointsToCells ptr ap)
       (PointsToCells state ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Get x i) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Concat x y) ap))
      ((PointsToCells x ap)
       (PointsToCells y ap))
      :ruleset memory-helpers)
(rule ((PointsToCells (Single x) ap))
      ((PointsToCells x ap))
      :ruleset memory-helpers)

; Compute and propagate PointsToCells
(rewrite (PointsToCells concat-x-y aps)
         (TuplePointsTo (Concat-List<PtrPointees>
           (UnwrapTuplePointsTo (PointsToCells x aps))
           (UnwrapTuplePointsTo (PointsToCells y aps))))
         :when ((= concat-x-y (Concat x y))
                (HasType concat-x-y ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells get-x-i aps)
         (GetPointees (PointsToCells x aps) i)
         :when ((= get-x-i (Get x i))
                (HasType get-x-i ty) (PointerishType ty))
         :ruleset memory-helpers)

(rewrite (PointsToCells (Single x) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (UnwrapPtrPointsTo (PointsToCells x aps))
             (Nil-List<PtrPointees>)))
         :when ((HasType (Single x) ty) (PointerishType ty))
         :ruleset memory-helpers) 

(rewrite (PointsToCells (Arg ty_ ctx) aps)
         aps
         :when ((HasType (Arg ty_ ctx) ty) (PointerishType ty))
         :ruleset memory-helpers)

; Allow non-pointer types to resolve
(rule ((PointsToCells x aps)
       (HasType x ty))
      ((TypeToPointees ty))
      :ruleset memory-helpers)
(rule ((= f (PointsToCells x aps))
       (HasType x ty)
       (= pointees (TypeToPointees ty))
       (PointsNowhere pointees))
      ((union f pointees))
      :ruleset memory-helpers)

(rewrite (PointsToCells (Bop (PtrAdd) x e) aps)
         (PtrPointsTo
           (AddIntIntervalToPtrPointees
             (MkIntInterval (I lo) (I hi))
             (UnwrapPtrPointsTo (PointsToCells x aps))))
         :when ((= (IntB lo) (lo-bound e))
                (= (IntB hi) (hi-bound e)))
         :ruleset memory-helpers)

(rewrite (PointsToCells (If c inputs t e) aps)
         (UnionPointees
           (PointsToCells t (PointsToCells inputs aps))
           (PointsToCells e (PointsToCells inputs aps)))
         :when ((HasType (If c inputs t e) ty) (PointerishType ty))
         :ruleset memory)

(rewrite (PointsToCells (Alloc id sz state ty) aps)
         (TuplePointsTo
           (Cons-List<PtrPointees>
             (PointsTo
               (Cons-List<i64+IntInterval>
                 id
                 (MkIntInterval (I 0) (I 0))
                 (Nil-List<i64+IntInterval>)))
             (Cons-List<PtrPointees>
               (PointsTo (Nil-List<i64+IntInterval>)) ; state output points to nothing
               (Nil-List<PtrPointees>))))
         :ruleset memory-helpers)

; arg pointees * loop in * loop out * i64 -> result pointees
(constructor PointsToCellsAtIter (Pointees Expr Expr i64) Pointees)

; compute first two
(rule ((= e (DoWhile inputs pred-body))
       (PointsToCells e aps))
      ((set (PointsToCellsAtIter aps inputs pred-body 0)
            (PointsToCells inputs aps))
       (set (PointsToCellsAtIter aps inputs pred-body 1)
            (UnionPointees
              (PointsToCellsAtIter aps inputs pred-body 0)
              (PointeesDropFirst
                (PointsToCells pred-body (PointsToCellsAtIter aps inputs pred-body 0))))))
      :ruleset memory-helpers)

; avoid quadratic query
(function succ (i64) i64 :no-merge)
(rule ((PointsToCellsAtIter aps inputs pred-body i))
      ((set (succ i) (+ i 1)))
      :ruleset memory-helpers)

; Note that this rule is bounded by ruleset memory
(rule ((= pointees0 (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees1 (PointsToCellsAtIter aps inputs pred-body (succ i)))
       (Resolved-Pointees pointees0)
       (Resolved-Pointees pointees1)
       (!= pointees0 pointees1))
      ((set (PointsToCellsAtIter aps inputs pred-body (+ i 2))
            (UnionPointees
              pointees1
              (PointeesDropFirst
                (PointsToCells pred-body pointees1)))))
      :ruleset memory)

(rule ((= pointees (PointsToCellsAtIter aps inputs pred-body i))
       (= pointees (PointsToCellsAtIter aps inputs pred-body (succ i))))
      ((set (PointsToCells (DoWhile inputs pred-body) aps)
            pointees))
      :ruleset memory)

(rule ((PtrPointsTo (PointsTo l)))
      ((DemandAt-List<i64+IntInterval> l))
      :ruleset memory-helpers)
(rule ((TuplePointsTo l))
      ((DemandAt-List<PtrPointees> l))
      :ruleset memory-helpers)

; ============================
; Update DontAlias
; ============================

(relation DemandDontAlias (Expr Expr Pointees))
;                    pointer, pointer, arg pointees
(relation DontAlias (Expr Expr Pointees))


(rule ((DemandDontAlias ptr1 ptr2 arg-pointees)
       (BodyContainsExpr body ptr1)
       (BodyContainsExpr body ptr2)
       (HasType ptr1 (Base (PointerT ty)))
       (HasType ptr2 (Base (PointerT ty)))
       (= pointees1 (PointsToCells ptr1 arg-pointees))
       (= pointees2 (PointsToCells ptr2 arg-pointees)))
      ((IntersectPointees pointees1 pointees2))
      :ruleset memory-helpers)

(rule ((PointsNowhere
         (IntersectPointees
           (PointsToCells ptr1 arg-pointees)
           (PointsToCells ptr2 arg-pointees))))
      ((DontAlias ptr1 ptr2 arg-pointees))
      :ruleset memory-helpers)

; ============================
; Update PointsToExpr
; ============================

;                       program point, pointer
(constructor PointsToExpr (Expr           Expr) Expr :unextractable)

; After a load, the ptr points to the loaded value
(rule ((= f (Bop (Load) ptr state)))
      ((set (PointsToExpr (Get f 1) ptr) (Get f 0)))
      :ruleset memory-helpers)

; If we load and we already know what the pointer points to
; TODO this rule breaks the weakly linear invariant
; when a previous load may not be on the path
;(rule ((= e (Bop (Load) addr state))
;       (= v (PointsToExpr state addr)))
;      ((union (Get e 0) v)
;       (union (Get e 1) state))
;       :ruleset memory-helpers)

; Loads and prints don't affect what what pointers already point to
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Load) any-addr state)))
      ((let new-state (Get e 1))
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)
(rule ((= f (PointsToExpr state addr))
       (= e (Bop (Print) any-val state)))
      ((let new-state e)
       (union (PointsToExpr new-state addr) f))
      :ruleset memory-helpers)

; Writes don't affect what a pointer points to if it writes to another pointer
; guaranteed to not alias.
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr)))
      ((DemandDontAlias addr otheraddr (TypeToPointees argty)))
      :ruleset memory-helpers)
(rule ((= e (Top (Write) addr data state))
       (HasArgType addr argty)
       (= otherdata (PointsToExpr state otheraddr))
       (DontAlias addr otheraddr (TypeToPointees argty)))
      ((set (PointsToExpr e otheraddr) otherdata))
      :ruleset memory-helpers)

; For a write, mark the given expression as containing `data`.
(rule ((= e (Top (Write) addr data state)))
      ((union (PointsToExpr e addr) data))
      :ruleset memory-helpers)

; ============================
; Update CellHasValues (currently unused)
; ============================

; ;                       program point, cell
; (constructor CellHasValues (Expr i64) ExprSet :merge (ExprSet-intersect old new))

; ; At the time of an alloc, a cell doesn't contain any values
; (rule ((= f (Alloc id amt state ty)))
      ; ((set (CellHasValues (Get f 1) id) (ES (set-empty))))
      ; :ruleset memory-helpers)

; ; These two rules find (Write ptr val state) where 
; ; ptr points to cells given no assumptions about where (Arg) points.
; ; TODO: make sensitive to offsets
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty))
      ; ((TypeToPointees argty))
      ; :ruleset memory-helpers)
; (rule ((= e (Top (Write) ptr val state))
       ; (HasArgType ptr argty)
       ; (= (PtrPointsTo (PointsTo cells)) (PointsToCells ptr (TypeToPointees argty)))
       ; (At-List<i64+IntInterval> cells any-idx alloc-id offsets)
       ; (= vals (CellHasValues state cell)))
      ; ((set (CellHasValues e cell) (ExprSet-insert vals val)))
      ; :ruleset memory-helpers)


(ruleset mem-simple)

; ============================
; NoAlias analysis
; ============================

(relation NoAlias (Expr Expr))

; Push NoAlias into if
(rule ((= if (If pred inputs thn els))
       (= (Get inputs i) inputs-i)
       (= (Get inputs j) inputs-j)
       (NoAlias inputs-i inputs-j)
       (= arg-i (Get (Arg ty (InIf which pred inputs)) i))
       (= arg-j (Get (Arg ty (InIf which pred inputs)) j)))
      ((NoAlias arg-i arg-j))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (lo-bound i) (IntB lo))
       (> lo 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((Bop (PtrAdd) e i)
       (= (hi-bound i) (IntB hi))
       (< hi 0))
      ((NoAlias e (Bop (PtrAdd) e i)))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Add) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (lo-bound diff) (IntB lo))
       (> lo 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((= p1 (Bop (PtrAdd) p i))
       (= p2 (Bop (PtrAdd) p (Bop (Sub) i diff)))
       (= (hi-bound diff) (IntB hi))
       (< hi 0))
      ((NoAlias p1 p2))
      :ruleset mem-simple)

(rule ((NoAlias x y))
      ((NoAlias y x))
      :ruleset mem-simple)

; ============================
; Memory optimizations
; ============================

(relation DidMemOptimization (String))

; A write then a load to different addresses can be swapped
(rule ((NoAlias write-addr load-addr)
       (= write (Top (Write) write-addr write-val state))
       (= load (Bop (Load) load-addr write)))
      ((let new-load (Bop (Load) load-addr state))
       (union
          (Get load 1)
          (Top (Write) write-addr write-val (Get new-load 1)))
       (union (Get load 0) (Get new-load 0))
       (DidMemOptimization "commute write then load")
      )
      :ruleset mem-simple)

; A load then a write to different addresses can be swapped
; Actually, does this break WeaklyLinear if the stored value depends on the
; loaded value? Commenting this out for now.
; (rule ((NoAlias load-addr write-addr)
;        (= load (Bop (Load) load-addr state))
;        (= write (Top (Write) write-addr write-val (Get load 1))))
;       ((let new-write (Top (Write) write-addr write-val state))
;        (let new-load (Bop (Load) load-addr new-write))
;        (union write (Get new-load 1))
;        (union (Get load 0) (Get new-load 0))
;        (DidMemOptimization "commute load then write")
;        )
;       :ruleset mem-simple)

; Two loads to the same address can be compressed
(rule ((= first-load (Bop (Load) addr state))
       (= second-load (Bop (Load) addr first-load)))
      ((union (Get first-load 0) (Get second-load 0))
       (union (Get first-load 1) (Get second-load 1))
       (DidMemOptimization "duplicate load")
       )
      :ruleset mem-simple)

; A write and a load to the same address can be forwarded
(rule ((= write (Top (Write) addr write-val state))
       (= load (Bop (Load) addr write)))
      ((union (Get load 0) write-val)
       (union (Get load 1) write)
       (DidMemOptimization "store forward")
       )
      :ruleset mem-simple)

; Two writes of the same value to the same address can be compressed
(rule ((= first-write (Top (Write) addr write-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union first-write second-write)
       (DidMemOptimization "duplicate write"))
      :ruleset mem-simple)

; A write shadows a previous write to the same address
(rule ((= first-write (Top (Write) addr shadowed-val state))
       (= second-write (Top (Write) addr write-val first-write)))
      ((union second-write (Top (Write) addr write-val state))
       (DidMemOptimization "shadowed write"))
      :ruleset mem-simple)

; A load doesn't change the state
; TODO: why does this break weaklylinear?
; (rule ((= load (Bop (Load) addr state)))
;       ((union (Get load 1) state))
;       :ruleset mem-simple)

; (rule ((DidMemOptimization _))
;       ((panic "DidMemOptimization"))
;       :ruleset mem-simple)

;; Loop Invariant

;; bool: whether the term in the Expr is an invariant.
(function is-inv-Expr (Expr Expr) bool :merge (or old new))
(function is-inv-ListExpr (Expr ListExpr) bool :merge (or old new))

;; in default, when there is a find, set is-inv to false
(rule ((BodyContainsExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-Expr loop term) false)) :ruleset always-run)
(rule ((BodyContainsListExpr loop term)
       (= loop (DoWhile inputs pred_out)))
      ((set (is-inv-ListExpr loop term) false)) :ruleset always-run)

(relation is-inv-ListExpr-helper (Expr ListExpr i64))
(rule ((BodyContainsListExpr loop list) 
       (= loop (DoWhile inputs pred_out))) 
      ((is-inv-ListExpr-helper loop list 0)) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= true (is-inv-Expr loop expr))
       (= expr (ListExpr-ith list i)))
    ((is-inv-ListExpr-helper loop list (+ i 1))) :ruleset always-run)

(rule ((is-inv-ListExpr-helper loop list i)
       (= i (ListExpr-length list)))
    ((set (is-inv-ListExpr loop list) true)) :ruleset always-run)


(ruleset boundary-analysis)
;; An Expr is on boundary when it is invariant and its parent is not
;                       loop invariant-expr
(relation boundary-Expr (Expr Expr))

;; boundary for ListExpr's children
(rule ((= true (is-inv-Expr loop expr))
       (= false (is-inv-ListExpr loop list))
       (= expr (ListExpr-ith list i)))
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)

;; if a output branch/pred is invariant, it's also boundary-Expr
(rule ((= true (is-inv-Expr loop expr))
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out i))) 
      ((boundary-Expr loop expr)) :ruleset boundary-analysis)


(function hoisted-loop (Expr Expr) bool :merge (or old new) )
(rule ((= loop (DoWhile in pred_out)))
      ((set (hoisted-loop in pred_out) false)) :ruleset always-run)

(constructor InExtendedLoop (Expr Expr Expr) Assumption)

;; mock function
(ruleset loop-inv-motion)

(rule ((boundary-Expr loop inv)
       (> (Expr-size inv) 1)
       ;; TODO: replace Expr-size when cost model is ready
       (= loop (DoWhile in pred_out))
       ;; the outter assumption of the loop 
       (ContextOf loop loop_ctx)
       (HasType in in_type)
       (HasType inv inv_type)
       (= inv_type (Base base_inv_ty))
       (= in_type (TupleT tylist))
       (= false (hoisted-loop in pred_out))
       (= len (tuple-length in)))
      ((let new_input (Concat in (Single (Subst loop_ctx in inv))))
       (let new_input_type (TupleT (TLConcat tylist (TCons base_inv_ty (TNil)))))

       ;; create an virtual assume node, union it with actuall InLoop later
       (let assum (InExtendedLoop in pred_out new_input))
       (let new_out_branch (Get (Arg new_input_type assum) len))

       ;; this two subst only change arg to arg with new type
       (let substed_pred_out
         (Subst assum
               (SubTuple (Arg new_input_type assum) 0 len) pred_out))
       (let inv_in_new_loop
            (Subst assum (SubTuple (Arg new_input_type assum) 0 len) inv))
       (let new_pred_out (Concat substed_pred_out (Single new_out_branch)))
       
       (let new_loop (DoWhile new_input new_pred_out))
       (union assum (InLoop new_input new_pred_out))
       (union inv_in_new_loop new_out_branch)
       (let wrapper (SubTuple new_loop 0 len))
       (union loop wrapper)
       (subsume (DoWhile in pred_out)) 
       ;; don't hoist same loop again
       (set (hoisted-loop in pred_out) true)
      )
       :ruleset loop-inv-motion)


(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Const _n _ty _ctx)))
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get (Arg ty ctx) i)) 
       (= loop (DoWhile in pred_out))
       (= expr (Get pred_out (+ i 1)))) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Function _name _tyin _tyout _out))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Top _op _x _y _z))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) (= true (is-inv-Expr loop _z)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Bop _op _x _y)) (BinaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Uop _op _x)) (UnaryOpIsPure _op) 
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Get _tup _i))  
       (= true (is-inv-Expr loop _tup)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Concat _x _y))  
       (= true (is-inv-Expr loop _x)) (= true (is-inv-Expr loop _y)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Single _x))  
       (= true (is-inv-Expr loop _x)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Switch _pred _inputs _branches))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _inputs)) (= true (is-inv-ListExpr loop _branches)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (If _pred _input _then _else))  
       (= true (is-inv-Expr loop _pred)) (= true (is-inv-Expr loop _input)) 
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (DoWhile _in _pred-and-output))  
       (= true (is-inv-Expr loop _in)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Call _func _arg))  
       (= true (is-inv-Expr loop _arg)) 
       (ExprIsPure expr)) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)

(rule ((BodyContainsExpr loop expr) 
       (= loop (DoWhile in out)) 
       (= expr (Empty _ty _ctx))  
        
       ) 
      ((set (is-inv-Expr loop expr) true)) :ruleset always-run)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Top _op _x _y _z)) 
       (= expr1 _z)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Bop _op _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Uop _op _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Concat _x _y)) 
       (= expr1 _y)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Single _x)) 
       (= expr1 _x)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Switch _pred _inputs _branches)) 
       (= expr1 _inputs)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _pred)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (If _pred _input _then _else)) 
       (= expr1 _input)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (DoWhile _in _pred-and-output)) 
       (= expr1 _in)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Call _func _arg)) 
       (= expr1 _arg)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)


(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _e)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)

(rule ((= true (is-inv-Expr loop expr1)) 
       (= false (is-inv-Expr loop expr2)) 
       (= expr2 (Alloc _id _e _state _ty)) 
       (= expr1 _state)) 
       ((boundary-Expr loop expr1)) :ruleset boundary-analysis)
;; Some simple simplifications of loops
(ruleset loop-simplify)

(rewrite
 (DoWhile (Arg ty ctx)
  (Concat (Single (Const (Bool false) ty ctx2))
    (Single (Const constant ty ctx2))))
 (Single (Const constant ty ctx))
 :ruleset loop-simplify)
;; Some simple simplifications of loops
(ruleset loop-unroll)
(ruleset loop-peel)
(ruleset loop-iters-analysis)

;;                      inputs, outputs -> number of iterations
;; The minimum possible guess is 1 because of do-while loops
;; TODO: dead loop deletion can turn loops with a false condition to a body
(function LoopNumItersGuess (Expr Expr) i64 :merge (max 1 (min old new)))

;; by default, guess that all loops run 1000 times
(rule ((DoWhile inputs outputs))
      ((set (LoopNumItersGuess inputs outputs) 1000))
      :ruleset loop-iters-analysis)

;; For a loop that is false, its num iters is 1
(rule 
  ((= loop (DoWhile inputs outputs))
   (= (Const (Bool false) ty ctx) (Get outputs 0)))
  ((set (LoopNumItersGuess inputs outputs) 1))
:ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated before checking pred
;; TODO: we could make it work for decrementing loops
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by some constant each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while next_counter less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (/ (- end_constant start_const) increment))
  )
  :ruleset loop-iters-analysis)

;; Figure out number of iterations for a loop with constant bounds and initial value
;; and i is updated after checking pred
(rule
  ((= lhs (DoWhile inputs outputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   (= body-arg (Get (Arg _ty _ctx) counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by a constant each loop
   (= next_counter (Bop (Add) body-arg
                              (Const (Int increment) _ty2 _ctx2)))
   (> increment 0)
   ;; while this counter less than end_constant
   (= pred (Bop (LessThan) body-arg
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; end constant is at least start constant
   (>= end_constant start_const)
  )
  (
    (set (LoopNumItersGuess inputs outputs) (+ (/ (- end_constant start_const) increment) 1))
  )
  :ruleset loop-iters-analysis)

;; loop peeling rule
;; Only peel loops that we know iterate < 3 times
(constructor LoopPeeledPlaceholder (Expr) Assumption :unextractable)
(rule
 ((= lhs (DoWhile inputs outputs))
  (ContextOf lhs ctx)
  (HasType inputs inputs-ty)
  (= outputs-len (tuple-length outputs))
  (= old_cost (LoopNumItersGuess inputs outputs))
  (< old_cost 3)
  )
 (
  (let executed-once
    (Subst ctx inputs outputs))
  (let executed-once-body
     (SubTuple executed-once 1 (- outputs-len 1)))
  (let then-ctx
    (InIf true (Get executed-once 0) executed-once-body))
  (let else-ctx
    (InIf false (Get executed-once 0) executed-once-body))

  (let new-loop-arg
    (Arg inputs-ty then-ctx))
  (let new-loop-body
    (Subst (LoopPeeledPlaceholder lhs) new-loop-arg outputs))
  (union (InLoop new-loop-arg new-loop-body) (LoopPeeledPlaceholder lhs))

  (union lhs
    ;; check if we need to continue executing the loop
    (If (Get executed-once 0)
      executed-once-body ;; inputs are the body executed once
      (DoWhile new-loop-arg new-loop-body)
      (Arg inputs-ty else-ctx)))

  (set (LoopNumItersGuess new-loop-arg new-loop-body) (- old_cost 1))
  )
 :ruleset loop-peel)

(constructor TmpCtxUnroll (Expr Expr) Assumption)

;; unroll a loop with constant bounds and initial value
(rule
  ((= lhs (DoWhile inputs outputs))
   (= num-inputs (tuple-length inputs))
   (= pred (Get outputs 0))
   ;; iteration counter starts at start_const
   (= (Const (Int start_const) _ty1 _ctx1) (Get inputs counter_i))
   ;; updated counter at counter_i
   (= next_counter (Get outputs (+ counter_i 1)))
   ;; increments by one each loop
   (= next_counter (Bop (Add) (Get (Arg _ty _ctx) counter_i)
                              (Const (Int 1) _ty2 _ctx2)))
   ;; while less than end_constant
   (= pred (Bop (LessThan) next_counter
                           (Const (Int end_constant) _ty3 _ctx3)))
   ;; start and end constant is a multiple of 4 and greater than start_const
   (> end_constant start_const)
   (= (% start_const 4) 0)
   (= (% end_constant 4) 0)
   (= old_cost (LoopNumItersGuess inputs outputs))
  )
  (
    (let tmp-ctx (TmpCtxUnroll inputs outputs))
    (let one-iter (SubTuple outputs 1 num-inputs))
    (let unrolled
        (Subst tmp-ctx one-iter
          (Subst tmp-ctx one-iter
            (Subst tmp-ctx one-iter
               outputs))))
    (union lhs
      (DoWhile inputs
        unrolled))
    (let actual-ctx (InLoop inputs unrolled))
    (union tmp-ctx actual-ctx)

    (set (LoopNumItersGuess inputs unrolled) (/ old_cost 4))
  )
  :ruleset loop-unroll)



(ruleset swap-if)

;; swaps the order of the then and else branches
;; in an if using Not

(rule
  ((= lhs (If pred inputs then else)))
  (
    (union lhs (If (Uop (Not) pred) inputs else then))
  )
  :ruleset swap-if)


;; for if statements with two outputs, swaps the order
;; of the outputs
(rule
  ((= lhs (If pred inputs then else))
   (= (tuple-length then) 2)
   (= (tuple-length else) 2))
  (
    (union
      (Concat (Single (Get lhs 1)) (Single (Get lhs 0)))
      (If pred inputs
          (Concat (Single (Get then 1)) (Single (Get then 0)))
          (Concat (Single (Get else 1)) (Single (Get else 0)))))
  )
  :ruleset swap-if)
;; this ruleset depends on swap_if running twice
;; swap_if un-permutes the outputs of the function and the if so this rule can match
(ruleset rec-to-loop)



;; this rule finds a recursive functions
;; with a base case and a tail-recursive call
;; transforms them into a loop
;; transforming functions that look like this:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start));
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;      } while (start[0]);
;;    }
;;    ret base_case(start);
;; }
;; for example, printBinary sums the results of recursive calls

(constructor TmpCtxRecToLoop (String Type Type Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs (Call name rec_case) base-case))
   (HasType always-runs start-ty)
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop name in out body))
   (let loop-inputs (Arg start-ty (InIf true pred always-runs)))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx rec_case pred))
         (Subst tmp-ctx rec_case always-runs)))
   (union tmp-ctx (InLoop loop-inputs loop-outputs))

   (let loop
     (DoWhile loop-inputs loop-outputs))
    
    
  ;; initial start value
   (let outer-if
     (If pred always-runs
         loop
         (Arg start-ty (InIf false pred always-runs))))
   (union body (Subst (InFunc name) outer-if base-case)))
  :ruleset rec-to-loop)


;; Stores information about how to use a binary
;; operator to accumulate values
;; (bop start-val base-case-op)
(relation Accum-Bop (BinaryOp i64 BinaryOp))

;; addition is easy, it starts at 0 and adds the result of the recursive call
(Accum-Bop (Add) 0 (Add))

;; subtraction starts at zero, but adds the base case at the end
(Accum-Bop (Sub) 0 (Add))

;; multiplication starts at 1, and multiplies the result of the recursive call
(Accum-Bop (Mul) 1 (Mul))

;; It seems like integers have these properties based on: https://stackoverflow.com/questions/69480173/which-arithmetic-properties-do-twos-complement-integers-have


;; same as above rule, but with an accumulator
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    if (pred) {
;;       ret name(rec_case(start)) + f(start);
;;    } else {
;;       ret base_case(start);
;;    }
;; }
;; into:
;; function name(inputs) {
;;    let start = always_runs(inputs);
;;    let acc = 0;
;;    if (start[0]) {
;;      do {
;;         start = always_runs(rec_case(start));
;;         acc = acc + extra(start);
;;      } while (start[0]);
;;    }
;;    ret base_case(start) + acc;
;; }
(constructor TmpCtxRecToLoop2 (String Expr Expr Expr) Assumption)
(rule
  ((Function name in out body)
   (= body (If pred always-runs then-case base-case))
   (= call (Call name rec-case))
   (= then-case
      (Concat (Single (Bop acc-op (Get call 0) extra))
              (Single (Get call 1))))
   (Accum-Bop acc-op initial-int base-case-op)
   (HasType always-runs start-ty)
   (= always-runs-len (tuple-length always-runs))
   (= start-ty (TupleT start-ty-list))
   (HasType body func-ty))
  ((let tmp-ctx (TmpCtxRecToLoop2 name pred then-case base-case))
   (let loop-ty
     (TupleT (TLConcat start-ty-list (TCons (IntT) (TNil)))))
   ;; recursive case in the loop
   (let new-rec-case
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) rec-case))
   ;; extra computation in the loop
   (let new-extra
    (Subst tmp-ctx
           (SubTuple (Arg loop-ty tmp-ctx) 0 always-runs-len) extra))
   ;; acc starts at 0
   (let loop-inputs
     (Concat (Arg start-ty (InIf true pred always-runs)) (Single (Const (Int initial-int) start-ty (InIf true pred always-runs)))))
   (let loop-outputs
     (Concat
         (Single (Subst tmp-ctx new-rec-case pred))
         (Concat
           (Subst tmp-ctx new-rec-case always-runs)
           ;; add extra to acc
           (Single (Bop acc-op (Get (Arg loop-ty tmp-ctx) always-runs-len) new-extra)))))
   ;; loop starts at zero, adds extra each iteration
   (let loop
     (DoWhile loop-inputs loop-outputs))
   ;; union tmpctx
   (union tmp-ctx (InLoop loop-inputs loop-outputs))
  
   (let outer-if
     (If pred always-runs
         loop
         (Concat
           (Arg start-ty (InIf false pred always-runs))
           ;; otherwise acc is 0
           (Single (Const (Int 0) start-ty (InIf false pred always-runs))))))
   ;; base case over latest start value
   (let new-base-case
     (Subst (InFunc name) (SubTuple outer-if 0 always-runs-len) base-case))
   ;; add base case to acc
   (let res
     (Concat
      (Single (Bop base-case-op (Get new-base-case 0) (Get outer-if always-runs-len)))
      (Single (Get new-base-case 1))))
   (union body res))
  :ruleset rec-to-loop)

(ruleset passthrough)


;; Pass through thetas
(rule ((= lhs (Get loop i))
        (= loop (DoWhile inputs pred-outputs))
        (= (Get pred-outputs (+ i 1)) (Get (Arg _ty _ctx) i))
        ;; only pass through pure types, since some loops don't terminate
        ;; so the state edge must pass through them
        (HasType lhs lhs_ty)
        (PureType lhs_ty)
        )
       ((union lhs (Get inputs i)))
       :ruleset passthrough)

;; Pass through switch arguments
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Get (Arg _ _ctx0) j))
       (= (Get branch1 i) (Get (Arg _ _ctx1) j))
       (= passed-through (Get inputs j))
       (HasType lhs lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union lhs passed-through))
      :ruleset passthrough)

;; Pass through switch predicate
(rule ((= lhs (Get switch i))
       (= switch (Switch pred inputs branches))
       (= (ListExpr-length branches) 2)
       (= branch0 (ListExpr-ith branches 0))
       (= branch1 (ListExpr-ith branches 1))
       (= (Get branch0 i) (Const (Bool false) _ _ctx0))
       (= (Get branch1 i) (Const (Bool true) _ _ctx1)))
      ((union lhs pred))
      :ruleset passthrough)

;; Pass through if arguments
(rule ((= if (If pred inputs then_ else_))
       (= then-branch (Get then_ i))
       (= else-branch (Get else_ i))
       (= then-branch (Get (Arg arg_ty _then_ctx) j))
       (= else-branch (Get (Arg arg_ty _else_ctx) j))
       (HasType then-branch lhs_ty)
       (!= lhs_ty (Base (StateT))))
      ((union (Get if i) (Get inputs j)))
      :ruleset passthrough)

; Pass through if state edge arguments
; To maintain the invariant, we have to union the other outputs with a pure if statement
(ruleset state-edge-passthrough)

(rule ((= outputs (If pred inputs then_ else_))

       (= (Get then_ i) (Get (Arg arg_ty then_ctx) j))
       (= (Get else_ i) (Get (Arg arg_ty else_ctx) j))

       (HasType (Get then_ i) (Base (StateT))))

      ((let lhs (Get outputs i))
       (let new_inputs (TupleRemoveAt inputs j))

       (let new_then_ctx (InIf true  pred new_inputs))
       (let new_else_ctx (InIf false pred new_inputs))

       (let old_then (TupleRemoveAt then_ i))
       (let old_else (TupleRemoveAt else_ i))

       (let new_then (DropAt new_then_ctx j old_then))
       (let new_else (DropAt new_else_ctx j old_else))

       (let old_outputs (TupleRemoveAt outputs i))
       (let new_if (If pred new_inputs new_then new_else))
       (union new_if old_outputs)

       (union lhs (Get inputs j))
       ;; Be careful not to subsume the original if statement immediately,
       ;;  since TupleRemoveAt still needs to match on it
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset state-edge-passthrough)

;; Pass through if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool true) _ _thenctx))
       (= (Get else_ i) (Const (Bool false) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) pred)
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; Pass through inverted if predicate
(rule ((= if (If pred inputs then_ else_))
       (= (Get then_ i) (Const (Bool false) _ _thenctx))
       (= (Get else_ i) (Const (Bool true) _ _elsectx)))

      ((let new_then (TupleRemoveAt then_ i))
       (let new_else (TupleRemoveAt else_ i))
       (let new_if (If pred inputs new_then new_else))

       (union (Get           if i) (Uop (Not) pred))
       (union (TupleRemoveAt if i) new_if)
       (ToSubsumeIf pred inputs then_ else_))
      :ruleset passthrough)

;; ORIGINAL
;; a = 0
;; c = 3
;; for  i = 0 to n:
;;     a = i * c
;;
;; OPTIMIZED
;; a = 0
;; c = 3
;; d = 0
;; for i = 0 to n:
;;     a += d
;;     d += c
(ruleset loop-strength-reduction)

; Finds invariants/constants within a body.
; Columns: body; value of invariant in inputs; value of invariant in outputs
;; Get the input and output value of an invariant, or constant int, within the loop
;;             loop in   out
(relation lsr-inv (Expr Expr Expr))

; TODO: there may be a bug with finding the invariant, or it just may not be extracted.
; Can make this work on loop_with_mul_by_inv and a rust test later.
; (rule (
;     (= loop (DoWhile inputs pred-and-body))
;     (= (Get outputs (+ i 1)) (Get (Arg arg-type assm) i)))
;     ((inv loop (Get inputs i) (Get (Arg arg-type assm) i))) :ruleset always-run)
(rule (
    (= loop (DoWhile inputs pred-and-body))
    (ContextOf inputs loop-input-ctx)
    (ContextOf pred-and-body loop-output-ctx)
    (= constant (Const c out-type loop-output-ctx))
    (HasArgType inputs in-type)
    )
    ((lsr-inv loop (Const c in-type loop-input-ctx) constant)) :ruleset always-run)
(constructor TmpCtxLSR (Expr Expr) Assumption)
(rule 
    (
        ;; Find loop
        (= old-loop (DoWhile inputs pred-and-outputs))
        (ContextOf pred-and-outputs loop-ctx)

        ; Find loop variable (argument that gets incremented with an invariant)
        (lsr-inv old-loop loop-incr-in loop-incr-out)
        ; Since the first el of pred-and-outputs is the pred, we need to offset i
        (= (Get pred-and-outputs (+ i 1)) (Bop (Add) (Get (Arg arg-type assm) i) loop-incr-out))

        ; Find invariant where input is same as output, or constant
        (lsr-inv old-loop c-in c-out)

        ; Find multiplication of loop variable and invariant
        (= old-mul (Bop (Mul) c-out (Get (Arg arg-type assm) i)))
        (ContextOf old-mul loop-ctx)

        (= arg-type (TupleT ty-list))
        ; n is index of our new, temporary variable d
        (= n (tuple-length inputs))
    )
    (
        (let tmp-ctx (TmpCtxLSR inputs pred-and-outputs))
        ; Each time we need to update d by the product of the multiplied constant and the loop increment
        (let addend (Bop (Mul) c-out loop-incr-out))

        ; Initial value of d is i * c
        (let d-init (Bop (Mul) c-in (Get inputs i)))

        ; Construct optimized theta
        ; new-inputs already has the correct context
        (let new-inputs (Concat inputs (Single d-init)))

        ; We need to create a new type, with one more input
        (let new-arg-ty (TupleT (TLConcat ty-list (TCons (IntT) (TNil)))))
        (let replace-arg (SubTuple (Arg new-arg-ty tmp-ctx) 0 n))

        ; Value of d in loop. Add context to addend
        (let d-out (Bop (Add) (Get (Arg new-arg-ty tmp-ctx) n)
                   (Subst tmp-ctx replace-arg addend)))

        ; build the old body, making sure to set the correct arg type and context
        (let new-body
          (Concat
            (Subst tmp-ctx replace-arg pred-and-outputs)
            (Single d-out)))

        (let new-loop (DoWhile new-inputs new-body))

        (let new-c (Subst tmp-ctx replace-arg c-out))

        ; Now that we have the new loop, union the temporary context with the actual ctx
        (union tmp-ctx (InLoop new-inputs new-body))

        ; Substitute d for the *i expression
        (let new-mul
            (Bop (Mul) new-c (Get replace-arg i)))
        (union (Get (Arg new-arg-ty tmp-ctx) n) new-mul)

        ; Subsume the multiplication in the new loop to prevent
        ; from firing loop strength reduction again on the new loop
        ; Workaround of egglog issue: https://github.com/egraphs-good/egglog/issues/462
        ; add the expression we are about to subsume
        (let before
          (Bop (Mul) new-c (Get replace-arg i)))
        ; now subsume it
        (subsume
          (Bop (Mul) new-c (Get replace-arg i)))

        ; Project all but last
        (union old-loop (SubTuple new-loop 0 n))
    )
    :ruleset loop-strength-reduction
)
(relation IVTNewInputsAnalysisDemand (Expr))

(ruleset ivt-analysis)

(sort IVTRes)
;;                              perm passthrough-perm passthrough-type passthrough-type-len
(constructor IVTAnalysisRes (Expr Expr             TypeList         i64) IVTRes)
(constructor IVTMin (IVTRes IVTRes) IVTRes)

(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (<= len1 len2))
      ((union lhs (IVTAnalysisRes _a _b _c len1)))
        :ruleset ivt-analysis)
(rule ((= lhs (IVTMin (IVTAnalysisRes _a _b _c len1) (IVTAnalysisRes _d _e _f len2)))
       (> len1 len2))
      ((union lhs (IVTAnalysisRes _d _e _f len2)))
        :ruleset ivt-analysis)


;; use an analysis to avoid exploring all combinations of passthrough vs not passed through values. Always prefer not passed through
;;                                  expr1 curr  if  result
(function IVTNewInputsAnalysisImpl (Expr  Expr  Node) IVTRes :merge (IVTMin old new))

;; IVTNewInputsAnalysis computes a permutation perm which corresponds to accessing elements of an if region.
;; It also makes accesses of passthrough arguments access new indices after the length of the if region.
;; For example, if expr1 is: [get(if, 1), get(arg, 1), get(if, 0), get(arg, 3)]
;; It produces a new permutation: [get(arg, 1), get(arg, 2), get(arg, 0), get(arg, 3)]
;; The accesses of the if statement remain unchanged, and the accesses of the passthrough arguments are moved to the end.
;; This new permutation is intended to be used with a substitution argument (Concat if-statement passthrough-args)
;; Also produced is a passthrough-perm, which selects all of the passthrough arguments and puts them in a single tuple
;;                              expr1 if result
(function IVTNewInputsAnalysis (Expr  Node) IVTRes :merge (IVTMin old new))


(rule (
    (DoWhile inpW outW)
) (
    (IVTNewInputsAnalysisDemand outW)
) :ruleset ivt-analysis)

(rule (
    (IVTNewInputsAnalysisDemand loop-body)
    ;; first input is a predicate
    (= loop-body (Concat (Single pred) rest))
    ;; another input is an if statement with shared predicate
    (= if-eclass (If pred inputs thn else))
    (= (Get loop-body i) (Get if-eclass j))
    (!= i 0)
) (
    (let perm (Empty (TmpType) (InFunc "no-ctx")))
    (set
     (IVTNewInputsAnalysisImpl loop-body rest (IfNode if-eclass pred inputs thn else))
     (IVTAnalysisRes perm perm (TNil) 0))
) :ruleset ivt-analysis)

;; recursive case for accessing the if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get if-eclass ith)) rest))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm  pperm passthrough-tys len))
) :ruleset ivt-analysis)

;; recursive case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Concat (Single (Get (Arg ty ctx) ith)) rest))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysisImpl loop-body rest ifnode)
         (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)

; base case for accessing if statement
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body (Single last) ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= last (Get if-eclass ith))
) (
    (let new-perm (Concat perm (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm pperm passthrough-tys len))
) :ruleset ivt-analysis)

; base case for accessing a passed-through argument
(rule (
    (= (IVTNewInputsAnalysisImpl loop-body curr ifnode) (IVTAnalysisRes perm pperm passthrough-tys len))
    (= ifnode (IfNode if-eclass pred inputs then else))
    (= curr (Single (Get (Arg ty ctx) ith)))
    (= (Get loop-body (+ ith 1)) (Get curr 0))
    (HasType (Get (Arg ty ctx) ith) (Base new-ty))
    (= (tuple-length if-eclass) if-len)
) (
    (let get-passed-through (Single (Get (Arg (TmpType) (InFunc "no-ctx")) (+ if-len len))))
    (let new-perm (Concat perm get-passed-through))
    (let original-get-index (Single (Get (Arg (TmpType) (InFunc "no-ctx")) ith)))
    (let new-pperm (Concat pperm original-get-index))
    (let new-passthrough-tys (TLConcat passthrough-tys (TCons new-ty (TNil))))
    (set (IVTNewInputsAnalysis loop-body ifnode) (IVTAnalysisRes new-perm new-pperm new-passthrough-tys (+ len 1)))
) :ruleset ivt-analysis)


(ruleset loop-inversion)

(constructor TmpCtxLoopInversion (Expr Expr) Assumption)
(rule (
    (= loop (DoWhile inpW outW))
    (= (IVTNewInputsAnalysis outW ifnode) (IVTAnalysisRes perm pperm passthrough-tys _len))
    (= ifnode (IfNode if if-cond if-inputs then else))
    (= if-inputs-len (tuple-length if-inputs))
    (= passthrough-len (TypeList-length passthrough-tys))

    (ContextOf inpW outer-ctx)
    (ContextOf if-inputs if-ctx)
    (HasType if-inputs inputs-ty)
    (= inputs-ty (TupleT inputs-ty-list))
) (
    (let tmp-ctx (TmpCtxLoopInversion inpW outW))
    ;; new peeled condition, checks the if's condition before the first iteration
    (let new-if-cond (Subst outer-ctx inpW if-cond))

    ;; new inputs to the if are 1) the inputs run once unconditionally concatted with
    ;; 2) the passthrough values
    (let new-if-inp
        (Concat (Subst outer-ctx inpW if-inputs)
                (Subst outer-ctx inpW pperm)))
    ;; if contexts
    (let new-if-true-ctx (InIf true new-if-cond new-if-inp))
    (let new-if-false-ctx (InIf false new-if-cond new-if-inp))

    (let new-loop-arg-ty (TupleT (TLConcat inputs-ty-list passthrough-tys)))
    (let new-loop-arg (Arg new-loop-arg-ty tmp-ctx))
    (let new-loop-context tmp-ctx)

    ;; body
    ;; loop begins by running the then branch of the if statement, which uses the first if-inputs-length elements of arg
    (let then-arg (SubTuple new-loop-arg 0 if-inputs-len))
    (let new-then-branch
        (Subst new-loop-context then-arg then))
    ;; the inputs are then run on the combination of
    ;; the then branch and the passthrough values
    (let then-branch-and-passthrough
      (Concat new-then-branch (SubTuple new-loop-arg if-inputs-len passthrough-len)))
    ;; permute them to move passthrough and if outputs back
    ;; to where if-inputs and if-cond expect them to be
    (let permuted-then-branch-and-passthrough
      (Subst new-loop-context then-branch-and-passthrough perm))
    ;; substitute into inputs and condi
    (let new-inputs-after-then-branch 
        (Subst new-loop-context permuted-then-branch-and-passthrough
            (Concat (Single if-cond) if-inputs)))
    (let new-loop-outputs
        (Concat new-inputs-after-then-branch
           (SubTuple new-loop-arg if-inputs-len passthrough-len)))

    (let new-loop (DoWhile (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))
    (let new-if
        (If new-if-cond new-if-inp
            new-loop
            (Arg new-loop-arg-ty new-if-false-ctx)))

    ;; Apply the body of the false branch as an afterprocessing wrapper
    (let final-if-inputs
       (SubTuple new-if 0 if-inputs-len))
    (let else-branch-end
        (Subst outer-ctx final-if-inputs else))
    (let else-branch-end-and-passthrough
        (Concat else-branch-end
               (SubTuple new-if if-inputs-len passthrough-len)))
    (let final-permuted
        (Subst outer-ctx else-branch-end-and-passthrough perm))

    (union final-permuted loop)
    (union new-loop-context (InLoop (Arg new-loop-arg-ty new-if-true-ctx) new-loop-outputs))

    (subsume (DoWhile inpW outW))
) :ruleset loop-inversion)

(ruleset cicm)
(ruleset cicm-index)

(relation InvCodeMotionCandidate (Expr Expr))

(rule (
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t1 c2) (ExtractedExpr e2))
        (ContextOf e1 (InIf true pred1 orig_ins3))
        (ContextOf e2 (InIf false pred2 orig_ins4))
        (!= e1 e2)
     )
     ((InvCodeMotionCandidate e1 e2))
     :ruleset cicm-index)


(rule (
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (= e1 (Uop o x))
        (HasType e1 (Base ty))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (ContextOf e1 (InIf true pred orig_ins))

        (= e2 (Uop o y))
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)
        (ContextOf e2 (InIf false pred orig_ins))

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Uop o (Subst if_tr st_tr x))
        (Uop o (Subst if_fa st_fa y))
        ; Now subsume:
        (subsume (Uop o (Subst if_tr st_tr x)))
        (subsume (Uop o (Subst if_fa st_fa y)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)

       

(rule (
        (InvCodeMotionCandidate e1 e2)
        (= if_e (If pred orig_ins thn els))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (ContextOf if_e outer_ctx)

        (ContextOf e1 (InIf true pred orig_ins))
        (ContextOf e2 (InIf false pred orig_ins))
        (= e1 (Bop o x1 y1))
        
        (= e2 (Bop o x2 y2))
        
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (> 10 (Expr-size e1))
        (ExprIsPure e1)
        (HasType e1 (Base ty))
        

        
        (HasType e2 (Base ty))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (> 10 (Expr-size e2))
        (ExprIsPure e2)

        (= t1 t2)
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; pull the term out to the outer context
        (let new_term (TermSubst outer_ctx orig_ins t1)) 
        
        ; Add it as an input to the new if
        (let new_ins (Concat orig_ins (Single new_term)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; SubTuple- this is the sublist of the new inputs that corresponds
        ; to the original inputs (without the pulled-out input)
        (let st_tr (SubTuple (Arg new_ins_ty if_tr) 0 orig_ins_len))
        (let st_fa (SubTuple (Arg new_ins_ty if_fa) 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))
        
        ; Union the new arg with the original expr in each branch
        (union (Get (Arg new_ins_ty if_tr) orig_ins_len) (Subst if_tr st_tr e1))
        (union (Get (Arg new_ins_ty if_fa) orig_ins_len) (Subst if_fa st_fa e2))
        
        ; Subsume the original exprs now that the new arg is there
        ; Doing this prevents us from pulling the same exprs out of the new if
        ; Can only subsume an e-node (not an e-class), and we don't want to
        ; subsume the Subst node directly, since it won't have a chance to do
        ; the actual substitution, so manually compute the first round of
        ; substitution so that we can subsume the Uop e-nodes.
        ; First construct the Uop, so that it exists in the e-graph, because
        ; you can't subsume things that don't exist in the e-graph already.
        (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1))
        (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2))
        ; Now subsume:
        (subsume (Bop o (Subst if_tr st_tr x1) (Subst if_tr st_tr y1)))
        (subsume (Bop o (Subst if_fa st_fa x2) (Subst if_fa st_fa y2)))

        ; Create new if and union it with the original
        (union if_e (If pred new_ins new_thn new_els))
      )
    :ruleset cicm)


(ruleset push-in)

; new version of the rule where one side of bop is constant
(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o (Const c ty outer_ctx) x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(c, x) in the new regions
        (union (Get arg_tr i) (Bop o (Const c new_ins_ty if_tr) (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Bop o (Const c new_ins_ty if_fa) (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Bop o x (Const c ty outer_ctx)) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Bop(x, c) in the new regions
        (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Const c new_ins_ty if_tr)))
        (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Const c new_ins_ty if_fa)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

(rule (
        (= if_e (If pred orig_inputs thn els))
        (ContextOf if_e outer_ctx)
        (= (Uop o x) (Get orig_inputs i))
        (HasArgType thn (TupleT tylist))
        (HasArgType els (TupleT tylist))
        (HasType x (Base x_ty))
        (= orig_ins_len (TypeList-length tylist))
      )
      (
        ; New inputs
        (let new_ins (Concat orig_inputs (Single x)))
        (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TNil)))))

        ; New contexts
        (let if_tr (InIf true  pred new_ins))
        (let if_fa (InIf false pred new_ins))

        ; New args
        (let arg_tr (Arg new_ins_ty if_tr))
        (let arg_fa (Arg new_ins_ty if_fa))

        ; SubTuple
        (let st_tr (SubTuple arg_tr 0 orig_ins_len))
        (let st_fa (SubTuple arg_fa 0 orig_ins_len))

        ; New regions
        (let new_thn (Subst if_tr st_tr thn))
        (let new_els (Subst if_fa st_fa els))

        ; Union the original input with Uop(x) in the new regions
        (union (Get arg_tr i) (Uop o (Get arg_tr orig_ins_len)))
        (union (Get arg_fa i) (Uop o (Get arg_fa orig_ins_len)))

        ; Union the ifs
        (union if_e (If pred new_ins new_thn new_els))
      )
      :ruleset push-in)

; OLD VERSION - Too slow for now
; ; push bop input into region
; (rule (
;         (= if_e (If pred orig_inputs thn els))
;         (ContextOf if_e outer_ctx)
;         (= (Bop o x y) (Get orig_inputs i))
;         (HasArgType thn (TupleT tylist))
;         (HasArgType els (TupleT tylist))
;         (HasType x (Base x_ty))
;         (HasType y (Base y_ty))
;       )
;       (
;         ; New inputs
;         (let new_ins (Concat orig_inputs (Concat (Single x) (Single y))))
;         (let new_ins_ty (TupleT (TLConcat tylist (TCons x_ty (TCons y_ty (TNil))))))

;         ; New contexts
;         (let if_tr (InIf true  pred new_ins))
;         (let if_fa (InIf false pred new_ins))
        
;         ; New args
;         (let arg_tr (Arg new_ins_ty if_tr))
;         (let arg_fa (Arg new_ins_ty if_fa))

;         ; SubTuple
;         (let orig_ins_len (TypeList-length tylist))
;         (let st_tr (SubTuple arg_tr 0 orig_ins_len))
;         (let st_fa (SubTuple arg_fa 0 orig_ins_len))

;         ; New regions
;         (let new_thn (Subst if_tr st_tr thn))
;         (let new_els (Subst if_fa st_fa els))

;         ; Union the original input with Bop(x, y) in the new regions
;         (union (Get arg_tr i) (Bop o (Get arg_tr orig_ins_len) (Get arg_tr (+ orig_ins_len 1))))
;         (union (Get arg_fa i) (Bop o (Get arg_fa orig_ins_len) (Get arg_fa (+ orig_ins_len 1))))

;         ; Union the ifs
;         (union if_e (If pred new_ins new_thn new_els))
;       )
;       :ruleset push-in)
;; use these rules to clean up the database, removing helpers
;; this makes the visualization easier to read

(ruleset debug-deletes)

(rule ((HasType a b))
      ((delete (HasType a b)))
      :ruleset debug-deletes)

(rule ((BodyContainsExpr a b))
      ((delete (BodyContainsExpr a b)))
      :ruleset debug-deletes)

(rule ((ExprIsPure e))
      ((delete (ExprIsPure e)))
      :ruleset debug-deletes)

(rule ((HasArgType e ty))
      ((delete (HasArgType e ty)))
      :ruleset debug-deletes)

(rule ((is-inv-Expr e ty))
      ((delete (is-inv-Expr e ty)))
      :ruleset debug-deletes)

(rule ((tuple-length e))
      ((delete (tuple-length e)))
      :ruleset debug-deletes)

(rule ((BinaryOpIsPure e))
      ((delete (BinaryOpIsPure e)))
      :ruleset debug-deletes)

(rule ((ContextOf e a))
      ((delete (ContextOf e a)))
      :ruleset debug-deletes)

(rule ((ExprIsResolved e))
      ((delete (ExprIsResolved e)))
      :ruleset debug-deletes)

(rule ((bop->string a b))
      ((delete (bop->string a b)))
      :ruleset debug-deletes)

(rule ((bpred-of-type a b))
      ((delete (bpred-of-type a b)))
      :ruleset debug-deletes)

(rule ((PureType e))
      ((delete (PureType e)))
      :ruleset debug-deletes)

(rule ((PointsToCells a b))
      ((delete (PointsToCells a b)))
      :ruleset debug-deletes)

(rule ((TuplePointsTo e))
      ((delete (TuplePointsTo e)))
      :ruleset debug-deletes)

(rule ((Resolved-List<PtrPointees> e))
      ((delete (Resolved-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((TypeListToList<PtrPointees> e))
      ((delete (TypeListToList<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<PtrPointees> a b))
      ((delete (Cons-List<PtrPointees> a b)))
      :ruleset debug-deletes)

(rule ((Nil-List<PtrPointees>))
      ((delete (Nil-List<PtrPointees>)))
      :ruleset debug-deletes)

(rule ((Length-List<PtrPointees> e))
      ((delete (Length-List<PtrPointees> e)))
      :ruleset debug-deletes)

(rule ((At-List<PtrPointees> a b c))
      ((delete (At-List<PtrPointees> a b c)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<PtrPointees> a))
      ((delete (IsNonEmpty-List<PtrPointees> a)))
      :ruleset debug-deletes)

(rule ((Resolved-List<i64+IntInterval> e))
      ((delete (Resolved-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((Cons-List<i64+IntInterval> a b c))
      ((delete (Cons-List<i64+IntInterval> a b c)))
      :ruleset debug-deletes)

(rule ((Nil-List<i64+IntInterval>))
      ((delete (Nil-List<i64+IntInterval>)))
      :ruleset debug-deletes)

(rule ((Length-List<i64+IntInterval> e))
      ((delete (Length-List<i64+IntInterval> e)))
      :ruleset debug-deletes)

(rule ((At-List<i64+IntInterval> a b c d))
      ((delete (At-List<i64+IntInterval> a b c d)))
      :ruleset debug-deletes)

(rule ((IsNonEmpty-List<i64+IntInterval> a))
      ((delete (IsNonEmpty-List<i64+IntInterval> a)))
      :ruleset debug-deletes)

(rule ((TypeList-ith a b))
      ((delete (TypeList-ith a b)))
      :ruleset debug-deletes)

(rule ((InIf a b c))
      ((delete (InIf a b c)))
      :ruleset debug-deletes)
(rule ((InLoop a b))
      ((delete (InLoop a b)))
      :ruleset debug-deletes)
(rule ((InFunc a))
      ((delete (InFunc a)))
      :ruleset debug-deletes)

(rule ((TupleT a))
      ((delete (TupleT a)))
      :ruleset debug-deletes)
(rule ((TCons a b))
      ((delete (TCons a b)))
      :ruleset debug-deletes)
(rule ((TNil))
      ((delete (TNil)))
      :ruleset debug-deletes)
(rule ((Base a))
      ((delete (Base a)))
      :ruleset debug-deletes)
(rule ((IntT))
      ((delete (IntT)))
      :ruleset debug-deletes)

;; Hacker's delight optimizations

(ruleset hacker)

;; A simple analysis to identify loops that run exactly #popcount times

;; IsIsEven e x => e is a boolean expression that checks whether x is an even number
(relation IsIsEven (Expr Expr))

(rule (
    (= two (Const (Int 2) ty ctx))
    (= e (Bop (Eq) x (Bop (Mul) (Bop (Div) x two) two)))
) (
    (IsIsEven e x)
) :ruleset hacker)

;; NTZIterations lp n pos => loop lp runs exactly number_of_trailing_zeros(n) times at index pos
(relation NTZIterations (Expr Expr i64))

(rule (
    ;; Grab the outer if
    (= outerif (If cond inputs evenbr oddbr))
    ;; There exists an argument n
    (= n (Get inputs i))
    ;; The condition is on the parity of n
    (IsIsEven cond n)
    ;; In the even/true branch, there is a loop
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    ;; n is passed into to the loop
    (= (Get lp_inputs j) (Get (Arg _ty1 _ctx1) i))
    ;; the loop continues as long as n / 2 is even
    (= two (Const (Int 2) _ty2 _ctx2))
    (= nd2 (Bop (Div) (Get (Arg _ty3 _ctx3) j) two))
    (IsIsEven (Get lp_pred_outputs 0) nd2)
    ;; n is divided by 2 every loop
    (= nd2 (Get lp_pred_outputs (+ j 1)))
    ;; In the odd/false branch, we look for an n
    (= (Get (Arg _ty4 _ctx4) i) (Get oddbr j))
) (
    (NTZIterations outerif n j)
) :ruleset hacker)

;; Identify and optimize lowbit

(rule (
    (NTZIterations outerif n i)
    (= outerif (If cond inputs evenbr oddbr))
    ;; In the even branch, it returns a value that doubles every iter
    (= evenbr (DoWhile lp_inputs lp_pred_outputs))
    (= (Const (Int 1) _ty1 _ctx1) (Get lp_inputs j))
    (= two (Const (Int 2) _ty2 _ctx2))
    (= (Bop (Mul) (Get (Arg _ty3 _ctx3) j) two) (Get lp_pred_outputs (+ j 1)))    
    ;; In the odd branch, it returns an 1
    (= (Const (Int 1) _ty0 _ctx0) (Get oddbr j))
) (
    (let lowbitn (Bop (Bitand) n (Uop (Neg) n)))
    (union (Get outerif j) lowbitn)
    (union (Get outerif i) (Bop (Div) n lowbitn))
) :ruleset hacker)

;; Try to do a state-edge-passthrough for loops
;; NLZIterations guarantees termination for non-zero values
;; lowbit(0) is undefined behavior

(constructor DummyLoopContext (Expr Expr Expr) Assumption)

(rule (
    (NTZIterations anyif n i)
    (= anyif (If cond inputs thenbr elsebr))
    (= thenbr (DoWhile lpinputs pred_outputs))
    (= (Get pred_outputs (+ j 1)) (Get (Arg arg_ty then_ctx) j))
    (HasType (Get pred_outputs (+ j 1)) (Base (StateT)))
) (
    (let newlpinputs (TupleRemoveAt lpinputs j))
    (let newpred_outputs (TupleRemoveAt pred_outputs (+ j 1)))
    
    (let newlpctx (DummyLoopContext newlpinputs newpred_outputs pred_outputs))

    (let newbody (DropAt newlpctx j newpred_outputs))

    (union newlpctx (InLoop newlpinputs newbody))

    (let newlp (DoWhile newlpinputs newbody))
    (let oldlp (TupleRemoveAt thenbr j))

    (union newlp oldlp)

    (union (Get thenbr j) (Get lpinputs j))

) :ruleset hacker)

(unstable-combined-ruleset cheap-optimizations
    hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)

(unstable-combined-ruleset all-optimizations
    select_opt
loop-unroll
switch_rewrite
loop-inv-motion
loop-strength-reduction
cicm
push-in
hacker
loop-simplify
interval-rewrite
always-switch-rewrite
peepholes
)
    

; required by function_inlining_unoins
; Function inlining unions
(relation InlinedCall (String Expr))

(ruleset initialization)
(rule () (
    ; Program nodes
    (let __tmp0 (IntT ))
(let __tmp1 (StateT ))
(let __tmp2 (TNil ))
(let __tmp3 (TCons __tmp1 __tmp2))
(let __tmp4 (TCons __tmp0 __tmp3))
(let __tmp5 (TupleT __tmp4))
(let __tmp6 (InFunc "main"))
(let __tmp7 (Arg __tmp5 __tmp6))
(let __tmp8 (Call "get_sym" __tmp7))
(let __tmp9 (LessThan ))
(let __tmp10 (Int -1))
(let __tmp11 (Const __tmp10 __tmp5 __tmp6))
(let __tmp12 (Sub ))
(let __tmp13 (Get __tmp7 0))
(let __tmp14 (Int 1))
(let __tmp15 (Const __tmp14 __tmp5 __tmp6))
(let __tmp16 (Bop __tmp12 __tmp13 __tmp15))
(let __tmp17 (Bop __tmp9 __tmp11 __tmp16))
(let __tmp18 (Int 0))
(let __tmp19 (Const __tmp18 __tmp5 __tmp6))
(let __tmp20 (Mul ))
(let __tmp21 (Bop __tmp20 __tmp13 __tmp13))
(let __tmp22 (Bop __tmp9 __tmp19 __tmp21))
(let __tmp23 (Get __tmp7 1))
(let __tmp24 (FloatT ))
(let __tmp25 (PointerT __tmp24))
(let __tmp26 (Alloc 0 __tmp21 __tmp23 __tmp25))
(let __tmp27 (Get __tmp26 1))
(let __tmp28 (Single __tmp27))
(let __tmp29 (Get __tmp26 0))
(let __tmp30 (Single __tmp29))
(let __tmp31 (Single __tmp19))
(let __tmp32 (Single __tmp15))
(let __tmp33 (Float 1.0))
(let __tmp34 (Const __tmp33 __tmp5 __tmp6))
(let __tmp35 (Single __tmp34))
(let __tmp36 (Single __tmp13))
(let __tmp37 (Float 0.0))
(let __tmp38 (Const __tmp37 __tmp5 __tmp6))
(let __tmp39 (Single __tmp38))
(let __tmp40 (Single __tmp21))
(let __tmp41 (Concat __tmp39 __tmp40))
(let __tmp42 (Concat __tmp36 __tmp41))
(let __tmp43 (Concat __tmp35 __tmp42))
(let __tmp44 (Concat __tmp32 __tmp43))
(let __tmp45 (Concat __tmp31 __tmp44))
(let __tmp46 (Concat __tmp30 __tmp45))
(let __tmp47 (Concat __tmp28 __tmp46))
(let __tmp48 (TCons __tmp0 __tmp2))
(let __tmp49 (TCons __tmp24 __tmp48))
(let __tmp50 (TCons __tmp0 __tmp49))
(let __tmp51 (TCons __tmp24 __tmp50))
(let __tmp52 (TCons __tmp0 __tmp51))
(let __tmp53 (TCons __tmp0 __tmp52))
(let __tmp54 (TCons __tmp25 __tmp53))
(let __tmp55 (TCons __tmp1 __tmp54))
(let __tmp56 (TupleT __tmp55))
(let __tmp57 (InIf true __tmp22 __tmp47))
(let __tmp58 (Arg __tmp56 __tmp57))
(let __tmp59 (Add ))
(let __tmp60 (InFunc " loop_ctx_10"))
(let __tmp61 (Arg __tmp56 __tmp60))
(let __tmp62 (Get __tmp61 3))
(let __tmp63 (Get __tmp61 2))
(let __tmp64 (Bop __tmp59 __tmp62 __tmp63))
(let __tmp65 (Get __tmp61 7))
(let __tmp66 (Bop __tmp9 __tmp64 __tmp65))
(let __tmp67 (Single __tmp66))
(let __tmp68 (Write ))
(let __tmp69 (PtrAdd ))
(let __tmp70 (Get __tmp61 1))
(let __tmp71 (Bop __tmp69 __tmp70 __tmp63))
(let __tmp72 (Get __tmp61 6))
(let __tmp73 (Get __tmp61 0))
(let __tmp74 (Top __tmp68 __tmp71 __tmp72 __tmp73))
(let __tmp75 (Single __tmp74))
(let __tmp76 (Single __tmp70))
(let __tmp77 (Single __tmp64))
(let __tmp78 (Single __tmp62))
(let __tmp79 (Concat __tmp77 __tmp78))
(let __tmp80 (Concat __tmp76 __tmp79))
(let __tmp81 (Get __tmp61 4))
(let __tmp82 (Single __tmp81))
(let __tmp83 (Concat __tmp80 __tmp82))
(let __tmp84 (Get __tmp61 5))
(let __tmp85 (Single __tmp84))
(let __tmp86 (Concat __tmp83 __tmp85))
(let __tmp87 (Single __tmp72))
(let __tmp88 (Concat __tmp86 __tmp87))
(let __tmp89 (Single __tmp65))
(let __tmp90 (Concat __tmp88 __tmp89))
(let __tmp91 (Concat __tmp75 __tmp90))
(let __tmp92 (Concat __tmp67 __tmp91))
(let __tmp93 (DoWhile __tmp58 __tmp92))
(let __tmp94 (InIf false __tmp22 __tmp47))
(let __tmp95 (Arg __tmp56 __tmp94))
(let __tmp96 (If __tmp22 __tmp47 __tmp93 __tmp95))
(let __tmp97 (Get __tmp96 0))
(let __tmp98 (Single __tmp97))
(let __tmp99 (Get __tmp96 1))
(let __tmp100 (Single __tmp99))
(let __tmp101 (Get __tmp96 4))
(let __tmp102 (Single __tmp101))
(let __tmp103 (Single __tmp16))
(let __tmp104 (Concat __tmp36 __tmp103))
(let __tmp105 (Concat __tmp102 __tmp104))
(let __tmp106 (Concat __tmp35 __tmp105))
(let __tmp107 (Concat __tmp32 __tmp106))
(let __tmp108 (Concat __tmp31 __tmp107))
(let __tmp109 (Concat __tmp100 __tmp108))
(let __tmp110 (Concat __tmp98 __tmp109))
(let __tmp111 (TCons __tmp0 __tmp48))
(let __tmp112 (TCons __tmp24 __tmp111))
(let __tmp113 (TCons __tmp24 __tmp112))
(let __tmp114 (TCons __tmp0 __tmp113))
(let __tmp115 (TCons __tmp0 __tmp114))
(let __tmp116 (TCons __tmp25 __tmp115))
(let __tmp117 (TCons __tmp1 __tmp116))
(let __tmp118 (TupleT __tmp117))
(let __tmp119 (InIf true __tmp17 __tmp110))
(let __tmp120 (Arg __tmp118 __tmp119))
(let __tmp121 (LessEq ))
(let __tmp122 (InFunc " loop_ctx_11"))
(let __tmp123 (Arg __tmp118 __tmp122))
(let __tmp124 (Get __tmp123 3))
(let __tmp125 (Get __tmp123 2))
(let __tmp126 (Bop __tmp59 __tmp124 __tmp125))
(let __tmp127 (Get __tmp123 7))
(let __tmp128 (Bop __tmp121 __tmp126 __tmp127))
(let __tmp129 (Single __tmp128))
(let __tmp130 (Get __tmp123 1))
(let __tmp131 (Get __tmp123 6))
(let __tmp132 (Bop __tmp20 __tmp131 __tmp125))
(let __tmp133 (Bop __tmp59 __tmp132 __tmp125))
(let __tmp134 (Bop __tmp69 __tmp130 __tmp133))
(let __tmp135 (Get __tmp123 4))
(let __tmp136 (Get __tmp123 0))
(let __tmp137 (Top __tmp68 __tmp134 __tmp135 __tmp136))
(let __tmp138 (Single __tmp137))
(let __tmp139 (Single __tmp130))
(let __tmp140 (Single __tmp126))
(let __tmp141 (Single __tmp124))
(let __tmp142 (Concat __tmp140 __tmp141))
(let __tmp143 (FAdd ))
(let __tmp144 (Get __tmp123 5))
(let __tmp145 (Bop __tmp143 __tmp135 __tmp144))
(let __tmp146 (Single __tmp145))
(let __tmp147 (Concat __tmp142 __tmp146))
(let __tmp148 (Concat __tmp139 __tmp147))
(let __tmp149 (Concat __tmp138 __tmp148))
(let __tmp150 (Single __tmp144))
(let __tmp151 (Single __tmp131))
(let __tmp152 (Concat __tmp150 __tmp151))
(let __tmp153 (Single __tmp127))
(let __tmp154 (Concat __tmp152 __tmp153))
(let __tmp155 (Concat __tmp149 __tmp154))
(let __tmp156 (Concat __tmp129 __tmp155))
(let __tmp157 (DoWhile __tmp120 __tmp156))
(let __tmp158 (InIf false __tmp17 __tmp110))
(let __tmp159 (Arg __tmp118 __tmp158))
(let __tmp160 (If __tmp17 __tmp110 __tmp157 __tmp159))
(let __tmp161 (Get __tmp160 1))
(let __tmp162 (Single __tmp161))
(let __tmp163 (Get __tmp160 0))
(let __tmp164 (Single __tmp163))
(let __tmp165 (Concat __tmp162 __tmp164))
(let __tmp166 (Bop __tmp9 __tmp19 __tmp13))
(let __tmp167 (Get __tmp8 1))
(let __tmp168 (Alloc 0 __tmp13 __tmp167 __tmp25))
(let __tmp169 (Get __tmp168 1))
(let __tmp170 (Alloc 1 __tmp13 __tmp169 __tmp25))
(let __tmp171 (Get __tmp170 1))
(let __tmp172 (Single __tmp171))
(let __tmp173 (Get __tmp8 0))
(let __tmp174 (Single __tmp173))
(let __tmp175 (Get __tmp170 0))
(let __tmp176 (Single __tmp175))
(let __tmp177 (Get __tmp168 0))
(let __tmp178 (Single __tmp177))
(let __tmp179 (Float 5.0))
(let __tmp180 (Const __tmp179 __tmp5 __tmp6))
(let __tmp181 (Single __tmp180))
(let __tmp182 (Concat __tmp31 __tmp32))
(let __tmp183 (Concat __tmp35 __tmp182))
(let __tmp184 (Concat __tmp181 __tmp183))
(let __tmp185 (Concat __tmp36 __tmp184))
(let __tmp186 (Concat __tmp178 __tmp185))
(let __tmp187 (Concat __tmp176 __tmp186))
(let __tmp188 (Concat __tmp174 __tmp187))
(let __tmp189 (Concat __tmp172 __tmp188))
(let __tmp190 (TCons __tmp25 __tmp114))
(let __tmp191 (TCons __tmp25 __tmp190))
(let __tmp192 (TCons __tmp25 __tmp191))
(let __tmp193 (TCons __tmp1 __tmp192))
(let __tmp194 (TupleT __tmp193))
(let __tmp195 (InIf true __tmp166 __tmp189))
(let __tmp196 (Arg __tmp194 __tmp195))
(let __tmp197 (InFunc " loop_ctx_0"))
(let __tmp198 (Arg __tmp194 __tmp197))
(let __tmp199 (Get __tmp198 8))
(let __tmp200 (Get __tmp198 7))
(let __tmp201 (Bop __tmp59 __tmp199 __tmp200))
(let __tmp202 (Get __tmp198 4))
(let __tmp203 (Bop __tmp9 __tmp201 __tmp202))
(let __tmp204 (Single __tmp203))
(let __tmp205 (Get __tmp198 3))
(let __tmp206 (Bop __tmp69 __tmp205 __tmp200))
(let __tmp207 (Get __tmp198 6))
(let __tmp208 (Get __tmp198 2))
(let __tmp209 (Bop __tmp69 __tmp208 __tmp200))
(let __tmp210 (Get __tmp198 5))
(let __tmp211 (Get __tmp198 0))
(let __tmp212 (Top __tmp68 __tmp209 __tmp210 __tmp211))
(let __tmp213 (Top __tmp68 __tmp206 __tmp207 __tmp212))
(let __tmp214 (Single __tmp213))
(let __tmp215 (Get __tmp198 1))
(let __tmp216 (Single __tmp215))
(let __tmp217 (Single __tmp208))
(let __tmp218 (Single __tmp205))
(let __tmp219 (Single __tmp202))
(let __tmp220 (Bop __tmp143 __tmp210 __tmp207))
(let __tmp221 (Single __tmp220))
(let __tmp222 (Concat __tmp219 __tmp221))
(let __tmp223 (Concat __tmp218 __tmp222))
(let __tmp224 (Concat __tmp217 __tmp223))
(let __tmp225 (Concat __tmp216 __tmp224))
(let __tmp226 (Single __tmp207))
(let __tmp227 (Single __tmp201))
(let __tmp228 (Concat __tmp226 __tmp227))
(let __tmp229 (Single __tmp199))
(let __tmp230 (Concat __tmp228 __tmp229))
(let __tmp231 (Concat __tmp225 __tmp230))
(let __tmp232 (Concat __tmp214 __tmp231))
(let __tmp233 (Concat __tmp204 __tmp232))
(let __tmp234 (DoWhile __tmp196 __tmp233))
(let __tmp235 (InIf false __tmp166 __tmp189))
(let __tmp236 (Arg __tmp194 __tmp235))
(let __tmp237 (If __tmp166 __tmp189 __tmp234 __tmp236))
(let __tmp238 (Get __tmp237 1))
(let __tmp239 (Single __tmp238))
(let __tmp240 (Get __tmp237 3))
(let __tmp241 (Single __tmp240))
(let __tmp242 (Get __tmp237 2))
(let __tmp243 (Single __tmp242))
(let __tmp244 (Get __tmp237 0))
(let __tmp245 (Single __tmp244))
(let __tmp246 (Concat __tmp243 __tmp245))
(let __tmp247 (Concat __tmp241 __tmp246))
(let __tmp248 (Concat __tmp239 __tmp247))
(let __tmp249 (Concat __tmp36 __tmp248))
(let __tmp250 (Call "cg" __tmp249))
(let __tmp251 (Get __tmp249 0))
(let __tmp252 (Single __tmp251))
(let __tmp253 (Get __tmp249 3))
(let __tmp254 (Single __tmp253))
(let __tmp255 (Get __tmp249 1))
(let __tmp256 (Single __tmp255))
(let __tmp257 (Get __tmp249 2))
(let __tmp258 (Single __tmp257))
(let __tmp259 (Get __tmp249 4))
(let __tmp260 (Single __tmp259))
(let __tmp261 (Concat __tmp258 __tmp260))
(let __tmp262 (Concat __tmp252 __tmp261))
(let __tmp263 (Call "vec_copy" __tmp262))
(let __tmp264 (Concat __tmp256 __tmp263))
(let __tmp265 (Concat __tmp252 __tmp264))
(let __tmp266 (Call "mat_vec" __tmp265))
(let __tmp267 (Concat __tmp254 __tmp266))
(let __tmp268 (Concat __tmp252 __tmp267))
(let __tmp269 (Call "vec_sub" __tmp268))
(let __tmp270 (Get __tmp269 0))
(let __tmp271 (Single __tmp270))
(let __tmp272 (Concat __tmp252 __tmp269))
(let __tmp273 (Call "vec_copy" __tmp272))
(let __tmp274 (Get __tmp273 1))
(let __tmp275 (Single __tmp274))
(let __tmp276 (Concat __tmp271 __tmp275))
(let __tmp277 (Concat __tmp271 __tmp276))
(let __tmp278 (Concat __tmp252 __tmp277))
(let __tmp279 (Call "dot_p" __tmp278))
(let __tmp280 (Get __tmp279 1))
(let __tmp281 (Single __tmp280))
(let __tmp282 (Get __tmp263 0))
(let __tmp283 (Single __tmp282))
(let __tmp284 (Get __tmp273 0))
(let __tmp285 (Single __tmp284))
(let __tmp286 (Get __tmp266 0))
(let __tmp287 (Single __tmp286))
(let __tmp288 (Get __tmp279 0))
(let __tmp289 (Single __tmp288))
(let __tmp290 (FDiv ))
(let __tmp291 (Float 100.0))
(let __tmp292 (Const __tmp291 __tmp5 __tmp6))
(let __tmp293 (Bop __tmp290 __tmp34 __tmp292))
(let __tmp294 (Single __tmp293))
(let __tmp295 (Int 1000))
(let __tmp296 (Const __tmp295 __tmp5 __tmp6))
(let __tmp297 (Single __tmp296))
(let __tmp298 (Concat __tmp256 __tmp297))
(let __tmp299 (Concat __tmp294 __tmp298))
(let __tmp300 (Concat __tmp252 __tmp299))
(let __tmp301 (Concat __tmp289 __tmp300))
(let __tmp302 (Concat __tmp32 __tmp301))
(let __tmp303 (Concat __tmp31 __tmp302))
(let __tmp304 (Concat __tmp287 __tmp303))
(let __tmp305 (Concat __tmp271 __tmp304))
(let __tmp306 (Concat __tmp285 __tmp305))
(let __tmp307 (Concat __tmp283 __tmp306))
(let __tmp308 (Concat __tmp281 __tmp307))
(let __tmp309 (TCons __tmp25 __tmp48))
(let __tmp310 (TCons __tmp24 __tmp309))
(let __tmp311 (TCons __tmp0 __tmp310))
(let __tmp312 (TCons __tmp24 __tmp311))
(let __tmp313 (TCons __tmp0 __tmp312))
(let __tmp314 (TCons __tmp0 __tmp313))
(let __tmp315 (TCons __tmp25 __tmp314))
(let __tmp316 (TCons __tmp25 __tmp315))
(let __tmp317 (TCons __tmp25 __tmp316))
(let __tmp318 (TCons __tmp25 __tmp317))
(let __tmp319 (TCons __tmp1 __tmp318))
(let __tmp320 (TupleT __tmp319))
(let __tmp321 (InFunc " loop_ctx_12"))
(let __tmp322 (Arg __tmp320 __tmp321))
(let __tmp323 (Get __tmp322 5))
(let __tmp324 (Get __tmp322 11))
(let __tmp325 (Bop __tmp9 __tmp323 __tmp324))
(let __tmp326 (FLessThan ))
(let __tmp327 (InIf true __tmp325 __tmp322))
(let __tmp328 (Arg __tmp320 __tmp327))
(let __tmp329 (Get __tmp328 8))
(let __tmp330 (Single __tmp329))
(let __tmp331 (Get __tmp328 3))
(let __tmp332 (Single __tmp331))
(let __tmp333 (Get __tmp328 7))
(let __tmp334 (Get __tmp328 2))
(let __tmp335 (Single __tmp334))
(let __tmp336 (Get __tmp328 10))
(let __tmp337 (Single __tmp336))
(let __tmp338 (Get __tmp328 0))
(let __tmp339 (Single __tmp338))
(let __tmp340 (Concat __tmp335 __tmp339))
(let __tmp341 (Concat __tmp337 __tmp340))
(let __tmp342 (Concat __tmp330 __tmp341))
(let __tmp343 (Call "mat_vec" __tmp342))
(let __tmp344 (Concat __tmp335 __tmp343))
(let __tmp345 (Concat __tmp330 __tmp344))
(let __tmp346 (Call "dot_p" __tmp345))
(let __tmp347 (Get __tmp346 0))
(let __tmp348 (Bop __tmp290 __tmp333 __tmp347))
(let __tmp349 (Single __tmp348))
(let __tmp350 (Get __tmp343 0))
(let __tmp351 (Single __tmp350))
(let __tmp352 (Get __tmp346 1))
(let __tmp353 (Single __tmp352))
(let __tmp354 (Concat __tmp335 __tmp353))
(let __tmp355 (Concat __tmp349 __tmp354))
(let __tmp356 (Concat __tmp330 __tmp355))
(let __tmp357 (Call "vec_mul" __tmp356))
(let __tmp358 (Get __tmp357 1))
(let __tmp359 (Single __tmp358))
(let __tmp360 (Concat __tmp351 __tmp359))
(let __tmp361 (Concat __tmp349 __tmp360))
(let __tmp362 (Concat __tmp330 __tmp361))
(let __tmp363 (Call "vec_mul" __tmp362))
(let __tmp364 (Get __tmp363 0))
(let __tmp365 (Single __tmp364))
(let __tmp366 (Get __tmp328 1))
(let __tmp367 (Single __tmp366))
(let __tmp368 (Get __tmp357 0))
(let __tmp369 (Single __tmp368))
(let __tmp370 (Get __tmp363 1))
(let __tmp371 (Single __tmp370))
(let __tmp372 (Concat __tmp369 __tmp371))
(let __tmp373 (Concat __tmp367 __tmp372))
(let __tmp374 (Concat __tmp330 __tmp373))
(let __tmp375 (Call "vec_add_inp" __tmp374))
(let __tmp376 (Get __tmp375 1))
(let __tmp377 (Single __tmp376))
(let __tmp378 (Concat __tmp365 __tmp377))
(let __tmp379 (Concat __tmp332 __tmp378))
(let __tmp380 (Concat __tmp330 __tmp379))
(let __tmp381 (Call "vec_sub_inp" __tmp380))
(let __tmp382 (Get __tmp381 0))
(let __tmp383 (Single __tmp382))
(let __tmp384 (Free ))
(let __tmp385 (Get __tmp381 1))
(let __tmp386 (Bop __tmp384 __tmp350 __tmp385))
(let __tmp387 (Bop __tmp384 __tmp368 __tmp386))
(let __tmp388 (Bop __tmp384 __tmp364 __tmp387))
(let __tmp389 (Single __tmp388))
(let __tmp390 (Concat __tmp383 __tmp389))
(let __tmp391 (Concat __tmp383 __tmp390))
(let __tmp392 (Concat __tmp330 __tmp391))
(let __tmp393 (Call "dot_p" __tmp392))
(let __tmp394 (Get __tmp393 0))
(let __tmp395 (Get __tmp328 9))
(let __tmp396 (Bop __tmp326 __tmp394 __tmp395))
(let __tmp397 (Get __tmp393 1))
(let __tmp398 (Single __tmp397))
(let __tmp399 (Get __tmp375 0))
(let __tmp400 (Single __tmp399))
(let __tmp401 (Get __tmp328 4))
(let __tmp402 (Single __tmp401))
(let __tmp403 (Get __tmp328 5))
(let __tmp404 (Single __tmp403))
(let __tmp405 (Get __tmp328 6))
(let __tmp406 (Single __tmp405))
(let __tmp407 (Single __tmp333))
(let __tmp408 (Single __tmp394))
(let __tmp409 (Single __tmp395))
(let __tmp410 (Get __tmp328 11))
(let __tmp411 (Single __tmp410))
(let __tmp412 (Concat __tmp337 __tmp411))
(let __tmp413 (Concat __tmp409 __tmp412))
(let __tmp414 (Concat __tmp330 __tmp413))
(let __tmp415 (Concat __tmp408 __tmp414))
(let __tmp416 (Concat __tmp407 __tmp415))
(let __tmp417 (Concat __tmp406 __tmp416))
(let __tmp418 (Concat __tmp404 __tmp417))
(let __tmp419 (Concat __tmp402 __tmp418))
(let __tmp420 (Concat __tmp383 __tmp419))
(let __tmp421 (Concat __tmp335 __tmp420))
(let __tmp422 (Concat __tmp400 __tmp421))
(let __tmp423 (Concat __tmp398 __tmp422))
(let __tmp424 (TCons __tmp24 __tmp312))
(let __tmp425 (TCons __tmp0 __tmp424))
(let __tmp426 (TCons __tmp0 __tmp425))
(let __tmp427 (TCons __tmp25 __tmp426))
(let __tmp428 (TCons __tmp25 __tmp427))
(let __tmp429 (TCons __tmp25 __tmp428))
(let __tmp430 (TCons __tmp25 __tmp429))
(let __tmp431 (TCons __tmp1 __tmp430))
(let __tmp432 (TupleT __tmp431))
(let __tmp433 (InIf true __tmp396 __tmp423))
(let __tmp434 (Arg __tmp432 __tmp433))
(let __tmp435 (Get __tmp434 0))
(let __tmp436 (Single __tmp435))
(let __tmp437 (Get __tmp434 1))
(let __tmp438 (Single __tmp437))
(let __tmp439 (Get __tmp434 2))
(let __tmp440 (Single __tmp439))
(let __tmp441 (Get __tmp434 3))
(let __tmp442 (Single __tmp441))
(let __tmp443 (Get __tmp434 4))
(let __tmp444 (Single __tmp443))
(let __tmp445 (Bool false))
(let __tmp446 (Const __tmp445 __tmp432 __tmp433))
(let __tmp447 (Single __tmp446))
(let __tmp448 (Get __tmp434 5))
(let __tmp449 (Single __tmp448))
(let __tmp450 (Get __tmp434 6))
(let __tmp451 (Single __tmp450))
(let __tmp452 (Get __tmp434 7))
(let __tmp453 (Single __tmp452))
(let __tmp454 (Get __tmp434 9))
(let __tmp455 (Single __tmp454))
(let __tmp456 (Get __tmp434 10))
(let __tmp457 (Single __tmp456))
(let __tmp458 (Get __tmp434 11))
(let __tmp459 (Single __tmp458))
(let __tmp460 (Get __tmp434 12))
(let __tmp461 (Single __tmp460))
(let __tmp462 (Concat __tmp459 __tmp461))
(let __tmp463 (Concat __tmp457 __tmp462))
(let __tmp464 (Concat __tmp455 __tmp463))
(let __tmp465 (Concat __tmp453 __tmp464))
(let __tmp466 (Concat __tmp451 __tmp465))
(let __tmp467 (Concat __tmp449 __tmp466))
(let __tmp468 (Concat __tmp447 __tmp467))
(let __tmp469 (Concat __tmp444 __tmp468))
(let __tmp470 (Concat __tmp442 __tmp469))
(let __tmp471 (Concat __tmp440 __tmp470))
(let __tmp472 (Concat __tmp438 __tmp471))
(let __tmp473 (Concat __tmp436 __tmp472))
(let __tmp474 (InIf false __tmp396 __tmp423))
(let __tmp475 (Arg __tmp432 __tmp474))
(let __tmp476 (Get __tmp475 9))
(let __tmp477 (Single __tmp476))
(let __tmp478 (Get __tmp475 8))
(let __tmp479 (Get __tmp475 7))
(let __tmp480 (Bop __tmp290 __tmp478 __tmp479))
(let __tmp481 (Single __tmp480))
(let __tmp482 (Get __tmp475 2))
(let __tmp483 (Single __tmp482))
(let __tmp484 (Get __tmp475 0))
(let __tmp485 (Single __tmp484))
(let __tmp486 (Concat __tmp483 __tmp485))
(let __tmp487 (Concat __tmp481 __tmp486))
(let __tmp488 (Concat __tmp477 __tmp487))
(let __tmp489 (Call "vec_mul" __tmp488))
(let __tmp490 (Get __tmp489 0))
(let __tmp491 (Get __tmp475 3))
(let __tmp492 (Single __tmp491))
(let __tmp493 (Single __tmp490))
(let __tmp494 (Get __tmp489 1))
(let __tmp495 (Bop __tmp384 __tmp482 __tmp494))
(let __tmp496 (Single __tmp495))
(let __tmp497 (Concat __tmp493 __tmp496))
(let __tmp498 (Concat __tmp492 __tmp497))
(let __tmp499 (Concat __tmp477 __tmp498))
(let __tmp500 (Call "vec_add" __tmp499))
(let __tmp501 (Get __tmp500 1))
(let __tmp502 (Bop __tmp384 __tmp490 __tmp501))
(let __tmp503 (Single __tmp502))
(let __tmp504 (Get __tmp475 1))
(let __tmp505 (Single __tmp504))
(let __tmp506 (Get __tmp500 0))
(let __tmp507 (Single __tmp506))
(let __tmp508 (Get __tmp475 4))
(let __tmp509 (Single __tmp508))
(let __tmp510 (Bool true))
(let __tmp511 (Const __tmp510 __tmp432 __tmp474))
(let __tmp512 (Single __tmp511))
(let __tmp513 (Get __tmp475 6))
(let __tmp514 (Get __tmp475 5))
(let __tmp515 (Bop __tmp59 __tmp513 __tmp514))
(let __tmp516 (Single __tmp515))
(let __tmp517 (Single __tmp513))
(let __tmp518 (Single __tmp478))
(let __tmp519 (Get __tmp475 10))
(let __tmp520 (Single __tmp519))
(let __tmp521 (Get __tmp475 11))
(let __tmp522 (Single __tmp521))
(let __tmp523 (Get __tmp475 12))
(let __tmp524 (Single __tmp523))
(let __tmp525 (Concat __tmp522 __tmp524))
(let __tmp526 (Concat __tmp520 __tmp525))
(let __tmp527 (Concat __tmp477 __tmp526))
(let __tmp528 (Concat __tmp518 __tmp527))
(let __tmp529 (Concat __tmp517 __tmp528))
(let __tmp530 (Concat __tmp516 __tmp529))
(let __tmp531 (Concat __tmp512 __tmp530))
(let __tmp532 (Concat __tmp509 __tmp531))
(let __tmp533 (Concat __tmp492 __tmp532))
(let __tmp534 (Concat __tmp507 __tmp533))
(let __tmp535 (Concat __tmp505 __tmp534))
(let __tmp536 (Concat __tmp503 __tmp535))
(let __tmp537 (If __tmp396 __tmp423 __tmp473 __tmp536))
(let __tmp538 (InIf false __tmp325 __tmp322))
(let __tmp539 (Arg __tmp320 __tmp538))
(let __tmp540 (Get __tmp539 0))
(let __tmp541 (Single __tmp540))
(let __tmp542 (Get __tmp539 1))
(let __tmp543 (Single __tmp542))
(let __tmp544 (Get __tmp539 2))
(let __tmp545 (Single __tmp544))
(let __tmp546 (Get __tmp539 3))
(let __tmp547 (Single __tmp546))
(let __tmp548 (Get __tmp539 4))
(let __tmp549 (Single __tmp548))
(let __tmp550 (Const __tmp445 __tmp320 __tmp538))
(let __tmp551 (Single __tmp550))
(let __tmp552 (Get __tmp539 5))
(let __tmp553 (Single __tmp552))
(let __tmp554 (Get __tmp539 6))
(let __tmp555 (Single __tmp554))
(let __tmp556 (Get __tmp539 7))
(let __tmp557 (Single __tmp556))
(let __tmp558 (Get __tmp539 8))
(let __tmp559 (Single __tmp558))
(let __tmp560 (Get __tmp539 9))
(let __tmp561 (Single __tmp560))
(let __tmp562 (Get __tmp539 10))
(let __tmp563 (Single __tmp562))
(let __tmp564 (Get __tmp539 11))
(let __tmp565 (Single __tmp564))
(let __tmp566 (Concat __tmp563 __tmp565))
(let __tmp567 (Concat __tmp561 __tmp566))
(let __tmp568 (Concat __tmp559 __tmp567))
(let __tmp569 (Concat __tmp557 __tmp568))
(let __tmp570 (Concat __tmp555 __tmp569))
(let __tmp571 (Concat __tmp553 __tmp570))
(let __tmp572 (Concat __tmp551 __tmp571))
(let __tmp573 (Concat __tmp549 __tmp572))
(let __tmp574 (Concat __tmp547 __tmp573))
(let __tmp575 (Concat __tmp545 __tmp574))
(let __tmp576 (Concat __tmp543 __tmp575))
(let __tmp577 (Concat __tmp541 __tmp576))
(let __tmp578 (If __tmp325 __tmp322 __tmp537 __tmp577))
(let __tmp579 (Get __tmp578 5))
(let __tmp580 (Single __tmp579))
(let __tmp581 (Get __tmp578 0))
(let __tmp582 (Single __tmp581))
(let __tmp583 (Get __tmp578 1))
(let __tmp584 (Single __tmp583))
(let __tmp585 (Get __tmp578 2))
(let __tmp586 (Single __tmp585))
(let __tmp587 (Get __tmp578 3))
(let __tmp588 (Single __tmp587))
(let __tmp589 (Get __tmp322 4))
(let __tmp590 (Single __tmp589))
(let __tmp591 (Get __tmp578 6))
(let __tmp592 (Single __tmp591))
(let __tmp593 (Get __tmp322 6))
(let __tmp594 (Single __tmp593))
(let __tmp595 (Get __tmp578 8))
(let __tmp596 (Single __tmp595))
(let __tmp597 (Get __tmp322 8))
(let __tmp598 (Single __tmp597))
(let __tmp599 (Get __tmp322 9))
(let __tmp600 (Single __tmp599))
(let __tmp601 (Get __tmp322 10))
(let __tmp602 (Single __tmp601))
(let __tmp603 (Single __tmp324))
(let __tmp604 (Concat __tmp602 __tmp603))
(let __tmp605 (Concat __tmp600 __tmp604))
(let __tmp606 (Concat __tmp598 __tmp605))
(let __tmp607 (Concat __tmp596 __tmp606))
(let __tmp608 (Concat __tmp594 __tmp607))
(let __tmp609 (Concat __tmp592 __tmp608))
(let __tmp610 (Concat __tmp590 __tmp609))
(let __tmp611 (Concat __tmp588 __tmp610))
(let __tmp612 (Concat __tmp586 __tmp611))
(let __tmp613 (Concat __tmp584 __tmp612))
(let __tmp614 (Concat __tmp582 __tmp613))
(let __tmp615 (Concat __tmp580 __tmp614))
(let __tmp616 (DoWhile __tmp308 __tmp615))
(let __tmp617 (Get __tmp616 1))
(let __tmp618 (Single __tmp617))
(let __tmp619 (Get __tmp616 2))
(let __tmp620 (Get __tmp616 3))
(let __tmp621 (Get __tmp616 4))
(let __tmp622 (Get __tmp616 0))
(let __tmp623 (Bop __tmp384 __tmp621 __tmp622))
(let __tmp624 (Bop __tmp384 __tmp620 __tmp623))
(let __tmp625 (Bop __tmp384 __tmp619 __tmp624))
(let __tmp626 (Single __tmp625))
(let __tmp627 (Concat __tmp618 __tmp626))
(let __tmp628 (Concat __tmp36 __tmp250))
(let __tmp629 (Call "disp_vec" __tmp628))
(let __tmp630 (Get __tmp628 0))
(let __tmp631 (Bop __tmp9 __tmp19 __tmp630))
(let __tmp632 (Get __tmp628 2))
(let __tmp633 (Single __tmp632))
(let __tmp634 (Get __tmp628 1))
(let __tmp635 (Single __tmp634))
(let __tmp636 (Single __tmp630))
(let __tmp637 (Concat __tmp635 __tmp636))
(let __tmp638 (Concat __tmp32 __tmp637))
(let __tmp639 (Concat __tmp31 __tmp638))
(let __tmp640 (Concat __tmp39 __tmp639))
(let __tmp641 (Concat __tmp633 __tmp640))
(let __tmp642 (TCons __tmp0 __tmp309))
(let __tmp643 (TCons __tmp0 __tmp642))
(let __tmp644 (TCons __tmp24 __tmp643))
(let __tmp645 (TCons __tmp1 __tmp644))
(let __tmp646 (TupleT __tmp645))
(let __tmp647 (InIf true __tmp631 __tmp641))
(let __tmp648 (Arg __tmp646 __tmp647))
(let __tmp649 (InFunc " loop_ctx_13"))
(let __tmp650 (Arg __tmp646 __tmp649))
(let __tmp651 (Get __tmp650 3))
(let __tmp652 (Get __tmp650 2))
(let __tmp653 (Bop __tmp59 __tmp651 __tmp652))
(let __tmp654 (Get __tmp650 5))
(let __tmp655 (Bop __tmp9 __tmp653 __tmp654))
(let __tmp656 (Single __tmp655))
(let __tmp657 (Load ))
(let __tmp658 (Get __tmp650 4))
(let __tmp659 (Bop __tmp69 __tmp658 __tmp652))
(let __tmp660 (Get __tmp650 0))
(let __tmp661 (Bop __tmp657 __tmp659 __tmp660))
(let __tmp662 (Get __tmp661 1))
(let __tmp663 (Single __tmp662))
(let __tmp664 (Get __tmp650 1))
(let __tmp665 (Get __tmp661 0))
(let __tmp666 (Bop __tmp143 __tmp664 __tmp665))
(let __tmp667 (Single __tmp666))
(let __tmp668 (Concat __tmp663 __tmp667))
(let __tmp669 (Single __tmp653))
(let __tmp670 (Single __tmp651))
(let __tmp671 (Concat __tmp669 __tmp670))
(let __tmp672 (Single __tmp658))
(let __tmp673 (Concat __tmp671 __tmp672))
(let __tmp674 (Single __tmp654))
(let __tmp675 (Concat __tmp673 __tmp674))
(let __tmp676 (Concat __tmp668 __tmp675))
(let __tmp677 (Concat __tmp656 __tmp676))
(let __tmp678 (DoWhile __tmp648 __tmp677))
(let __tmp679 (InIf false __tmp631 __tmp641))
(let __tmp680 (Arg __tmp646 __tmp679))
(let __tmp681 (If __tmp631 __tmp641 __tmp678 __tmp680))
(let __tmp682 (Get __tmp681 1))
(let __tmp683 (Single __tmp682))
(let __tmp684 (Get __tmp681 0))
(let __tmp685 (Single __tmp684))
(let __tmp686 (Concat __tmp683 __tmp685))
(let __tmp687 (Get __tmp262 0))
(let __tmp688 (Single __tmp687))
(let __tmp689 (Get __tmp262 1))
(let __tmp690 (Single __tmp689))
(let __tmp691 (Get __tmp262 2))
(let __tmp692 (Single __tmp691))
(let __tmp693 (Concat __tmp690 __tmp692))
(let __tmp694 (Concat __tmp35 __tmp693))
(let __tmp695 (Concat __tmp688 __tmp694))
(let __tmp696 (Call "vec_mul" __tmp695))
(let __tmp697 (Get __tmp265 0))
(let __tmp698 (Get __tmp265 3))
(let __tmp699 (Alloc 0 __tmp697 __tmp698 __tmp25))
(let __tmp700 (Get __tmp699 1))
(let __tmp701 (Single __tmp700))
(let __tmp702 (Get __tmp699 0))
(let __tmp703 (Single __tmp702))
(let __tmp704 (Get __tmp265 2))
(let __tmp705 (Single __tmp704))
(let __tmp706 (Get __tmp265 1))
(let __tmp707 (Single __tmp706))
(let __tmp708 (Single __tmp697))
(let __tmp709 (Concat __tmp707 __tmp708))
(let __tmp710 (Concat __tmp705 __tmp709))
(let __tmp711 (Concat __tmp32 __tmp710))
(let __tmp712 (Concat __tmp31 __tmp711))
(let __tmp713 (Concat __tmp703 __tmp712))
(let __tmp714 (Concat __tmp701 __tmp713))
(let __tmp715 (TCons __tmp25 __tmp309))
(let __tmp716 (TCons __tmp0 __tmp715))
(let __tmp717 (TCons __tmp0 __tmp716))
(let __tmp718 (TCons __tmp25 __tmp717))
(let __tmp719 (TCons __tmp1 __tmp718))
(let __tmp720 (TupleT __tmp719))
(let __tmp721 (InFunc " loop_ctx_14"))
(let __tmp722 (Arg __tmp720 __tmp721))
(let __tmp723 (Get __tmp722 2))
(let __tmp724 (Get __tmp722 6))
(let __tmp725 (Bop __tmp9 __tmp723 __tmp724))
(let __tmp726 (Single __tmp725))
(let __tmp727 (InIf true __tmp725 __tmp722))
(let __tmp728 (Const __tmp18 __tmp720 __tmp727))
(let __tmp729 (Arg __tmp720 __tmp727))
(let __tmp730 (Get __tmp729 6))
(let __tmp731 (Bop __tmp9 __tmp728 __tmp730))
(let __tmp732 (Get __tmp729 0))
(let __tmp733 (Single __tmp732))
(let __tmp734 (Get __tmp729 1))
(let __tmp735 (Single __tmp734))
(let __tmp736 (Get __tmp729 2))
(let __tmp737 (Single __tmp736))
(let __tmp738 (Get __tmp729 3))
(let __tmp739 (Single __tmp738))
(let __tmp740 (Const __tmp37 __tmp720 __tmp727))
(let __tmp741 (Single __tmp740))
(let __tmp742 (Single __tmp728))
(let __tmp743 (Get __tmp729 4))
(let __tmp744 (Single __tmp743))
(let __tmp745 (Get __tmp729 5))
(let __tmp746 (Single __tmp745))
(let __tmp747 (Single __tmp730))
(let __tmp748 (Concat __tmp746 __tmp747))
(let __tmp749 (Concat __tmp744 __tmp748))
(let __tmp750 (Concat __tmp742 __tmp749))
(let __tmp751 (Concat __tmp741 __tmp750))
(let __tmp752 (Concat __tmp739 __tmp751))
(let __tmp753 (Concat __tmp737 __tmp752))
(let __tmp754 (Concat __tmp735 __tmp753))
(let __tmp755 (Concat __tmp733 __tmp754))
(let __tmp756 (TCons __tmp24 __tmp716))
(let __tmp757 (TCons __tmp0 __tmp756))
(let __tmp758 (TCons __tmp0 __tmp757))
(let __tmp759 (TCons __tmp25 __tmp758))
(let __tmp760 (TCons __tmp1 __tmp759))
(let __tmp761 (TupleT __tmp760))
(let __tmp762 (InIf true __tmp731 __tmp755))
(let __tmp763 (Arg __tmp761 __tmp762))
(let __tmp764 (InFunc " loop_ctx_15"))
(let __tmp765 (Arg __tmp761 __tmp764))
(let __tmp766 (Get __tmp765 3))
(let __tmp767 (Get __tmp765 5))
(let __tmp768 (Bop __tmp59 __tmp766 __tmp767))
(let __tmp769 (Get __tmp765 8))
(let __tmp770 (Bop __tmp9 __tmp768 __tmp769))
(let __tmp771 (Single __tmp770))
(let __tmp772 (Get __tmp765 6))
(let __tmp773 (Bop __tmp69 __tmp772 __tmp767))
(let __tmp774 (Get __tmp765 7))
(let __tmp775 (Get __tmp765 2))
(let __tmp776 (Bop __tmp20 __tmp769 __tmp775))
(let __tmp777 (Bop __tmp59 __tmp776 __tmp767))
(let __tmp778 (Bop __tmp69 __tmp774 __tmp777))
(let __tmp779 (Get __tmp765 0))
(let __tmp780 (Bop __tmp657 __tmp778 __tmp779))
(let __tmp781 (Get __tmp780 1))
(let __tmp782 (Bop __tmp657 __tmp773 __tmp781))
(let __tmp783 (Get __tmp782 1))
(let __tmp784 (Single __tmp783))
(let __tmp785 (Get __tmp765 1))
(let __tmp786 (Single __tmp785))
(let __tmp787 (Single __tmp775))
(let __tmp788 (Concat __tmp786 __tmp787))
(let __tmp789 (Concat __tmp784 __tmp788))
(let __tmp790 (Single __tmp766))
(let __tmp791 (Concat __tmp789 __tmp790))
(let __tmp792 (FMul ))
(let __tmp793 (Get __tmp780 0))
(let __tmp794 (Get __tmp782 0))
(let __tmp795 (Bop __tmp792 __tmp793 __tmp794))
(let __tmp796 (Get __tmp765 4))
(let __tmp797 (Bop __tmp143 __tmp795 __tmp796))
(let __tmp798 (Single __tmp797))
(let __tmp799 (Single __tmp768))
(let __tmp800 (Single __tmp772))
(let __tmp801 (Concat __tmp799 __tmp800))
(let __tmp802 (Single __tmp774))
(let __tmp803 (Concat __tmp801 __tmp802))
(let __tmp804 (Single __tmp769))
(let __tmp805 (Concat __tmp803 __tmp804))
(let __tmp806 (Concat __tmp798 __tmp805))
(let __tmp807 (Concat __tmp791 __tmp806))
(let __tmp808 (Concat __tmp771 __tmp807))
(let __tmp809 (DoWhile __tmp763 __tmp808))
(let __tmp810 (InIf false __tmp731 __tmp755))
(let __tmp811 (Arg __tmp761 __tmp810))
(let __tmp812 (If __tmp731 __tmp755 __tmp809 __tmp811))
(let __tmp813 (Get __tmp812 1))
(let __tmp814 (Bop __tmp69 __tmp813 __tmp736))
(let __tmp815 (Get __tmp812 4))
(let __tmp816 (Get __tmp812 0))
(let __tmp817 (Top __tmp68 __tmp814 __tmp815 __tmp816))
(let __tmp818 (Single __tmp817))
(let __tmp819 (Single __tmp813))
(let __tmp820 (Concat __tmp818 __tmp819))
(let __tmp821 (Bop __tmp59 __tmp738 __tmp736))
(let __tmp822 (Single __tmp821))
(let __tmp823 (Get __tmp812 6))
(let __tmp824 (Single __tmp823))
(let __tmp825 (Get __tmp812 7))
(let __tmp826 (Single __tmp825))
(let __tmp827 (Concat __tmp826 __tmp747))
(let __tmp828 (Concat __tmp824 __tmp827))
(let __tmp829 (Concat __tmp739 __tmp828))
(let __tmp830 (Concat __tmp822 __tmp829))
(let __tmp831 (Concat __tmp820 __tmp830))
(let __tmp832 (InIf false __tmp725 __tmp722))
(let __tmp833 (Arg __tmp720 __tmp832))
(let __tmp834 (If __tmp725 __tmp722 __tmp831 __tmp833))
(let __tmp835 (Concat __tmp726 __tmp834))
(let __tmp836 (DoWhile __tmp714 __tmp835))
(let __tmp837 (Get __tmp836 1))
(let __tmp838 (Single __tmp837))
(let __tmp839 (Get __tmp836 0))
(let __tmp840 (Single __tmp839))
(let __tmp841 (Concat __tmp838 __tmp840))
(let __tmp842 (Get __tmp268 0))
(let __tmp843 (Single __tmp842))
(let __tmp844 (Get __tmp268 1))
(let __tmp845 (Single __tmp844))
(let __tmp846 (Float -1.0))
(let __tmp847 (Const __tmp846 __tmp5 __tmp6))
(let __tmp848 (Single __tmp847))
(let __tmp849 (Get __tmp268 2))
(let __tmp850 (Single __tmp849))
(let __tmp851 (Get __tmp268 3))
(let __tmp852 (Single __tmp851))
(let __tmp853 (Concat __tmp850 __tmp852))
(let __tmp854 (Concat __tmp848 __tmp853))
(let __tmp855 (Concat __tmp843 __tmp854))
(let __tmp856 (Call "vec_mul" __tmp855))
(let __tmp857 (Concat __tmp845 __tmp856))
(let __tmp858 (Concat __tmp843 __tmp857))
(let __tmp859 (Call "vec_add" __tmp858))
(let __tmp860 (Get __tmp859 0))
(let __tmp861 (Single __tmp860))
(let __tmp862 (Get __tmp856 0))
(let __tmp863 (Get __tmp859 1))
(let __tmp864 (Bop __tmp384 __tmp862 __tmp863))
(let __tmp865 (Single __tmp864))
(let __tmp866 (Concat __tmp861 __tmp865))
(let __tmp867 (Get __tmp272 0))
(let __tmp868 (Single __tmp867))
(let __tmp869 (Get __tmp272 1))
(let __tmp870 (Single __tmp869))
(let __tmp871 (Get __tmp272 2))
(let __tmp872 (Single __tmp871))
(let __tmp873 (Concat __tmp870 __tmp872))
(let __tmp874 (Concat __tmp35 __tmp873))
(let __tmp875 (Concat __tmp868 __tmp874))
(let __tmp876 (Call "vec_mul" __tmp875))
(let __tmp877 (Get __tmp278 0))
(let __tmp878 (Bop __tmp9 __tmp19 __tmp877))
(let __tmp879 (Get __tmp278 3))
(let __tmp880 (Single __tmp879))
(let __tmp881 (Get __tmp278 2))
(let __tmp882 (Single __tmp881))
(let __tmp883 (Get __tmp278 1))
(let __tmp884 (Single __tmp883))
(let __tmp885 (Single __tmp877))
(let __tmp886 (Concat __tmp884 __tmp885))
(let __tmp887 (Concat __tmp882 __tmp886))
(let __tmp888 (Concat __tmp32 __tmp887))
(let __tmp889 (Concat __tmp31 __tmp888))
(let __tmp890 (Concat __tmp39 __tmp889))
(let __tmp891 (Concat __tmp880 __tmp890))
(let __tmp892 (TCons __tmp24 __tmp717))
(let __tmp893 (TCons __tmp1 __tmp892))
(let __tmp894 (TupleT __tmp893))
(let __tmp895 (InIf true __tmp878 __tmp891))
(let __tmp896 (Arg __tmp894 __tmp895))
(let __tmp897 (InFunc " loop_ctx_16"))
(let __tmp898 (Arg __tmp894 __tmp897))
(let __tmp899 (Get __tmp898 3))
(let __tmp900 (Get __tmp898 2))
(let __tmp901 (Bop __tmp59 __tmp899 __tmp900))
(let __tmp902 (Get __tmp898 6))
(let __tmp903 (Bop __tmp9 __tmp901 __tmp902))
(let __tmp904 (Single __tmp903))
(let __tmp905 (Get __tmp898 4))
(let __tmp906 (Bop __tmp69 __tmp905 __tmp900))
(let __tmp907 (Get __tmp898 5))
(let __tmp908 (Bop __tmp69 __tmp907 __tmp900))
(let __tmp909 (Get __tmp898 0))
(let __tmp910 (Bop __tmp657 __tmp908 __tmp909))
(let __tmp911 (Get __tmp910 1))
(let __tmp912 (Bop __tmp657 __tmp906 __tmp911))
(let __tmp913 (Get __tmp912 1))
(let __tmp914 (Single __tmp913))
(let __tmp915 (Get __tmp910 0))
(let __tmp916 (Get __tmp912 0))
(let __tmp917 (Bop __tmp792 __tmp915 __tmp916))
(let __tmp918 (Get __tmp898 1))
(let __tmp919 (Bop __tmp143 __tmp917 __tmp918))
(let __tmp920 (Single __tmp919))
(let __tmp921 (Single __tmp901))
(let __tmp922 (Single __tmp899))
(let __tmp923 (Concat __tmp921 __tmp922))
(let __tmp924 (Single __tmp905))
(let __tmp925 (Concat __tmp923 __tmp924))
(let __tmp926 (Single __tmp907))
(let __tmp927 (Concat __tmp925 __tmp926))
(let __tmp928 (Single __tmp902))
(let __tmp929 (Concat __tmp927 __tmp928))
(let __tmp930 (Concat __tmp920 __tmp929))
(let __tmp931 (Concat __tmp914 __tmp930))
(let __tmp932 (Concat __tmp904 __tmp931))
(let __tmp933 (DoWhile __tmp896 __tmp932))
(let __tmp934 (InIf false __tmp878 __tmp891))
(let __tmp935 (Arg __tmp894 __tmp934))
(let __tmp936 (If __tmp878 __tmp891 __tmp933 __tmp935))
(let __tmp937 (Get __tmp936 1))
(let __tmp938 (Single __tmp937))
(let __tmp939 (Get __tmp936 0))
(let __tmp940 (Single __tmp939))
(let __tmp941 (Concat __tmp938 __tmp940))
(let __tmp942 (Get __tmp342 0))
(let __tmp943 (Get __tmp342 3))
(let __tmp944 (Alloc 0 __tmp942 __tmp943 __tmp25))
(let __tmp945 (Get __tmp944 1))
(let __tmp946 (Single __tmp945))
(let __tmp947 (Get __tmp944 0))
(let __tmp948 (Single __tmp947))
(let __tmp949 (Const __tmp18 __tmp320 __tmp327))
(let __tmp950 (Single __tmp949))
(let __tmp951 (Const __tmp14 __tmp320 __tmp327))
(let __tmp952 (Single __tmp951))
(let __tmp953 (Get __tmp342 2))
(let __tmp954 (Single __tmp953))
(let __tmp955 (Get __tmp342 1))
(let __tmp956 (Single __tmp955))
(let __tmp957 (Single __tmp942))
(let __tmp958 (Concat __tmp956 __tmp957))
(let __tmp959 (Concat __tmp954 __tmp958))
(let __tmp960 (Concat __tmp952 __tmp959))
(let __tmp961 (Concat __tmp950 __tmp960))
(let __tmp962 (Concat __tmp948 __tmp961))
(let __tmp963 (Concat __tmp946 __tmp962))
(let __tmp964 (InFunc " loop_ctx_17"))
(let __tmp965 (Arg __tmp720 __tmp964))
(let __tmp966 (Get __tmp965 2))
(let __tmp967 (Get __tmp965 6))
(let __tmp968 (Bop __tmp9 __tmp966 __tmp967))
(let __tmp969 (Single __tmp968))
(let __tmp970 (InIf true __tmp968 __tmp965))
(let __tmp971 (Const __tmp18 __tmp720 __tmp970))
(let __tmp972 (Arg __tmp720 __tmp970))
(let __tmp973 (Get __tmp972 6))
(let __tmp974 (Bop __tmp9 __tmp971 __tmp973))
(let __tmp975 (Get __tmp972 0))
(let __tmp976 (Single __tmp975))
(let __tmp977 (Get __tmp972 1))
(let __tmp978 (Single __tmp977))
(let __tmp979 (Get __tmp972 2))
(let __tmp980 (Single __tmp979))
(let __tmp981 (Get __tmp972 3))
(let __tmp982 (Single __tmp981))
(let __tmp983 (Const __tmp37 __tmp720 __tmp970))
(let __tmp984 (Single __tmp983))
(let __tmp985 (Single __tmp971))
(let __tmp986 (Get __tmp972 4))
(let __tmp987 (Single __tmp986))
(let __tmp988 (Get __tmp972 5))
(let __tmp989 (Single __tmp988))
(let __tmp990 (Single __tmp973))
(let __tmp991 (Concat __tmp989 __tmp990))
(let __tmp992 (Concat __tmp987 __tmp991))
(let __tmp993 (Concat __tmp985 __tmp992))
(let __tmp994 (Concat __tmp984 __tmp993))
(let __tmp995 (Concat __tmp982 __tmp994))
(let __tmp996 (Concat __tmp980 __tmp995))
(let __tmp997 (Concat __tmp978 __tmp996))
(let __tmp998 (Concat __tmp976 __tmp997))
(let __tmp999 (InIf true __tmp974 __tmp998))
(let __tmp1000 (Arg __tmp761 __tmp999))
(let __tmp1001 (InFunc " loop_ctx_18"))
(let __tmp1002 (Arg __tmp761 __tmp1001))
(let __tmp1003 (Get __tmp1002 3))
(let __tmp1004 (Get __tmp1002 5))
(let __tmp1005 (Bop __tmp59 __tmp1003 __tmp1004))
(let __tmp1006 (Get __tmp1002 8))
(let __tmp1007 (Bop __tmp9 __tmp1005 __tmp1006))
(let __tmp1008 (Single __tmp1007))
(let __tmp1009 (Get __tmp1002 6))
(let __tmp1010 (Bop __tmp69 __tmp1009 __tmp1004))
(let __tmp1011 (Get __tmp1002 7))
(let __tmp1012 (Get __tmp1002 2))
(let __tmp1013 (Bop __tmp20 __tmp1006 __tmp1012))
(let __tmp1014 (Bop __tmp59 __tmp1013 __tmp1004))
(let __tmp1015 (Bop __tmp69 __tmp1011 __tmp1014))
(let __tmp1016 (Get __tmp1002 0))
(let __tmp1017 (Bop __tmp657 __tmp1015 __tmp1016))
(let __tmp1018 (Get __tmp1017 1))
(let __tmp1019 (Bop __tmp657 __tmp1010 __tmp1018))
(let __tmp1020 (Get __tmp1019 1))
(let __tmp1021 (Single __tmp1020))
(let __tmp1022 (Get __tmp1002 1))
(let __tmp1023 (Single __tmp1022))
(let __tmp1024 (Single __tmp1012))
(let __tmp1025 (Concat __tmp1023 __tmp1024))
(let __tmp1026 (Concat __tmp1021 __tmp1025))
(let __tmp1027 (Single __tmp1003))
(let __tmp1028 (Concat __tmp1026 __tmp1027))
(let __tmp1029 (Get __tmp1017 0))
(let __tmp1030 (Get __tmp1019 0))
(let __tmp1031 (Bop __tmp792 __tmp1029 __tmp1030))
(let __tmp1032 (Get __tmp1002 4))
(let __tmp1033 (Bop __tmp143 __tmp1031 __tmp1032))
(let __tmp1034 (Single __tmp1033))
(let __tmp1035 (Single __tmp1005))
(let __tmp1036 (Single __tmp1009))
(let __tmp1037 (Concat __tmp1035 __tmp1036))
(let __tmp1038 (Single __tmp1011))
(let __tmp1039 (Concat __tmp1037 __tmp1038))
(let __tmp1040 (Single __tmp1006))
(let __tmp1041 (Concat __tmp1039 __tmp1040))
(let __tmp1042 (Concat __tmp1034 __tmp1041))
(let __tmp1043 (Concat __tmp1028 __tmp1042))
(let __tmp1044 (Concat __tmp1008 __tmp1043))
(let __tmp1045 (DoWhile __tmp1000 __tmp1044))
(let __tmp1046 (InIf false __tmp974 __tmp998))
(let __tmp1047 (Arg __tmp761 __tmp1046))
(let __tmp1048 (If __tmp974 __tmp998 __tmp1045 __tmp1047))
(let __tmp1049 (Get __tmp1048 1))
(let __tmp1050 (Bop __tmp69 __tmp1049 __tmp979))
(let __tmp1051 (Get __tmp1048 4))
(let __tmp1052 (Get __tmp1048 0))
(let __tmp1053 (Top __tmp68 __tmp1050 __tmp1051 __tmp1052))
(let __tmp1054 (Single __tmp1053))
(let __tmp1055 (Single __tmp1049))
(let __tmp1056 (Concat __tmp1054 __tmp1055))
(let __tmp1057 (Bop __tmp59 __tmp981 __tmp979))
(let __tmp1058 (Single __tmp1057))
(let __tmp1059 (Get __tmp1048 6))
(let __tmp1060 (Single __tmp1059))
(let __tmp1061 (Get __tmp1048 7))
(let __tmp1062 (Single __tmp1061))
(let __tmp1063 (Concat __tmp1062 __tmp990))
(let __tmp1064 (Concat __tmp1060 __tmp1063))
(let __tmp1065 (Concat __tmp982 __tmp1064))
(let __tmp1066 (Concat __tmp1058 __tmp1065))
(let __tmp1067 (Concat __tmp1056 __tmp1066))
(let __tmp1068 (InIf false __tmp968 __tmp965))
(let __tmp1069 (Arg __tmp720 __tmp1068))
(let __tmp1070 (If __tmp968 __tmp965 __tmp1067 __tmp1069))
(let __tmp1071 (Concat __tmp969 __tmp1070))
(let __tmp1072 (DoWhile __tmp963 __tmp1071))
(let __tmp1073 (Get __tmp1072 1))
(let __tmp1074 (Single __tmp1073))
(let __tmp1075 (Get __tmp1072 0))
(let __tmp1076 (Single __tmp1075))
(let __tmp1077 (Concat __tmp1074 __tmp1076))
(let __tmp1078 (Get __tmp345 0))
(let __tmp1079 (Bop __tmp9 __tmp949 __tmp1078))
(let __tmp1080 (Get __tmp345 3))
(let __tmp1081 (Single __tmp1080))
(let __tmp1082 (Const __tmp37 __tmp320 __tmp327))
(let __tmp1083 (Single __tmp1082))
(let __tmp1084 (Get __tmp345 2))
(let __tmp1085 (Single __tmp1084))
(let __tmp1086 (Get __tmp345 1))
(let __tmp1087 (Single __tmp1086))
(let __tmp1088 (Single __tmp1078))
(let __tmp1089 (Concat __tmp1087 __tmp1088))
(let __tmp1090 (Concat __tmp1085 __tmp1089))
(let __tmp1091 (Concat __tmp952 __tmp1090))
(let __tmp1092 (Concat __tmp950 __tmp1091))
(let __tmp1093 (Concat __tmp1083 __tmp1092))
(let __tmp1094 (Concat __tmp1081 __tmp1093))
(let __tmp1095 (InIf true __tmp1079 __tmp1094))
(let __tmp1096 (Arg __tmp894 __tmp1095))
(let __tmp1097 (InFunc " loop_ctx_19"))
(let __tmp1098 (Arg __tmp894 __tmp1097))
(let __tmp1099 (Get __tmp1098 3))
(let __tmp1100 (Get __tmp1098 2))
(let __tmp1101 (Bop __tmp59 __tmp1099 __tmp1100))
(let __tmp1102 (Get __tmp1098 6))
(let __tmp1103 (Bop __tmp9 __tmp1101 __tmp1102))
(let __tmp1104 (Single __tmp1103))
(let __tmp1105 (Get __tmp1098 4))
(let __tmp1106 (Bop __tmp69 __tmp1105 __tmp1100))
(let __tmp1107 (Get __tmp1098 5))
(let __tmp1108 (Bop __tmp69 __tmp1107 __tmp1100))
(let __tmp1109 (Get __tmp1098 0))
(let __tmp1110 (Bop __tmp657 __tmp1108 __tmp1109))
(let __tmp1111 (Get __tmp1110 1))
(let __tmp1112 (Bop __tmp657 __tmp1106 __tmp1111))
(let __tmp1113 (Get __tmp1112 1))
(let __tmp1114 (Single __tmp1113))
(let __tmp1115 (Get __tmp1110 0))
(let __tmp1116 (Get __tmp1112 0))
(let __tmp1117 (Bop __tmp792 __tmp1115 __tmp1116))
(let __tmp1118 (Get __tmp1098 1))
(let __tmp1119 (Bop __tmp143 __tmp1117 __tmp1118))
(let __tmp1120 (Single __tmp1119))
(let __tmp1121 (Single __tmp1101))
(let __tmp1122 (Single __tmp1099))
(let __tmp1123 (Concat __tmp1121 __tmp1122))
(let __tmp1124 (Single __tmp1105))
(let __tmp1125 (Concat __tmp1123 __tmp1124))
(let __tmp1126 (Single __tmp1107))
(let __tmp1127 (Concat __tmp1125 __tmp1126))
(let __tmp1128 (Single __tmp1102))
(let __tmp1129 (Concat __tmp1127 __tmp1128))
(let __tmp1130 (Concat __tmp1120 __tmp1129))
(let __tmp1131 (Concat __tmp1114 __tmp1130))
(let __tmp1132 (Concat __tmp1104 __tmp1131))
(let __tmp1133 (DoWhile __tmp1096 __tmp1132))
(let __tmp1134 (InIf false __tmp1079 __tmp1094))
(let __tmp1135 (Arg __tmp894 __tmp1134))
(let __tmp1136 (If __tmp1079 __tmp1094 __tmp1133 __tmp1135))
(let __tmp1137 (Get __tmp1136 1))
(let __tmp1138 (Single __tmp1137))
(let __tmp1139 (Get __tmp1136 0))
(let __tmp1140 (Single __tmp1139))
(let __tmp1141 (Concat __tmp1138 __tmp1140))
(let __tmp1142 (Get __tmp356 0))
(let __tmp1143 (Bop __tmp9 __tmp949 __tmp1142))
(let __tmp1144 (Get __tmp356 3))
(let __tmp1145 (Alloc 0 __tmp1142 __tmp1144 __tmp25))
(let __tmp1146 (Get __tmp1145 1))
(let __tmp1147 (Single __tmp1146))
(let __tmp1148 (Get __tmp1145 0))
(let __tmp1149 (Single __tmp1148))
(let __tmp1150 (Get __tmp356 1))
(let __tmp1151 (Single __tmp1150))
(let __tmp1152 (Get __tmp356 2))
(let __tmp1153 (Single __tmp1152))
(let __tmp1154 (Single __tmp1142))
(let __tmp1155 (Concat __tmp1153 __tmp1154))
(let __tmp1156 (Concat __tmp1151 __tmp1155))
(let __tmp1157 (Concat __tmp952 __tmp1156))
(let __tmp1158 (Concat __tmp950 __tmp1157))
(let __tmp1159 (Concat __tmp1149 __tmp1158))
(let __tmp1160 (Concat __tmp1147 __tmp1159))
(let __tmp1161 (TCons __tmp0 __tmp311))
(let __tmp1162 (TCons __tmp25 __tmp1161))
(let __tmp1163 (TCons __tmp1 __tmp1162))
(let __tmp1164 (TupleT __tmp1163))
(let __tmp1165 (InIf true __tmp1143 __tmp1160))
(let __tmp1166 (Arg __tmp1164 __tmp1165))
(let __tmp1167 (InFunc " loop_ctx_20"))
(let __tmp1168 (Arg __tmp1164 __tmp1167))
(let __tmp1169 (Get __tmp1168 3))
(let __tmp1170 (Get __tmp1168 2))
(let __tmp1171 (Bop __tmp59 __tmp1169 __tmp1170))
(let __tmp1172 (Get __tmp1168 6))
(let __tmp1173 (Bop __tmp9 __tmp1171 __tmp1172))
(let __tmp1174 (Single __tmp1173))
(let __tmp1175 (Get __tmp1168 1))
(let __tmp1176 (Bop __tmp69 __tmp1175 __tmp1170))
(let __tmp1177 (Get __tmp1168 4))
(let __tmp1178 (Get __tmp1168 5))
(let __tmp1179 (Bop __tmp69 __tmp1178 __tmp1170))
(let __tmp1180 (Get __tmp1168 0))
(let __tmp1181 (Bop __tmp657 __tmp1179 __tmp1180))
(let __tmp1182 (Get __tmp1181 0))
(let __tmp1183 (Bop __tmp792 __tmp1177 __tmp1182))
(let __tmp1184 (Get __tmp1181 1))
(let __tmp1185 (Top __tmp68 __tmp1176 __tmp1183 __tmp1184))
(let __tmp1186 (Single __tmp1185))
(let __tmp1187 (Single __tmp1175))
(let __tmp1188 (Single __tmp1171))
(let __tmp1189 (Single __tmp1169))
(let __tmp1190 (Concat __tmp1188 __tmp1189))
(let __tmp1191 (Concat __tmp1187 __tmp1190))
(let __tmp1192 (Single __tmp1177))
(let __tmp1193 (Concat __tmp1191 __tmp1192))
(let __tmp1194 (Single __tmp1178))
(let __tmp1195 (Concat __tmp1193 __tmp1194))
(let __tmp1196 (Single __tmp1172))
(let __tmp1197 (Concat __tmp1195 __tmp1196))
(let __tmp1198 (Concat __tmp1186 __tmp1197))
(let __tmp1199 (Concat __tmp1174 __tmp1198))
(let __tmp1200 (DoWhile __tmp1166 __tmp1199))
(let __tmp1201 (InIf false __tmp1143 __tmp1160))
(let __tmp1202 (Arg __tmp1164 __tmp1201))
(let __tmp1203 (If __tmp1143 __tmp1160 __tmp1200 __tmp1202))
(let __tmp1204 (Get __tmp1203 1))
(let __tmp1205 (Single __tmp1204))
(let __tmp1206 (Get __tmp1203 0))
(let __tmp1207 (Single __tmp1206))
(let __tmp1208 (Concat __tmp1205 __tmp1207))
(let __tmp1209 (Get __tmp362 0))
(let __tmp1210 (Bop __tmp9 __tmp949 __tmp1209))
(let __tmp1211 (Get __tmp362 3))
(let __tmp1212 (Alloc 0 __tmp1209 __tmp1211 __tmp25))
(let __tmp1213 (Get __tmp1212 1))
(let __tmp1214 (Single __tmp1213))
(let __tmp1215 (Get __tmp1212 0))
(let __tmp1216 (Single __tmp1215))
(let __tmp1217 (Get __tmp362 1))
(let __tmp1218 (Single __tmp1217))
(let __tmp1219 (Get __tmp362 2))
(let __tmp1220 (Single __tmp1219))
(let __tmp1221 (Single __tmp1209))
(let __tmp1222 (Concat __tmp1220 __tmp1221))
(let __tmp1223 (Concat __tmp1218 __tmp1222))
(let __tmp1224 (Concat __tmp952 __tmp1223))
(let __tmp1225 (Concat __tmp950 __tmp1224))
(let __tmp1226 (Concat __tmp1216 __tmp1225))
(let __tmp1227 (Concat __tmp1214 __tmp1226))
(let __tmp1228 (InIf true __tmp1210 __tmp1227))
(let __tmp1229 (Arg __tmp1164 __tmp1228))
(let __tmp1230 (InFunc " loop_ctx_21"))
(let __tmp1231 (Arg __tmp1164 __tmp1230))
(let __tmp1232 (Get __tmp1231 3))
(let __tmp1233 (Get __tmp1231 2))
(let __tmp1234 (Bop __tmp59 __tmp1232 __tmp1233))
(let __tmp1235 (Get __tmp1231 6))
(let __tmp1236 (Bop __tmp9 __tmp1234 __tmp1235))
(let __tmp1237 (Single __tmp1236))
(let __tmp1238 (Get __tmp1231 1))
(let __tmp1239 (Bop __tmp69 __tmp1238 __tmp1233))
(let __tmp1240 (Get __tmp1231 4))
(let __tmp1241 (Get __tmp1231 5))
(let __tmp1242 (Bop __tmp69 __tmp1241 __tmp1233))
(let __tmp1243 (Get __tmp1231 0))
(let __tmp1244 (Bop __tmp657 __tmp1242 __tmp1243))
(let __tmp1245 (Get __tmp1244 0))
(let __tmp1246 (Bop __tmp792 __tmp1240 __tmp1245))
(let __tmp1247 (Get __tmp1244 1))
(let __tmp1248 (Top __tmp68 __tmp1239 __tmp1246 __tmp1247))
(let __tmp1249 (Single __tmp1248))
(let __tmp1250 (Single __tmp1238))
(let __tmp1251 (Single __tmp1234))
(let __tmp1252 (Single __tmp1232))
(let __tmp1253 (Concat __tmp1251 __tmp1252))
(let __tmp1254 (Concat __tmp1250 __tmp1253))
(let __tmp1255 (Single __tmp1240))
(let __tmp1256 (Concat __tmp1254 __tmp1255))
(let __tmp1257 (Single __tmp1241))
(let __tmp1258 (Concat __tmp1256 __tmp1257))
(let __tmp1259 (Single __tmp1235))
(let __tmp1260 (Concat __tmp1258 __tmp1259))
(let __tmp1261 (Concat __tmp1249 __tmp1260))
(let __tmp1262 (Concat __tmp1237 __tmp1261))
(let __tmp1263 (DoWhile __tmp1229 __tmp1262))
(let __tmp1264 (InIf false __tmp1210 __tmp1227))
(let __tmp1265 (Arg __tmp1164 __tmp1264))
(let __tmp1266 (If __tmp1210 __tmp1227 __tmp1263 __tmp1265))
(let __tmp1267 (Get __tmp1266 1))
(let __tmp1268 (Single __tmp1267))
(let __tmp1269 (Get __tmp1266 0))
(let __tmp1270 (Single __tmp1269))
(let __tmp1271 (Concat __tmp1268 __tmp1270))
(let __tmp1272 (Call "vec_add" __tmp374))
(let __tmp1273 (Get __tmp1272 0))
(let __tmp1274 (Single __tmp1273))
(let __tmp1275 (Get __tmp374 1))
(let __tmp1276 (Get __tmp1272 1))
(let __tmp1277 (Bop __tmp384 __tmp1275 __tmp1276))
(let __tmp1278 (Single __tmp1277))
(let __tmp1279 (Concat __tmp1274 __tmp1278))
(let __tmp1280 (Call "vec_sub" __tmp380))
(let __tmp1281 (Get __tmp1280 0))
(let __tmp1282 (Single __tmp1281))
(let __tmp1283 (Get __tmp380 1))
(let __tmp1284 (Get __tmp1280 1))
(let __tmp1285 (Bop __tmp384 __tmp1283 __tmp1284))
(let __tmp1286 (Single __tmp1285))
(let __tmp1287 (Concat __tmp1282 __tmp1286))
(let __tmp1288 (Get __tmp392 0))
(let __tmp1289 (Bop __tmp9 __tmp949 __tmp1288))
(let __tmp1290 (Get __tmp392 3))
(let __tmp1291 (Single __tmp1290))
(let __tmp1292 (Get __tmp392 2))
(let __tmp1293 (Single __tmp1292))
(let __tmp1294 (Get __tmp392 1))
(let __tmp1295 (Single __tmp1294))
(let __tmp1296 (Single __tmp1288))
(let __tmp1297 (Concat __tmp1295 __tmp1296))
(let __tmp1298 (Concat __tmp1293 __tmp1297))
(let __tmp1299 (Concat __tmp952 __tmp1298))
(let __tmp1300 (Concat __tmp950 __tmp1299))
(let __tmp1301 (Concat __tmp1083 __tmp1300))
(let __tmp1302 (Concat __tmp1291 __tmp1301))
(let __tmp1303 (InIf true __tmp1289 __tmp1302))
(let __tmp1304 (Arg __tmp894 __tmp1303))
(let __tmp1305 (InFunc " loop_ctx_22"))
(let __tmp1306 (Arg __tmp894 __tmp1305))
(let __tmp1307 (Get __tmp1306 3))
(let __tmp1308 (Get __tmp1306 2))
(let __tmp1309 (Bop __tmp59 __tmp1307 __tmp1308))
(let __tmp1310 (Get __tmp1306 6))
(let __tmp1311 (Bop __tmp9 __tmp1309 __tmp1310))
(let __tmp1312 (Single __tmp1311))
(let __tmp1313 (Get __tmp1306 4))
(let __tmp1314 (Bop __tmp69 __tmp1313 __tmp1308))
(let __tmp1315 (Get __tmp1306 5))
(let __tmp1316 (Bop __tmp69 __tmp1315 __tmp1308))
(let __tmp1317 (Get __tmp1306 0))
(let __tmp1318 (Bop __tmp657 __tmp1316 __tmp1317))
(let __tmp1319 (Get __tmp1318 1))
(let __tmp1320 (Bop __tmp657 __tmp1314 __tmp1319))
(let __tmp1321 (Get __tmp1320 1))
(let __tmp1322 (Single __tmp1321))
(let __tmp1323 (Get __tmp1318 0))
(let __tmp1324 (Get __tmp1320 0))
(let __tmp1325 (Bop __tmp792 __tmp1323 __tmp1324))
(let __tmp1326 (Get __tmp1306 1))
(let __tmp1327 (Bop __tmp143 __tmp1325 __tmp1326))
(let __tmp1328 (Single __tmp1327))
(let __tmp1329 (Single __tmp1309))
(let __tmp1330 (Single __tmp1307))
(let __tmp1331 (Concat __tmp1329 __tmp1330))
(let __tmp1332 (Single __tmp1313))
(let __tmp1333 (Concat __tmp1331 __tmp1332))
(let __tmp1334 (Single __tmp1315))
(let __tmp1335 (Concat __tmp1333 __tmp1334))
(let __tmp1336 (Single __tmp1310))
(let __tmp1337 (Concat __tmp1335 __tmp1336))
(let __tmp1338 (Concat __tmp1328 __tmp1337))
(let __tmp1339 (Concat __tmp1322 __tmp1338))
(let __tmp1340 (Concat __tmp1312 __tmp1339))
(let __tmp1341 (DoWhile __tmp1304 __tmp1340))
(let __tmp1342 (InIf false __tmp1289 __tmp1302))
(let __tmp1343 (Arg __tmp894 __tmp1342))
(let __tmp1344 (If __tmp1289 __tmp1302 __tmp1341 __tmp1343))
(let __tmp1345 (Get __tmp1344 1))
(let __tmp1346 (Single __tmp1345))
(let __tmp1347 (Get __tmp1344 0))
(let __tmp1348 (Single __tmp1347))
(let __tmp1349 (Concat __tmp1346 __tmp1348))
(let __tmp1350 (Const __tmp18 __tmp432 __tmp474))
(let __tmp1351 (Get __tmp488 0))
(let __tmp1352 (Bop __tmp9 __tmp1350 __tmp1351))
(let __tmp1353 (Get __tmp488 3))
(let __tmp1354 (Alloc 0 __tmp1351 __tmp1353 __tmp25))
(let __tmp1355 (Get __tmp1354 1))
(let __tmp1356 (Single __tmp1355))
(let __tmp1357 (Get __tmp1354 0))
(let __tmp1358 (Single __tmp1357))
(let __tmp1359 (Single __tmp1350))
(let __tmp1360 (Const __tmp14 __tmp432 __tmp474))
(let __tmp1361 (Single __tmp1360))
(let __tmp1362 (Get __tmp488 1))
(let __tmp1363 (Single __tmp1362))
(let __tmp1364 (Get __tmp488 2))
(let __tmp1365 (Single __tmp1364))
(let __tmp1366 (Single __tmp1351))
(let __tmp1367 (Concat __tmp1365 __tmp1366))
(let __tmp1368 (Concat __tmp1363 __tmp1367))
(let __tmp1369 (Concat __tmp1361 __tmp1368))
(let __tmp1370 (Concat __tmp1359 __tmp1369))
(let __tmp1371 (Concat __tmp1358 __tmp1370))
(let __tmp1372 (Concat __tmp1356 __tmp1371))
(let __tmp1373 (InIf true __tmp1352 __tmp1372))
(let __tmp1374 (Arg __tmp1164 __tmp1373))
(let __tmp1375 (InFunc " loop_ctx_23"))
(let __tmp1376 (Arg __tmp1164 __tmp1375))
(let __tmp1377 (Get __tmp1376 3))
(let __tmp1378 (Get __tmp1376 2))
(let __tmp1379 (Bop __tmp59 __tmp1377 __tmp1378))
(let __tmp1380 (Get __tmp1376 6))
(let __tmp1381 (Bop __tmp9 __tmp1379 __tmp1380))
(let __tmp1382 (Single __tmp1381))
(let __tmp1383 (Get __tmp1376 1))
(let __tmp1384 (Bop __tmp69 __tmp1383 __tmp1378))
(let __tmp1385 (Get __tmp1376 4))
(let __tmp1386 (Get __tmp1376 5))
(let __tmp1387 (Bop __tmp69 __tmp1386 __tmp1378))
(let __tmp1388 (Get __tmp1376 0))
(let __tmp1389 (Bop __tmp657 __tmp1387 __tmp1388))
(let __tmp1390 (Get __tmp1389 0))
(let __tmp1391 (Bop __tmp792 __tmp1385 __tmp1390))
(let __tmp1392 (Get __tmp1389 1))
(let __tmp1393 (Top __tmp68 __tmp1384 __tmp1391 __tmp1392))
(let __tmp1394 (Single __tmp1393))
(let __tmp1395 (Single __tmp1383))
(let __tmp1396 (Single __tmp1379))
(let __tmp1397 (Single __tmp1377))
(let __tmp1398 (Concat __tmp1396 __tmp1397))
(let __tmp1399 (Concat __tmp1395 __tmp1398))
(let __tmp1400 (Single __tmp1385))
(let __tmp1401 (Concat __tmp1399 __tmp1400))
(let __tmp1402 (Single __tmp1386))
(let __tmp1403 (Concat __tmp1401 __tmp1402))
(let __tmp1404 (Single __tmp1380))
(let __tmp1405 (Concat __tmp1403 __tmp1404))
(let __tmp1406 (Concat __tmp1394 __tmp1405))
(let __tmp1407 (Concat __tmp1382 __tmp1406))
(let __tmp1408 (DoWhile __tmp1374 __tmp1407))
(let __tmp1409 (InIf false __tmp1352 __tmp1372))
(let __tmp1410 (Arg __tmp1164 __tmp1409))
(let __tmp1411 (If __tmp1352 __tmp1372 __tmp1408 __tmp1410))
(let __tmp1412 (Get __tmp1411 1))
(let __tmp1413 (Single __tmp1412))
(let __tmp1414 (Get __tmp1411 0))
(let __tmp1415 (Single __tmp1414))
(let __tmp1416 (Concat __tmp1413 __tmp1415))
(let __tmp1417 (Get __tmp499 0))
(let __tmp1418 (Bop __tmp9 __tmp1350 __tmp1417))
(let __tmp1419 (Get __tmp499 3))
(let __tmp1420 (Alloc 0 __tmp1417 __tmp1419 __tmp25))
(let __tmp1421 (Get __tmp1420 1))
(let __tmp1422 (Single __tmp1421))
(let __tmp1423 (Get __tmp1420 0))
(let __tmp1424 (Single __tmp1423))
(let __tmp1425 (Get __tmp499 2))
(let __tmp1426 (Single __tmp1425))
(let __tmp1427 (Get __tmp499 1))
(let __tmp1428 (Single __tmp1427))
(let __tmp1429 (Single __tmp1417))
(let __tmp1430 (Concat __tmp1428 __tmp1429))
(let __tmp1431 (Concat __tmp1426 __tmp1430))
(let __tmp1432 (Concat __tmp1361 __tmp1431))
(let __tmp1433 (Concat __tmp1359 __tmp1432))
(let __tmp1434 (Concat __tmp1424 __tmp1433))
(let __tmp1435 (Concat __tmp1422 __tmp1434))
(let __tmp1436 (InIf true __tmp1418 __tmp1435))
(let __tmp1437 (Arg __tmp720 __tmp1436))
(let __tmp1438 (InFunc " loop_ctx_24"))
(let __tmp1439 (Arg __tmp720 __tmp1438))
(let __tmp1440 (Get __tmp1439 3))
(let __tmp1441 (Get __tmp1439 2))
(let __tmp1442 (Bop __tmp59 __tmp1440 __tmp1441))
(let __tmp1443 (Get __tmp1439 6))
(let __tmp1444 (Bop __tmp9 __tmp1442 __tmp1443))
(let __tmp1445 (Single __tmp1444))
(let __tmp1446 (Get __tmp1439 1))
(let __tmp1447 (Bop __tmp69 __tmp1446 __tmp1441))
(let __tmp1448 (Get __tmp1439 5))
(let __tmp1449 (Bop __tmp69 __tmp1448 __tmp1441))
(let __tmp1450 (Get __tmp1439 0))
(let __tmp1451 (Bop __tmp657 __tmp1449 __tmp1450))
(let __tmp1452 (Get __tmp1451 0))
(let __tmp1453 (Get __tmp1439 4))
(let __tmp1454 (Bop __tmp69 __tmp1453 __tmp1441))
(let __tmp1455 (Get __tmp1451 1))
(let __tmp1456 (Bop __tmp657 __tmp1454 __tmp1455))
(let __tmp1457 (Get __tmp1456 0))
(let __tmp1458 (Bop __tmp143 __tmp1452 __tmp1457))
(let __tmp1459 (Get __tmp1456 1))
(let __tmp1460 (Top __tmp68 __tmp1447 __tmp1458 __tmp1459))
(let __tmp1461 (Single __tmp1460))
(let __tmp1462 (Single __tmp1446))
(let __tmp1463 (Single __tmp1442))
(let __tmp1464 (Single __tmp1440))
(let __tmp1465 (Concat __tmp1463 __tmp1464))
(let __tmp1466 (Concat __tmp1462 __tmp1465))
(let __tmp1467 (Concat __tmp1461 __tmp1466))
(let __tmp1468 (Single __tmp1453))
(let __tmp1469 (Single __tmp1448))
(let __tmp1470 (Concat __tmp1468 __tmp1469))
(let __tmp1471 (Single __tmp1443))
(let __tmp1472 (Concat __tmp1470 __tmp1471))
(let __tmp1473 (Concat __tmp1467 __tmp1472))
(let __tmp1474 (Concat __tmp1445 __tmp1473))
(let __tmp1475 (DoWhile __tmp1437 __tmp1474))
(let __tmp1476 (InIf false __tmp1418 __tmp1435))
(let __tmp1477 (Arg __tmp720 __tmp1476))
(let __tmp1478 (If __tmp1418 __tmp1435 __tmp1475 __tmp1477))
(let __tmp1479 (Get __tmp1478 1))
(let __tmp1480 (Single __tmp1479))
(let __tmp1481 (Get __tmp1478 0))
(let __tmp1482 (Single __tmp1481))
(let __tmp1483 (Concat __tmp1480 __tmp1482))
(let __tmp1484 (TCons __tmp25 __tmp3))
(let __tmp1485 (TCons __tmp0 __tmp1484))
(let __tmp1486 (TupleT __tmp1485))
(let __tmp1487 (InFunc "vec_copy"))
(let __tmp1488 (Arg __tmp1486 __tmp1487))
(let __tmp1489 (Get __tmp1488 0))
(let __tmp1490 (Single __tmp1489))
(let __tmp1491 (Const __tmp33 __tmp1486 __tmp1487))
(let __tmp1492 (Single __tmp1491))
(let __tmp1493 (Get __tmp1488 1))
(let __tmp1494 (Single __tmp1493))
(let __tmp1495 (Get __tmp1488 2))
(let __tmp1496 (Single __tmp1495))
(let __tmp1497 (Concat __tmp1494 __tmp1496))
(let __tmp1498 (Concat __tmp1492 __tmp1497))
(let __tmp1499 (Concat __tmp1490 __tmp1498))
(let __tmp1500 (Call "vec_mul" __tmp1499))
(let __tmp1501 (Const __tmp18 __tmp1486 __tmp1487))
(let __tmp1502 (Get __tmp1499 0))
(let __tmp1503 (Bop __tmp9 __tmp1501 __tmp1502))
(let __tmp1504 (Get __tmp1499 3))
(let __tmp1505 (Alloc 0 __tmp1502 __tmp1504 __tmp25))
(let __tmp1506 (Get __tmp1505 1))
(let __tmp1507 (Single __tmp1506))
(let __tmp1508 (Get __tmp1505 0))
(let __tmp1509 (Single __tmp1508))
(let __tmp1510 (Single __tmp1501))
(let __tmp1511 (Const __tmp14 __tmp1486 __tmp1487))
(let __tmp1512 (Single __tmp1511))
(let __tmp1513 (Get __tmp1499 1))
(let __tmp1514 (Single __tmp1513))
(let __tmp1515 (Get __tmp1499 2))
(let __tmp1516 (Single __tmp1515))
(let __tmp1517 (Single __tmp1502))
(let __tmp1518 (Concat __tmp1516 __tmp1517))
(let __tmp1519 (Concat __tmp1514 __tmp1518))
(let __tmp1520 (Concat __tmp1512 __tmp1519))
(let __tmp1521 (Concat __tmp1510 __tmp1520))
(let __tmp1522 (Concat __tmp1509 __tmp1521))
(let __tmp1523 (Concat __tmp1507 __tmp1522))
(let __tmp1524 (InIf true __tmp1503 __tmp1523))
(let __tmp1525 (Arg __tmp1164 __tmp1524))
(let __tmp1526 (InFunc " loop_ctx_25"))
(let __tmp1527 (Arg __tmp1164 __tmp1526))
(let __tmp1528 (Get __tmp1527 3))
(let __tmp1529 (Get __tmp1527 2))
(let __tmp1530 (Bop __tmp59 __tmp1528 __tmp1529))
(let __tmp1531 (Get __tmp1527 6))
(let __tmp1532 (Bop __tmp9 __tmp1530 __tmp1531))
(let __tmp1533 (Single __tmp1532))
(let __tmp1534 (Get __tmp1527 1))
(let __tmp1535 (Bop __tmp69 __tmp1534 __tmp1529))
(let __tmp1536 (Get __tmp1527 4))
(let __tmp1537 (Get __tmp1527 5))
(let __tmp1538 (Bop __tmp69 __tmp1537 __tmp1529))
(let __tmp1539 (Get __tmp1527 0))
(let __tmp1540 (Bop __tmp657 __tmp1538 __tmp1539))
(let __tmp1541 (Get __tmp1540 0))
(let __tmp1542 (Bop __tmp792 __tmp1536 __tmp1541))
(let __tmp1543 (Get __tmp1540 1))
(let __tmp1544 (Top __tmp68 __tmp1535 __tmp1542 __tmp1543))
(let __tmp1545 (Single __tmp1544))
(let __tmp1546 (Single __tmp1534))
(let __tmp1547 (Single __tmp1530))
(let __tmp1548 (Single __tmp1528))
(let __tmp1549 (Concat __tmp1547 __tmp1548))
(let __tmp1550 (Concat __tmp1546 __tmp1549))
(let __tmp1551 (Single __tmp1536))
(let __tmp1552 (Concat __tmp1550 __tmp1551))
(let __tmp1553 (Single __tmp1537))
(let __tmp1554 (Concat __tmp1552 __tmp1553))
(let __tmp1555 (Single __tmp1531))
(let __tmp1556 (Concat __tmp1554 __tmp1555))
(let __tmp1557 (Concat __tmp1545 __tmp1556))
(let __tmp1558 (Concat __tmp1533 __tmp1557))
(let __tmp1559 (DoWhile __tmp1525 __tmp1558))
(let __tmp1560 (InIf false __tmp1503 __tmp1523))
(let __tmp1561 (Arg __tmp1164 __tmp1560))
(let __tmp1562 (If __tmp1503 __tmp1523 __tmp1559 __tmp1561))
(let __tmp1563 (Get __tmp1562 1))
(let __tmp1564 (Single __tmp1563))
(let __tmp1565 (Get __tmp1562 0))
(let __tmp1566 (Single __tmp1565))
(let __tmp1567 (Concat __tmp1564 __tmp1566))
(let __tmp1568 (TCons __tmp25 __tmp1484))
(let __tmp1569 (TCons __tmp0 __tmp1568))
(let __tmp1570 (TupleT __tmp1569))
(let __tmp1571 (InFunc "vec_sub"))
(let __tmp1572 (Arg __tmp1570 __tmp1571))
(let __tmp1573 (Get __tmp1572 0))
(let __tmp1574 (Single __tmp1573))
(let __tmp1575 (Const __tmp846 __tmp1570 __tmp1571))
(let __tmp1576 (Single __tmp1575))
(let __tmp1577 (Get __tmp1572 2))
(let __tmp1578 (Single __tmp1577))
(let __tmp1579 (Get __tmp1572 3))
(let __tmp1580 (Single __tmp1579))
(let __tmp1581 (Concat __tmp1578 __tmp1580))
(let __tmp1582 (Concat __tmp1576 __tmp1581))
(let __tmp1583 (Concat __tmp1574 __tmp1582))
(let __tmp1584 (Call "vec_mul" __tmp1583))
(let __tmp1585 (Const __tmp18 __tmp1570 __tmp1571))
(let __tmp1586 (Get __tmp1583 0))
(let __tmp1587 (Bop __tmp9 __tmp1585 __tmp1586))
(let __tmp1588 (Get __tmp1583 3))
(let __tmp1589 (Alloc 0 __tmp1586 __tmp1588 __tmp25))
(let __tmp1590 (Get __tmp1589 1))
(let __tmp1591 (Single __tmp1590))
(let __tmp1592 (Get __tmp1589 0))
(let __tmp1593 (Single __tmp1592))
(let __tmp1594 (Single __tmp1585))
(let __tmp1595 (Const __tmp14 __tmp1570 __tmp1571))
(let __tmp1596 (Single __tmp1595))
(let __tmp1597 (Get __tmp1583 1))
(let __tmp1598 (Single __tmp1597))
(let __tmp1599 (Get __tmp1583 2))
(let __tmp1600 (Single __tmp1599))
(let __tmp1601 (Single __tmp1586))
(let __tmp1602 (Concat __tmp1600 __tmp1601))
(let __tmp1603 (Concat __tmp1598 __tmp1602))
(let __tmp1604 (Concat __tmp1596 __tmp1603))
(let __tmp1605 (Concat __tmp1594 __tmp1604))
(let __tmp1606 (Concat __tmp1593 __tmp1605))
(let __tmp1607 (Concat __tmp1591 __tmp1606))
(let __tmp1608 (InIf true __tmp1587 __tmp1607))
(let __tmp1609 (Arg __tmp1164 __tmp1608))
(let __tmp1610 (InFunc " loop_ctx_26"))
(let __tmp1611 (Arg __tmp1164 __tmp1610))
(let __tmp1612 (Get __tmp1611 3))
(let __tmp1613 (Get __tmp1611 2))
(let __tmp1614 (Bop __tmp59 __tmp1612 __tmp1613))
(let __tmp1615 (Get __tmp1611 6))
(let __tmp1616 (Bop __tmp9 __tmp1614 __tmp1615))
(let __tmp1617 (Single __tmp1616))
(let __tmp1618 (Get __tmp1611 1))
(let __tmp1619 (Bop __tmp69 __tmp1618 __tmp1613))
(let __tmp1620 (Get __tmp1611 4))
(let __tmp1621 (Get __tmp1611 5))
(let __tmp1622 (Bop __tmp69 __tmp1621 __tmp1613))
(let __tmp1623 (Get __tmp1611 0))
(let __tmp1624 (Bop __tmp657 __tmp1622 __tmp1623))
(let __tmp1625 (Get __tmp1624 0))
(let __tmp1626 (Bop __tmp792 __tmp1620 __tmp1625))
(let __tmp1627 (Get __tmp1624 1))
(let __tmp1628 (Top __tmp68 __tmp1619 __tmp1626 __tmp1627))
(let __tmp1629 (Single __tmp1628))
(let __tmp1630 (Single __tmp1618))
(let __tmp1631 (Single __tmp1614))
(let __tmp1632 (Single __tmp1612))
(let __tmp1633 (Concat __tmp1631 __tmp1632))
(let __tmp1634 (Concat __tmp1630 __tmp1633))
(let __tmp1635 (Single __tmp1620))
(let __tmp1636 (Concat __tmp1634 __tmp1635))
(let __tmp1637 (Single __tmp1621))
(let __tmp1638 (Concat __tmp1636 __tmp1637))
(let __tmp1639 (Single __tmp1615))
(let __tmp1640 (Concat __tmp1638 __tmp1639))
(let __tmp1641 (Concat __tmp1629 __tmp1640))
(let __tmp1642 (Concat __tmp1617 __tmp1641))
(let __tmp1643 (DoWhile __tmp1609 __tmp1642))
(let __tmp1644 (InIf false __tmp1587 __tmp1607))
(let __tmp1645 (Arg __tmp1164 __tmp1644))
(let __tmp1646 (If __tmp1587 __tmp1607 __tmp1643 __tmp1645))
(let __tmp1647 (Get __tmp1646 1))
(let __tmp1648 (Single __tmp1647))
(let __tmp1649 (Get __tmp1646 0))
(let __tmp1650 (Single __tmp1649))
(let __tmp1651 (Concat __tmp1648 __tmp1650))
(let __tmp1652 (Get __tmp1572 1))
(let __tmp1653 (Single __tmp1652))
(let __tmp1654 (Concat __tmp1653 __tmp1584))
(let __tmp1655 (Concat __tmp1574 __tmp1654))
(let __tmp1656 (Call "vec_add" __tmp1655))
(let __tmp1657 (Get __tmp1655 0))
(let __tmp1658 (Bop __tmp9 __tmp1585 __tmp1657))
(let __tmp1659 (Get __tmp1655 3))
(let __tmp1660 (Alloc 0 __tmp1657 __tmp1659 __tmp25))
(let __tmp1661 (Get __tmp1660 1))
(let __tmp1662 (Single __tmp1661))
(let __tmp1663 (Get __tmp1660 0))
(let __tmp1664 (Single __tmp1663))
(let __tmp1665 (Get __tmp1655 2))
(let __tmp1666 (Single __tmp1665))
(let __tmp1667 (Get __tmp1655 1))
(let __tmp1668 (Single __tmp1667))
(let __tmp1669 (Single __tmp1657))
(let __tmp1670 (Concat __tmp1668 __tmp1669))
(let __tmp1671 (Concat __tmp1666 __tmp1670))
(let __tmp1672 (Concat __tmp1596 __tmp1671))
(let __tmp1673 (Concat __tmp1594 __tmp1672))
(let __tmp1674 (Concat __tmp1664 __tmp1673))
(let __tmp1675 (Concat __tmp1662 __tmp1674))
(let __tmp1676 (InIf true __tmp1658 __tmp1675))
(let __tmp1677 (Arg __tmp720 __tmp1676))
(let __tmp1678 (InFunc " loop_ctx_27"))
(let __tmp1679 (Arg __tmp720 __tmp1678))
(let __tmp1680 (Get __tmp1679 3))
(let __tmp1681 (Get __tmp1679 2))
(let __tmp1682 (Bop __tmp59 __tmp1680 __tmp1681))
(let __tmp1683 (Get __tmp1679 6))
(let __tmp1684 (Bop __tmp9 __tmp1682 __tmp1683))
(let __tmp1685 (Single __tmp1684))
(let __tmp1686 (Get __tmp1679 1))
(let __tmp1687 (Bop __tmp69 __tmp1686 __tmp1681))
(let __tmp1688 (Get __tmp1679 5))
(let __tmp1689 (Bop __tmp69 __tmp1688 __tmp1681))
(let __tmp1690 (Get __tmp1679 0))
(let __tmp1691 (Bop __tmp657 __tmp1689 __tmp1690))
(let __tmp1692 (Get __tmp1691 0))
(let __tmp1693 (Get __tmp1679 4))
(let __tmp1694 (Bop __tmp69 __tmp1693 __tmp1681))
(let __tmp1695 (Get __tmp1691 1))
(let __tmp1696 (Bop __tmp657 __tmp1694 __tmp1695))
(let __tmp1697 (Get __tmp1696 0))
(let __tmp1698 (Bop __tmp143 __tmp1692 __tmp1697))
(let __tmp1699 (Get __tmp1696 1))
(let __tmp1700 (Top __tmp68 __tmp1687 __tmp1698 __tmp1699))
(let __tmp1701 (Single __tmp1700))
(let __tmp1702 (Single __tmp1686))
(let __tmp1703 (Single __tmp1682))
(let __tmp1704 (Single __tmp1680))
(let __tmp1705 (Concat __tmp1703 __tmp1704))
(let __tmp1706 (Concat __tmp1702 __tmp1705))
(let __tmp1707 (Concat __tmp1701 __tmp1706))
(let __tmp1708 (Single __tmp1693))
(let __tmp1709 (Single __tmp1688))
(let __tmp1710 (Concat __tmp1708 __tmp1709))
(let __tmp1711 (Single __tmp1683))
(let __tmp1712 (Concat __tmp1710 __tmp1711))
(let __tmp1713 (Concat __tmp1707 __tmp1712))
(let __tmp1714 (Concat __tmp1685 __tmp1713))
(let __tmp1715 (DoWhile __tmp1677 __tmp1714))
(let __tmp1716 (InIf false __tmp1658 __tmp1675))
(let __tmp1717 (Arg __tmp720 __tmp1716))
(let __tmp1718 (If __tmp1658 __tmp1675 __tmp1715 __tmp1717))
(let __tmp1719 (Get __tmp1718 1))
(let __tmp1720 (Single __tmp1719))
(let __tmp1721 (Get __tmp1718 0))
(let __tmp1722 (Single __tmp1721))
(let __tmp1723 (Concat __tmp1720 __tmp1722))
(let __tmp1724 (InFunc "vec_add_inp"))
(let __tmp1725 (Arg __tmp1570 __tmp1724))
(let __tmp1726 (Call "vec_add" __tmp1725))
(let __tmp1727 (Const __tmp18 __tmp1570 __tmp1724))
(let __tmp1728 (Get __tmp1725 0))
(let __tmp1729 (Bop __tmp9 __tmp1727 __tmp1728))
(let __tmp1730 (Get __tmp1725 3))
(let __tmp1731 (Alloc 0 __tmp1728 __tmp1730 __tmp25))
(let __tmp1732 (Get __tmp1731 1))
(let __tmp1733 (Single __tmp1732))
(let __tmp1734 (Get __tmp1731 0))
(let __tmp1735 (Single __tmp1734))
(let __tmp1736 (Single __tmp1727))
(let __tmp1737 (Const __tmp14 __tmp1570 __tmp1724))
(let __tmp1738 (Single __tmp1737))
(let __tmp1739 (Get __tmp1725 2))
(let __tmp1740 (Single __tmp1739))
(let __tmp1741 (Get __tmp1725 1))
(let __tmp1742 (Single __tmp1741))
(let __tmp1743 (Single __tmp1728))
(let __tmp1744 (Concat __tmp1742 __tmp1743))
(let __tmp1745 (Concat __tmp1740 __tmp1744))
(let __tmp1746 (Concat __tmp1738 __tmp1745))
(let __tmp1747 (Concat __tmp1736 __tmp1746))
(let __tmp1748 (Concat __tmp1735 __tmp1747))
(let __tmp1749 (Concat __tmp1733 __tmp1748))
(let __tmp1750 (InIf true __tmp1729 __tmp1749))
(let __tmp1751 (Arg __tmp720 __tmp1750))
(let __tmp1752 (InFunc " loop_ctx_28"))
(let __tmp1753 (Arg __tmp720 __tmp1752))
(let __tmp1754 (Get __tmp1753 3))
(let __tmp1755 (Get __tmp1753 2))
(let __tmp1756 (Bop __tmp59 __tmp1754 __tmp1755))
(let __tmp1757 (Get __tmp1753 6))
(let __tmp1758 (Bop __tmp9 __tmp1756 __tmp1757))
(let __tmp1759 (Single __tmp1758))
(let __tmp1760 (Get __tmp1753 1))
(let __tmp1761 (Bop __tmp69 __tmp1760 __tmp1755))
(let __tmp1762 (Get __tmp1753 5))
(let __tmp1763 (Bop __tmp69 __tmp1762 __tmp1755))
(let __tmp1764 (Get __tmp1753 0))
(let __tmp1765 (Bop __tmp657 __tmp1763 __tmp1764))
(let __tmp1766 (Get __tmp1765 0))
(let __tmp1767 (Get __tmp1753 4))
(let __tmp1768 (Bop __tmp69 __tmp1767 __tmp1755))
(let __tmp1769 (Get __tmp1765 1))
(let __tmp1770 (Bop __tmp657 __tmp1768 __tmp1769))
(let __tmp1771 (Get __tmp1770 0))
(let __tmp1772 (Bop __tmp143 __tmp1766 __tmp1771))
(let __tmp1773 (Get __tmp1770 1))
(let __tmp1774 (Top __tmp68 __tmp1761 __tmp1772 __tmp1773))
(let __tmp1775 (Single __tmp1774))
(let __tmp1776 (Single __tmp1760))
(let __tmp1777 (Single __tmp1756))
(let __tmp1778 (Single __tmp1754))
(let __tmp1779 (Concat __tmp1777 __tmp1778))
(let __tmp1780 (Concat __tmp1776 __tmp1779))
(let __tmp1781 (Concat __tmp1775 __tmp1780))
(let __tmp1782 (Single __tmp1767))
(let __tmp1783 (Single __tmp1762))
(let __tmp1784 (Concat __tmp1782 __tmp1783))
(let __tmp1785 (Single __tmp1757))
(let __tmp1786 (Concat __tmp1784 __tmp1785))
(let __tmp1787 (Concat __tmp1781 __tmp1786))
(let __tmp1788 (Concat __tmp1759 __tmp1787))
(let __tmp1789 (DoWhile __tmp1751 __tmp1788))
(let __tmp1790 (InIf false __tmp1729 __tmp1749))
(let __tmp1791 (Arg __tmp720 __tmp1790))
(let __tmp1792 (If __tmp1729 __tmp1749 __tmp1789 __tmp1791))
(let __tmp1793 (Get __tmp1792 1))
(let __tmp1794 (Single __tmp1793))
(let __tmp1795 (Get __tmp1792 0))
(let __tmp1796 (Single __tmp1795))
(let __tmp1797 (Concat __tmp1794 __tmp1796))
(let __tmp1798 (InFunc "vec_sub_inp"))
(let __tmp1799 (Arg __tmp1570 __tmp1798))
(let __tmp1800 (Call "vec_sub" __tmp1799))
(let __tmp1801 (Get __tmp1799 0))
(let __tmp1802 (Single __tmp1801))
(let __tmp1803 (Get __tmp1799 1))
(let __tmp1804 (Single __tmp1803))
(let __tmp1805 (Const __tmp846 __tmp1570 __tmp1798))
(let __tmp1806 (Single __tmp1805))
(let __tmp1807 (Get __tmp1799 2))
(let __tmp1808 (Single __tmp1807))
(let __tmp1809 (Get __tmp1799 3))
(let __tmp1810 (Single __tmp1809))
(let __tmp1811 (Concat __tmp1808 __tmp1810))
(let __tmp1812 (Concat __tmp1806 __tmp1811))
(let __tmp1813 (Concat __tmp1802 __tmp1812))
(let __tmp1814 (Call "vec_mul" __tmp1813))
(let __tmp1815 (Concat __tmp1804 __tmp1814))
(let __tmp1816 (Concat __tmp1802 __tmp1815))
(let __tmp1817 (Call "vec_add" __tmp1816))
(let __tmp1818 (Get __tmp1817 0))
(let __tmp1819 (Single __tmp1818))
(let __tmp1820 (Get __tmp1814 0))
(let __tmp1821 (Get __tmp1817 1))
(let __tmp1822 (Bop __tmp384 __tmp1820 __tmp1821))
(let __tmp1823 (Single __tmp1822))
(let __tmp1824 (Concat __tmp1819 __tmp1823))
(let __tmp1825 (Const __tmp18 __tmp1570 __tmp1798))
(let __tmp1826 (Get __tmp1813 0))
(let __tmp1827 (Bop __tmp9 __tmp1825 __tmp1826))
(let __tmp1828 (Get __tmp1813 3))
(let __tmp1829 (Alloc 0 __tmp1826 __tmp1828 __tmp25))
(let __tmp1830 (Get __tmp1829 1))
(let __tmp1831 (Single __tmp1830))
(let __tmp1832 (Get __tmp1829 0))
(let __tmp1833 (Single __tmp1832))
(let __tmp1834 (Single __tmp1825))
(let __tmp1835 (Const __tmp14 __tmp1570 __tmp1798))
(let __tmp1836 (Single __tmp1835))
(let __tmp1837 (Get __tmp1813 1))
(let __tmp1838 (Single __tmp1837))
(let __tmp1839 (Get __tmp1813 2))
(let __tmp1840 (Single __tmp1839))
(let __tmp1841 (Single __tmp1826))
(let __tmp1842 (Concat __tmp1840 __tmp1841))
(let __tmp1843 (Concat __tmp1838 __tmp1842))
(let __tmp1844 (Concat __tmp1836 __tmp1843))
(let __tmp1845 (Concat __tmp1834 __tmp1844))
(let __tmp1846 (Concat __tmp1833 __tmp1845))
(let __tmp1847 (Concat __tmp1831 __tmp1846))
(let __tmp1848 (InIf true __tmp1827 __tmp1847))
(let __tmp1849 (Arg __tmp1164 __tmp1848))
(let __tmp1850 (InFunc " loop_ctx_29"))
(let __tmp1851 (Arg __tmp1164 __tmp1850))
(let __tmp1852 (Get __tmp1851 3))
(let __tmp1853 (Get __tmp1851 2))
(let __tmp1854 (Bop __tmp59 __tmp1852 __tmp1853))
(let __tmp1855 (Get __tmp1851 6))
(let __tmp1856 (Bop __tmp9 __tmp1854 __tmp1855))
(let __tmp1857 (Single __tmp1856))
(let __tmp1858 (Get __tmp1851 1))
(let __tmp1859 (Bop __tmp69 __tmp1858 __tmp1853))
(let __tmp1860 (Get __tmp1851 4))
(let __tmp1861 (Get __tmp1851 5))
(let __tmp1862 (Bop __tmp69 __tmp1861 __tmp1853))
(let __tmp1863 (Get __tmp1851 0))
(let __tmp1864 (Bop __tmp657 __tmp1862 __tmp1863))
(let __tmp1865 (Get __tmp1864 0))
(let __tmp1866 (Bop __tmp792 __tmp1860 __tmp1865))
(let __tmp1867 (Get __tmp1864 1))
(let __tmp1868 (Top __tmp68 __tmp1859 __tmp1866 __tmp1867))
(let __tmp1869 (Single __tmp1868))
(let __tmp1870 (Single __tmp1858))
(let __tmp1871 (Single __tmp1854))
(let __tmp1872 (Single __tmp1852))
(let __tmp1873 (Concat __tmp1871 __tmp1872))
(let __tmp1874 (Concat __tmp1870 __tmp1873))
(let __tmp1875 (Single __tmp1860))
(let __tmp1876 (Concat __tmp1874 __tmp1875))
(let __tmp1877 (Single __tmp1861))
(let __tmp1878 (Concat __tmp1876 __tmp1877))
(let __tmp1879 (Single __tmp1855))
(let __tmp1880 (Concat __tmp1878 __tmp1879))
(let __tmp1881 (Concat __tmp1869 __tmp1880))
(let __tmp1882 (Concat __tmp1857 __tmp1881))
(let __tmp1883 (DoWhile __tmp1849 __tmp1882))
(let __tmp1884 (InIf false __tmp1827 __tmp1847))
(let __tmp1885 (Arg __tmp1164 __tmp1884))
(let __tmp1886 (If __tmp1827 __tmp1847 __tmp1883 __tmp1885))
(let __tmp1887 (Get __tmp1886 1))
(let __tmp1888 (Single __tmp1887))
(let __tmp1889 (Get __tmp1886 0))
(let __tmp1890 (Single __tmp1889))
(let __tmp1891 (Concat __tmp1888 __tmp1890))
(let __tmp1892 (Get __tmp1816 0))
(let __tmp1893 (Bop __tmp9 __tmp1825 __tmp1892))
(let __tmp1894 (Get __tmp1816 3))
(let __tmp1895 (Alloc 0 __tmp1892 __tmp1894 __tmp25))
(let __tmp1896 (Get __tmp1895 1))
(let __tmp1897 (Single __tmp1896))
(let __tmp1898 (Get __tmp1895 0))
(let __tmp1899 (Single __tmp1898))
(let __tmp1900 (Get __tmp1816 2))
(let __tmp1901 (Single __tmp1900))
(let __tmp1902 (Get __tmp1816 1))
(let __tmp1903 (Single __tmp1902))
(let __tmp1904 (Single __tmp1892))
(let __tmp1905 (Concat __tmp1903 __tmp1904))
(let __tmp1906 (Concat __tmp1901 __tmp1905))
(let __tmp1907 (Concat __tmp1836 __tmp1906))
(let __tmp1908 (Concat __tmp1834 __tmp1907))
(let __tmp1909 (Concat __tmp1899 __tmp1908))
(let __tmp1910 (Concat __tmp1897 __tmp1909))
(let __tmp1911 (InIf true __tmp1893 __tmp1910))
(let __tmp1912 (Arg __tmp720 __tmp1911))
(let __tmp1913 (InFunc " loop_ctx_30"))
(let __tmp1914 (Arg __tmp720 __tmp1913))
(let __tmp1915 (Get __tmp1914 3))
(let __tmp1916 (Get __tmp1914 2))
(let __tmp1917 (Bop __tmp59 __tmp1915 __tmp1916))
(let __tmp1918 (Get __tmp1914 6))
(let __tmp1919 (Bop __tmp9 __tmp1917 __tmp1918))
(let __tmp1920 (Single __tmp1919))
(let __tmp1921 (Get __tmp1914 1))
(let __tmp1922 (Bop __tmp69 __tmp1921 __tmp1916))
(let __tmp1923 (Get __tmp1914 5))
(let __tmp1924 (Bop __tmp69 __tmp1923 __tmp1916))
(let __tmp1925 (Get __tmp1914 0))
(let __tmp1926 (Bop __tmp657 __tmp1924 __tmp1925))
(let __tmp1927 (Get __tmp1926 0))
(let __tmp1928 (Get __tmp1914 4))
(let __tmp1929 (Bop __tmp69 __tmp1928 __tmp1916))
(let __tmp1930 (Get __tmp1926 1))
(let __tmp1931 (Bop __tmp657 __tmp1929 __tmp1930))
(let __tmp1932 (Get __tmp1931 0))
(let __tmp1933 (Bop __tmp143 __tmp1927 __tmp1932))
(let __tmp1934 (Get __tmp1931 1))
(let __tmp1935 (Top __tmp68 __tmp1922 __tmp1933 __tmp1934))
(let __tmp1936 (Single __tmp1935))
(let __tmp1937 (Single __tmp1921))
(let __tmp1938 (Single __tmp1917))
(let __tmp1939 (Single __tmp1915))
(let __tmp1940 (Concat __tmp1938 __tmp1939))
(let __tmp1941 (Concat __tmp1937 __tmp1940))
(let __tmp1942 (Concat __tmp1936 __tmp1941))
(let __tmp1943 (Single __tmp1928))
(let __tmp1944 (Single __tmp1923))
(let __tmp1945 (Concat __tmp1943 __tmp1944))
(let __tmp1946 (Single __tmp1918))
(let __tmp1947 (Concat __tmp1945 __tmp1946))
(let __tmp1948 (Concat __tmp1942 __tmp1947))
(let __tmp1949 (Concat __tmp1920 __tmp1948))
(let __tmp1950 (DoWhile __tmp1912 __tmp1949))
(let __tmp1951 (InIf false __tmp1893 __tmp1910))
(let __tmp1952 (Arg __tmp720 __tmp1951))
(let __tmp1953 (If __tmp1893 __tmp1910 __tmp1950 __tmp1952))
(let __tmp1954 (Get __tmp1953 1))
(let __tmp1955 (Single __tmp1954))
(let __tmp1956 (Get __tmp1953 0))
(let __tmp1957 (Single __tmp1956))
(let __tmp1958 (Concat __tmp1955 __tmp1957))
(let __tmp1959 (TCons __tmp25 __tmp1568))
(let __tmp1960 (TCons __tmp0 __tmp1959))
(let __tmp1961 (TupleT __tmp1960))
(let __tmp1962 (InFunc "cg"))
(let __tmp1963 (Arg __tmp1961 __tmp1962))
(let __tmp1964 (Get __tmp1963 0))
(let __tmp1965 (Single __tmp1964))
(let __tmp1966 (Get __tmp1963 2))
(let __tmp1967 (Single __tmp1966))
(let __tmp1968 (Get __tmp1963 4))
(let __tmp1969 (Single __tmp1968))
(let __tmp1970 (Concat __tmp1967 __tmp1969))
(let __tmp1971 (Concat __tmp1965 __tmp1970))
(let __tmp1972 (Call "vec_copy" __tmp1971))
(let __tmp1973 (Get __tmp1971 0))
(let __tmp1974 (Single __tmp1973))
(let __tmp1975 (Const __tmp33 __tmp1961 __tmp1962))
(let __tmp1976 (Single __tmp1975))
(let __tmp1977 (Get __tmp1971 1))
(let __tmp1978 (Single __tmp1977))
(let __tmp1979 (Get __tmp1971 2))
(let __tmp1980 (Single __tmp1979))
(let __tmp1981 (Concat __tmp1978 __tmp1980))
(let __tmp1982 (Concat __tmp1976 __tmp1981))
(let __tmp1983 (Concat __tmp1974 __tmp1982))
(let __tmp1984 (Call "vec_mul" __tmp1983))
(let __tmp1985 (Get __tmp1963 1))
(let __tmp1986 (Single __tmp1985))
(let __tmp1987 (Concat __tmp1986 __tmp1972))
(let __tmp1988 (Concat __tmp1965 __tmp1987))
(let __tmp1989 (Call "mat_vec" __tmp1988))
(let __tmp1990 (Get __tmp1988 0))
(let __tmp1991 (Get __tmp1988 3))
(let __tmp1992 (Alloc 0 __tmp1990 __tmp1991 __tmp25))
(let __tmp1993 (Get __tmp1992 1))
(let __tmp1994 (Single __tmp1993))
(let __tmp1995 (Get __tmp1992 0))
(let __tmp1996 (Single __tmp1995))
(let __tmp1997 (Const __tmp18 __tmp1961 __tmp1962))
(let __tmp1998 (Single __tmp1997))
(let __tmp1999 (Const __tmp14 __tmp1961 __tmp1962))
(let __tmp2000 (Single __tmp1999))
(let __tmp2001 (Get __tmp1988 2))
(let __tmp2002 (Single __tmp2001))
(let __tmp2003 (Get __tmp1988 1))
(let __tmp2004 (Single __tmp2003))
(let __tmp2005 (Single __tmp1990))
(let __tmp2006 (Concat __tmp2004 __tmp2005))
(let __tmp2007 (Concat __tmp2002 __tmp2006))
(let __tmp2008 (Concat __tmp2000 __tmp2007))
(let __tmp2009 (Concat __tmp1998 __tmp2008))
(let __tmp2010 (Concat __tmp1996 __tmp2009))
(let __tmp2011 (Concat __tmp1994 __tmp2010))
(let __tmp2012 (InFunc " loop_ctx_31"))
(let __tmp2013 (Arg __tmp720 __tmp2012))
(let __tmp2014 (Get __tmp2013 2))
(let __tmp2015 (Get __tmp2013 6))
(let __tmp2016 (Bop __tmp9 __tmp2014 __tmp2015))
(let __tmp2017 (Single __tmp2016))
(let __tmp2018 (InIf true __tmp2016 __tmp2013))
(let __tmp2019 (Const __tmp18 __tmp720 __tmp2018))
(let __tmp2020 (Arg __tmp720 __tmp2018))
(let __tmp2021 (Get __tmp2020 6))
(let __tmp2022 (Bop __tmp9 __tmp2019 __tmp2021))
(let __tmp2023 (Get __tmp2020 0))
(let __tmp2024 (Single __tmp2023))
(let __tmp2025 (Get __tmp2020 1))
(let __tmp2026 (Single __tmp2025))
(let __tmp2027 (Get __tmp2020 2))
(let __tmp2028 (Single __tmp2027))
(let __tmp2029 (Get __tmp2020 3))
(let __tmp2030 (Single __tmp2029))
(let __tmp2031 (Const __tmp37 __tmp720 __tmp2018))
(let __tmp2032 (Single __tmp2031))
(let __tmp2033 (Single __tmp2019))
(let __tmp2034 (Get __tmp2020 4))
(let __tmp2035 (Single __tmp2034))
(let __tmp2036 (Get __tmp2020 5))
(let __tmp2037 (Single __tmp2036))
(let __tmp2038 (Single __tmp2021))
(let __tmp2039 (Concat __tmp2037 __tmp2038))
(let __tmp2040 (Concat __tmp2035 __tmp2039))
(let __tmp2041 (Concat __tmp2033 __tmp2040))
(let __tmp2042 (Concat __tmp2032 __tmp2041))
(let __tmp2043 (Concat __tmp2030 __tmp2042))
(let __tmp2044 (Concat __tmp2028 __tmp2043))
(let __tmp2045 (Concat __tmp2026 __tmp2044))
(let __tmp2046 (Concat __tmp2024 __tmp2045))
(let __tmp2047 (InIf true __tmp2022 __tmp2046))
(let __tmp2048 (Arg __tmp761 __tmp2047))
(let __tmp2049 (InFunc " loop_ctx_32"))
(let __tmp2050 (Arg __tmp761 __tmp2049))
(let __tmp2051 (Get __tmp2050 3))
(let __tmp2052 (Get __tmp2050 5))
(let __tmp2053 (Bop __tmp59 __tmp2051 __tmp2052))
(let __tmp2054 (Get __tmp2050 8))
(let __tmp2055 (Bop __tmp9 __tmp2053 __tmp2054))
(let __tmp2056 (Single __tmp2055))
(let __tmp2057 (Get __tmp2050 6))
(let __tmp2058 (Bop __tmp69 __tmp2057 __tmp2052))
(let __tmp2059 (Get __tmp2050 7))
(let __tmp2060 (Get __tmp2050 2))
(let __tmp2061 (Bop __tmp20 __tmp2054 __tmp2060))
(let __tmp2062 (Bop __tmp59 __tmp2061 __tmp2052))
(let __tmp2063 (Bop __tmp69 __tmp2059 __tmp2062))
(let __tmp2064 (Get __tmp2050 0))
(let __tmp2065 (Bop __tmp657 __tmp2063 __tmp2064))
(let __tmp2066 (Get __tmp2065 1))
(let __tmp2067 (Bop __tmp657 __tmp2058 __tmp2066))
(let __tmp2068 (Get __tmp2067 1))
(let __tmp2069 (Single __tmp2068))
(let __tmp2070 (Get __tmp2050 1))
(let __tmp2071 (Single __tmp2070))
(let __tmp2072 (Single __tmp2060))
(let __tmp2073 (Concat __tmp2071 __tmp2072))
(let __tmp2074 (Concat __tmp2069 __tmp2073))
(let __tmp2075 (Single __tmp2051))
(let __tmp2076 (Concat __tmp2074 __tmp2075))
(let __tmp2077 (Get __tmp2065 0))
(let __tmp2078 (Get __tmp2067 0))
(let __tmp2079 (Bop __tmp792 __tmp2077 __tmp2078))
(let __tmp2080 (Get __tmp2050 4))
(let __tmp2081 (Bop __tmp143 __tmp2079 __tmp2080))
(let __tmp2082 (Single __tmp2081))
(let __tmp2083 (Single __tmp2053))
(let __tmp2084 (Single __tmp2057))
(let __tmp2085 (Concat __tmp2083 __tmp2084))
(let __tmp2086 (Single __tmp2059))
(let __tmp2087 (Concat __tmp2085 __tmp2086))
(let __tmp2088 (Single __tmp2054))
(let __tmp2089 (Concat __tmp2087 __tmp2088))
(let __tmp2090 (Concat __tmp2082 __tmp2089))
(let __tmp2091 (Concat __tmp2076 __tmp2090))
(let __tmp2092 (Concat __tmp2056 __tmp2091))
(let __tmp2093 (DoWhile __tmp2048 __tmp2092))
(let __tmp2094 (InIf false __tmp2022 __tmp2046))
(let __tmp2095 (Arg __tmp761 __tmp2094))
(let __tmp2096 (If __tmp2022 __tmp2046 __tmp2093 __tmp2095))
(let __tmp2097 (Get __tmp2096 1))
(let __tmp2098 (Bop __tmp69 __tmp2097 __tmp2027))
(let __tmp2099 (Get __tmp2096 4))
(let __tmp2100 (Get __tmp2096 0))
(let __tmp2101 (Top __tmp68 __tmp2098 __tmp2099 __tmp2100))
(let __tmp2102 (Single __tmp2101))
(let __tmp2103 (Single __tmp2097))
(let __tmp2104 (Concat __tmp2102 __tmp2103))
(let __tmp2105 (Bop __tmp59 __tmp2029 __tmp2027))
(let __tmp2106 (Single __tmp2105))
(let __tmp2107 (Get __tmp2096 6))
(let __tmp2108 (Single __tmp2107))
(let __tmp2109 (Get __tmp2096 7))
(let __tmp2110 (Single __tmp2109))
(let __tmp2111 (Concat __tmp2110 __tmp2038))
(let __tmp2112 (Concat __tmp2108 __tmp2111))
(let __tmp2113 (Concat __tmp2030 __tmp2112))
(let __tmp2114 (Concat __tmp2106 __tmp2113))
(let __tmp2115 (Concat __tmp2104 __tmp2114))
(let __tmp2116 (InIf false __tmp2016 __tmp2013))
(let __tmp2117 (Arg __tmp720 __tmp2116))
(let __tmp2118 (If __tmp2016 __tmp2013 __tmp2115 __tmp2117))
(let __tmp2119 (Concat __tmp2017 __tmp2118))
(let __tmp2120 (DoWhile __tmp2011 __tmp2119))
(let __tmp2121 (Get __tmp2120 1))
(let __tmp2122 (Single __tmp2121))
(let __tmp2123 (Get __tmp2120 0))
(let __tmp2124 (Single __tmp2123))
(let __tmp2125 (Concat __tmp2122 __tmp2124))
(let __tmp2126 (Get __tmp1963 3))
(let __tmp2127 (Single __tmp2126))
(let __tmp2128 (Concat __tmp2127 __tmp1989))
(let __tmp2129 (Concat __tmp1965 __tmp2128))
(let __tmp2130 (Call "vec_sub" __tmp2129))
(let __tmp2131 (Get __tmp2129 0))
(let __tmp2132 (Single __tmp2131))
(let __tmp2133 (Get __tmp2129 1))
(let __tmp2134 (Single __tmp2133))
(let __tmp2135 (Const __tmp846 __tmp1961 __tmp1962))
(let __tmp2136 (Single __tmp2135))
(let __tmp2137 (Get __tmp2129 2))
(let __tmp2138 (Single __tmp2137))
(let __tmp2139 (Get __tmp2129 3))
(let __tmp2140 (Single __tmp2139))
(let __tmp2141 (Concat __tmp2138 __tmp2140))
(let __tmp2142 (Concat __tmp2136 __tmp2141))
(let __tmp2143 (Concat __tmp2132 __tmp2142))
(let __tmp2144 (Call "vec_mul" __tmp2143))
(let __tmp2145 (Concat __tmp2134 __tmp2144))
(let __tmp2146 (Concat __tmp2132 __tmp2145))
(let __tmp2147 (Call "vec_add" __tmp2146))
(let __tmp2148 (Get __tmp2147 0))
(let __tmp2149 (Single __tmp2148))
(let __tmp2150 (Get __tmp2144 0))
(let __tmp2151 (Get __tmp2147 1))
(let __tmp2152 (Bop __tmp384 __tmp2150 __tmp2151))
(let __tmp2153 (Single __tmp2152))
(let __tmp2154 (Concat __tmp2149 __tmp2153))
(let __tmp2155 (Concat __tmp1965 __tmp2130))
(let __tmp2156 (Call "vec_copy" __tmp2155))
(let __tmp2157 (Get __tmp2155 0))
(let __tmp2158 (Single __tmp2157))
(let __tmp2159 (Get __tmp2155 1))
(let __tmp2160 (Single __tmp2159))
(let __tmp2161 (Get __tmp2155 2))
(let __tmp2162 (Single __tmp2161))
(let __tmp2163 (Concat __tmp2160 __tmp2162))
(let __tmp2164 (Concat __tmp1976 __tmp2163))
(let __tmp2165 (Concat __tmp2158 __tmp2164))
(let __tmp2166 (Call "vec_mul" __tmp2165))
(let __tmp2167 (Get __tmp2130 0))
(let __tmp2168 (Single __tmp2167))
(let __tmp2169 (Get __tmp2156 1))
(let __tmp2170 (Single __tmp2169))
(let __tmp2171 (Concat __tmp2168 __tmp2170))
(let __tmp2172 (Concat __tmp2168 __tmp2171))
(let __tmp2173 (Concat __tmp1965 __tmp2172))
(let __tmp2174 (Call "dot_p" __tmp2173))
(let __tmp2175 (Get __tmp2173 0))
(let __tmp2176 (Bop __tmp9 __tmp1997 __tmp2175))
(let __tmp2177 (Get __tmp2173 3))
(let __tmp2178 (Single __tmp2177))
(let __tmp2179 (Const __tmp37 __tmp1961 __tmp1962))
(let __tmp2180 (Single __tmp2179))
(let __tmp2181 (Get __tmp2173 2))
(let __tmp2182 (Single __tmp2181))
(let __tmp2183 (Get __tmp2173 1))
(let __tmp2184 (Single __tmp2183))
(let __tmp2185 (Single __tmp2175))
(let __tmp2186 (Concat __tmp2184 __tmp2185))
(let __tmp2187 (Concat __tmp2182 __tmp2186))
(let __tmp2188 (Concat __tmp2000 __tmp2187))
(let __tmp2189 (Concat __tmp1998 __tmp2188))
(let __tmp2190 (Concat __tmp2180 __tmp2189))
(let __tmp2191 (Concat __tmp2178 __tmp2190))
(let __tmp2192 (InIf true __tmp2176 __tmp2191))
(let __tmp2193 (Arg __tmp894 __tmp2192))
(let __tmp2194 (InFunc " loop_ctx_33"))
(let __tmp2195 (Arg __tmp894 __tmp2194))
(let __tmp2196 (Get __tmp2195 3))
(let __tmp2197 (Get __tmp2195 2))
(let __tmp2198 (Bop __tmp59 __tmp2196 __tmp2197))
(let __tmp2199 (Get __tmp2195 6))
(let __tmp2200 (Bop __tmp9 __tmp2198 __tmp2199))
(let __tmp2201 (Single __tmp2200))
(let __tmp2202 (Get __tmp2195 4))
(let __tmp2203 (Bop __tmp69 __tmp2202 __tmp2197))
(let __tmp2204 (Get __tmp2195 5))
(let __tmp2205 (Bop __tmp69 __tmp2204 __tmp2197))
(let __tmp2206 (Get __tmp2195 0))
(let __tmp2207 (Bop __tmp657 __tmp2205 __tmp2206))
(let __tmp2208 (Get __tmp2207 1))
(let __tmp2209 (Bop __tmp657 __tmp2203 __tmp2208))
(let __tmp2210 (Get __tmp2209 1))
(let __tmp2211 (Single __tmp2210))
(let __tmp2212 (Get __tmp2207 0))
(let __tmp2213 (Get __tmp2209 0))
(let __tmp2214 (Bop __tmp792 __tmp2212 __tmp2213))
(let __tmp2215 (Get __tmp2195 1))
(let __tmp2216 (Bop __tmp143 __tmp2214 __tmp2215))
(let __tmp2217 (Single __tmp2216))
(let __tmp2218 (Single __tmp2198))
(let __tmp2219 (Single __tmp2196))
(let __tmp2220 (Concat __tmp2218 __tmp2219))
(let __tmp2221 (Single __tmp2202))
(let __tmp2222 (Concat __tmp2220 __tmp2221))
(let __tmp2223 (Single __tmp2204))
(let __tmp2224 (Concat __tmp2222 __tmp2223))
(let __tmp2225 (Single __tmp2199))
(let __tmp2226 (Concat __tmp2224 __tmp2225))
(let __tmp2227 (Concat __tmp2217 __tmp2226))
(let __tmp2228 (Concat __tmp2211 __tmp2227))
(let __tmp2229 (Concat __tmp2201 __tmp2228))
(let __tmp2230 (DoWhile __tmp2193 __tmp2229))
(let __tmp2231 (InIf false __tmp2176 __tmp2191))
(let __tmp2232 (Arg __tmp894 __tmp2231))
(let __tmp2233 (If __tmp2176 __tmp2191 __tmp2230 __tmp2232))
(let __tmp2234 (Get __tmp2233 1))
(let __tmp2235 (Single __tmp2234))
(let __tmp2236 (Get __tmp2233 0))
(let __tmp2237 (Single __tmp2236))
(let __tmp2238 (Concat __tmp2235 __tmp2237))
(let __tmp2239 (InFunc " loop_ctx_9"))
(let __tmp2240 (Arg __tmp320 __tmp2239))
(let __tmp2241 (Get __tmp2240 5))
(let __tmp2242 (Get __tmp2240 11))
(let __tmp2243 (Bop __tmp9 __tmp2241 __tmp2242))
(let __tmp2244 (InIf true __tmp2243 __tmp2240))
(let __tmp2245 (Arg __tmp320 __tmp2244))
(let __tmp2246 (Get __tmp2245 8))
(let __tmp2247 (Single __tmp2246))
(let __tmp2248 (Get __tmp2245 10))
(let __tmp2249 (Single __tmp2248))
(let __tmp2250 (Get __tmp2245 2))
(let __tmp2251 (Single __tmp2250))
(let __tmp2252 (Get __tmp2245 0))
(let __tmp2253 (Single __tmp2252))
(let __tmp2254 (Concat __tmp2251 __tmp2253))
(let __tmp2255 (Concat __tmp2249 __tmp2254))
(let __tmp2256 (Concat __tmp2247 __tmp2255))
(let __tmp2257 (Call "mat_vec" __tmp2256))
(let __tmp2258 (Get __tmp2256 0))
(let __tmp2259 (Get __tmp2256 3))
(let __tmp2260 (Alloc 0 __tmp2258 __tmp2259 __tmp25))
(let __tmp2261 (Get __tmp2260 1))
(let __tmp2262 (Single __tmp2261))
(let __tmp2263 (Get __tmp2260 0))
(let __tmp2264 (Single __tmp2263))
(let __tmp2265 (Const __tmp18 __tmp320 __tmp2244))
(let __tmp2266 (Single __tmp2265))
(let __tmp2267 (Const __tmp14 __tmp320 __tmp2244))
(let __tmp2268 (Single __tmp2267))
(let __tmp2269 (Get __tmp2256 2))
(let __tmp2270 (Single __tmp2269))
(let __tmp2271 (Get __tmp2256 1))
(let __tmp2272 (Single __tmp2271))
(let __tmp2273 (Single __tmp2258))
(let __tmp2274 (Concat __tmp2272 __tmp2273))
(let __tmp2275 (Concat __tmp2270 __tmp2274))
(let __tmp2276 (Concat __tmp2268 __tmp2275))
(let __tmp2277 (Concat __tmp2266 __tmp2276))
(let __tmp2278 (Concat __tmp2264 __tmp2277))
(let __tmp2279 (Concat __tmp2262 __tmp2278))
(let __tmp2280 (InFunc " loop_ctx_34"))
(let __tmp2281 (Arg __tmp720 __tmp2280))
(let __tmp2282 (Get __tmp2281 2))
(let __tmp2283 (Get __tmp2281 6))
(let __tmp2284 (Bop __tmp9 __tmp2282 __tmp2283))
(let __tmp2285 (Single __tmp2284))
(let __tmp2286 (InIf true __tmp2284 __tmp2281))
(let __tmp2287 (Const __tmp18 __tmp720 __tmp2286))
(let __tmp2288 (Arg __tmp720 __tmp2286))
(let __tmp2289 (Get __tmp2288 6))
(let __tmp2290 (Bop __tmp9 __tmp2287 __tmp2289))
(let __tmp2291 (Get __tmp2288 0))
(let __tmp2292 (Single __tmp2291))
(let __tmp2293 (Get __tmp2288 1))
(let __tmp2294 (Single __tmp2293))
(let __tmp2295 (Get __tmp2288 2))
(let __tmp2296 (Single __tmp2295))
(let __tmp2297 (Get __tmp2288 3))
(let __tmp2298 (Single __tmp2297))
(let __tmp2299 (Const __tmp37 __tmp720 __tmp2286))
(let __tmp2300 (Single __tmp2299))
(let __tmp2301 (Single __tmp2287))
(let __tmp2302 (Get __tmp2288 4))
(let __tmp2303 (Single __tmp2302))
(let __tmp2304 (Get __tmp2288 5))
(let __tmp2305 (Single __tmp2304))
(let __tmp2306 (Single __tmp2289))
(let __tmp2307 (Concat __tmp2305 __tmp2306))
(let __tmp2308 (Concat __tmp2303 __tmp2307))
(let __tmp2309 (Concat __tmp2301 __tmp2308))
(let __tmp2310 (Concat __tmp2300 __tmp2309))
(let __tmp2311 (Concat __tmp2298 __tmp2310))
(let __tmp2312 (Concat __tmp2296 __tmp2311))
(let __tmp2313 (Concat __tmp2294 __tmp2312))
(let __tmp2314 (Concat __tmp2292 __tmp2313))
(let __tmp2315 (InIf true __tmp2290 __tmp2314))
(let __tmp2316 (Arg __tmp761 __tmp2315))
(let __tmp2317 (InFunc " loop_ctx_35"))
(let __tmp2318 (Arg __tmp761 __tmp2317))
(let __tmp2319 (Get __tmp2318 3))
(let __tmp2320 (Get __tmp2318 5))
(let __tmp2321 (Bop __tmp59 __tmp2319 __tmp2320))
(let __tmp2322 (Get __tmp2318 8))
(let __tmp2323 (Bop __tmp9 __tmp2321 __tmp2322))
(let __tmp2324 (Single __tmp2323))
(let __tmp2325 (Get __tmp2318 6))
(let __tmp2326 (Bop __tmp69 __tmp2325 __tmp2320))
(let __tmp2327 (Get __tmp2318 7))
(let __tmp2328 (Get __tmp2318 2))
(let __tmp2329 (Bop __tmp20 __tmp2322 __tmp2328))
(let __tmp2330 (Bop __tmp59 __tmp2329 __tmp2320))
(let __tmp2331 (Bop __tmp69 __tmp2327 __tmp2330))
(let __tmp2332 (Get __tmp2318 0))
(let __tmp2333 (Bop __tmp657 __tmp2331 __tmp2332))
(let __tmp2334 (Get __tmp2333 1))
(let __tmp2335 (Bop __tmp657 __tmp2326 __tmp2334))
(let __tmp2336 (Get __tmp2335 1))
(let __tmp2337 (Single __tmp2336))
(let __tmp2338 (Get __tmp2318 1))
(let __tmp2339 (Single __tmp2338))
(let __tmp2340 (Single __tmp2328))
(let __tmp2341 (Concat __tmp2339 __tmp2340))
(let __tmp2342 (Concat __tmp2337 __tmp2341))
(let __tmp2343 (Single __tmp2319))
(let __tmp2344 (Concat __tmp2342 __tmp2343))
(let __tmp2345 (Get __tmp2333 0))
(let __tmp2346 (Get __tmp2335 0))
(let __tmp2347 (Bop __tmp792 __tmp2345 __tmp2346))
(let __tmp2348 (Get __tmp2318 4))
(let __tmp2349 (Bop __tmp143 __tmp2347 __tmp2348))
(let __tmp2350 (Single __tmp2349))
(let __tmp2351 (Single __tmp2321))
(let __tmp2352 (Single __tmp2325))
(let __tmp2353 (Concat __tmp2351 __tmp2352))
(let __tmp2354 (Single __tmp2327))
(let __tmp2355 (Concat __tmp2353 __tmp2354))
(let __tmp2356 (Single __tmp2322))
(let __tmp2357 (Concat __tmp2355 __tmp2356))
(let __tmp2358 (Concat __tmp2350 __tmp2357))
(let __tmp2359 (Concat __tmp2344 __tmp2358))
(let __tmp2360 (Concat __tmp2324 __tmp2359))
(let __tmp2361 (DoWhile __tmp2316 __tmp2360))
(let __tmp2362 (InIf false __tmp2290 __tmp2314))
(let __tmp2363 (Arg __tmp761 __tmp2362))
(let __tmp2364 (If __tmp2290 __tmp2314 __tmp2361 __tmp2363))
(let __tmp2365 (Get __tmp2364 1))
(let __tmp2366 (Bop __tmp69 __tmp2365 __tmp2295))
(let __tmp2367 (Get __tmp2364 4))
(let __tmp2368 (Get __tmp2364 0))
(let __tmp2369 (Top __tmp68 __tmp2366 __tmp2367 __tmp2368))
(let __tmp2370 (Single __tmp2369))
(let __tmp2371 (Single __tmp2365))
(let __tmp2372 (Concat __tmp2370 __tmp2371))
(let __tmp2373 (Bop __tmp59 __tmp2297 __tmp2295))
(let __tmp2374 (Single __tmp2373))
(let __tmp2375 (Get __tmp2364 6))
(let __tmp2376 (Single __tmp2375))
(let __tmp2377 (Get __tmp2364 7))
(let __tmp2378 (Single __tmp2377))
(let __tmp2379 (Concat __tmp2378 __tmp2306))
(let __tmp2380 (Concat __tmp2376 __tmp2379))
(let __tmp2381 (Concat __tmp2298 __tmp2380))
(let __tmp2382 (Concat __tmp2374 __tmp2381))
(let __tmp2383 (Concat __tmp2372 __tmp2382))
(let __tmp2384 (InIf false __tmp2284 __tmp2281))
(let __tmp2385 (Arg __tmp720 __tmp2384))
(let __tmp2386 (If __tmp2284 __tmp2281 __tmp2383 __tmp2385))
(let __tmp2387 (Concat __tmp2285 __tmp2386))
(let __tmp2388 (DoWhile __tmp2279 __tmp2387))
(let __tmp2389 (Get __tmp2388 1))
(let __tmp2390 (Single __tmp2389))
(let __tmp2391 (Get __tmp2388 0))
(let __tmp2392 (Single __tmp2391))
(let __tmp2393 (Concat __tmp2390 __tmp2392))
(let __tmp2394 (Concat __tmp2251 __tmp2257))
(let __tmp2395 (Concat __tmp2247 __tmp2394))
(let __tmp2396 (Call "dot_p" __tmp2395))
(let __tmp2397 (Get __tmp2395 0))
(let __tmp2398 (Bop __tmp9 __tmp2265 __tmp2397))
(let __tmp2399 (Get __tmp2395 3))
(let __tmp2400 (Single __tmp2399))
(let __tmp2401 (Const __tmp37 __tmp320 __tmp2244))
(let __tmp2402 (Single __tmp2401))
(let __tmp2403 (Get __tmp2395 2))
(let __tmp2404 (Single __tmp2403))
(let __tmp2405 (Get __tmp2395 1))
(let __tmp2406 (Single __tmp2405))
(let __tmp2407 (Single __tmp2397))
(let __tmp2408 (Concat __tmp2406 __tmp2407))
(let __tmp2409 (Concat __tmp2404 __tmp2408))
(let __tmp2410 (Concat __tmp2268 __tmp2409))
(let __tmp2411 (Concat __tmp2266 __tmp2410))
(let __tmp2412 (Concat __tmp2402 __tmp2411))
(let __tmp2413 (Concat __tmp2400 __tmp2412))
(let __tmp2414 (InIf true __tmp2398 __tmp2413))
(let __tmp2415 (Arg __tmp894 __tmp2414))
(let __tmp2416 (InFunc " loop_ctx_36"))
(let __tmp2417 (Arg __tmp894 __tmp2416))
(let __tmp2418 (Get __tmp2417 3))
(let __tmp2419 (Get __tmp2417 2))
(let __tmp2420 (Bop __tmp59 __tmp2418 __tmp2419))
(let __tmp2421 (Get __tmp2417 6))
(let __tmp2422 (Bop __tmp9 __tmp2420 __tmp2421))
(let __tmp2423 (Single __tmp2422))
(let __tmp2424 (Get __tmp2417 4))
(let __tmp2425 (Bop __tmp69 __tmp2424 __tmp2419))
(let __tmp2426 (Get __tmp2417 5))
(let __tmp2427 (Bop __tmp69 __tmp2426 __tmp2419))
(let __tmp2428 (Get __tmp2417 0))
(let __tmp2429 (Bop __tmp657 __tmp2427 __tmp2428))
(let __tmp2430 (Get __tmp2429 1))
(let __tmp2431 (Bop __tmp657 __tmp2425 __tmp2430))
(let __tmp2432 (Get __tmp2431 1))
(let __tmp2433 (Single __tmp2432))
(let __tmp2434 (Get __tmp2429 0))
(let __tmp2435 (Get __tmp2431 0))
(let __tmp2436 (Bop __tmp792 __tmp2434 __tmp2435))
(let __tmp2437 (Get __tmp2417 1))
(let __tmp2438 (Bop __tmp143 __tmp2436 __tmp2437))
(let __tmp2439 (Single __tmp2438))
(let __tmp2440 (Single __tmp2420))
(let __tmp2441 (Single __tmp2418))
(let __tmp2442 (Concat __tmp2440 __tmp2441))
(let __tmp2443 (Single __tmp2424))
(let __tmp2444 (Concat __tmp2442 __tmp2443))
(let __tmp2445 (Single __tmp2426))
(let __tmp2446 (Concat __tmp2444 __tmp2445))
(let __tmp2447 (Single __tmp2421))
(let __tmp2448 (Concat __tmp2446 __tmp2447))
(let __tmp2449 (Concat __tmp2439 __tmp2448))
(let __tmp2450 (Concat __tmp2433 __tmp2449))
(let __tmp2451 (Concat __tmp2423 __tmp2450))
(let __tmp2452 (DoWhile __tmp2415 __tmp2451))
(let __tmp2453 (InIf false __tmp2398 __tmp2413))
(let __tmp2454 (Arg __tmp894 __tmp2453))
(let __tmp2455 (If __tmp2398 __tmp2413 __tmp2452 __tmp2454))
(let __tmp2456 (Get __tmp2455 1))
(let __tmp2457 (Single __tmp2456))
(let __tmp2458 (Get __tmp2455 0))
(let __tmp2459 (Single __tmp2458))
(let __tmp2460 (Concat __tmp2457 __tmp2459))
(let __tmp2461 (Get __tmp2245 7))
(let __tmp2462 (Get __tmp2396 0))
(let __tmp2463 (Bop __tmp290 __tmp2461 __tmp2462))
(let __tmp2464 (Single __tmp2463))
(let __tmp2465 (Get __tmp2396 1))
(let __tmp2466 (Single __tmp2465))
(let __tmp2467 (Concat __tmp2251 __tmp2466))
(let __tmp2468 (Concat __tmp2464 __tmp2467))
(let __tmp2469 (Concat __tmp2247 __tmp2468))
(let __tmp2470 (Call "vec_mul" __tmp2469))
(let __tmp2471 (Get __tmp2469 0))
(let __tmp2472 (Bop __tmp9 __tmp2265 __tmp2471))
(let __tmp2473 (Get __tmp2469 3))
(let __tmp2474 (Alloc 0 __tmp2471 __tmp2473 __tmp25))
(let __tmp2475 (Get __tmp2474 1))
(let __tmp2476 (Single __tmp2475))
(let __tmp2477 (Get __tmp2474 0))
(let __tmp2478 (Single __tmp2477))
(let __tmp2479 (Get __tmp2469 1))
(let __tmp2480 (Single __tmp2479))
(let __tmp2481 (Get __tmp2469 2))
(let __tmp2482 (Single __tmp2481))
(let __tmp2483 (Single __tmp2471))
(let __tmp2484 (Concat __tmp2482 __tmp2483))
(let __tmp2485 (Concat __tmp2480 __tmp2484))
(let __tmp2486 (Concat __tmp2268 __tmp2485))
(let __tmp2487 (Concat __tmp2266 __tmp2486))
(let __tmp2488 (Concat __tmp2478 __tmp2487))
(let __tmp2489 (Concat __tmp2476 __tmp2488))
(let __tmp2490 (InIf true __tmp2472 __tmp2489))
(let __tmp2491 (Arg __tmp1164 __tmp2490))
(let __tmp2492 (InFunc " loop_ctx_37"))
(let __tmp2493 (Arg __tmp1164 __tmp2492))
(let __tmp2494 (Get __tmp2493 3))
(let __tmp2495 (Get __tmp2493 2))
(let __tmp2496 (Bop __tmp59 __tmp2494 __tmp2495))
(let __tmp2497 (Get __tmp2493 6))
(let __tmp2498 (Bop __tmp9 __tmp2496 __tmp2497))
(let __tmp2499 (Single __tmp2498))
(let __tmp2500 (Get __tmp2493 1))
(let __tmp2501 (Bop __tmp69 __tmp2500 __tmp2495))
(let __tmp2502 (Get __tmp2493 4))
(let __tmp2503 (Get __tmp2493 5))
(let __tmp2504 (Bop __tmp69 __tmp2503 __tmp2495))
(let __tmp2505 (Get __tmp2493 0))
(let __tmp2506 (Bop __tmp657 __tmp2504 __tmp2505))
(let __tmp2507 (Get __tmp2506 0))
(let __tmp2508 (Bop __tmp792 __tmp2502 __tmp2507))
(let __tmp2509 (Get __tmp2506 1))
(let __tmp2510 (Top __tmp68 __tmp2501 __tmp2508 __tmp2509))
(let __tmp2511 (Single __tmp2510))
(let __tmp2512 (Single __tmp2500))
(let __tmp2513 (Single __tmp2496))
(let __tmp2514 (Single __tmp2494))
(let __tmp2515 (Concat __tmp2513 __tmp2514))
(let __tmp2516 (Concat __tmp2512 __tmp2515))
(let __tmp2517 (Single __tmp2502))
(let __tmp2518 (Concat __tmp2516 __tmp2517))
(let __tmp2519 (Single __tmp2503))
(let __tmp2520 (Concat __tmp2518 __tmp2519))
(let __tmp2521 (Single __tmp2497))
(let __tmp2522 (Concat __tmp2520 __tmp2521))
(let __tmp2523 (Concat __tmp2511 __tmp2522))
(let __tmp2524 (Concat __tmp2499 __tmp2523))
(let __tmp2525 (DoWhile __tmp2491 __tmp2524))
(let __tmp2526 (InIf false __tmp2472 __tmp2489))
(let __tmp2527 (Arg __tmp1164 __tmp2526))
(let __tmp2528 (If __tmp2472 __tmp2489 __tmp2525 __tmp2527))
(let __tmp2529 (Get __tmp2528 1))
(let __tmp2530 (Single __tmp2529))
(let __tmp2531 (Get __tmp2528 0))
(let __tmp2532 (Single __tmp2531))
(let __tmp2533 (Concat __tmp2530 __tmp2532))
(let __tmp2534 (Get __tmp2257 0))
(let __tmp2535 (Single __tmp2534))
(let __tmp2536 (Get __tmp2470 1))
(let __tmp2537 (Single __tmp2536))
(let __tmp2538 (Concat __tmp2535 __tmp2537))
(let __tmp2539 (Concat __tmp2464 __tmp2538))
(let __tmp2540 (Concat __tmp2247 __tmp2539))
(let __tmp2541 (Call "vec_mul" __tmp2540))
(let __tmp2542 (Get __tmp2540 0))
(let __tmp2543 (Bop __tmp9 __tmp2265 __tmp2542))
(let __tmp2544 (Get __tmp2540 3))
(let __tmp2545 (Alloc 0 __tmp2542 __tmp2544 __tmp25))
(let __tmp2546 (Get __tmp2545 1))
(let __tmp2547 (Single __tmp2546))
(let __tmp2548 (Get __tmp2545 0))
(let __tmp2549 (Single __tmp2548))
(let __tmp2550 (Get __tmp2540 1))
(let __tmp2551 (Single __tmp2550))
(let __tmp2552 (Get __tmp2540 2))
(let __tmp2553 (Single __tmp2552))
(let __tmp2554 (Single __tmp2542))
(let __tmp2555 (Concat __tmp2553 __tmp2554))
(let __tmp2556 (Concat __tmp2551 __tmp2555))
(let __tmp2557 (Concat __tmp2268 __tmp2556))
(let __tmp2558 (Concat __tmp2266 __tmp2557))
(let __tmp2559 (Concat __tmp2549 __tmp2558))
(let __tmp2560 (Concat __tmp2547 __tmp2559))
(let __tmp2561 (InIf true __tmp2543 __tmp2560))
(let __tmp2562 (Arg __tmp1164 __tmp2561))
(let __tmp2563 (InFunc " loop_ctx_38"))
(let __tmp2564 (Arg __tmp1164 __tmp2563))
(let __tmp2565 (Get __tmp2564 3))
(let __tmp2566 (Get __tmp2564 2))
(let __tmp2567 (Bop __tmp59 __tmp2565 __tmp2566))
(let __tmp2568 (Get __tmp2564 6))
(let __tmp2569 (Bop __tmp9 __tmp2567 __tmp2568))
(let __tmp2570 (Single __tmp2569))
(let __tmp2571 (Get __tmp2564 1))
(let __tmp2572 (Bop __tmp69 __tmp2571 __tmp2566))
(let __tmp2573 (Get __tmp2564 4))
(let __tmp2574 (Get __tmp2564 5))
(let __tmp2575 (Bop __tmp69 __tmp2574 __tmp2566))
(let __tmp2576 (Get __tmp2564 0))
(let __tmp2577 (Bop __tmp657 __tmp2575 __tmp2576))
(let __tmp2578 (Get __tmp2577 0))
(let __tmp2579 (Bop __tmp792 __tmp2573 __tmp2578))
(let __tmp2580 (Get __tmp2577 1))
(let __tmp2581 (Top __tmp68 __tmp2572 __tmp2579 __tmp2580))
(let __tmp2582 (Single __tmp2581))
(let __tmp2583 (Single __tmp2571))
(let __tmp2584 (Single __tmp2567))
(let __tmp2585 (Single __tmp2565))
(let __tmp2586 (Concat __tmp2584 __tmp2585))
(let __tmp2587 (Concat __tmp2583 __tmp2586))
(let __tmp2588 (Single __tmp2573))
(let __tmp2589 (Concat __tmp2587 __tmp2588))
(let __tmp2590 (Single __tmp2574))
(let __tmp2591 (Concat __tmp2589 __tmp2590))
(let __tmp2592 (Single __tmp2568))
(let __tmp2593 (Concat __tmp2591 __tmp2592))
(let __tmp2594 (Concat __tmp2582 __tmp2593))
(let __tmp2595 (Concat __tmp2570 __tmp2594))
(let __tmp2596 (DoWhile __tmp2562 __tmp2595))
(let __tmp2597 (InIf false __tmp2543 __tmp2560))
(let __tmp2598 (Arg __tmp1164 __tmp2597))
(let __tmp2599 (If __tmp2543 __tmp2560 __tmp2596 __tmp2598))
(let __tmp2600 (Get __tmp2599 1))
(let __tmp2601 (Single __tmp2600))
(let __tmp2602 (Get __tmp2599 0))
(let __tmp2603 (Single __tmp2602))
(let __tmp2604 (Concat __tmp2601 __tmp2603))
(let __tmp2605 (Get __tmp2245 1))
(let __tmp2606 (Single __tmp2605))
(let __tmp2607 (Get __tmp2470 0))
(let __tmp2608 (Single __tmp2607))
(let __tmp2609 (Get __tmp2541 1))
(let __tmp2610 (Single __tmp2609))
(let __tmp2611 (Concat __tmp2608 __tmp2610))
(let __tmp2612 (Concat __tmp2606 __tmp2611))
(let __tmp2613 (Concat __tmp2247 __tmp2612))
(let __tmp2614 (Call "vec_add_inp" __tmp2613))
(let __tmp2615 (Call "vec_add" __tmp2613))
(let __tmp2616 (Get __tmp2615 0))
(let __tmp2617 (Single __tmp2616))
(let __tmp2618 (Get __tmp2613 1))
(let __tmp2619 (Get __tmp2615 1))
(let __tmp2620 (Bop __tmp384 __tmp2618 __tmp2619))
(let __tmp2621 (Single __tmp2620))
(let __tmp2622 (Concat __tmp2617 __tmp2621))
(let __tmp2623 (Get __tmp2245 3))
(let __tmp2624 (Single __tmp2623))
(let __tmp2625 (Get __tmp2541 0))
(let __tmp2626 (Single __tmp2625))
(let __tmp2627 (Get __tmp2614 1))
(let __tmp2628 (Single __tmp2627))
(let __tmp2629 (Concat __tmp2626 __tmp2628))
(let __tmp2630 (Concat __tmp2624 __tmp2629))
(let __tmp2631 (Concat __tmp2247 __tmp2630))
(let __tmp2632 (Call "vec_sub_inp" __tmp2631))
(let __tmp2633 (Call "vec_sub" __tmp2631))
(let __tmp2634 (Get __tmp2633 0))
(let __tmp2635 (Single __tmp2634))
(let __tmp2636 (Get __tmp2631 1))
(let __tmp2637 (Get __tmp2633 1))
(let __tmp2638 (Bop __tmp384 __tmp2636 __tmp2637))
(let __tmp2639 (Single __tmp2638))
(let __tmp2640 (Concat __tmp2635 __tmp2639))
(let __tmp2641 (Get __tmp2632 0))
(let __tmp2642 (Single __tmp2641))
(let __tmp2643 (Get __tmp2632 1))
(let __tmp2644 (Bop __tmp384 __tmp2534 __tmp2643))
(let __tmp2645 (Bop __tmp384 __tmp2607 __tmp2644))
(let __tmp2646 (Bop __tmp384 __tmp2625 __tmp2645))
(let __tmp2647 (Single __tmp2646))
(let __tmp2648 (Concat __tmp2642 __tmp2647))
(let __tmp2649 (Concat __tmp2642 __tmp2648))
(let __tmp2650 (Concat __tmp2247 __tmp2649))
(let __tmp2651 (Call "dot_p" __tmp2650))
(let __tmp2652 (Get __tmp2650 0))
(let __tmp2653 (Bop __tmp9 __tmp2265 __tmp2652))
(let __tmp2654 (Get __tmp2650 3))
(let __tmp2655 (Single __tmp2654))
(let __tmp2656 (Get __tmp2650 2))
(let __tmp2657 (Single __tmp2656))
(let __tmp2658 (Get __tmp2650 1))
(let __tmp2659 (Single __tmp2658))
(let __tmp2660 (Single __tmp2652))
(let __tmp2661 (Concat __tmp2659 __tmp2660))
(let __tmp2662 (Concat __tmp2657 __tmp2661))
(let __tmp2663 (Concat __tmp2268 __tmp2662))
(let __tmp2664 (Concat __tmp2266 __tmp2663))
(let __tmp2665 (Concat __tmp2402 __tmp2664))
(let __tmp2666 (Concat __tmp2655 __tmp2665))
(let __tmp2667 (InIf true __tmp2653 __tmp2666))
(let __tmp2668 (Arg __tmp894 __tmp2667))
(let __tmp2669 (InFunc " loop_ctx_39"))
(let __tmp2670 (Arg __tmp894 __tmp2669))
(let __tmp2671 (Get __tmp2670 3))
(let __tmp2672 (Get __tmp2670 2))
(let __tmp2673 (Bop __tmp59 __tmp2671 __tmp2672))
(let __tmp2674 (Get __tmp2670 6))
(let __tmp2675 (Bop __tmp9 __tmp2673 __tmp2674))
(let __tmp2676 (Single __tmp2675))
(let __tmp2677 (Get __tmp2670 4))
(let __tmp2678 (Bop __tmp69 __tmp2677 __tmp2672))
(let __tmp2679 (Get __tmp2670 5))
(let __tmp2680 (Bop __tmp69 __tmp2679 __tmp2672))
(let __tmp2681 (Get __tmp2670 0))
(let __tmp2682 (Bop __tmp657 __tmp2680 __tmp2681))
(let __tmp2683 (Get __tmp2682 1))
(let __tmp2684 (Bop __tmp657 __tmp2678 __tmp2683))
(let __tmp2685 (Get __tmp2684 1))
(let __tmp2686 (Single __tmp2685))
(let __tmp2687 (Get __tmp2682 0))
(let __tmp2688 (Get __tmp2684 0))
(let __tmp2689 (Bop __tmp792 __tmp2687 __tmp2688))
(let __tmp2690 (Get __tmp2670 1))
(let __tmp2691 (Bop __tmp143 __tmp2689 __tmp2690))
(let __tmp2692 (Single __tmp2691))
(let __tmp2693 (Single __tmp2673))
(let __tmp2694 (Single __tmp2671))
(let __tmp2695 (Concat __tmp2693 __tmp2694))
(let __tmp2696 (Single __tmp2677))
(let __tmp2697 (Concat __tmp2695 __tmp2696))
(let __tmp2698 (Single __tmp2679))
(let __tmp2699 (Concat __tmp2697 __tmp2698))
(let __tmp2700 (Single __tmp2674))
(let __tmp2701 (Concat __tmp2699 __tmp2700))
(let __tmp2702 (Concat __tmp2692 __tmp2701))
(let __tmp2703 (Concat __tmp2686 __tmp2702))
(let __tmp2704 (Concat __tmp2676 __tmp2703))
(let __tmp2705 (DoWhile __tmp2668 __tmp2704))
(let __tmp2706 (InIf false __tmp2653 __tmp2666))
(let __tmp2707 (Arg __tmp894 __tmp2706))
(let __tmp2708 (If __tmp2653 __tmp2666 __tmp2705 __tmp2707))
(let __tmp2709 (Get __tmp2708 1))
(let __tmp2710 (Single __tmp2709))
(let __tmp2711 (Get __tmp2708 0))
(let __tmp2712 (Single __tmp2711))
(let __tmp2713 (Concat __tmp2710 __tmp2712))
(let __tmp2714 (Get __tmp2651 0))
(let __tmp2715 (Get __tmp2245 9))
(let __tmp2716 (Bop __tmp326 __tmp2714 __tmp2715))
(let __tmp2717 (Get __tmp2651 1))
(let __tmp2718 (Single __tmp2717))
(let __tmp2719 (Get __tmp2614 0))
(let __tmp2720 (Single __tmp2719))
(let __tmp2721 (Get __tmp2245 4))
(let __tmp2722 (Single __tmp2721))
(let __tmp2723 (Get __tmp2245 5))
(let __tmp2724 (Single __tmp2723))
(let __tmp2725 (Get __tmp2245 6))
(let __tmp2726 (Single __tmp2725))
(let __tmp2727 (Single __tmp2461))
(let __tmp2728 (Single __tmp2714))
(let __tmp2729 (Single __tmp2715))
(let __tmp2730 (Get __tmp2245 11))
(let __tmp2731 (Single __tmp2730))
(let __tmp2732 (Concat __tmp2249 __tmp2731))
(let __tmp2733 (Concat __tmp2729 __tmp2732))
(let __tmp2734 (Concat __tmp2247 __tmp2733))
(let __tmp2735 (Concat __tmp2728 __tmp2734))
(let __tmp2736 (Concat __tmp2727 __tmp2735))
(let __tmp2737 (Concat __tmp2726 __tmp2736))
(let __tmp2738 (Concat __tmp2724 __tmp2737))
(let __tmp2739 (Concat __tmp2722 __tmp2738))
(let __tmp2740 (Concat __tmp2642 __tmp2739))
(let __tmp2741 (Concat __tmp2251 __tmp2740))
(let __tmp2742 (Concat __tmp2720 __tmp2741))
(let __tmp2743 (Concat __tmp2718 __tmp2742))
(let __tmp2744 (InIf false __tmp2716 __tmp2743))
(let __tmp2745 (Arg __tmp432 __tmp2744))
(let __tmp2746 (Get __tmp2745 9))
(let __tmp2747 (Single __tmp2746))
(let __tmp2748 (Get __tmp2745 8))
(let __tmp2749 (Get __tmp2745 7))
(let __tmp2750 (Bop __tmp290 __tmp2748 __tmp2749))
(let __tmp2751 (Single __tmp2750))
(let __tmp2752 (Get __tmp2745 2))
(let __tmp2753 (Single __tmp2752))
(let __tmp2754 (Get __tmp2745 0))
(let __tmp2755 (Single __tmp2754))
(let __tmp2756 (Concat __tmp2753 __tmp2755))
(let __tmp2757 (Concat __tmp2751 __tmp2756))
(let __tmp2758 (Concat __tmp2747 __tmp2757))
(let __tmp2759 (Call "vec_mul" __tmp2758))
(let __tmp2760 (Const __tmp18 __tmp432 __tmp2744))
(let __tmp2761 (Get __tmp2758 0))
(let __tmp2762 (Bop __tmp9 __tmp2760 __tmp2761))
(let __tmp2763 (Get __tmp2758 3))
(let __tmp2764 (Alloc 0 __tmp2761 __tmp2763 __tmp25))
(let __tmp2765 (Get __tmp2764 1))
(let __tmp2766 (Single __tmp2765))
(let __tmp2767 (Get __tmp2764 0))
(let __tmp2768 (Single __tmp2767))
(let __tmp2769 (Single __tmp2760))
(let __tmp2770 (Const __tmp14 __tmp432 __tmp2744))
(let __tmp2771 (Single __tmp2770))
(let __tmp2772 (Get __tmp2758 1))
(let __tmp2773 (Single __tmp2772))
(let __tmp2774 (Get __tmp2758 2))
(let __tmp2775 (Single __tmp2774))
(let __tmp2776 (Single __tmp2761))
(let __tmp2777 (Concat __tmp2775 __tmp2776))
(let __tmp2778 (Concat __tmp2773 __tmp2777))
(let __tmp2779 (Concat __tmp2771 __tmp2778))
(let __tmp2780 (Concat __tmp2769 __tmp2779))
(let __tmp2781 (Concat __tmp2768 __tmp2780))
(let __tmp2782 (Concat __tmp2766 __tmp2781))
(let __tmp2783 (InIf true __tmp2762 __tmp2782))
(let __tmp2784 (Arg __tmp1164 __tmp2783))
(let __tmp2785 (InFunc " loop_ctx_40"))
(let __tmp2786 (Arg __tmp1164 __tmp2785))
(let __tmp2787 (Get __tmp2786 3))
(let __tmp2788 (Get __tmp2786 2))
(let __tmp2789 (Bop __tmp59 __tmp2787 __tmp2788))
(let __tmp2790 (Get __tmp2786 6))
(let __tmp2791 (Bop __tmp9 __tmp2789 __tmp2790))
(let __tmp2792 (Single __tmp2791))
(let __tmp2793 (Get __tmp2786 1))
(let __tmp2794 (Bop __tmp69 __tmp2793 __tmp2788))
(let __tmp2795 (Get __tmp2786 4))
(let __tmp2796 (Get __tmp2786 5))
(let __tmp2797 (Bop __tmp69 __tmp2796 __tmp2788))
(let __tmp2798 (Get __tmp2786 0))
(let __tmp2799 (Bop __tmp657 __tmp2797 __tmp2798))
(let __tmp2800 (Get __tmp2799 0))
(let __tmp2801 (Bop __tmp792 __tmp2795 __tmp2800))
(let __tmp2802 (Get __tmp2799 1))
(let __tmp2803 (Top __tmp68 __tmp2794 __tmp2801 __tmp2802))
(let __tmp2804 (Single __tmp2803))
(let __tmp2805 (Single __tmp2793))
(let __tmp2806 (Single __tmp2789))
(let __tmp2807 (Single __tmp2787))
(let __tmp2808 (Concat __tmp2806 __tmp2807))
(let __tmp2809 (Concat __tmp2805 __tmp2808))
(let __tmp2810 (Single __tmp2795))
(let __tmp2811 (Concat __tmp2809 __tmp2810))
(let __tmp2812 (Single __tmp2796))
(let __tmp2813 (Concat __tmp2811 __tmp2812))
(let __tmp2814 (Single __tmp2790))
(let __tmp2815 (Concat __tmp2813 __tmp2814))
(let __tmp2816 (Concat __tmp2804 __tmp2815))
(let __tmp2817 (Concat __tmp2792 __tmp2816))
(let __tmp2818 (DoWhile __tmp2784 __tmp2817))
(let __tmp2819 (InIf false __tmp2762 __tmp2782))
(let __tmp2820 (Arg __tmp1164 __tmp2819))
(let __tmp2821 (If __tmp2762 __tmp2782 __tmp2818 __tmp2820))
(let __tmp2822 (Get __tmp2821 1))
(let __tmp2823 (Single __tmp2822))
(let __tmp2824 (Get __tmp2821 0))
(let __tmp2825 (Single __tmp2824))
(let __tmp2826 (Concat __tmp2823 __tmp2825))
(let __tmp2827 (Get __tmp2745 3))
(let __tmp2828 (Single __tmp2827))
(let __tmp2829 (Get __tmp2759 0))
(let __tmp2830 (Single __tmp2829))
(let __tmp2831 (Get __tmp2759 1))
(let __tmp2832 (Bop __tmp384 __tmp2752 __tmp2831))
(let __tmp2833 (Single __tmp2832))
(let __tmp2834 (Concat __tmp2830 __tmp2833))
(let __tmp2835 (Concat __tmp2828 __tmp2834))
(let __tmp2836 (Concat __tmp2747 __tmp2835))
(let __tmp2837 (Call "vec_add" __tmp2836))
(let __tmp2838 (Get __tmp2836 0))
(let __tmp2839 (Bop __tmp9 __tmp2760 __tmp2838))
(let __tmp2840 (Get __tmp2836 3))
(let __tmp2841 (Alloc 0 __tmp2838 __tmp2840 __tmp25))
(let __tmp2842 (Get __tmp2841 1))
(let __tmp2843 (Single __tmp2842))
(let __tmp2844 (Get __tmp2841 0))
(let __tmp2845 (Single __tmp2844))
(let __tmp2846 (Get __tmp2836 2))
(let __tmp2847 (Single __tmp2846))
(let __tmp2848 (Get __tmp2836 1))
(let __tmp2849 (Single __tmp2848))
(let __tmp2850 (Single __tmp2838))
(let __tmp2851 (Concat __tmp2849 __tmp2850))
(let __tmp2852 (Concat __tmp2847 __tmp2851))
(let __tmp2853 (Concat __tmp2771 __tmp2852))
(let __tmp2854 (Concat __tmp2769 __tmp2853))
(let __tmp2855 (Concat __tmp2845 __tmp2854))
(let __tmp2856 (Concat __tmp2843 __tmp2855))
(let __tmp2857 (InIf true __tmp2839 __tmp2856))
(let __tmp2858 (Arg __tmp720 __tmp2857))
(let __tmp2859 (InFunc " loop_ctx_41"))
(let __tmp2860 (Arg __tmp720 __tmp2859))
(let __tmp2861 (Get __tmp2860 3))
(let __tmp2862 (Get __tmp2860 2))
(let __tmp2863 (Bop __tmp59 __tmp2861 __tmp2862))
(let __tmp2864 (Get __tmp2860 6))
(let __tmp2865 (Bop __tmp9 __tmp2863 __tmp2864))
(let __tmp2866 (Single __tmp2865))
(let __tmp2867 (Get __tmp2860 1))
(let __tmp2868 (Bop __tmp69 __tmp2867 __tmp2862))
(let __tmp2869 (Get __tmp2860 5))
(let __tmp2870 (Bop __tmp69 __tmp2869 __tmp2862))
(let __tmp2871 (Get __tmp2860 0))
(let __tmp2872 (Bop __tmp657 __tmp2870 __tmp2871))
(let __tmp2873 (Get __tmp2872 0))
(let __tmp2874 (Get __tmp2860 4))
(let __tmp2875 (Bop __tmp69 __tmp2874 __tmp2862))
(let __tmp2876 (Get __tmp2872 1))
(let __tmp2877 (Bop __tmp657 __tmp2875 __tmp2876))
(let __tmp2878 (Get __tmp2877 0))
(let __tmp2879 (Bop __tmp143 __tmp2873 __tmp2878))
(let __tmp2880 (Get __tmp2877 1))
(let __tmp2881 (Top __tmp68 __tmp2868 __tmp2879 __tmp2880))
(let __tmp2882 (Single __tmp2881))
(let __tmp2883 (Single __tmp2867))
(let __tmp2884 (Single __tmp2863))
(let __tmp2885 (Single __tmp2861))
(let __tmp2886 (Concat __tmp2884 __tmp2885))
(let __tmp2887 (Concat __tmp2883 __tmp2886))
(let __tmp2888 (Concat __tmp2882 __tmp2887))
(let __tmp2889 (Single __tmp2874))
(let __tmp2890 (Single __tmp2869))
(let __tmp2891 (Concat __tmp2889 __tmp2890))
(let __tmp2892 (Single __tmp2864))
(let __tmp2893 (Concat __tmp2891 __tmp2892))
(let __tmp2894 (Concat __tmp2888 __tmp2893))
(let __tmp2895 (Concat __tmp2866 __tmp2894))
(let __tmp2896 (DoWhile __tmp2858 __tmp2895))
(let __tmp2897 (InIf false __tmp2839 __tmp2856))
(let __tmp2898 (Arg __tmp720 __tmp2897))
(let __tmp2899 (If __tmp2839 __tmp2856 __tmp2896 __tmp2898))
(let __tmp2900 (Get __tmp2899 1))
(let __tmp2901 (Single __tmp2900))
(let __tmp2902 (Get __tmp2899 0))
(let __tmp2903 (Single __tmp2902))
(let __tmp2904 (Concat __tmp2901 __tmp2903))
(let __tmp2905 (Get __tmp1983 0))
(let __tmp2906 (Bop __tmp9 __tmp1997 __tmp2905))
(let __tmp2907 (Get __tmp1983 3))
(let __tmp2908 (Alloc 0 __tmp2905 __tmp2907 __tmp25))
(let __tmp2909 (Get __tmp2908 1))
(let __tmp2910 (Single __tmp2909))
(let __tmp2911 (Get __tmp2908 0))
(let __tmp2912 (Single __tmp2911))
(let __tmp2913 (Get __tmp1983 1))
(let __tmp2914 (Single __tmp2913))
(let __tmp2915 (Get __tmp1983 2))
(let __tmp2916 (Single __tmp2915))
(let __tmp2917 (Single __tmp2905))
(let __tmp2918 (Concat __tmp2916 __tmp2917))
(let __tmp2919 (Concat __tmp2914 __tmp2918))
(let __tmp2920 (Concat __tmp2000 __tmp2919))
(let __tmp2921 (Concat __tmp1998 __tmp2920))
(let __tmp2922 (Concat __tmp2912 __tmp2921))
(let __tmp2923 (Concat __tmp2910 __tmp2922))
(let __tmp2924 (InIf true __tmp2906 __tmp2923))
(let __tmp2925 (Arg __tmp1164 __tmp2924))
(let __tmp2926 (InFunc " loop_ctx_42"))
(let __tmp2927 (Arg __tmp1164 __tmp2926))
(let __tmp2928 (Get __tmp2927 3))
(let __tmp2929 (Get __tmp2927 2))
(let __tmp2930 (Bop __tmp59 __tmp2928 __tmp2929))
(let __tmp2931 (Get __tmp2927 6))
(let __tmp2932 (Bop __tmp9 __tmp2930 __tmp2931))
(let __tmp2933 (Single __tmp2932))
(let __tmp2934 (Get __tmp2927 1))
(let __tmp2935 (Bop __tmp69 __tmp2934 __tmp2929))
(let __tmp2936 (Get __tmp2927 4))
(let __tmp2937 (Get __tmp2927 5))
(let __tmp2938 (Bop __tmp69 __tmp2937 __tmp2929))
(let __tmp2939 (Get __tmp2927 0))
(let __tmp2940 (Bop __tmp657 __tmp2938 __tmp2939))
(let __tmp2941 (Get __tmp2940 0))
(let __tmp2942 (Bop __tmp792 __tmp2936 __tmp2941))
(let __tmp2943 (Get __tmp2940 1))
(let __tmp2944 (Top __tmp68 __tmp2935 __tmp2942 __tmp2943))
(let __tmp2945 (Single __tmp2944))
(let __tmp2946 (Single __tmp2934))
(let __tmp2947 (Single __tmp2930))
(let __tmp2948 (Single __tmp2928))
(let __tmp2949 (Concat __tmp2947 __tmp2948))
(let __tmp2950 (Concat __tmp2946 __tmp2949))
(let __tmp2951 (Single __tmp2936))
(let __tmp2952 (Concat __tmp2950 __tmp2951))
(let __tmp2953 (Single __tmp2937))
(let __tmp2954 (Concat __tmp2952 __tmp2953))
(let __tmp2955 (Single __tmp2931))
(let __tmp2956 (Concat __tmp2954 __tmp2955))
(let __tmp2957 (Concat __tmp2945 __tmp2956))
(let __tmp2958 (Concat __tmp2933 __tmp2957))
(let __tmp2959 (DoWhile __tmp2925 __tmp2958))
(let __tmp2960 (InIf false __tmp2906 __tmp2923))
(let __tmp2961 (Arg __tmp1164 __tmp2960))
(let __tmp2962 (If __tmp2906 __tmp2923 __tmp2959 __tmp2961))
(let __tmp2963 (Get __tmp2962 1))
(let __tmp2964 (Single __tmp2963))
(let __tmp2965 (Get __tmp2962 0))
(let __tmp2966 (Single __tmp2965))
(let __tmp2967 (Concat __tmp2964 __tmp2966))
(let __tmp2968 (Get __tmp2143 0))
(let __tmp2969 (Bop __tmp9 __tmp1997 __tmp2968))
(let __tmp2970 (Get __tmp2143 3))
(let __tmp2971 (Alloc 0 __tmp2968 __tmp2970 __tmp25))
(let __tmp2972 (Get __tmp2971 1))
(let __tmp2973 (Single __tmp2972))
(let __tmp2974 (Get __tmp2971 0))
(let __tmp2975 (Single __tmp2974))
(let __tmp2976 (Get __tmp2143 1))
(let __tmp2977 (Single __tmp2976))
(let __tmp2978 (Get __tmp2143 2))
(let __tmp2979 (Single __tmp2978))
(let __tmp2980 (Single __tmp2968))
(let __tmp2981 (Concat __tmp2979 __tmp2980))
(let __tmp2982 (Concat __tmp2977 __tmp2981))
(let __tmp2983 (Concat __tmp2000 __tmp2982))
(let __tmp2984 (Concat __tmp1998 __tmp2983))
(let __tmp2985 (Concat __tmp2975 __tmp2984))
(let __tmp2986 (Concat __tmp2973 __tmp2985))
(let __tmp2987 (InIf true __tmp2969 __tmp2986))
(let __tmp2988 (Arg __tmp1164 __tmp2987))
(let __tmp2989 (InFunc " loop_ctx_43"))
(let __tmp2990 (Arg __tmp1164 __tmp2989))
(let __tmp2991 (Get __tmp2990 3))
(let __tmp2992 (Get __tmp2990 2))
(let __tmp2993 (Bop __tmp59 __tmp2991 __tmp2992))
(let __tmp2994 (Get __tmp2990 6))
(let __tmp2995 (Bop __tmp9 __tmp2993 __tmp2994))
(let __tmp2996 (Single __tmp2995))
(let __tmp2997 (Get __tmp2990 1))
(let __tmp2998 (Bop __tmp69 __tmp2997 __tmp2992))
(let __tmp2999 (Get __tmp2990 4))
(let __tmp3000 (Get __tmp2990 5))
(let __tmp3001 (Bop __tmp69 __tmp3000 __tmp2992))
(let __tmp3002 (Get __tmp2990 0))
(let __tmp3003 (Bop __tmp657 __tmp3001 __tmp3002))
(let __tmp3004 (Get __tmp3003 0))
(let __tmp3005 (Bop __tmp792 __tmp2999 __tmp3004))
(let __tmp3006 (Get __tmp3003 1))
(let __tmp3007 (Top __tmp68 __tmp2998 __tmp3005 __tmp3006))
(let __tmp3008 (Single __tmp3007))
(let __tmp3009 (Single __tmp2997))
(let __tmp3010 (Single __tmp2993))
(let __tmp3011 (Single __tmp2991))
(let __tmp3012 (Concat __tmp3010 __tmp3011))
(let __tmp3013 (Concat __tmp3009 __tmp3012))
(let __tmp3014 (Single __tmp2999))
(let __tmp3015 (Concat __tmp3013 __tmp3014))
(let __tmp3016 (Single __tmp3000))
(let __tmp3017 (Concat __tmp3015 __tmp3016))
(let __tmp3018 (Single __tmp2994))
(let __tmp3019 (Concat __tmp3017 __tmp3018))
(let __tmp3020 (Concat __tmp3008 __tmp3019))
(let __tmp3021 (Concat __tmp2996 __tmp3020))
(let __tmp3022 (DoWhile __tmp2988 __tmp3021))
(let __tmp3023 (InIf false __tmp2969 __tmp2986))
(let __tmp3024 (Arg __tmp1164 __tmp3023))
(let __tmp3025 (If __tmp2969 __tmp2986 __tmp3022 __tmp3024))
(let __tmp3026 (Get __tmp3025 1))
(let __tmp3027 (Single __tmp3026))
(let __tmp3028 (Get __tmp3025 0))
(let __tmp3029 (Single __tmp3028))
(let __tmp3030 (Concat __tmp3027 __tmp3029))
(let __tmp3031 (Get __tmp2146 0))
(let __tmp3032 (Bop __tmp9 __tmp1997 __tmp3031))
(let __tmp3033 (Get __tmp2146 3))
(let __tmp3034 (Alloc 0 __tmp3031 __tmp3033 __tmp25))
(let __tmp3035 (Get __tmp3034 1))
(let __tmp3036 (Single __tmp3035))
(let __tmp3037 (Get __tmp3034 0))
(let __tmp3038 (Single __tmp3037))
(let __tmp3039 (Get __tmp2146 2))
(let __tmp3040 (Single __tmp3039))
(let __tmp3041 (Get __tmp2146 1))
(let __tmp3042 (Single __tmp3041))
(let __tmp3043 (Single __tmp3031))
(let __tmp3044 (Concat __tmp3042 __tmp3043))
(let __tmp3045 (Concat __tmp3040 __tmp3044))
(let __tmp3046 (Concat __tmp2000 __tmp3045))
(let __tmp3047 (Concat __tmp1998 __tmp3046))
(let __tmp3048 (Concat __tmp3038 __tmp3047))
(let __tmp3049 (Concat __tmp3036 __tmp3048))
(let __tmp3050 (InIf true __tmp3032 __tmp3049))
(let __tmp3051 (Arg __tmp720 __tmp3050))
(let __tmp3052 (InFunc " loop_ctx_44"))
(let __tmp3053 (Arg __tmp720 __tmp3052))
(let __tmp3054 (Get __tmp3053 3))
(let __tmp3055 (Get __tmp3053 2))
(let __tmp3056 (Bop __tmp59 __tmp3054 __tmp3055))
(let __tmp3057 (Get __tmp3053 6))
(let __tmp3058 (Bop __tmp9 __tmp3056 __tmp3057))
(let __tmp3059 (Single __tmp3058))
(let __tmp3060 (Get __tmp3053 1))
(let __tmp3061 (Bop __tmp69 __tmp3060 __tmp3055))
(let __tmp3062 (Get __tmp3053 5))
(let __tmp3063 (Bop __tmp69 __tmp3062 __tmp3055))
(let __tmp3064 (Get __tmp3053 0))
(let __tmp3065 (Bop __tmp657 __tmp3063 __tmp3064))
(let __tmp3066 (Get __tmp3065 0))
(let __tmp3067 (Get __tmp3053 4))
(let __tmp3068 (Bop __tmp69 __tmp3067 __tmp3055))
(let __tmp3069 (Get __tmp3065 1))
(let __tmp3070 (Bop __tmp657 __tmp3068 __tmp3069))
(let __tmp3071 (Get __tmp3070 0))
(let __tmp3072 (Bop __tmp143 __tmp3066 __tmp3071))
(let __tmp3073 (Get __tmp3070 1))
(let __tmp3074 (Top __tmp68 __tmp3061 __tmp3072 __tmp3073))
(let __tmp3075 (Single __tmp3074))
(let __tmp3076 (Single __tmp3060))
(let __tmp3077 (Single __tmp3056))
(let __tmp3078 (Single __tmp3054))
(let __tmp3079 (Concat __tmp3077 __tmp3078))
(let __tmp3080 (Concat __tmp3076 __tmp3079))
(let __tmp3081 (Concat __tmp3075 __tmp3080))
(let __tmp3082 (Single __tmp3067))
(let __tmp3083 (Single __tmp3062))
(let __tmp3084 (Concat __tmp3082 __tmp3083))
(let __tmp3085 (Single __tmp3057))
(let __tmp3086 (Concat __tmp3084 __tmp3085))
(let __tmp3087 (Concat __tmp3081 __tmp3086))
(let __tmp3088 (Concat __tmp3059 __tmp3087))
(let __tmp3089 (DoWhile __tmp3051 __tmp3088))
(let __tmp3090 (InIf false __tmp3032 __tmp3049))
(let __tmp3091 (Arg __tmp720 __tmp3090))
(let __tmp3092 (If __tmp3032 __tmp3049 __tmp3089 __tmp3091))
(let __tmp3093 (Get __tmp3092 1))
(let __tmp3094 (Single __tmp3093))
(let __tmp3095 (Get __tmp3092 0))
(let __tmp3096 (Single __tmp3095))
(let __tmp3097 (Concat __tmp3094 __tmp3096))
(let __tmp3098 (Get __tmp2165 0))
(let __tmp3099 (Bop __tmp9 __tmp1997 __tmp3098))
(let __tmp3100 (Get __tmp2165 3))
(let __tmp3101 (Alloc 0 __tmp3098 __tmp3100 __tmp25))
(let __tmp3102 (Get __tmp3101 1))
(let __tmp3103 (Single __tmp3102))
(let __tmp3104 (Get __tmp3101 0))
(let __tmp3105 (Single __tmp3104))
(let __tmp3106 (Get __tmp2165 1))
(let __tmp3107 (Single __tmp3106))
(let __tmp3108 (Get __tmp2165 2))
(let __tmp3109 (Single __tmp3108))
(let __tmp3110 (Single __tmp3098))
(let __tmp3111 (Concat __tmp3109 __tmp3110))
(let __tmp3112 (Concat __tmp3107 __tmp3111))
(let __tmp3113 (Concat __tmp2000 __tmp3112))
(let __tmp3114 (Concat __tmp1998 __tmp3113))
(let __tmp3115 (Concat __tmp3105 __tmp3114))
(let __tmp3116 (Concat __tmp3103 __tmp3115))
(let __tmp3117 (InIf true __tmp3099 __tmp3116))
(let __tmp3118 (Arg __tmp1164 __tmp3117))
(let __tmp3119 (InFunc " loop_ctx_45"))
(let __tmp3120 (Arg __tmp1164 __tmp3119))
(let __tmp3121 (Get __tmp3120 3))
(let __tmp3122 (Get __tmp3120 2))
(let __tmp3123 (Bop __tmp59 __tmp3121 __tmp3122))
(let __tmp3124 (Get __tmp3120 6))
(let __tmp3125 (Bop __tmp9 __tmp3123 __tmp3124))
(let __tmp3126 (Single __tmp3125))
(let __tmp3127 (Get __tmp3120 1))
(let __tmp3128 (Bop __tmp69 __tmp3127 __tmp3122))
(let __tmp3129 (Get __tmp3120 4))
(let __tmp3130 (Get __tmp3120 5))
(let __tmp3131 (Bop __tmp69 __tmp3130 __tmp3122))
(let __tmp3132 (Get __tmp3120 0))
(let __tmp3133 (Bop __tmp657 __tmp3131 __tmp3132))
(let __tmp3134 (Get __tmp3133 0))
(let __tmp3135 (Bop __tmp792 __tmp3129 __tmp3134))
(let __tmp3136 (Get __tmp3133 1))
(let __tmp3137 (Top __tmp68 __tmp3128 __tmp3135 __tmp3136))
(let __tmp3138 (Single __tmp3137))
(let __tmp3139 (Single __tmp3127))
(let __tmp3140 (Single __tmp3123))
(let __tmp3141 (Single __tmp3121))
(let __tmp3142 (Concat __tmp3140 __tmp3141))
(let __tmp3143 (Concat __tmp3139 __tmp3142))
(let __tmp3144 (Single __tmp3129))
(let __tmp3145 (Concat __tmp3143 __tmp3144))
(let __tmp3146 (Single __tmp3130))
(let __tmp3147 (Concat __tmp3145 __tmp3146))
(let __tmp3148 (Single __tmp3124))
(let __tmp3149 (Concat __tmp3147 __tmp3148))
(let __tmp3150 (Concat __tmp3138 __tmp3149))
(let __tmp3151 (Concat __tmp3126 __tmp3150))
(let __tmp3152 (DoWhile __tmp3118 __tmp3151))
(let __tmp3153 (InIf false __tmp3099 __tmp3116))
(let __tmp3154 (Arg __tmp1164 __tmp3153))
(let __tmp3155 (If __tmp3099 __tmp3116 __tmp3152 __tmp3154))
(let __tmp3156 (Get __tmp3155 1))
(let __tmp3157 (Single __tmp3156))
(let __tmp3158 (Get __tmp3155 0))
(let __tmp3159 (Single __tmp3158))
(let __tmp3160 (Concat __tmp3157 __tmp3159))
(let __tmp3161 (Get __tmp2613 0))
(let __tmp3162 (Bop __tmp9 __tmp2265 __tmp3161))
(let __tmp3163 (Get __tmp2613 3))
(let __tmp3164 (Alloc 0 __tmp3161 __tmp3163 __tmp25))
(let __tmp3165 (Get __tmp3164 1))
(let __tmp3166 (Single __tmp3165))
(let __tmp3167 (Get __tmp3164 0))
(let __tmp3168 (Single __tmp3167))
(let __tmp3169 (Get __tmp2613 2))
(let __tmp3170 (Single __tmp3169))
(let __tmp3171 (Single __tmp2618))
(let __tmp3172 (Single __tmp3161))
(let __tmp3173 (Concat __tmp3171 __tmp3172))
(let __tmp3174 (Concat __tmp3170 __tmp3173))
(let __tmp3175 (Concat __tmp2268 __tmp3174))
(let __tmp3176 (Concat __tmp2266 __tmp3175))
(let __tmp3177 (Concat __tmp3168 __tmp3176))
(let __tmp3178 (Concat __tmp3166 __tmp3177))
(let __tmp3179 (InIf true __tmp3162 __tmp3178))
(let __tmp3180 (Arg __tmp720 __tmp3179))
(let __tmp3181 (InFunc " loop_ctx_46"))
(let __tmp3182 (Arg __tmp720 __tmp3181))
(let __tmp3183 (Get __tmp3182 3))
(let __tmp3184 (Get __tmp3182 2))
(let __tmp3185 (Bop __tmp59 __tmp3183 __tmp3184))
(let __tmp3186 (Get __tmp3182 6))
(let __tmp3187 (Bop __tmp9 __tmp3185 __tmp3186))
(let __tmp3188 (Single __tmp3187))
(let __tmp3189 (Get __tmp3182 1))
(let __tmp3190 (Bop __tmp69 __tmp3189 __tmp3184))
(let __tmp3191 (Get __tmp3182 5))
(let __tmp3192 (Bop __tmp69 __tmp3191 __tmp3184))
(let __tmp3193 (Get __tmp3182 0))
(let __tmp3194 (Bop __tmp657 __tmp3192 __tmp3193))
(let __tmp3195 (Get __tmp3194 0))
(let __tmp3196 (Get __tmp3182 4))
(let __tmp3197 (Bop __tmp69 __tmp3196 __tmp3184))
(let __tmp3198 (Get __tmp3194 1))
(let __tmp3199 (Bop __tmp657 __tmp3197 __tmp3198))
(let __tmp3200 (Get __tmp3199 0))
(let __tmp3201 (Bop __tmp143 __tmp3195 __tmp3200))
(let __tmp3202 (Get __tmp3199 1))
(let __tmp3203 (Top __tmp68 __tmp3190 __tmp3201 __tmp3202))
(let __tmp3204 (Single __tmp3203))
(let __tmp3205 (Single __tmp3189))
(let __tmp3206 (Single __tmp3185))
(let __tmp3207 (Single __tmp3183))
(let __tmp3208 (Concat __tmp3206 __tmp3207))
(let __tmp3209 (Concat __tmp3205 __tmp3208))
(let __tmp3210 (Concat __tmp3204 __tmp3209))
(let __tmp3211 (Single __tmp3196))
(let __tmp3212 (Single __tmp3191))
(let __tmp3213 (Concat __tmp3211 __tmp3212))
(let __tmp3214 (Single __tmp3186))
(let __tmp3215 (Concat __tmp3213 __tmp3214))
(let __tmp3216 (Concat __tmp3210 __tmp3215))
(let __tmp3217 (Concat __tmp3188 __tmp3216))
(let __tmp3218 (DoWhile __tmp3180 __tmp3217))
(let __tmp3219 (InIf false __tmp3162 __tmp3178))
(let __tmp3220 (Arg __tmp720 __tmp3219))
(let __tmp3221 (If __tmp3162 __tmp3178 __tmp3218 __tmp3220))
(let __tmp3222 (Get __tmp3221 1))
(let __tmp3223 (Single __tmp3222))
(let __tmp3224 (Get __tmp3221 0))
(let __tmp3225 (Single __tmp3224))
(let __tmp3226 (Concat __tmp3223 __tmp3225))
(let __tmp3227 (Get __tmp2631 0))
(let __tmp3228 (Single __tmp3227))
(let __tmp3229 (Single __tmp2636))
(let __tmp3230 (Const __tmp846 __tmp320 __tmp2244))
(let __tmp3231 (Single __tmp3230))
(let __tmp3232 (Get __tmp2631 2))
(let __tmp3233 (Single __tmp3232))
(let __tmp3234 (Get __tmp2631 3))
(let __tmp3235 (Single __tmp3234))
(let __tmp3236 (Concat __tmp3233 __tmp3235))
(let __tmp3237 (Concat __tmp3231 __tmp3236))
(let __tmp3238 (Concat __tmp3228 __tmp3237))
(let __tmp3239 (Call "vec_mul" __tmp3238))
(let __tmp3240 (Concat __tmp3229 __tmp3239))
(let __tmp3241 (Concat __tmp3228 __tmp3240))
(let __tmp3242 (Call "vec_add" __tmp3241))
(let __tmp3243 (Get __tmp3242 0))
(let __tmp3244 (Single __tmp3243))
(let __tmp3245 (Get __tmp3239 0))
(let __tmp3246 (Get __tmp3242 1))
(let __tmp3247 (Bop __tmp384 __tmp3245 __tmp3246))
(let __tmp3248 (Single __tmp3247))
(let __tmp3249 (Concat __tmp3244 __tmp3248))
(let __tmp3250 (TupleT __tmp3))
(let __tmp3251 (Print ))
(let __tmp3252 (Get __tmp629 0))
(let __tmp3253 (Get __tmp250 0))
(let __tmp3254 (Get __tmp629 1))
(let __tmp3255 (Bop __tmp384 __tmp3253 __tmp3254))
(let __tmp3256 (Bop __tmp384 __tmp240 __tmp3255))
(let __tmp3257 (Bop __tmp384 __tmp242 __tmp3256))
(let __tmp3258 (Bop __tmp384 __tmp238 __tmp3257))
(let __tmp3259 (Bop __tmp3251 __tmp3252 __tmp3258))
(let __tmp3260 (Single __tmp3259))
(let __tmp3261 (Function "main" __tmp5 __tmp3250 __tmp3260))
(let __tmp3262 (TCons __tmp24 __tmp1484))
(let __tmp3263 (TCons __tmp0 __tmp3262))
(let __tmp3264 (TupleT __tmp3263))
(let __tmp3265 (TupleT __tmp1484))
(let __tmp3266 (InFunc "vec_mul"))
(let __tmp3267 (Const __tmp18 __tmp3264 __tmp3266))
(let __tmp3268 (Arg __tmp3264 __tmp3266))
(let __tmp3269 (Get __tmp3268 0))
(let __tmp3270 (Bop __tmp9 __tmp3267 __tmp3269))
(let __tmp3271 (Get __tmp3268 3))
(let __tmp3272 (Alloc 0 __tmp3269 __tmp3271 __tmp25))
(let __tmp3273 (Get __tmp3272 1))
(let __tmp3274 (Single __tmp3273))
(let __tmp3275 (Get __tmp3272 0))
(let __tmp3276 (Single __tmp3275))
(let __tmp3277 (Single __tmp3267))
(let __tmp3278 (Const __tmp14 __tmp3264 __tmp3266))
(let __tmp3279 (Single __tmp3278))
(let __tmp3280 (Get __tmp3268 1))
(let __tmp3281 (Single __tmp3280))
(let __tmp3282 (Get __tmp3268 2))
(let __tmp3283 (Single __tmp3282))
(let __tmp3284 (Single __tmp3269))
(let __tmp3285 (Concat __tmp3283 __tmp3284))
(let __tmp3286 (Concat __tmp3281 __tmp3285))
(let __tmp3287 (Concat __tmp3279 __tmp3286))
(let __tmp3288 (Concat __tmp3277 __tmp3287))
(let __tmp3289 (Concat __tmp3276 __tmp3288))
(let __tmp3290 (Concat __tmp3274 __tmp3289))
(let __tmp3291 (InIf true __tmp3270 __tmp3290))
(let __tmp3292 (Arg __tmp1164 __tmp3291))
(let __tmp3293 (InFunc " loop_ctx_1"))
(let __tmp3294 (Arg __tmp1164 __tmp3293))
(let __tmp3295 (Get __tmp3294 3))
(let __tmp3296 (Get __tmp3294 2))
(let __tmp3297 (Bop __tmp59 __tmp3295 __tmp3296))
(let __tmp3298 (Get __tmp3294 6))
(let __tmp3299 (Bop __tmp9 __tmp3297 __tmp3298))
(let __tmp3300 (Single __tmp3299))
(let __tmp3301 (Get __tmp3294 1))
(let __tmp3302 (Bop __tmp69 __tmp3301 __tmp3296))
(let __tmp3303 (Get __tmp3294 4))
(let __tmp3304 (Get __tmp3294 5))
(let __tmp3305 (Bop __tmp69 __tmp3304 __tmp3296))
(let __tmp3306 (Get __tmp3294 0))
(let __tmp3307 (Bop __tmp657 __tmp3305 __tmp3306))
(let __tmp3308 (Get __tmp3307 0))
(let __tmp3309 (Bop __tmp792 __tmp3303 __tmp3308))
(let __tmp3310 (Get __tmp3307 1))
(let __tmp3311 (Top __tmp68 __tmp3302 __tmp3309 __tmp3310))
(let __tmp3312 (Single __tmp3311))
(let __tmp3313 (Single __tmp3301))
(let __tmp3314 (Single __tmp3297))
(let __tmp3315 (Single __tmp3295))
(let __tmp3316 (Concat __tmp3314 __tmp3315))
(let __tmp3317 (Concat __tmp3313 __tmp3316))
(let __tmp3318 (Single __tmp3303))
(let __tmp3319 (Concat __tmp3317 __tmp3318))
(let __tmp3320 (Single __tmp3304))
(let __tmp3321 (Concat __tmp3319 __tmp3320))
(let __tmp3322 (Single __tmp3298))
(let __tmp3323 (Concat __tmp3321 __tmp3322))
(let __tmp3324 (Concat __tmp3312 __tmp3323))
(let __tmp3325 (Concat __tmp3300 __tmp3324))
(let __tmp3326 (DoWhile __tmp3292 __tmp3325))
(let __tmp3327 (InIf false __tmp3270 __tmp3290))
(let __tmp3328 (Arg __tmp1164 __tmp3327))
(let __tmp3329 (If __tmp3270 __tmp3290 __tmp3326 __tmp3328))
(let __tmp3330 (Get __tmp3329 1))
(let __tmp3331 (Single __tmp3330))
(let __tmp3332 (Get __tmp3329 0))
(let __tmp3333 (Single __tmp3332))
(let __tmp3334 (Concat __tmp3331 __tmp3333))
(let __tmp3335 (Function "vec_mul" __tmp3264 __tmp3265 __tmp3334))
(let __tmp3336 (Function "vec_copy" __tmp1486 __tmp3265 __tmp1500))
(let __tmp3337 (TCons __tmp24 __tmp3))
(let __tmp3338 (TupleT __tmp3337))
(let __tmp3339 (InFunc "dot_p"))
(let __tmp3340 (Const __tmp18 __tmp1570 __tmp3339))
(let __tmp3341 (Arg __tmp1570 __tmp3339))
(let __tmp3342 (Get __tmp3341 0))
(let __tmp3343 (Bop __tmp9 __tmp3340 __tmp3342))
(let __tmp3344 (Get __tmp3341 3))
(let __tmp3345 (Single __tmp3344))
(let __tmp3346 (Const __tmp37 __tmp1570 __tmp3339))
(let __tmp3347 (Single __tmp3346))
(let __tmp3348 (Single __tmp3340))
(let __tmp3349 (Const __tmp14 __tmp1570 __tmp3339))
(let __tmp3350 (Single __tmp3349))
(let __tmp3351 (Get __tmp3341 2))
(let __tmp3352 (Single __tmp3351))
(let __tmp3353 (Get __tmp3341 1))
(let __tmp3354 (Single __tmp3353))
(let __tmp3355 (Single __tmp3342))
(let __tmp3356 (Concat __tmp3354 __tmp3355))
(let __tmp3357 (Concat __tmp3352 __tmp3356))
(let __tmp3358 (Concat __tmp3350 __tmp3357))
(let __tmp3359 (Concat __tmp3348 __tmp3358))
(let __tmp3360 (Concat __tmp3347 __tmp3359))
(let __tmp3361 (Concat __tmp3345 __tmp3360))
(let __tmp3362 (InIf true __tmp3343 __tmp3361))
(let __tmp3363 (Arg __tmp894 __tmp3362))
(let __tmp3364 (InFunc " loop_ctx_2"))
(let __tmp3365 (Arg __tmp894 __tmp3364))
(let __tmp3366 (Get __tmp3365 3))
(let __tmp3367 (Get __tmp3365 2))
(let __tmp3368 (Bop __tmp59 __tmp3366 __tmp3367))
(let __tmp3369 (Get __tmp3365 6))
(let __tmp3370 (Bop __tmp9 __tmp3368 __tmp3369))
(let __tmp3371 (Single __tmp3370))
(let __tmp3372 (Get __tmp3365 4))
(let __tmp3373 (Bop __tmp69 __tmp3372 __tmp3367))
(let __tmp3374 (Get __tmp3365 5))
(let __tmp3375 (Bop __tmp69 __tmp3374 __tmp3367))
(let __tmp3376 (Get __tmp3365 0))
(let __tmp3377 (Bop __tmp657 __tmp3375 __tmp3376))
(let __tmp3378 (Get __tmp3377 1))
(let __tmp3379 (Bop __tmp657 __tmp3373 __tmp3378))
(let __tmp3380 (Get __tmp3379 1))
(let __tmp3381 (Single __tmp3380))
(let __tmp3382 (Get __tmp3377 0))
(let __tmp3383 (Get __tmp3379 0))
(let __tmp3384 (Bop __tmp792 __tmp3382 __tmp3383))
(let __tmp3385 (Get __tmp3365 1))
(let __tmp3386 (Bop __tmp143 __tmp3384 __tmp3385))
(let __tmp3387 (Single __tmp3386))
(let __tmp3388 (Single __tmp3368))
(let __tmp3389 (Single __tmp3366))
(let __tmp3390 (Concat __tmp3388 __tmp3389))
(let __tmp3391 (Single __tmp3372))
(let __tmp3392 (Concat __tmp3390 __tmp3391))
(let __tmp3393 (Single __tmp3374))
(let __tmp3394 (Concat __tmp3392 __tmp3393))
(let __tmp3395 (Single __tmp3369))
(let __tmp3396 (Concat __tmp3394 __tmp3395))
(let __tmp3397 (Concat __tmp3387 __tmp3396))
(let __tmp3398 (Concat __tmp3381 __tmp3397))
(let __tmp3399 (Concat __tmp3371 __tmp3398))
(let __tmp3400 (DoWhile __tmp3363 __tmp3399))
(let __tmp3401 (InIf false __tmp3343 __tmp3361))
(let __tmp3402 (Arg __tmp894 __tmp3401))
(let __tmp3403 (If __tmp3343 __tmp3361 __tmp3400 __tmp3402))
(let __tmp3404 (Get __tmp3403 1))
(let __tmp3405 (Single __tmp3404))
(let __tmp3406 (Get __tmp3403 0))
(let __tmp3407 (Single __tmp3406))
(let __tmp3408 (Concat __tmp3405 __tmp3407))
(let __tmp3409 (Function "dot_p" __tmp1570 __tmp3338 __tmp3408))
(let __tmp3410 (Get __tmp1656 0))
(let __tmp3411 (Single __tmp3410))
(let __tmp3412 (Get __tmp1584 0))
(let __tmp3413 (Get __tmp1656 1))
(let __tmp3414 (Bop __tmp384 __tmp3412 __tmp3413))
(let __tmp3415 (Single __tmp3414))
(let __tmp3416 (Concat __tmp3411 __tmp3415))
(let __tmp3417 (Function "vec_sub" __tmp1570 __tmp3265 __tmp3416))
(let __tmp3418 (InFunc "vec_add"))
(let __tmp3419 (Const __tmp18 __tmp1570 __tmp3418))
(let __tmp3420 (Arg __tmp1570 __tmp3418))
(let __tmp3421 (Get __tmp3420 0))
(let __tmp3422 (Bop __tmp9 __tmp3419 __tmp3421))
(let __tmp3423 (Get __tmp3420 3))
(let __tmp3424 (Alloc 0 __tmp3421 __tmp3423 __tmp25))
(let __tmp3425 (Get __tmp3424 1))
(let __tmp3426 (Single __tmp3425))
(let __tmp3427 (Get __tmp3424 0))
(let __tmp3428 (Single __tmp3427))
(let __tmp3429 (Single __tmp3419))
(let __tmp3430 (Const __tmp14 __tmp1570 __tmp3418))
(let __tmp3431 (Single __tmp3430))
(let __tmp3432 (Get __tmp3420 2))
(let __tmp3433 (Single __tmp3432))
(let __tmp3434 (Get __tmp3420 1))
(let __tmp3435 (Single __tmp3434))
(let __tmp3436 (Single __tmp3421))
(let __tmp3437 (Concat __tmp3435 __tmp3436))
(let __tmp3438 (Concat __tmp3433 __tmp3437))
(let __tmp3439 (Concat __tmp3431 __tmp3438))
(let __tmp3440 (Concat __tmp3429 __tmp3439))
(let __tmp3441 (Concat __tmp3428 __tmp3440))
(let __tmp3442 (Concat __tmp3426 __tmp3441))
(let __tmp3443 (InIf true __tmp3422 __tmp3442))
(let __tmp3444 (Arg __tmp720 __tmp3443))
(let __tmp3445 (InFunc " loop_ctx_3"))
(let __tmp3446 (Arg __tmp720 __tmp3445))
(let __tmp3447 (Get __tmp3446 3))
(let __tmp3448 (Get __tmp3446 2))
(let __tmp3449 (Bop __tmp59 __tmp3447 __tmp3448))
(let __tmp3450 (Get __tmp3446 6))
(let __tmp3451 (Bop __tmp9 __tmp3449 __tmp3450))
(let __tmp3452 (Single __tmp3451))
(let __tmp3453 (Get __tmp3446 1))
(let __tmp3454 (Bop __tmp69 __tmp3453 __tmp3448))
(let __tmp3455 (Get __tmp3446 5))
(let __tmp3456 (Bop __tmp69 __tmp3455 __tmp3448))
(let __tmp3457 (Get __tmp3446 0))
(let __tmp3458 (Bop __tmp657 __tmp3456 __tmp3457))
(let __tmp3459 (Get __tmp3458 0))
(let __tmp3460 (Get __tmp3446 4))
(let __tmp3461 (Bop __tmp69 __tmp3460 __tmp3448))
(let __tmp3462 (Get __tmp3458 1))
(let __tmp3463 (Bop __tmp657 __tmp3461 __tmp3462))
(let __tmp3464 (Get __tmp3463 0))
(let __tmp3465 (Bop __tmp143 __tmp3459 __tmp3464))
(let __tmp3466 (Get __tmp3463 1))
(let __tmp3467 (Top __tmp68 __tmp3454 __tmp3465 __tmp3466))
(let __tmp3468 (Single __tmp3467))
(let __tmp3469 (Single __tmp3453))
(let __tmp3470 (Single __tmp3449))
(let __tmp3471 (Single __tmp3447))
(let __tmp3472 (Concat __tmp3470 __tmp3471))
(let __tmp3473 (Concat __tmp3469 __tmp3472))
(let __tmp3474 (Concat __tmp3468 __tmp3473))
(let __tmp3475 (Single __tmp3460))
(let __tmp3476 (Single __tmp3455))
(let __tmp3477 (Concat __tmp3475 __tmp3476))
(let __tmp3478 (Single __tmp3450))
(let __tmp3479 (Concat __tmp3477 __tmp3478))
(let __tmp3480 (Concat __tmp3474 __tmp3479))
(let __tmp3481 (Concat __tmp3452 __tmp3480))
(let __tmp3482 (DoWhile __tmp3444 __tmp3481))
(let __tmp3483 (InIf false __tmp3422 __tmp3442))
(let __tmp3484 (Arg __tmp720 __tmp3483))
(let __tmp3485 (If __tmp3422 __tmp3442 __tmp3482 __tmp3484))
(let __tmp3486 (Get __tmp3485 1))
(let __tmp3487 (Single __tmp3486))
(let __tmp3488 (Get __tmp3485 0))
(let __tmp3489 (Single __tmp3488))
(let __tmp3490 (Concat __tmp3487 __tmp3489))
(let __tmp3491 (Function "vec_add" __tmp1570 __tmp3265 __tmp3490))
(let __tmp3492 (Get __tmp1726 0))
(let __tmp3493 (Single __tmp3492))
(let __tmp3494 (Get __tmp1726 1))
(let __tmp3495 (Bop __tmp384 __tmp1741 __tmp3494))
(let __tmp3496 (Single __tmp3495))
(let __tmp3497 (Concat __tmp3493 __tmp3496))
(let __tmp3498 (Function "vec_add_inp" __tmp1570 __tmp3265 __tmp3497))
(let __tmp3499 (Get __tmp1800 0))
(let __tmp3500 (Single __tmp3499))
(let __tmp3501 (Get __tmp1800 1))
(let __tmp3502 (Bop __tmp384 __tmp1803 __tmp3501))
(let __tmp3503 (Single __tmp3502))
(let __tmp3504 (Concat __tmp3500 __tmp3503))
(let __tmp3505 (Function "vec_sub_inp" __tmp1570 __tmp3265 __tmp3504))
(let __tmp3506 (InFunc "mat_vec"))
(let __tmp3507 (Arg __tmp1570 __tmp3506))
(let __tmp3508 (Get __tmp3507 0))
(let __tmp3509 (Get __tmp3507 3))
(let __tmp3510 (Alloc 0 __tmp3508 __tmp3509 __tmp25))
(let __tmp3511 (Get __tmp3510 1))
(let __tmp3512 (Single __tmp3511))
(let __tmp3513 (Get __tmp3510 0))
(let __tmp3514 (Single __tmp3513))
(let __tmp3515 (Const __tmp18 __tmp1570 __tmp3506))
(let __tmp3516 (Single __tmp3515))
(let __tmp3517 (Const __tmp14 __tmp1570 __tmp3506))
(let __tmp3518 (Single __tmp3517))
(let __tmp3519 (Get __tmp3507 2))
(let __tmp3520 (Single __tmp3519))
(let __tmp3521 (Get __tmp3507 1))
(let __tmp3522 (Single __tmp3521))
(let __tmp3523 (Single __tmp3508))
(let __tmp3524 (Concat __tmp3522 __tmp3523))
(let __tmp3525 (Concat __tmp3520 __tmp3524))
(let __tmp3526 (Concat __tmp3518 __tmp3525))
(let __tmp3527 (Concat __tmp3516 __tmp3526))
(let __tmp3528 (Concat __tmp3514 __tmp3527))
(let __tmp3529 (Concat __tmp3512 __tmp3528))
(let __tmp3530 (InFunc " loop_ctx_4"))
(let __tmp3531 (Arg __tmp720 __tmp3530))
(let __tmp3532 (Get __tmp3531 2))
(let __tmp3533 (Get __tmp3531 6))
(let __tmp3534 (Bop __tmp9 __tmp3532 __tmp3533))
(let __tmp3535 (Single __tmp3534))
(let __tmp3536 (InIf true __tmp3534 __tmp3531))
(let __tmp3537 (Const __tmp18 __tmp720 __tmp3536))
(let __tmp3538 (Arg __tmp720 __tmp3536))
(let __tmp3539 (Get __tmp3538 6))
(let __tmp3540 (Bop __tmp9 __tmp3537 __tmp3539))
(let __tmp3541 (Get __tmp3538 0))
(let __tmp3542 (Single __tmp3541))
(let __tmp3543 (Get __tmp3538 1))
(let __tmp3544 (Single __tmp3543))
(let __tmp3545 (Get __tmp3538 2))
(let __tmp3546 (Single __tmp3545))
(let __tmp3547 (Get __tmp3538 3))
(let __tmp3548 (Single __tmp3547))
(let __tmp3549 (Const __tmp37 __tmp720 __tmp3536))
(let __tmp3550 (Single __tmp3549))
(let __tmp3551 (Single __tmp3537))
(let __tmp3552 (Get __tmp3538 4))
(let __tmp3553 (Single __tmp3552))
(let __tmp3554 (Get __tmp3538 5))
(let __tmp3555 (Single __tmp3554))
(let __tmp3556 (Single __tmp3539))
(let __tmp3557 (Concat __tmp3555 __tmp3556))
(let __tmp3558 (Concat __tmp3553 __tmp3557))
(let __tmp3559 (Concat __tmp3551 __tmp3558))
(let __tmp3560 (Concat __tmp3550 __tmp3559))
(let __tmp3561 (Concat __tmp3548 __tmp3560))
(let __tmp3562 (Concat __tmp3546 __tmp3561))
(let __tmp3563 (Concat __tmp3544 __tmp3562))
(let __tmp3564 (Concat __tmp3542 __tmp3563))
(let __tmp3565 (InIf true __tmp3540 __tmp3564))
(let __tmp3566 (Arg __tmp761 __tmp3565))
(let __tmp3567 (InFunc " loop_ctx_5"))
(let __tmp3568 (Arg __tmp761 __tmp3567))
(let __tmp3569 (Get __tmp3568 3))
(let __tmp3570 (Get __tmp3568 5))
(let __tmp3571 (Bop __tmp59 __tmp3569 __tmp3570))
(let __tmp3572 (Get __tmp3568 8))
(let __tmp3573 (Bop __tmp9 __tmp3571 __tmp3572))
(let __tmp3574 (Single __tmp3573))
(let __tmp3575 (Get __tmp3568 6))
(let __tmp3576 (Bop __tmp69 __tmp3575 __tmp3570))
(let __tmp3577 (Get __tmp3568 7))
(let __tmp3578 (Get __tmp3568 2))
(let __tmp3579 (Bop __tmp20 __tmp3572 __tmp3578))
(let __tmp3580 (Bop __tmp59 __tmp3579 __tmp3570))
(let __tmp3581 (Bop __tmp69 __tmp3577 __tmp3580))
(let __tmp3582 (Get __tmp3568 0))
(let __tmp3583 (Bop __tmp657 __tmp3581 __tmp3582))
(let __tmp3584 (Get __tmp3583 1))
(let __tmp3585 (Bop __tmp657 __tmp3576 __tmp3584))
(let __tmp3586 (Get __tmp3585 1))
(let __tmp3587 (Single __tmp3586))
(let __tmp3588 (Get __tmp3568 1))
(let __tmp3589 (Single __tmp3588))
(let __tmp3590 (Single __tmp3578))
(let __tmp3591 (Concat __tmp3589 __tmp3590))
(let __tmp3592 (Concat __tmp3587 __tmp3591))
(let __tmp3593 (Single __tmp3569))
(let __tmp3594 (Concat __tmp3592 __tmp3593))
(let __tmp3595 (Get __tmp3583 0))
(let __tmp3596 (Get __tmp3585 0))
(let __tmp3597 (Bop __tmp792 __tmp3595 __tmp3596))
(let __tmp3598 (Get __tmp3568 4))
(let __tmp3599 (Bop __tmp143 __tmp3597 __tmp3598))
(let __tmp3600 (Single __tmp3599))
(let __tmp3601 (Single __tmp3571))
(let __tmp3602 (Single __tmp3575))
(let __tmp3603 (Concat __tmp3601 __tmp3602))
(let __tmp3604 (Single __tmp3577))
(let __tmp3605 (Concat __tmp3603 __tmp3604))
(let __tmp3606 (Single __tmp3572))
(let __tmp3607 (Concat __tmp3605 __tmp3606))
(let __tmp3608 (Concat __tmp3600 __tmp3607))
(let __tmp3609 (Concat __tmp3594 __tmp3608))
(let __tmp3610 (Concat __tmp3574 __tmp3609))
(let __tmp3611 (DoWhile __tmp3566 __tmp3610))
(let __tmp3612 (InIf false __tmp3540 __tmp3564))
(let __tmp3613 (Arg __tmp761 __tmp3612))
(let __tmp3614 (If __tmp3540 __tmp3564 __tmp3611 __tmp3613))
(let __tmp3615 (Get __tmp3614 1))
(let __tmp3616 (Bop __tmp69 __tmp3615 __tmp3545))
(let __tmp3617 (Get __tmp3614 4))
(let __tmp3618 (Get __tmp3614 0))
(let __tmp3619 (Top __tmp68 __tmp3616 __tmp3617 __tmp3618))
(let __tmp3620 (Single __tmp3619))
(let __tmp3621 (Single __tmp3615))
(let __tmp3622 (Concat __tmp3620 __tmp3621))
(let __tmp3623 (Bop __tmp59 __tmp3547 __tmp3545))
(let __tmp3624 (Single __tmp3623))
(let __tmp3625 (Get __tmp3614 6))
(let __tmp3626 (Single __tmp3625))
(let __tmp3627 (Get __tmp3614 7))
(let __tmp3628 (Single __tmp3627))
(let __tmp3629 (Concat __tmp3628 __tmp3556))
(let __tmp3630 (Concat __tmp3626 __tmp3629))
(let __tmp3631 (Concat __tmp3548 __tmp3630))
(let __tmp3632 (Concat __tmp3624 __tmp3631))
(let __tmp3633 (Concat __tmp3622 __tmp3632))
(let __tmp3634 (InIf false __tmp3534 __tmp3531))
(let __tmp3635 (Arg __tmp720 __tmp3634))
(let __tmp3636 (If __tmp3534 __tmp3531 __tmp3633 __tmp3635))
(let __tmp3637 (Concat __tmp3535 __tmp3636))
(let __tmp3638 (DoWhile __tmp3529 __tmp3637))
(let __tmp3639 (Get __tmp3638 1))
(let __tmp3640 (Single __tmp3639))
(let __tmp3641 (Get __tmp3638 0))
(let __tmp3642 (Single __tmp3641))
(let __tmp3643 (Concat __tmp3640 __tmp3642))
(let __tmp3644 (Function "mat_vec" __tmp1570 __tmp3265 __tmp3643))
(let __tmp3645 (InFunc "get_sym"))
(let __tmp3646 (Const __tmp10 __tmp5 __tmp3645))
(let __tmp3647 (Arg __tmp5 __tmp3645))
(let __tmp3648 (Get __tmp3647 0))
(let __tmp3649 (Const __tmp14 __tmp5 __tmp3645))
(let __tmp3650 (Bop __tmp12 __tmp3648 __tmp3649))
(let __tmp3651 (Bop __tmp9 __tmp3646 __tmp3650))
(let __tmp3652 (Const __tmp18 __tmp5 __tmp3645))
(let __tmp3653 (Bop __tmp20 __tmp3648 __tmp3648))
(let __tmp3654 (Bop __tmp9 __tmp3652 __tmp3653))
(let __tmp3655 (Get __tmp3647 1))
(let __tmp3656 (Alloc 0 __tmp3653 __tmp3655 __tmp25))
(let __tmp3657 (Get __tmp3656 1))
(let __tmp3658 (Single __tmp3657))
(let __tmp3659 (Get __tmp3656 0))
(let __tmp3660 (Single __tmp3659))
(let __tmp3661 (Single __tmp3652))
(let __tmp3662 (Single __tmp3649))
(let __tmp3663 (Const __tmp33 __tmp5 __tmp3645))
(let __tmp3664 (Single __tmp3663))
(let __tmp3665 (Single __tmp3648))
(let __tmp3666 (Const __tmp37 __tmp5 __tmp3645))
(let __tmp3667 (Single __tmp3666))
(let __tmp3668 (Single __tmp3653))
(let __tmp3669 (Concat __tmp3667 __tmp3668))
(let __tmp3670 (Concat __tmp3665 __tmp3669))
(let __tmp3671 (Concat __tmp3664 __tmp3670))
(let __tmp3672 (Concat __tmp3662 __tmp3671))
(let __tmp3673 (Concat __tmp3661 __tmp3672))
(let __tmp3674 (Concat __tmp3660 __tmp3673))
(let __tmp3675 (Concat __tmp3658 __tmp3674))
(let __tmp3676 (InIf true __tmp3654 __tmp3675))
(let __tmp3677 (Arg __tmp56 __tmp3676))
(let __tmp3678 (InFunc " loop_ctx_6"))
(let __tmp3679 (Arg __tmp56 __tmp3678))
(let __tmp3680 (Get __tmp3679 3))
(let __tmp3681 (Get __tmp3679 2))
(let __tmp3682 (Bop __tmp59 __tmp3680 __tmp3681))
(let __tmp3683 (Get __tmp3679 7))
(let __tmp3684 (Bop __tmp9 __tmp3682 __tmp3683))
(let __tmp3685 (Single __tmp3684))
(let __tmp3686 (Get __tmp3679 1))
(let __tmp3687 (Bop __tmp69 __tmp3686 __tmp3681))
(let __tmp3688 (Get __tmp3679 6))
(let __tmp3689 (Get __tmp3679 0))
(let __tmp3690 (Top __tmp68 __tmp3687 __tmp3688 __tmp3689))
(let __tmp3691 (Single __tmp3690))
(let __tmp3692 (Single __tmp3686))
(let __tmp3693 (Single __tmp3682))
(let __tmp3694 (Single __tmp3680))
(let __tmp3695 (Concat __tmp3693 __tmp3694))
(let __tmp3696 (Concat __tmp3692 __tmp3695))
(let __tmp3697 (Get __tmp3679 4))
(let __tmp3698 (Single __tmp3697))
(let __tmp3699 (Concat __tmp3696 __tmp3698))
(let __tmp3700 (Get __tmp3679 5))
(let __tmp3701 (Single __tmp3700))
(let __tmp3702 (Concat __tmp3699 __tmp3701))
(let __tmp3703 (Single __tmp3688))
(let __tmp3704 (Concat __tmp3702 __tmp3703))
(let __tmp3705 (Single __tmp3683))
(let __tmp3706 (Concat __tmp3704 __tmp3705))
(let __tmp3707 (Concat __tmp3691 __tmp3706))
(let __tmp3708 (Concat __tmp3685 __tmp3707))
(let __tmp3709 (DoWhile __tmp3677 __tmp3708))
(let __tmp3710 (InIf false __tmp3654 __tmp3675))
(let __tmp3711 (Arg __tmp56 __tmp3710))
(let __tmp3712 (If __tmp3654 __tmp3675 __tmp3709 __tmp3711))
(let __tmp3713 (Get __tmp3712 0))
(let __tmp3714 (Single __tmp3713))
(let __tmp3715 (Get __tmp3712 1))
(let __tmp3716 (Single __tmp3715))
(let __tmp3717 (Get __tmp3712 4))
(let __tmp3718 (Single __tmp3717))
(let __tmp3719 (Single __tmp3650))
(let __tmp3720 (Concat __tmp3665 __tmp3719))
(let __tmp3721 (Concat __tmp3718 __tmp3720))
(let __tmp3722 (Concat __tmp3664 __tmp3721))
(let __tmp3723 (Concat __tmp3662 __tmp3722))
(let __tmp3724 (Concat __tmp3661 __tmp3723))
(let __tmp3725 (Concat __tmp3716 __tmp3724))
(let __tmp3726 (Concat __tmp3714 __tmp3725))
(let __tmp3727 (InIf true __tmp3651 __tmp3726))
(let __tmp3728 (Arg __tmp118 __tmp3727))
(let __tmp3729 (InFunc " loop_ctx_7"))
(let __tmp3730 (Arg __tmp118 __tmp3729))
(let __tmp3731 (Get __tmp3730 3))
(let __tmp3732 (Get __tmp3730 2))
(let __tmp3733 (Bop __tmp59 __tmp3731 __tmp3732))
(let __tmp3734 (Get __tmp3730 7))
(let __tmp3735 (Bop __tmp121 __tmp3733 __tmp3734))
(let __tmp3736 (Single __tmp3735))
(let __tmp3737 (Get __tmp3730 1))
(let __tmp3738 (Get __tmp3730 6))
(let __tmp3739 (Bop __tmp20 __tmp3738 __tmp3732))
(let __tmp3740 (Bop __tmp59 __tmp3739 __tmp3732))
(let __tmp3741 (Bop __tmp69 __tmp3737 __tmp3740))
(let __tmp3742 (Get __tmp3730 4))
(let __tmp3743 (Get __tmp3730 0))
(let __tmp3744 (Top __tmp68 __tmp3741 __tmp3742 __tmp3743))
(let __tmp3745 (Single __tmp3744))
(let __tmp3746 (Single __tmp3737))
(let __tmp3747 (Single __tmp3733))
(let __tmp3748 (Single __tmp3731))
(let __tmp3749 (Concat __tmp3747 __tmp3748))
(let __tmp3750 (Get __tmp3730 5))
(let __tmp3751 (Bop __tmp143 __tmp3742 __tmp3750))
(let __tmp3752 (Single __tmp3751))
(let __tmp3753 (Concat __tmp3749 __tmp3752))
(let __tmp3754 (Concat __tmp3746 __tmp3753))
(let __tmp3755 (Concat __tmp3745 __tmp3754))
(let __tmp3756 (Single __tmp3750))
(let __tmp3757 (Single __tmp3738))
(let __tmp3758 (Concat __tmp3756 __tmp3757))
(let __tmp3759 (Single __tmp3734))
(let __tmp3760 (Concat __tmp3758 __tmp3759))
(let __tmp3761 (Concat __tmp3755 __tmp3760))
(let __tmp3762 (Concat __tmp3736 __tmp3761))
(let __tmp3763 (DoWhile __tmp3728 __tmp3762))
(let __tmp3764 (InIf false __tmp3651 __tmp3726))
(let __tmp3765 (Arg __tmp118 __tmp3764))
(let __tmp3766 (If __tmp3651 __tmp3726 __tmp3763 __tmp3765))
(let __tmp3767 (Get __tmp3766 1))
(let __tmp3768 (Single __tmp3767))
(let __tmp3769 (Get __tmp3766 0))
(let __tmp3770 (Single __tmp3769))
(let __tmp3771 (Concat __tmp3768 __tmp3770))
(let __tmp3772 (Function "get_sym" __tmp5 __tmp3265 __tmp3771))
(let __tmp3773 (InFunc "disp_vec"))
(let __tmp3774 (Const __tmp18 __tmp1486 __tmp3773))
(let __tmp3775 (Arg __tmp1486 __tmp3773))
(let __tmp3776 (Get __tmp3775 0))
(let __tmp3777 (Bop __tmp9 __tmp3774 __tmp3776))
(let __tmp3778 (Get __tmp3775 2))
(let __tmp3779 (Single __tmp3778))
(let __tmp3780 (Const __tmp37 __tmp1486 __tmp3773))
(let __tmp3781 (Single __tmp3780))
(let __tmp3782 (Single __tmp3774))
(let __tmp3783 (Const __tmp14 __tmp1486 __tmp3773))
(let __tmp3784 (Single __tmp3783))
(let __tmp3785 (Get __tmp3775 1))
(let __tmp3786 (Single __tmp3785))
(let __tmp3787 (Single __tmp3776))
(let __tmp3788 (Concat __tmp3786 __tmp3787))
(let __tmp3789 (Concat __tmp3784 __tmp3788))
(let __tmp3790 (Concat __tmp3782 __tmp3789))
(let __tmp3791 (Concat __tmp3781 __tmp3790))
(let __tmp3792 (Concat __tmp3779 __tmp3791))
(let __tmp3793 (InIf true __tmp3777 __tmp3792))
(let __tmp3794 (Arg __tmp646 __tmp3793))
(let __tmp3795 (InFunc " loop_ctx_8"))
(let __tmp3796 (Arg __tmp646 __tmp3795))
(let __tmp3797 (Get __tmp3796 3))
(let __tmp3798 (Get __tmp3796 2))
(let __tmp3799 (Bop __tmp59 __tmp3797 __tmp3798))
(let __tmp3800 (Get __tmp3796 5))
(let __tmp3801 (Bop __tmp9 __tmp3799 __tmp3800))
(let __tmp3802 (Single __tmp3801))
(let __tmp3803 (Get __tmp3796 4))
(let __tmp3804 (Bop __tmp69 __tmp3803 __tmp3798))
(let __tmp3805 (Get __tmp3796 0))
(let __tmp3806 (Bop __tmp657 __tmp3804 __tmp3805))
(let __tmp3807 (Get __tmp3806 1))
(let __tmp3808 (Single __tmp3807))
(let __tmp3809 (Get __tmp3796 1))
(let __tmp3810 (Get __tmp3806 0))
(let __tmp3811 (Bop __tmp143 __tmp3809 __tmp3810))
(let __tmp3812 (Single __tmp3811))
(let __tmp3813 (Concat __tmp3808 __tmp3812))
(let __tmp3814 (Single __tmp3799))
(let __tmp3815 (Single __tmp3797))
(let __tmp3816 (Concat __tmp3814 __tmp3815))
(let __tmp3817 (Single __tmp3803))
(let __tmp3818 (Concat __tmp3816 __tmp3817))
(let __tmp3819 (Single __tmp3800))
(let __tmp3820 (Concat __tmp3818 __tmp3819))
(let __tmp3821 (Concat __tmp3813 __tmp3820))
(let __tmp3822 (Concat __tmp3802 __tmp3821))
(let __tmp3823 (DoWhile __tmp3794 __tmp3822))
(let __tmp3824 (InIf false __tmp3777 __tmp3792))
(let __tmp3825 (Arg __tmp646 __tmp3824))
(let __tmp3826 (If __tmp3777 __tmp3792 __tmp3823 __tmp3825))
(let __tmp3827 (Get __tmp3826 1))
(let __tmp3828 (Single __tmp3827))
(let __tmp3829 (Get __tmp3826 0))
(let __tmp3830 (Single __tmp3829))
(let __tmp3831 (Concat __tmp3828 __tmp3830))
(let __tmp3832 (Function "disp_vec" __tmp1486 __tmp3338 __tmp3831))
(let __tmp3833 (Get __tmp2174 1))
(let __tmp3834 (Single __tmp3833))
(let __tmp3835 (Get __tmp1972 0))
(let __tmp3836 (Single __tmp3835))
(let __tmp3837 (Get __tmp2156 0))
(let __tmp3838 (Single __tmp3837))
(let __tmp3839 (Get __tmp1989 0))
(let __tmp3840 (Single __tmp3839))
(let __tmp3841 (Get __tmp2174 0))
(let __tmp3842 (Single __tmp3841))
(let __tmp3843 (Const __tmp291 __tmp1961 __tmp1962))
(let __tmp3844 (Bop __tmp290 __tmp1975 __tmp3843))
(let __tmp3845 (Single __tmp3844))
(let __tmp3846 (Const __tmp295 __tmp1961 __tmp1962))
(let __tmp3847 (Single __tmp3846))
(let __tmp3848 (Concat __tmp1986 __tmp3847))
(let __tmp3849 (Concat __tmp3845 __tmp3848))
(let __tmp3850 (Concat __tmp1965 __tmp3849))
(let __tmp3851 (Concat __tmp3842 __tmp3850))
(let __tmp3852 (Concat __tmp2000 __tmp3851))
(let __tmp3853 (Concat __tmp1998 __tmp3852))
(let __tmp3854 (Concat __tmp3840 __tmp3853))
(let __tmp3855 (Concat __tmp2168 __tmp3854))
(let __tmp3856 (Concat __tmp3838 __tmp3855))
(let __tmp3857 (Concat __tmp3836 __tmp3856))
(let __tmp3858 (Concat __tmp3834 __tmp3857))
(let __tmp3859 (InIf true __tmp2716 __tmp2743))
(let __tmp3860 (Arg __tmp432 __tmp3859))
(let __tmp3861 (Get __tmp3860 0))
(let __tmp3862 (Single __tmp3861))
(let __tmp3863 (Get __tmp3860 1))
(let __tmp3864 (Single __tmp3863))
(let __tmp3865 (Get __tmp3860 2))
(let __tmp3866 (Single __tmp3865))
(let __tmp3867 (Get __tmp3860 3))
(let __tmp3868 (Single __tmp3867))
(let __tmp3869 (Get __tmp3860 4))
(let __tmp3870 (Single __tmp3869))
(let __tmp3871 (Const __tmp445 __tmp432 __tmp3859))
(let __tmp3872 (Single __tmp3871))
(let __tmp3873 (Get __tmp3860 5))
(let __tmp3874 (Single __tmp3873))
(let __tmp3875 (Get __tmp3860 6))
(let __tmp3876 (Single __tmp3875))
(let __tmp3877 (Get __tmp3860 7))
(let __tmp3878 (Single __tmp3877))
(let __tmp3879 (Get __tmp3860 9))
(let __tmp3880 (Single __tmp3879))
(let __tmp3881 (Get __tmp3860 10))
(let __tmp3882 (Single __tmp3881))
(let __tmp3883 (Get __tmp3860 11))
(let __tmp3884 (Single __tmp3883))
(let __tmp3885 (Get __tmp3860 12))
(let __tmp3886 (Single __tmp3885))
(let __tmp3887 (Concat __tmp3884 __tmp3886))
(let __tmp3888 (Concat __tmp3882 __tmp3887))
(let __tmp3889 (Concat __tmp3880 __tmp3888))
(let __tmp3890 (Concat __tmp3878 __tmp3889))
(let __tmp3891 (Concat __tmp3876 __tmp3890))
(let __tmp3892 (Concat __tmp3874 __tmp3891))
(let __tmp3893 (Concat __tmp3872 __tmp3892))
(let __tmp3894 (Concat __tmp3870 __tmp3893))
(let __tmp3895 (Concat __tmp3868 __tmp3894))
(let __tmp3896 (Concat __tmp3866 __tmp3895))
(let __tmp3897 (Concat __tmp3864 __tmp3896))
(let __tmp3898 (Concat __tmp3862 __tmp3897))
(let __tmp3899 (Get __tmp2837 1))
(let __tmp3900 (Bop __tmp384 __tmp2829 __tmp3899))
(let __tmp3901 (Single __tmp3900))
(let __tmp3902 (Get __tmp2745 1))
(let __tmp3903 (Single __tmp3902))
(let __tmp3904 (Get __tmp2837 0))
(let __tmp3905 (Single __tmp3904))
(let __tmp3906 (Get __tmp2745 4))
(let __tmp3907 (Single __tmp3906))
(let __tmp3908 (Const __tmp510 __tmp432 __tmp2744))
(let __tmp3909 (Single __tmp3908))
(let __tmp3910 (Get __tmp2745 6))
(let __tmp3911 (Get __tmp2745 5))
(let __tmp3912 (Bop __tmp59 __tmp3910 __tmp3911))
(let __tmp3913 (Single __tmp3912))
(let __tmp3914 (Single __tmp3910))
(let __tmp3915 (Single __tmp2748))
(let __tmp3916 (Get __tmp2745 10))
(let __tmp3917 (Single __tmp3916))
(let __tmp3918 (Get __tmp2745 11))
(let __tmp3919 (Single __tmp3918))
(let __tmp3920 (Get __tmp2745 12))
(let __tmp3921 (Single __tmp3920))
(let __tmp3922 (Concat __tmp3919 __tmp3921))
(let __tmp3923 (Concat __tmp3917 __tmp3922))
(let __tmp3924 (Concat __tmp2747 __tmp3923))
(let __tmp3925 (Concat __tmp3915 __tmp3924))
(let __tmp3926 (Concat __tmp3914 __tmp3925))
(let __tmp3927 (Concat __tmp3913 __tmp3926))
(let __tmp3928 (Concat __tmp3909 __tmp3927))
(let __tmp3929 (Concat __tmp3907 __tmp3928))
(let __tmp3930 (Concat __tmp2828 __tmp3929))
(let __tmp3931 (Concat __tmp3905 __tmp3930))
(let __tmp3932 (Concat __tmp3903 __tmp3931))
(let __tmp3933 (Concat __tmp3901 __tmp3932))
(let __tmp3934 (If __tmp2716 __tmp2743 __tmp3898 __tmp3933))
(let __tmp3935 (InIf false __tmp2243 __tmp2240))
(let __tmp3936 (Arg __tmp320 __tmp3935))
(let __tmp3937 (Get __tmp3936 0))
(let __tmp3938 (Single __tmp3937))
(let __tmp3939 (Get __tmp3936 1))
(let __tmp3940 (Single __tmp3939))
(let __tmp3941 (Get __tmp3936 2))
(let __tmp3942 (Single __tmp3941))
(let __tmp3943 (Get __tmp3936 3))
(let __tmp3944 (Single __tmp3943))
(let __tmp3945 (Get __tmp3936 4))
(let __tmp3946 (Single __tmp3945))
(let __tmp3947 (Const __tmp445 __tmp320 __tmp3935))
(let __tmp3948 (Single __tmp3947))
(let __tmp3949 (Get __tmp3936 5))
(let __tmp3950 (Single __tmp3949))
(let __tmp3951 (Get __tmp3936 6))
(let __tmp3952 (Single __tmp3951))
(let __tmp3953 (Get __tmp3936 7))
(let __tmp3954 (Single __tmp3953))
(let __tmp3955 (Get __tmp3936 8))
(let __tmp3956 (Single __tmp3955))
(let __tmp3957 (Get __tmp3936 9))
(let __tmp3958 (Single __tmp3957))
(let __tmp3959 (Get __tmp3936 10))
(let __tmp3960 (Single __tmp3959))
(let __tmp3961 (Get __tmp3936 11))
(let __tmp3962 (Single __tmp3961))
(let __tmp3963 (Concat __tmp3960 __tmp3962))
(let __tmp3964 (Concat __tmp3958 __tmp3963))
(let __tmp3965 (Concat __tmp3956 __tmp3964))
(let __tmp3966 (Concat __tmp3954 __tmp3965))
(let __tmp3967 (Concat __tmp3952 __tmp3966))
(let __tmp3968 (Concat __tmp3950 __tmp3967))
(let __tmp3969 (Concat __tmp3948 __tmp3968))
(let __tmp3970 (Concat __tmp3946 __tmp3969))
(let __tmp3971 (Concat __tmp3944 __tmp3970))
(let __tmp3972 (Concat __tmp3942 __tmp3971))
(let __tmp3973 (Concat __tmp3940 __tmp3972))
(let __tmp3974 (Concat __tmp3938 __tmp3973))
(let __tmp3975 (If __tmp2243 __tmp2240 __tmp3934 __tmp3974))
(let __tmp3976 (Get __tmp3975 5))
(let __tmp3977 (Single __tmp3976))
(let __tmp3978 (Get __tmp3975 0))
(let __tmp3979 (Single __tmp3978))
(let __tmp3980 (Get __tmp3975 1))
(let __tmp3981 (Single __tmp3980))
(let __tmp3982 (Get __tmp3975 2))
(let __tmp3983 (Single __tmp3982))
(let __tmp3984 (Get __tmp3975 3))
(let __tmp3985 (Single __tmp3984))
(let __tmp3986 (Get __tmp2240 4))
(let __tmp3987 (Single __tmp3986))
(let __tmp3988 (Get __tmp3975 6))
(let __tmp3989 (Single __tmp3988))
(let __tmp3990 (Get __tmp2240 6))
(let __tmp3991 (Single __tmp3990))
(let __tmp3992 (Get __tmp3975 8))
(let __tmp3993 (Single __tmp3992))
(let __tmp3994 (Get __tmp2240 8))
(let __tmp3995 (Single __tmp3994))
(let __tmp3996 (Get __tmp2240 9))
(let __tmp3997 (Single __tmp3996))
(let __tmp3998 (Get __tmp2240 10))
(let __tmp3999 (Single __tmp3998))
(let __tmp4000 (Single __tmp2242))
(let __tmp4001 (Concat __tmp3999 __tmp4000))
(let __tmp4002 (Concat __tmp3997 __tmp4001))
(let __tmp4003 (Concat __tmp3995 __tmp4002))
(let __tmp4004 (Concat __tmp3993 __tmp4003))
(let __tmp4005 (Concat __tmp3991 __tmp4004))
(let __tmp4006 (Concat __tmp3989 __tmp4005))
(let __tmp4007 (Concat __tmp3987 __tmp4006))
(let __tmp4008 (Concat __tmp3985 __tmp4007))
(let __tmp4009 (Concat __tmp3983 __tmp4008))
(let __tmp4010 (Concat __tmp3981 __tmp4009))
(let __tmp4011 (Concat __tmp3979 __tmp4010))
(let __tmp4012 (Concat __tmp3977 __tmp4011))
(let __tmp4013 (DoWhile __tmp3858 __tmp4012))
(let __tmp4014 (Get __tmp4013 1))
(let __tmp4015 (Single __tmp4014))
(let __tmp4016 (Get __tmp4013 2))
(let __tmp4017 (Get __tmp4013 3))
(let __tmp4018 (Get __tmp4013 4))
(let __tmp4019 (Get __tmp4013 0))
(let __tmp4020 (Bop __tmp384 __tmp4018 __tmp4019))
(let __tmp4021 (Bop __tmp384 __tmp4017 __tmp4020))
(let __tmp4022 (Bop __tmp384 __tmp4016 __tmp4021))
(let __tmp4023 (Single __tmp4022))
(let __tmp4024 (Concat __tmp4015 __tmp4023))
(let __tmp4025 (Function "cg" __tmp1961 __tmp3265 __tmp4024))
(let __tmp4026 (InLoop __tmp196 __tmp233))
(let __tmp4027 (InLoop __tmp3292 __tmp3325))
(let __tmp4028 (InLoop __tmp3363 __tmp3399))
(let __tmp4029 (InLoop __tmp3444 __tmp3481))
(let __tmp4030 (InLoop __tmp3566 __tmp3610))
(let __tmp4031 (InLoop __tmp3529 __tmp3637))
(let __tmp4032 (InLoop __tmp3677 __tmp3708))
(let __tmp4033 (InLoop __tmp3728 __tmp3762))
(let __tmp4034 (InLoop __tmp3794 __tmp3822))
(let __tmp4035 (InLoop __tmp3858 __tmp4012))
(let __tmp4036 (InLoop __tmp58 __tmp92))
(let __tmp4037 (InLoop __tmp120 __tmp156))
(let __tmp4038 (InLoop __tmp308 __tmp615))
(let __tmp4039 (InLoop __tmp648 __tmp677))
(let __tmp4040 (InLoop __tmp763 __tmp808))
(let __tmp4041 (InLoop __tmp714 __tmp835))
(let __tmp4042 (InLoop __tmp896 __tmp932))
(let __tmp4043 (InLoop __tmp1000 __tmp1044))
(let __tmp4044 (InLoop __tmp963 __tmp1071))
(let __tmp4045 (InLoop __tmp1096 __tmp1132))
(let __tmp4046 (InLoop __tmp1166 __tmp1199))
(let __tmp4047 (InLoop __tmp1229 __tmp1262))
(let __tmp4048 (InLoop __tmp1304 __tmp1340))
(let __tmp4049 (InLoop __tmp1374 __tmp1407))
(let __tmp4050 (InLoop __tmp1437 __tmp1474))
(let __tmp4051 (InLoop __tmp1525 __tmp1558))
(let __tmp4052 (InLoop __tmp1609 __tmp1642))
(let __tmp4053 (InLoop __tmp1677 __tmp1714))
(let __tmp4054 (InLoop __tmp1751 __tmp1788))
(let __tmp4055 (InLoop __tmp1849 __tmp1882))
(let __tmp4056 (InLoop __tmp1912 __tmp1949))
(let __tmp4057 (InLoop __tmp2048 __tmp2092))
(let __tmp4058 (InLoop __tmp2011 __tmp2119))
(let __tmp4059 (InLoop __tmp2193 __tmp2229))
(let __tmp4060 (InLoop __tmp2316 __tmp2360))
(let __tmp4061 (InLoop __tmp2279 __tmp2387))
(let __tmp4062 (InLoop __tmp2415 __tmp2451))
(let __tmp4063 (InLoop __tmp2491 __tmp2524))
(let __tmp4064 (InLoop __tmp2562 __tmp2595))
(let __tmp4065 (InLoop __tmp2668 __tmp2704))
(let __tmp4066 (InLoop __tmp2784 __tmp2817))
(let __tmp4067 (InLoop __tmp2858 __tmp2895))
(let __tmp4068 (InLoop __tmp2925 __tmp2958))
(let __tmp4069 (InLoop __tmp2988 __tmp3021))
(let __tmp4070 (InLoop __tmp3051 __tmp3088))
(let __tmp4071 (InLoop __tmp3118 __tmp3151))
(let __tmp4072 (InLoop __tmp3180 __tmp3217))
(FunctionHasType "main" (TupleT (TCons (IntT) (TCons (StateT) (TNil)))) (TupleT (TCons (StateT) (TNil))))
(FunctionHasType "vec_mul" (TupleT (TCons (IntT) (TCons (FloatT) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "vec_copy" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "dot_p" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))))
(FunctionHasType "vec_sub" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "vec_add" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "vec_add_inp" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "vec_sub_inp" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "mat_vec" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "get_sym" (TupleT (TCons (IntT) (TCons (StateT) (TNil)))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))
(FunctionHasType "disp_vec" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil))))) (TupleT (TCons (FloatT) (TCons (StateT) (TNil)))))
(FunctionHasType "cg" (TupleT (TCons (IntT) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (PointerT (FloatT)) (TCons (StateT) (TNil))))))) (TupleT (TCons (PointerT (FloatT)) (TCons (StateT) (TNil)))))


    ; Loop context unions
    (union __tmp197 __tmp4026)
(union __tmp3293 __tmp4027)
(union __tmp3364 __tmp4028)
(union __tmp3445 __tmp4029)
(union __tmp3567 __tmp4030)
(union __tmp3530 __tmp4031)
(union __tmp3678 __tmp4032)
(union __tmp3729 __tmp4033)
(union __tmp3795 __tmp4034)
(union __tmp2239 __tmp4035)
(union __tmp60 __tmp4036)
(union __tmp122 __tmp4037)
(union __tmp321 __tmp4038)
(union __tmp649 __tmp4039)
(union __tmp764 __tmp4040)
(union __tmp721 __tmp4041)
(union __tmp897 __tmp4042)
(union __tmp1001 __tmp4043)
(union __tmp964 __tmp4044)
(union __tmp1097 __tmp4045)
(union __tmp1167 __tmp4046)
(union __tmp1230 __tmp4047)
(union __tmp1305 __tmp4048)
(union __tmp1375 __tmp4049)
(union __tmp1438 __tmp4050)
(union __tmp1526 __tmp4051)
(union __tmp1610 __tmp4052)
(union __tmp1678 __tmp4053)
(union __tmp1752 __tmp4054)
(union __tmp1850 __tmp4055)
(union __tmp1913 __tmp4056)
(union __tmp2049 __tmp4057)
(union __tmp2012 __tmp4058)
(union __tmp2194 __tmp4059)
(union __tmp2317 __tmp4060)
(union __tmp2280 __tmp4061)
(union __tmp2416 __tmp4062)
(union __tmp2492 __tmp4063)
(union __tmp2563 __tmp4064)
(union __tmp2669 __tmp4065)
(union __tmp2785 __tmp4066)
(union __tmp2859 __tmp4067)
(union __tmp2926 __tmp4068)
(union __tmp2989 __tmp4069)
(union __tmp3052 __tmp4070)
(union __tmp3119 __tmp4071)
(union __tmp3181 __tmp4072)

    ; Function inlining unions
     
(union __tmp8 __tmp165)
(InlinedCall "get_sym" __tmp7)
(subsume (Call "get_sym" __tmp7))


(union __tmp250 __tmp627)
(InlinedCall "cg" __tmp249)
(subsume (Call "cg" __tmp249))


(union __tmp629 __tmp686)
(InlinedCall "disp_vec" __tmp628)
(subsume (Call "disp_vec" __tmp628))


(union __tmp263 __tmp696)
(InlinedCall "vec_copy" __tmp262)
(subsume (Call "vec_copy" __tmp262))


(union __tmp266 __tmp841)
(InlinedCall "mat_vec" __tmp265)
(subsume (Call "mat_vec" __tmp265))


(union __tmp269 __tmp866)
(InlinedCall "vec_sub" __tmp268)
(subsume (Call "vec_sub" __tmp268))


(union __tmp273 __tmp876)
(InlinedCall "vec_copy" __tmp272)
(subsume (Call "vec_copy" __tmp272))


(union __tmp279 __tmp941)
(InlinedCall "dot_p" __tmp278)
(subsume (Call "dot_p" __tmp278))


(union __tmp343 __tmp1077)
(InlinedCall "mat_vec" __tmp342)
(subsume (Call "mat_vec" __tmp342))


(union __tmp346 __tmp1141)
(InlinedCall "dot_p" __tmp345)
(subsume (Call "dot_p" __tmp345))


(union __tmp357 __tmp1208)
(InlinedCall "vec_mul" __tmp356)
(subsume (Call "vec_mul" __tmp356))


(union __tmp363 __tmp1271)
(InlinedCall "vec_mul" __tmp362)
(subsume (Call "vec_mul" __tmp362))


(union __tmp375 __tmp1279)
(InlinedCall "vec_add_inp" __tmp374)
(subsume (Call "vec_add_inp" __tmp374))


(union __tmp381 __tmp1287)
(InlinedCall "vec_sub_inp" __tmp380)
(subsume (Call "vec_sub_inp" __tmp380))


(union __tmp393 __tmp1349)
(InlinedCall "dot_p" __tmp392)
(subsume (Call "dot_p" __tmp392))


(union __tmp489 __tmp1416)
(InlinedCall "vec_mul" __tmp488)
(subsume (Call "vec_mul" __tmp488))


(union __tmp500 __tmp1483)
(InlinedCall "vec_add" __tmp499)
(subsume (Call "vec_add" __tmp499))


(union __tmp1500 __tmp1567)
(InlinedCall "vec_mul" __tmp1499)
(subsume (Call "vec_mul" __tmp1499))


(union __tmp1584 __tmp1651)
(InlinedCall "vec_mul" __tmp1583)
(subsume (Call "vec_mul" __tmp1583))


(union __tmp1656 __tmp1723)
(InlinedCall "vec_add" __tmp1655)
(subsume (Call "vec_add" __tmp1655))


(union __tmp1726 __tmp1797)
(InlinedCall "vec_add" __tmp1725)
(subsume (Call "vec_add" __tmp1725))


(union __tmp1800 __tmp1824)
(InlinedCall "vec_sub" __tmp1799)
(subsume (Call "vec_sub" __tmp1799))


(union __tmp1814 __tmp1891)
(InlinedCall "vec_mul" __tmp1813)
(subsume (Call "vec_mul" __tmp1813))


(union __tmp1817 __tmp1958)
(InlinedCall "vec_add" __tmp1816)
(subsume (Call "vec_add" __tmp1816))


(union __tmp1972 __tmp1984)
(InlinedCall "vec_copy" __tmp1971)
(subsume (Call "vec_copy" __tmp1971))


(union __tmp1989 __tmp2125)
(InlinedCall "mat_vec" __tmp1988)
(subsume (Call "mat_vec" __tmp1988))


(union __tmp2130 __tmp2154)
(InlinedCall "vec_sub" __tmp2129)
(subsume (Call "vec_sub" __tmp2129))


(union __tmp2156 __tmp2166)
(InlinedCall "vec_copy" __tmp2155)
(subsume (Call "vec_copy" __tmp2155))


(union __tmp2174 __tmp2238)
(InlinedCall "dot_p" __tmp2173)
(subsume (Call "dot_p" __tmp2173))


(union __tmp2257 __tmp2393)
(InlinedCall "mat_vec" __tmp2256)
(subsume (Call "mat_vec" __tmp2256))


(union __tmp2396 __tmp2460)
(InlinedCall "dot_p" __tmp2395)
(subsume (Call "dot_p" __tmp2395))


(union __tmp2470 __tmp2533)
(InlinedCall "vec_mul" __tmp2469)
(subsume (Call "vec_mul" __tmp2469))


(union __tmp2541 __tmp2604)
(InlinedCall "vec_mul" __tmp2540)
(subsume (Call "vec_mul" __tmp2540))


(union __tmp2614 __tmp2622)
(InlinedCall "vec_add_inp" __tmp2613)
(subsume (Call "vec_add_inp" __tmp2613))


(union __tmp2632 __tmp2640)
(InlinedCall "vec_sub_inp" __tmp2631)
(subsume (Call "vec_sub_inp" __tmp2631))


(union __tmp2651 __tmp2713)
(InlinedCall "dot_p" __tmp2650)
(subsume (Call "dot_p" __tmp2650))


(union __tmp2759 __tmp2826)
(InlinedCall "vec_mul" __tmp2758)
(subsume (Call "vec_mul" __tmp2758))


(union __tmp2837 __tmp2904)
(InlinedCall "vec_add" __tmp2836)
(subsume (Call "vec_add" __tmp2836))


(union __tmp1984 __tmp2967)
(InlinedCall "vec_mul" __tmp1983)
(subsume (Call "vec_mul" __tmp1983))


(union __tmp2144 __tmp3030)
(InlinedCall "vec_mul" __tmp2143)
(subsume (Call "vec_mul" __tmp2143))


(union __tmp2147 __tmp3097)
(InlinedCall "vec_add" __tmp2146)
(subsume (Call "vec_add" __tmp2146))


(union __tmp2166 __tmp3160)
(InlinedCall "vec_mul" __tmp2165)
(subsume (Call "vec_mul" __tmp2165))


(union __tmp2615 __tmp3226)
(InlinedCall "vec_add" __tmp2613)
(subsume (Call "vec_add" __tmp2613))


(union __tmp2633 __tmp3249)
(InlinedCall "vec_sub" __tmp2631)
(subsume (Call "vec_sub" __tmp2631))

) :ruleset initialization)
(run initialization 1) 

; Schedule

(run-schedule
    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    (repeat 2
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        all-optimizations
    )

    (repeat 4
        
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

        cheap-optimizations
    )

    (saturate
      
    ;; first, run substitution and drop to saturation
    ;; these depend on type analysis, always-run, and context

    ;; first, saturate always run
    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)
        (saturate 
            (saturate type-helpers)
            always-run)
        error-checking)

    (saturate
        (saturate 
            (saturate type-helpers)
            type-analysis)

        ;; first, check which eclasses are resolved
        (saturate is-resolved)
        (saturate term-subst)
        ;; do substutition for one round, subsuming as we go
        (saturate subst)
        ;; apply the equalities found
        apply-subst-unions

        ;; add context
        (saturate context)
        (saturate drop)
        apply-drop-unions
        cleanup-drop
    )

    (saturate canon)
    (saturate interval-analysis)
    (saturate
     terms
     (saturate
       terms-helpers
       (saturate terms-helpers-helpers)))
    (saturate mem-simple)

    ;; cicm index
    cicm-index

    ;; memory-helpers TODO run memory helpers for memory optimizations

    ;; finally, subsume now that helpers are done
    subsume-after-helpers

    ;; do a boundary analysis for loop invariant code motion
    boundary-analysis

    loop-iters-analysis

      passthrough
      state-edge-passthrough)
    add-to-debug-expr
)

(print-size)

